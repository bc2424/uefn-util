#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ConsoleVariablesEditor

#include "Basic.hpp"

#include "ConsoleVariablesEditor_classes.hpp"
#include "ConsoleVariablesEditor_parameters.hpp"


namespace SDK
{

// Function ConsoleVariablesEditor.ConsoleVariablesEditorFunctionLibrary.AddValidatedCommandToCurrentPreset
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           NewCommand                                             (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UConsoleVariablesEditorFunctionLibrary::AddValidatedCommandToCurrentPreset(const class FString& NewCommand)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ConsoleVariablesEditorFunctionLibrary", "AddValidatedCommandToCurrentPreset");

	Params::ConsoleVariablesEditorFunctionLibrary_AddValidatedCommandToCurrentPreset Parms{};

	Parms.NewCommand = std::move(NewCommand);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ConsoleVariablesEditor.ConsoleVariablesEditorFunctionLibrary.CopyCurrentListToAsset
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UConsoleVariablesAsset*           InAsset                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UConsoleVariablesEditorFunctionLibrary::CopyCurrentListToAsset(class UConsoleVariablesAsset* InAsset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ConsoleVariablesEditorFunctionLibrary", "CopyCurrentListToAsset");

	Params::ConsoleVariablesEditorFunctionLibrary_CopyCurrentListToAsset Parms{};

	Parms.InAsset = InAsset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ConsoleVariablesEditor.ConsoleVariablesEditorFunctionLibrary.GetConsoleVariableSourceByName
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           InCommandName                                          (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           OutValue                                               (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UConsoleVariablesEditorFunctionLibrary::GetConsoleVariableSourceByName(const class FString& InCommandName, class FString* OutValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ConsoleVariablesEditorFunctionLibrary", "GetConsoleVariableSourceByName");

	Params::ConsoleVariablesEditorFunctionLibrary_GetConsoleVariableSourceByName Parms{};

	Parms.InCommandName = std::move(InCommandName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutValue != nullptr)
		*OutValue = std::move(Parms.OutValue);

	return Parms.ReturnValue;
}


// Function ConsoleVariablesEditor.ConsoleVariablesEditorFunctionLibrary.GetConsoleVariableStringValue
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           InCommandName                                          (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           OutValue                                               (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UConsoleVariablesEditorFunctionLibrary::GetConsoleVariableStringValue(const class FString& InCommandName, class FString* OutValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ConsoleVariablesEditorFunctionLibrary", "GetConsoleVariableStringValue");

	Params::ConsoleVariablesEditorFunctionLibrary_GetConsoleVariableStringValue Parms{};

	Parms.InCommandName = std::move(InCommandName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutValue != nullptr)
		*OutValue = std::move(Parms.OutValue);

	return Parms.ReturnValue;
}


// Function ConsoleVariablesEditor.ConsoleVariablesEditorFunctionLibrary.GetCurrentlyLoadedPreset
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UConsoleVariablesAsset*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UConsoleVariablesAsset* UConsoleVariablesEditorFunctionLibrary::GetCurrentlyLoadedPreset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ConsoleVariablesEditorFunctionLibrary", "GetCurrentlyLoadedPreset");

	Params::ConsoleVariablesEditorFunctionLibrary_GetCurrentlyLoadedPreset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ConsoleVariablesEditor.ConsoleVariablesEditorFunctionLibrary.GetEnableMultiUserCVarSync
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UConsoleVariablesEditorFunctionLibrary::GetEnableMultiUserCVarSync()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ConsoleVariablesEditorFunctionLibrary", "GetEnableMultiUserCVarSync");

	Params::ConsoleVariablesEditorFunctionLibrary_GetEnableMultiUserCVarSync Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ConsoleVariablesEditor.ConsoleVariablesEditorFunctionLibrary.GetListOfCommandsFromPreset
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UConsoleVariablesAsset*           InAsset                                                (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>                   OutCommandList                                         (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UConsoleVariablesEditorFunctionLibrary::GetListOfCommandsFromPreset(const class UConsoleVariablesAsset* InAsset, TArray<class FString>* OutCommandList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ConsoleVariablesEditorFunctionLibrary", "GetListOfCommandsFromPreset");

	Params::ConsoleVariablesEditorFunctionLibrary_GetListOfCommandsFromPreset Parms{};

	Parms.InAsset = InAsset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutCommandList != nullptr)
		*OutCommandList = std::move(Parms.OutCommandList);

	return Parms.ReturnValue;
}


// Function ConsoleVariablesEditor.ConsoleVariablesEditorFunctionLibrary.LoadPresetIntoConsoleVariablesEditor
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UConsoleVariablesAsset*           InAsset                                                (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UConsoleVariablesEditorFunctionLibrary::LoadPresetIntoConsoleVariablesEditor(const class UConsoleVariablesAsset* InAsset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ConsoleVariablesEditorFunctionLibrary", "LoadPresetIntoConsoleVariablesEditor");

	Params::ConsoleVariablesEditorFunctionLibrary_LoadPresetIntoConsoleVariablesEditor Parms{};

	Parms.InAsset = InAsset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ConsoleVariablesEditor.ConsoleVariablesEditorFunctionLibrary.RemoveCommandFromCurrentPreset
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           NewCommand                                             (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UConsoleVariablesEditorFunctionLibrary::RemoveCommandFromCurrentPreset(const class FString& NewCommand)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ConsoleVariablesEditorFunctionLibrary", "RemoveCommandFromCurrentPreset");

	Params::ConsoleVariablesEditorFunctionLibrary_RemoveCommandFromCurrentPreset Parms{};

	Parms.NewCommand = std::move(NewCommand);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ConsoleVariablesEditor.ConsoleVariablesEditorFunctionLibrary.SetConsoleVariableByName_Bool
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           InCommandName                                          (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    InValue                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UConsoleVariablesEditorFunctionLibrary::SetConsoleVariableByName_Bool(const class FString& InCommandName, const bool InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ConsoleVariablesEditorFunctionLibrary", "SetConsoleVariableByName_Bool");

	Params::ConsoleVariablesEditorFunctionLibrary_SetConsoleVariableByName_Bool Parms{};

	Parms.InCommandName = std::move(InCommandName);
	Parms.InValue = InValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ConsoleVariablesEditor.ConsoleVariablesEditorFunctionLibrary.SetConsoleVariableByName_Float
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           InCommandName                                          (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InValue                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UConsoleVariablesEditorFunctionLibrary::SetConsoleVariableByName_Float(const class FString& InCommandName, const float InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ConsoleVariablesEditorFunctionLibrary", "SetConsoleVariableByName_Float");

	Params::ConsoleVariablesEditorFunctionLibrary_SetConsoleVariableByName_Float Parms{};

	Parms.InCommandName = std::move(InCommandName);
	Parms.InValue = InValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ConsoleVariablesEditor.ConsoleVariablesEditorFunctionLibrary.SetConsoleVariableByName_Int
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           InCommandName                                          (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InValue                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UConsoleVariablesEditorFunctionLibrary::SetConsoleVariableByName_Int(const class FString& InCommandName, const int32 InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ConsoleVariablesEditorFunctionLibrary", "SetConsoleVariableByName_Int");

	Params::ConsoleVariablesEditorFunctionLibrary_SetConsoleVariableByName_Int Parms{};

	Parms.InCommandName = std::move(InCommandName);
	Parms.InValue = InValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ConsoleVariablesEditor.ConsoleVariablesEditorFunctionLibrary.SetConsoleVariableByName_String
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           InCommandName                                          (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           InValue                                                (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UConsoleVariablesEditorFunctionLibrary::SetConsoleVariableByName_String(const class FString& InCommandName, const class FString& InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ConsoleVariablesEditorFunctionLibrary", "SetConsoleVariableByName_String");

	Params::ConsoleVariablesEditorFunctionLibrary_SetConsoleVariableByName_String Parms{};

	Parms.InCommandName = std::move(InCommandName);
	Parms.InValue = std::move(InValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ConsoleVariablesEditor.ConsoleVariablesEditorFunctionLibrary.SetEnableMultiUserCVarSync
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewSetting                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UConsoleVariablesEditorFunctionLibrary::SetEnableMultiUserCVarSync(bool bNewSetting)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ConsoleVariablesEditorFunctionLibrary", "SetEnableMultiUserCVarSync");

	Params::ConsoleVariablesEditorFunctionLibrary_SetEnableMultiUserCVarSync Parms{};

	Parms.bNewSetting = bNewSetting;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

