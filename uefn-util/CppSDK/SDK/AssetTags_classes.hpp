#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AssetTags

#include "Basic.hpp"

#include "AssetTags_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class AssetTags.AssetTagsSubsystem
// 0x0000 (0x0038 - 0x0038)
class UAssetTagsSubsystem final : public UEngineSubsystem
{
public:
	bool AddAssetDatasToCollection(const class FName Name_0, const TArray<struct FAssetData>& AssetDatas);
	bool AddAssetDataToCollection(const class FName Name_0, const struct FAssetData& AssetData);
	bool AddAssetPtrsToCollection(const class FName Name_0, const TArray<class UObject*>& AssetPtrs);
	bool AddAssetPtrToCollection(const class FName Name_0, const class UObject* AssetPtr);
	bool AddAssetsToCollection(const class FName Name_0, const TArray<class FName>& AssetPathNames);
	bool AddAssetToCollection(const class FName Name_0, const class FName AssetPathName);
	bool CollectionExists(const class FName Name_0);
	bool CreateCollection(const class FName Name_0, const ECollectionScriptingShareType ShareType);
	bool DestroyCollection(const class FName Name_0);
	bool EmptyCollection(const class FName Name_0);
	TArray<struct FAssetData> GetAssetsInCollection(const class FName Name_0);
	TArray<class FName> GetCollections();
	TArray<class FName> GetCollectionsContainingAsset(const class FName AssetPathName);
	TArray<class FName> GetCollectionsContainingAssetData(const struct FAssetData& AssetData);
	TArray<class FName> GetCollectionsContainingAssetPtr(const class UObject* AssetPtr);
	bool K2_AddAssetsToCollection(const class FName Name_0, const TArray<struct FSoftObjectPath>& AssetPaths);
	bool K2_AddAssetToCollection(const class FName Name_0, const struct FSoftObjectPath& AssetPath);
	TArray<class FName> K2_GetCollectionsContainingAsset(const struct FSoftObjectPath& AssetPath);
	bool K2_RemoveAssetFromCollection(const class FName Name_0, const struct FSoftObjectPath& AssetPath);
	bool K2_RemoveAssetsFromCollection(const class FName Name_0, const TArray<struct FSoftObjectPath>& AssetPaths);
	bool RemoveAssetDataFromCollection(const class FName Name_0, const struct FAssetData& AssetData);
	bool RemoveAssetDatasFromCollection(const class FName Name_0, const TArray<struct FAssetData>& AssetDatas);
	bool RemoveAssetFromCollection(const class FName Name_0, const class FName AssetPathName);
	bool RemoveAssetPtrFromCollection(const class FName Name_0, const class UObject* AssetPtr);
	bool RemoveAssetPtrsFromCollection(const class FName Name_0, const TArray<class UObject*>& AssetPtrs);
	bool RemoveAssetsFromCollection(const class FName Name_0, const TArray<class FName>& AssetPathNames);
	bool RenameCollection(const class FName Name_0, const class FName NewName);
	bool ReparentCollection(const class FName Name_0, const class FName NewParentName);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AssetTagsSubsystem">();
	}
	static class UAssetTagsSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAssetTagsSubsystem>();
	}
};

}

