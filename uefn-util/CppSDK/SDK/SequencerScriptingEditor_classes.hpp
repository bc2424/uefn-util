#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SequencerScriptingEditor

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class SequencerScriptingEditor.SequencerCurveEditorObject
// 0x0010 (0x0040 - 0x0030)
class USequencerCurveEditorObject final : public UObject
{
public:
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ApplyFilter(class UCurveEditorFilterBase* Filter);
	void CloseCurveEditor();
	void DeleteColorForChannels(class UClass* Class_0, class FString* Identifier);
	void EmptySelection();
	TArray<struct FSequencerChannelProxy> GetChannelsWithSelectedKeys();
	struct FLinearColor GetCustomColorForChannel(class UClass* Class_0, const class FString& Identifier);
	TArray<int32> GetSelectedKeys(const struct FSequencerChannelProxy& ChannelProxy);
	bool HasCustomColorForChannel(class UClass* Class_0, const class FString& Identifier);
	bool IsCurveEditorOpen();
	bool IsCurveShown(const struct FSequencerChannelProxy& Channel);
	void OpenCurveEditor();
	void SelectKeys(const struct FSequencerChannelProxy& Channel, const TArray<int32>& Indices);
	void SetCustomColorForChannel(class UClass* Class_0, const class FString& Identifier, const struct FLinearColor& NewColor);
	void SetCustomColorForChannels(class UClass* Class_0, const TArray<class FString>& Identifiers, const TArray<struct FLinearColor>& NewColors);
	void SetRandomColorForChannels(class UClass* Class_0, const TArray<class FString>& Identifiers);
	void ShowCurve(const struct FSequencerChannelProxy& Channel, bool bShowCurve);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SequencerCurveEditorObject">();
	}
	static class USequencerCurveEditorObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<USequencerCurveEditorObject>();
	}
};

// Class SequencerScriptingEditor.SequencerToolsFunctionLibrary
// 0x0000 (0x0030 - 0x0030)
class USequencerToolsFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void CancelMovieRender();
	static void ClearLinkedAnimSequences(class ULevelSequence* InLevelSequence);
	static struct FMovieSceneEvent CreateEvent(class UMovieSceneSequence* InSequence, class UMovieSceneEventSectionBase* InSection, const struct FSequencerQuickBindingResult& InEndpoint, const TArray<class FString>& InPayload);
	static struct FSequencerQuickBindingResult CreateQuickBinding(class UMovieSceneSequence* InSequence, class UObject* InObject, const class FString& InFunctionName, bool bCallInEditor);
	static bool ExportAnimSequence(class UWorld* World, class ULevelSequence* Sequence, class UAnimSequence* AnimSequence, class UAnimSeqExportOption* ExportOption, const struct FMovieSceneBindingProxy& Binding, bool bCreateLink);
	static bool ExportFBXFromControlRig(class ULevelSequence* Sequence, const class FString& ActorWithControlRigTrack, const class UMovieSceneUserExportFBXControlRigSettings* ExportFBXControlRigSettings);
	static bool ExportLevelSequenceFBX(const struct FSequencerExportFBXParams& InParams);
	static class ULevelSequenceAnimSequenceLink* GetAnimSequenceLinkFromLevelSequence(class ULevelSequence* InLevelSequence);
	static TArray<struct FSequencerBoundObjects> GetBoundObjects(class UWorld* InWorld, class ULevelSequence* InSequence, const TArray<struct FMovieSceneBindingProxy>& InBindings, const struct FSequencerScriptingRange& InRange);
	static class UAnimSequenceLevelSequenceLink* GetLevelSequenceLinkFromAnimSequence(class UAnimSequence* InAnimSequence);
	static TArray<struct FSequencerBoundObjects> GetObjectBindings(class UWorld* InWorld, class ULevelSequence* InSequence, const TArray<class UObject*>& InObject, const struct FSequencerScriptingRange& InRange);
	static bool ImportFBXToControlRig(class UWorld* World, class ULevelSequence* InSequence, const class FString& ActorWithControlRigTrack, const TArray<class FString>& SelectedControlRigNames, class UMovieSceneUserImportFBXControlRigSettings* ImportFBXControlRigSettings, const class FString& ImportFilename);
	static bool ImportLevelSequenceFBX(class UWorld* InWorld, class ULevelSequence* InSequence, const TArray<struct FMovieSceneBindingProxy>& InBindings, class UMovieSceneUserImportFBXSettings* InImportFBXSettings, const class FString& InImportFilename);
	static bool IsEventEndpointValid(const struct FSequencerQuickBindingResult& InEndpoint);
	static bool IsRenderingMovie();
	static bool LinkAnimSequence(class ULevelSequence* Sequence, class UAnimSequence* AnimSequence, const class UAnimSeqExportOption* ExportOptions, const struct FMovieSceneBindingProxy& Binding);
	static bool RenderMovie(class UMovieSceneCapture* InCaptureSettings, TDelegate<void(bool bSuccess)> OnFinishedCallback);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SequencerToolsFunctionLibrary">();
	}
	static class USequencerToolsFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USequencerToolsFunctionLibrary>();
	}
};

}

