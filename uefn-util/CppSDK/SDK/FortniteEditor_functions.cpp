#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FortniteEditor

#include "Basic.hpp"

#include "FortniteEditor_classes.hpp"
#include "FortniteEditor_parameters.hpp"


namespace SDK
{

// Function FortniteEditor.FortAssetDataUtilityToolAction.RunActionOnAssetDataArray
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// TArray<struct FAssetData>               AssetDataArray                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortAssetDataUtilityToolAction::RunActionOnAssetDataArray(const TArray<struct FAssetData>& AssetDataArray) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAssetDataUtilityToolAction", "RunActionOnAssetDataArray");

	Params::FortAssetDataUtilityToolAction_RunActionOnAssetDataArray Parms{};

	Parms.AssetDataArray = std::move(AssetDataArray);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortAssetDataUtilityToolFilter.CleanupFilterData
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void UFortAssetDataUtilityToolFilter::CleanupFilterData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAssetDataUtilityToolFilter", "CleanupFilterData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.FortAssetDataUtilityToolFilter.InitializeFilterData
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void UFortAssetDataUtilityToolFilter::InitializeFilterData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAssetDataUtilityToolFilter", "InitializeFilterData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.FortAssetDataUtilityToolFilter.AssetDataPassesFilter
// (Native, Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// struct FAssetData                       AssetData                                              (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortAssetDataUtilityToolFilter::AssetDataPassesFilter(const struct FAssetData& AssetData) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAssetDataUtilityToolFilter", "AssetDataPassesFilter");

	Params::FortAssetDataUtilityToolFilter_AssetDataPassesFilter Parms{};

	Parms.AssetData = std::move(AssetData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortAssetDataUtilityToolGatherer.RunGatherer
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// TArray<struct FAssetData>               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FAssetData> UFortAssetDataUtilityToolGatherer::RunGatherer() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAssetDataUtilityToolGatherer", "RunGatherer");

	Params::FortAssetDataUtilityToolGatherer_RunGatherer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortSeasonItemDefinitionCopyUtilityLibrary.CleanupScratchAssets
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAthenaSeasonItemDefinition*      SeasonItem                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortSeasonItemDefinitionCopyUtilityLibrary::CleanupScratchAssets(class UAthenaSeasonItemDefinition* SeasonItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortSeasonItemDefinitionCopyUtilityLibrary", "CleanupScratchAssets");

	Params::FortSeasonItemDefinitionCopyUtilityLibrary_CleanupScratchAssets Parms{};

	Parms.SeasonItem = SeasonItem;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.FortSeasonItemDefinitionCopyUtilityLibrary.CopySeasonItemDefinitionAndSubAssets
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAthenaSeasonItemDefinition*      SourceSeasonItem                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NewSeasonNumber                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAthenaSeasonItemDefinition*      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAthenaSeasonItemDefinition* UFortSeasonItemDefinitionCopyUtilityLibrary::CopySeasonItemDefinitionAndSubAssets(class UAthenaSeasonItemDefinition* SourceSeasonItem, const int32 NewSeasonNumber)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortSeasonItemDefinitionCopyUtilityLibrary", "CopySeasonItemDefinitionAndSubAssets");

	Params::FortSeasonItemDefinitionCopyUtilityLibrary_CopySeasonItemDefinitionAndSubAssets Parms{};

	Parms.SourceSeasonItem = SourceSeasonItem;
	Parms.NewSeasonNumber = NewSeasonNumber;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortSeasonItemDefinitionCopyUtilityLibrary.NewSeasonPostCopy
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAthenaSeasonItemDefinition*      SeasonItem                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortSeasonItemDefinitionCopyUtilityLibrary::NewSeasonPostCopy(class UAthenaSeasonItemDefinition* SeasonItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortSeasonItemDefinitionCopyUtilityLibrary", "NewSeasonPostCopy");

	Params::FortSeasonItemDefinitionCopyUtilityLibrary_NewSeasonPostCopy Parms{};

	Parms.SeasonItem = SeasonItem;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortSeasonItemDefinitionCopyUtilityLibrary.SaveScratchAssets
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAthenaSeasonItemDefinition*      SeasonItem                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIncludeSeasonItem                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bWaitForCompletion                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortSeasonItemDefinitionCopyUtilityLibrary::SaveScratchAssets(class UAthenaSeasonItemDefinition* SeasonItem, bool bIncludeSeasonItem, bool bWaitForCompletion)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortSeasonItemDefinitionCopyUtilityLibrary", "SaveScratchAssets");

	Params::FortSeasonItemDefinitionCopyUtilityLibrary_SaveScratchAssets Parms{};

	Parms.SeasonItem = SeasonItem;
	Parms.bIncludeSeasonItem = bIncludeSeasonItem;
	Parms.bWaitForCompletion = bWaitForCompletion;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.FortSeasonItemDefinitionCopyUtilityLibrary.UpdateOfferIdsFromCatalog
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAthenaSeasonItemDefinition*      SeasonDefToUpdate                                      (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSoftObjectPtr<class UCatalogDefinition>SourceCatalogSoftPtr                                   (ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortSeasonItemDefinitionCopyUtilityLibrary::UpdateOfferIdsFromCatalog(class UAthenaSeasonItemDefinition* SeasonDefToUpdate, const TSoftObjectPtr<class UCatalogDefinition> SourceCatalogSoftPtr)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortSeasonItemDefinitionCopyUtilityLibrary", "UpdateOfferIdsFromCatalog");

	Params::FortSeasonItemDefinitionCopyUtilityLibrary_UpdateOfferIdsFromCatalog Parms{};

	Parms.SeasonDefToUpdate = SeasonDefToUpdate;
	Parms.SourceCatalogSoftPtr = SourceCatalogSoftPtr;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortCharacterPartEditorFunctionLibrary.GetCharacterPartHighQualityOverlayMaterial
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UCustomCharacterPart*             CharacterPart                                          (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSoftObjectPtr<class UMaterialInterface>ReturnValue                                            (Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSoftObjectPtr<class UMaterialInterface> UFortCharacterPartEditorFunctionLibrary::GetCharacterPartHighQualityOverlayMaterial(const class UCustomCharacterPart* CharacterPart)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortCharacterPartEditorFunctionLibrary", "GetCharacterPartHighQualityOverlayMaterial");

	Params::FortCharacterPartEditorFunctionLibrary_GetCharacterPartHighQualityOverlayMaterial Parms{};

	Parms.CharacterPart = CharacterPart;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortCharacterPartEditorFunctionLibrary.GetCharacterPartLowQualityOverlayMaterial
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UCustomCharacterPart*             CharacterPart                                          (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSoftObjectPtr<class UMaterialInterface>ReturnValue                                            (Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSoftObjectPtr<class UMaterialInterface> UFortCharacterPartEditorFunctionLibrary::GetCharacterPartLowQualityOverlayMaterial(const class UCustomCharacterPart* CharacterPart)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortCharacterPartEditorFunctionLibrary", "GetCharacterPartLowQualityOverlayMaterial");

	Params::FortCharacterPartEditorFunctionLibrary_GetCharacterPartLowQualityOverlayMaterial Parms{};

	Parms.CharacterPart = CharacterPart;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortCollapseButton.SetWidgetToCollapse
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UWidget*                          InWidgetToCollapse                                     (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortCollapseButton::SetWidgetToCollapse(class UWidget* InWidgetToCollapse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortCollapseButton", "SetWidgetToCollapse");

	Params::FortCollapseButton_SetWidgetToCollapse Parms{};

	Parms.InWidgetToCollapse = InWidgetToCollapse;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.FortCollapseButton.OnVisibilityStateBrushChanged
// (Event, Protected, HasOutParams, BlueprintEvent, Const)
// Parameters:
// struct FSlateBrush                      Brush                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UFortCollapseButton::OnVisibilityStateBrushChanged(const struct FSlateBrush& Brush) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortCollapseButton", "OnVisibilityStateBrushChanged");

	Params::FortCollapseButton_OnVisibilityStateBrushChanged Parms{};

	Parms.Brush = std::move(Brush);

	UObject::ProcessEvent(Func, &Parms);
}


// Function FortniteEditor.EditorQuestToolUtilityWidget.BP_OnAssetObjectSet
// (Event, Public, BlueprintEvent)

void UEditorQuestToolUtilityWidget::BP_OnAssetObjectSet()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditorQuestToolUtilityWidget", "BP_OnAssetObjectSet");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FortniteEditor.EditorQuestToolUtilityWidget.BP_OnAssetUndoRedo
// (Event, Public, BlueprintEvent)

void UEditorQuestToolUtilityWidget::BP_OnAssetUndoRedo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditorQuestToolUtilityWidget", "BP_OnAssetUndoRedo");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FortniteEditor.EditorQuestToolUtilityWidget.OnAssetPropertyChanged
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class FName                             PropertyName                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEditorQuestToolUtilityWidget::OnAssetPropertyChanged(const class FName& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditorQuestToolUtilityWidget", "OnAssetPropertyChanged");

	Params::EditorQuestToolUtilityWidget_OnAssetPropertyChanged Parms{};

	Parms.PropertyName = PropertyName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FortniteEditor.EditorQuestToolUtilityWidget.SetAssetObject
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          InAssetObject                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEditorQuestToolUtilityWidget::SetAssetObject(class UObject* InAssetObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditorQuestToolUtilityWidget", "SetAssetObject");

	Params::EditorQuestToolUtilityWidget_SetAssetObject Parms{};

	Parms.InAssetObject = InAssetObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.FortCosmeticPlacementTool.GetPossibleBackblingCombinationsCount
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UFortCosmeticPlacementTool::GetPossibleBackblingCombinationsCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortCosmeticPlacementTool", "GetPossibleBackblingCombinationsCount");

	Params::FortCosmeticPlacementTool_GetPossibleBackblingCombinationsCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortDataLayerManagerLoader.OnRunButtonClicked
// (Final, Native, Private)

void UFortDataLayerManagerLoader::OnRunButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortDataLayerManagerLoader", "OnRunButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.FortAnimationBlueprintEditorLibrary.AddCurveToAnimSequenceBaseWithValue
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAnimSequenceBase*                AnimSequenceBase                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             CurveName                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bOverwrite                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortAnimationBlueprintEditorLibrary::AddCurveToAnimSequenceBaseWithValue(class UAnimSequenceBase* AnimSequenceBase, class FName CurveName, float Value, bool bOverwrite)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortAnimationBlueprintEditorLibrary", "AddCurveToAnimSequenceBaseWithValue");

	Params::FortAnimationBlueprintEditorLibrary_AddCurveToAnimSequenceBaseWithValue Parms{};

	Parms.AnimSequenceBase = AnimSequenceBase;
	Parms.CurveName = CurveName;
	Parms.Value = Value;
	Parms.bOverwrite = bOverwrite;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.FortAnimationBlueprintEditorLibrary.CompileAnimationBlueprints
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           OutputFilePath                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FAssetData>               AssetData                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           ParentFilter                                           (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           AssetListFile                                          (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortAnimationBlueprintEditorLibrary::CompileAnimationBlueprints(const class FString& OutputFilePath, const TArray<struct FAssetData>& AssetData, const class FString& ParentFilter, const class FString& AssetListFile)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortAnimationBlueprintEditorLibrary", "CompileAnimationBlueprints");

	Params::FortAnimationBlueprintEditorLibrary_CompileAnimationBlueprints Parms{};

	Parms.OutputFilePath = std::move(OutputFilePath);
	Parms.AssetData = std::move(AssetData);
	Parms.ParentFilter = std::move(ParentFilter);
	Parms.AssetListFile = std::move(AssetListFile);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.FortAnimationBlueprintEditorLibrary.FilterAssetByParent
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             ClassName                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FAssetData>               OutAssetData                                           (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    bUseNativeParent                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FAssetData>               InAssetData                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UFortAnimationBlueprintEditorLibrary::FilterAssetByParent(class FName ClassName, TArray<struct FAssetData>* OutAssetData, bool bUseNativeParent, const TArray<struct FAssetData>& InAssetData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortAnimationBlueprintEditorLibrary", "FilterAssetByParent");

	Params::FortAnimationBlueprintEditorLibrary_FilterAssetByParent Parms{};

	Parms.ClassName = ClassName;
	Parms.bUseNativeParent = bUseNativeParent;
	Parms.InAssetData = std::move(InAssetData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutAssetData != nullptr)
		*OutAssetData = std::move(Parms.OutAssetData);
}


// Function FortniteEditor.FortAnimationBlueprintEditorLibrary.FilterAssetsFromFile
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FAssetData>               OutAssetData                                           (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// class FString                           FileName                                               (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FAssetData>               InAssetData                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UFortAnimationBlueprintEditorLibrary::FilterAssetsFromFile(TArray<struct FAssetData>* OutAssetData, const class FString& FileName, const TArray<struct FAssetData>& InAssetData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortAnimationBlueprintEditorLibrary", "FilterAssetsFromFile");

	Params::FortAnimationBlueprintEditorLibrary_FilterAssetsFromFile Parms{};

	Parms.FileName = std::move(FileName);
	Parms.InAssetData = std::move(InAssetData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutAssetData != nullptr)
		*OutAssetData = std::move(Parms.OutAssetData);
}


// Function FortniteEditor.FortAnimationBlueprintEditorLibrary.ListAnimationBlueprintCustomBlueprintEvents
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class FString                           OutputFilePath                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FAssetData                       AnimBlueprintAsset                                     (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortAnimationBlueprintEditorLibrary::ListAnimationBlueprintCustomBlueprintEvents(const class FString& OutputFilePath, const struct FAssetData& AnimBlueprintAsset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortAnimationBlueprintEditorLibrary", "ListAnimationBlueprintCustomBlueprintEvents");

	Params::FortAnimationBlueprintEditorLibrary_ListAnimationBlueprintCustomBlueprintEvents Parms{};

	Parms.OutputFilePath = std::move(OutputFilePath);
	Parms.AnimBlueprintAsset = std::move(AnimBlueprintAsset);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.FortAnimationBlueprintEditorLibrary.ListAnimationBlueprintParents
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           OutputFilePath                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FAssetData>               AssetData                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UFortAnimationBlueprintEditorLibrary::ListAnimationBlueprintParents(const class FString& OutputFilePath, const TArray<struct FAssetData>& AssetData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortAnimationBlueprintEditorLibrary", "ListAnimationBlueprintParents");

	Params::FortAnimationBlueprintEditorLibrary_ListAnimationBlueprintParents Parms{};

	Parms.OutputFilePath = std::move(OutputFilePath);
	Parms.AssetData = std::move(AssetData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.FortAnimationBlueprintEditorLibrary.ListAnimationBlueprintSlotUsage
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           OutputFilePath                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FAssetData>               AssetData                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UFortAnimationBlueprintEditorLibrary::ListAnimationBlueprintSlotUsage(const class FString& OutputFilePath, const TArray<struct FAssetData>& AssetData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortAnimationBlueprintEditorLibrary", "ListAnimationBlueprintSlotUsage");

	Params::FortAnimationBlueprintEditorLibrary_ListAnimationBlueprintSlotUsage Parms{};

	Parms.OutputFilePath = std::move(OutputFilePath);
	Parms.AssetData = std::move(AssetData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.FortAnimationBlueprintEditorLibrary.ListAnimationLayerInterfacesImplementations
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           OutputFilePath                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bCompileBlueprints                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FAssetData>               AssetData                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UFortAnimationBlueprintEditorLibrary::ListAnimationLayerInterfacesImplementations(const class FString& OutputFilePath, const bool bCompileBlueprints, const TArray<struct FAssetData>& AssetData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortAnimationBlueprintEditorLibrary", "ListAnimationLayerInterfacesImplementations");

	Params::FortAnimationBlueprintEditorLibrary_ListAnimationLayerInterfacesImplementations Parms{};

	Parms.OutputFilePath = std::move(OutputFilePath);
	Parms.bCompileBlueprints = bCompileBlueprints;
	Parms.AssetData = std::move(AssetData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.FortAnimationBlueprintEditorLibrary.ListAnimationLayerInterfacesUsage
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           OutputFilePath                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bCompileBlueprints                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FAssetData>               AssetData                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UFortAnimationBlueprintEditorLibrary::ListAnimationLayerInterfacesUsage(const class FString& OutputFilePath, const bool bCompileBlueprints, const TArray<struct FAssetData>& AssetData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortAnimationBlueprintEditorLibrary", "ListAnimationLayerInterfacesUsage");

	Params::FortAnimationBlueprintEditorLibrary_ListAnimationLayerInterfacesUsage Parms{};

	Parms.OutputFilePath = std::move(OutputFilePath);
	Parms.bCompileBlueprints = bCompileBlueprints;
	Parms.AssetData = std::move(AssetData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.FortAnimationBlueprintEditorLibrary.ListAnimationSequenceCurveUsage
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           OutputFilePath                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FAssetData>               AssetData                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   StartIdx                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortAnimationBlueprintEditorLibrary::ListAnimationSequenceCurveUsage(const class FString& OutputFilePath, const TArray<struct FAssetData>& AssetData, const int32 StartIdx)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortAnimationBlueprintEditorLibrary", "ListAnimationSequenceCurveUsage");

	Params::FortAnimationBlueprintEditorLibrary_ListAnimationSequenceCurveUsage Parms{};

	Parms.OutputFilePath = std::move(OutputFilePath);
	Parms.AssetData = std::move(AssetData);
	Parms.StartIdx = StartIdx;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.FortAnimationBlueprintEditorLibrary.ListAnimationSequencesByRetargetSource
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           SearchString                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           OutputFilePath                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FAssetData>               AssetData                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UFortAnimationBlueprintEditorLibrary::ListAnimationSequencesByRetargetSource(const class FString& SearchString, const class FString& OutputFilePath, const TArray<struct FAssetData>& AssetData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortAnimationBlueprintEditorLibrary", "ListAnimationSequencesByRetargetSource");

	Params::FortAnimationBlueprintEditorLibrary_ListAnimationSequencesByRetargetSource Parms{};

	Parms.SearchString = std::move(SearchString);
	Parms.OutputFilePath = std::move(OutputFilePath);
	Parms.AssetData = std::move(AssetData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.FortAnimationBlueprintEditorLibrary.ListAnimationSequencesForSkeleton
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class USkeleton*                        Skeleton                                               (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FAssetData>               AssetData                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<struct FAssetData>               AnimSequenceAssets                                     (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UFortAnimationBlueprintEditorLibrary::ListAnimationSequencesForSkeleton(const class USkeleton* Skeleton, const TArray<struct FAssetData>& AssetData, TArray<struct FAssetData>* AnimSequenceAssets)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortAnimationBlueprintEditorLibrary", "ListAnimationSequencesForSkeleton");

	Params::FortAnimationBlueprintEditorLibrary_ListAnimationSequencesForSkeleton Parms{};

	Parms.Skeleton = Skeleton;
	Parms.AssetData = std::move(AssetData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (AnimSequenceAssets != nullptr)
		*AnimSequenceAssets = std::move(Parms.AnimSequenceAssets);
}


// Function FortniteEditor.FortAnimationBlueprintEditorLibrary.ListAnimationSequencesWithBoneData
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class USkeleton*                        Skeleton                                               (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           BoneName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           OutputFilePath                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FAssetData>               AssetData                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UFortAnimationBlueprintEditorLibrary::ListAnimationSequencesWithBoneData(const class USkeleton* Skeleton, const class FString& BoneName, const class FString& OutputFilePath, const TArray<struct FAssetData>& AssetData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortAnimationBlueprintEditorLibrary", "ListAnimationSequencesWithBoneData");

	Params::FortAnimationBlueprintEditorLibrary_ListAnimationSequencesWithBoneData Parms{};

	Parms.Skeleton = Skeleton;
	Parms.BoneName = std::move(BoneName);
	Parms.OutputFilePath = std::move(OutputFilePath);
	Parms.AssetData = std::move(AssetData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.FortAnimationBlueprintEditorLibrary.ListAnimationSetsContent
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           OutputFilePath                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FAssetData>               AssetData                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bFortWeaponAnimSet                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFortPlayerGliderAnimSet                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFortPatrolAnimAsset                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFortPlayerSkydiveAnimSet                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFortWeaponAdditiveAnimSet                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFortLocomotionAnimSetData                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFortTacticalStateAnimSetData                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortAnimationBlueprintEditorLibrary::ListAnimationSetsContent(const class FString& OutputFilePath, const TArray<struct FAssetData>& AssetData, const bool bFortWeaponAnimSet, const bool bFortPlayerGliderAnimSet, const bool bFortPatrolAnimAsset, const bool bFortPlayerSkydiveAnimSet, const bool bFortWeaponAdditiveAnimSet, const bool bFortLocomotionAnimSetData, const bool bFortTacticalStateAnimSetData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortAnimationBlueprintEditorLibrary", "ListAnimationSetsContent");

	Params::FortAnimationBlueprintEditorLibrary_ListAnimationSetsContent Parms{};

	Parms.OutputFilePath = std::move(OutputFilePath);
	Parms.AssetData = std::move(AssetData);
	Parms.bFortWeaponAnimSet = bFortWeaponAnimSet;
	Parms.bFortPlayerGliderAnimSet = bFortPlayerGliderAnimSet;
	Parms.bFortPatrolAnimAsset = bFortPatrolAnimAsset;
	Parms.bFortPlayerSkydiveAnimSet = bFortPlayerSkydiveAnimSet;
	Parms.bFortWeaponAdditiveAnimSet = bFortWeaponAdditiveAnimSet;
	Parms.bFortLocomotionAnimSetData = bFortLocomotionAnimSetData;
	Parms.bFortTacticalStateAnimSetData = bFortTacticalStateAnimSetData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.FortAnimationBlueprintEditorLibrary.ListAnimationSyncData
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class FString                           OutputFilePath                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FAssetData                       AnimBlueprintAsset                                     (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortAnimationBlueprintEditorLibrary::ListAnimationSyncData(const class FString& OutputFilePath, const struct FAssetData& AnimBlueprintAsset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortAnimationBlueprintEditorLibrary", "ListAnimationSyncData");

	Params::FortAnimationBlueprintEditorLibrary_ListAnimationSyncData Parms{};

	Parms.OutputFilePath = std::move(OutputFilePath);
	Parms.AnimBlueprintAsset = std::move(AnimBlueprintAsset);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.FortAnimationBlueprintEditorLibrary.ListAnimBlueprintAssetOverrides
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           OutputFilePath                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FAssetData>               AssetData                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           ParentFilter                                           (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUseNativeParent                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bCompileBlueprints                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortAnimationBlueprintEditorLibrary::ListAnimBlueprintAssetOverrides(const class FString& OutputFilePath, const TArray<struct FAssetData>& AssetData, const class FString& ParentFilter, const bool bUseNativeParent, const bool bCompileBlueprints)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortAnimationBlueprintEditorLibrary", "ListAnimBlueprintAssetOverrides");

	Params::FortAnimationBlueprintEditorLibrary_ListAnimBlueprintAssetOverrides Parms{};

	Parms.OutputFilePath = std::move(OutputFilePath);
	Parms.AssetData = std::move(AssetData);
	Parms.ParentFilter = std::move(ParentFilter);
	Parms.bUseNativeParent = bUseNativeParent;
	Parms.bCompileBlueprints = bCompileBlueprints;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.FortAnimationBlueprintEditorLibrary.ListAnimBlueprintProperties
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           OutputFilePath                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FAssetData>               AssetData                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           ParentFilter                                           (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUseNativeParent                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bCompileBlueprints                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortAnimationBlueprintEditorLibrary::ListAnimBlueprintProperties(const class FString& OutputFilePath, const TArray<struct FAssetData>& AssetData, const class FString& ParentFilter, const bool bUseNativeParent, const bool bCompileBlueprints)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortAnimationBlueprintEditorLibrary", "ListAnimBlueprintProperties");

	Params::FortAnimationBlueprintEditorLibrary_ListAnimBlueprintProperties Parms{};

	Parms.OutputFilePath = std::move(OutputFilePath);
	Parms.AssetData = std::move(AssetData);
	Parms.ParentFilter = std::move(ParentFilter);
	Parms.bUseNativeParent = bUseNativeParent;
	Parms.bCompileBlueprints = bCompileBlueprints;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.FortAnimationBlueprintEditorLibrary.ListBlendSpaceProperties
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           OutputFilePath                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FAssetData>               AssetData                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           BlendSpaceAssetNames                                   (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortAnimationBlueprintEditorLibrary::ListBlendSpaceProperties(const class FString& OutputFilePath, const TArray<struct FAssetData>& AssetData, const class FString& BlendSpaceAssetNames)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortAnimationBlueprintEditorLibrary", "ListBlendSpaceProperties");

	Params::FortAnimationBlueprintEditorLibrary_ListBlendSpaceProperties Parms{};

	Parms.OutputFilePath = std::move(OutputFilePath);
	Parms.AssetData = std::move(AssetData);
	Parms.BlendSpaceAssetNames = std::move(BlendSpaceAssetNames);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.FortAnimationBlueprintEditorLibrary.ListWeaponAnimSetUsage
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           OutputFilePath                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FAssetData>               AssetData                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UFortAnimationBlueprintEditorLibrary::ListWeaponAnimSetUsage(const class FString& OutputFilePath, const TArray<struct FAssetData>& AssetData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortAnimationBlueprintEditorLibrary", "ListWeaponAnimSetUsage");

	Params::FortAnimationBlueprintEditorLibrary_ListWeaponAnimSetUsage Parms{};

	Parms.OutputFilePath = std::move(OutputFilePath);
	Parms.AssetData = std::move(AssetData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.FortAnimationBlueprintEditorLibrary.ListWeaponCoreAnimType
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           OutputFilePath                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FAssetData>               AssetData                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UFortAnimationBlueprintEditorLibrary::ListWeaponCoreAnimType(const class FString& OutputFilePath, const TArray<struct FAssetData>& AssetData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortAnimationBlueprintEditorLibrary", "ListWeaponCoreAnimType");

	Params::FortAnimationBlueprintEditorLibrary_ListWeaponCoreAnimType Parms{};

	Parms.OutputFilePath = std::move(OutputFilePath);
	Parms.AssetData = std::move(AssetData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.FortAnimationBlueprintEditorLibrary.ListWeaponItemDefinitionProperties
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           OutputFilePath                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FAssetData>               AssetData                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UFortAnimationBlueprintEditorLibrary::ListWeaponItemDefinitionProperties(const class FString& OutputFilePath, const TArray<struct FAssetData>& AssetData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortAnimationBlueprintEditorLibrary", "ListWeaponItemDefinitionProperties");

	Params::FortAnimationBlueprintEditorLibrary_ListWeaponItemDefinitionProperties Parms{};

	Parms.OutputFilePath = std::move(OutputFilePath);
	Parms.AssetData = std::move(AssetData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.FortAnimationBlueprintEditorLibrary.ListWeaponMontageUsage
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           OutputFilePath                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FAssetData>               AssetData                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UFortAnimationBlueprintEditorLibrary::ListWeaponMontageUsage(const class FString& OutputFilePath, const TArray<struct FAssetData>& AssetData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortAnimationBlueprintEditorLibrary", "ListWeaponMontageUsage");

	Params::FortAnimationBlueprintEditorLibrary_ListWeaponMontageUsage Parms{};

	Parms.OutputFilePath = std::move(OutputFilePath);
	Parms.AssetData = std::move(AssetData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.FortAnimationBlueprintEditorLibrary.RemoveCurveFromAnimSequenceBase
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAnimSequenceBase*                AnimSequenceBase                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             CurveName                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortAnimationBlueprintEditorLibrary::RemoveCurveFromAnimSequenceBase(class UAnimSequenceBase* AnimSequenceBase, class FName CurveName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortAnimationBlueprintEditorLibrary", "RemoveCurveFromAnimSequenceBase");

	Params::FortAnimationBlueprintEditorLibrary_RemoveCurveFromAnimSequenceBase Parms{};

	Parms.AnimSequenceBase = AnimSequenceBase;
	Parms.CurveName = CurveName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.FortAnimationBlueprintEditorLibrary.SaveAllBlueprintsAsText
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           OutputDirectory                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FAssetData>               AssetData                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UFortAnimationBlueprintEditorLibrary::SaveAllBlueprintsAsText(const class FString& OutputDirectory, const TArray<struct FAssetData>& AssetData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortAnimationBlueprintEditorLibrary", "SaveAllBlueprintsAsText");

	Params::FortAnimationBlueprintEditorLibrary_SaveAllBlueprintsAsText Parms{};

	Parms.OutputDirectory = std::move(OutputDirectory);
	Parms.AssetData = std::move(AssetData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.FortAnimationBlueprintEditorLibrary.SaveBlueprintListsAsT3D
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           OutputDirectory                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FAssetData>               AssetData                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           AssetNames                                             (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortAnimationBlueprintEditorLibrary::SaveBlueprintListsAsT3D(const class FString& OutputDirectory, const TArray<struct FAssetData>& AssetData, const class FString& AssetNames)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortAnimationBlueprintEditorLibrary", "SaveBlueprintListsAsT3D");

	Params::FortAnimationBlueprintEditorLibrary_SaveBlueprintListsAsT3D Parms{};

	Parms.OutputDirectory = std::move(OutputDirectory);
	Parms.AssetData = std::move(AssetData);
	Parms.AssetNames = std::move(AssetNames);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.FortExposedContentManifest.HasManifest
// (Final, RequiredAPI, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortExposedContentManifest::HasManifest() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortExposedContentManifest", "HasManifest");

	Params::FortExposedContentManifest_HasManifest Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortExposedContentManifest.IsValidAssetPathReference
// (Final, Native, Private, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FTopLevelAssetPath               AssetPath                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortExposedContentManifest::IsValidAssetPathReference(const struct FTopLevelAssetPath& AssetPath) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortExposedContentManifest", "IsValidAssetPathReference");

	Params::FortExposedContentManifest_IsValidAssetPathReference Parms{};

	Parms.AssetPath = std::move(AssetPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortExposedContentManifest.IsValidObjectPathReference
// (Final, Native, Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FSoftObjectPath                  ObjectPath                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortExposedContentManifest::IsValidObjectPathReference(const struct FSoftObjectPath& ObjectPath) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortExposedContentManifest", "IsValidObjectPathReference");

	Params::FortExposedContentManifest_IsValidObjectPathReference Parms{};

	Parms.ObjectPath = std::move(ObjectPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortExposedContentManifest.ValidatePackage
// (Final, RequiredAPI, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           PackageFilename                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFortExposedContentValidatePackagesResultReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FFortExposedContentValidatePackagesResult UFortExposedContentManifest::ValidatePackage(const class FString& PackageFilename) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortExposedContentManifest", "ValidatePackage");

	Params::FortExposedContentManifest_ValidatePackage Parms{};

	Parms.PackageFilename = std::move(PackageFilename);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortExposedContentManifest.ValidatePackages
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class FString>                   PackageFilenames                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FFortExposedContentValidatePackagesResultReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FFortExposedContentValidatePackagesResult UFortExposedContentManifest::ValidatePackages(const TArray<class FString>& PackageFilenames) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortExposedContentManifest", "ValidatePackages");

	Params::FortExposedContentManifest_ValidatePackages Parms{};

	Parms.PackageFilenames = std::move(PackageFilenames);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortExposedContentManifest.ValidatePluginPackage
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           PackageFilename                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>                   AllowedPluginReferences                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FFortExposedContentValidatePackagesResultReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FFortExposedContentValidatePackagesResult UFortExposedContentManifest::ValidatePluginPackage(const class FString& PackageFilename, const TArray<class FString>& AllowedPluginReferences) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortExposedContentManifest", "ValidatePluginPackage");

	Params::FortExposedContentManifest_ValidatePluginPackage Parms{};

	Parms.PackageFilename = std::move(PackageFilename);
	Parms.AllowedPluginReferences = std::move(AllowedPluginReferences);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortExposedContentManifest.ValidatePluginPackages
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class FString>                   PackageFilenames                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<class FString>                   AllowedPluginReferences                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FFortExposedContentValidatePackagesResultReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FFortExposedContentValidatePackagesResult UFortExposedContentManifest::ValidatePluginPackages(const TArray<class FString>& PackageFilenames, const TArray<class FString>& AllowedPluginReferences) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortExposedContentManifest", "ValidatePluginPackages");

	Params::FortExposedContentManifest_ValidatePluginPackages Parms{};

	Parms.PackageFilenames = std::move(PackageFilenames);
	Parms.AllowedPluginReferences = std::move(AllowedPluginReferences);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortExposedContentValidationActorProxy.DestroyActor
// (Final, RequiredAPI, Native, Public, BlueprintCallable)

void UFortExposedContentValidationActorProxy::DestroyActor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortExposedContentValidationActorProxy", "DestroyActor");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.FortExposedContentValidationActorProxy.GetActor
// (Final, RequiredAPI, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UFortExposedContentValidationActorProxy::GetActor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortExposedContentValidationActorProxy", "GetActor");

	Params::FortExposedContentValidationActorProxy_GetActor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortExposedContentValidationActorProxy.ValidateActor
// (Final, RequiredAPI, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UFortExposedContentManifest*      Manifest                                               (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFortExposedContentValidatePackagesResultReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FFortExposedContentValidatePackagesResult UFortExposedContentValidationActorProxy::ValidateActor(const class UFortExposedContentManifest* Manifest) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortExposedContentValidationActorProxy", "ValidateActor");

	Params::FortExposedContentValidationActorProxy_ValidateActor Parms{};

	Parms.Manifest = Manifest;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortExposedContentValidationWorldProxy.SpawnActor
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TSubclassOf<class AActor>               ActorClass                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UFortExposedContentValidationActorProxy*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFortExposedContentValidationActorProxy* UFortExposedContentValidationWorldProxy::SpawnActor(const TSubclassOf<class AActor>& ActorClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortExposedContentValidationWorldProxy", "SpawnActor");

	Params::FortExposedContentValidationWorldProxy_SpawnActor Parms{};

	Parms.ActorClass = ActorClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortExposedContentValidationWorldProxy.SpawnActorWithTransform
// (Final, RequiredAPI, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// TSubclassOf<class AActor>               ActorClass                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       ActorTransform                                         (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UFortExposedContentValidationActorProxy*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFortExposedContentValidationActorProxy* UFortExposedContentValidationWorldProxy::SpawnActorWithTransform(const TSubclassOf<class AActor>& ActorClass, const struct FTransform& ActorTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortExposedContentValidationWorldProxy", "SpawnActorWithTransform");

	Params::FortExposedContentValidationWorldProxy_SpawnActorWithTransform Parms{};

	Parms.ActorClass = ActorClass;
	Parms.ActorTransform = std::move(ActorTransform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortExposedContentValidationWorldProxy.SpawnLevelSaveRecord
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// class ULevelSaveRecord*                 LevelSaveRecord                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UFortExposedContentValidationActorProxy*>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UFortExposedContentValidationActorProxy*> UFortExposedContentValidationWorldProxy::SpawnLevelSaveRecord(class ULevelSaveRecord* LevelSaveRecord)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortExposedContentValidationWorldProxy", "SpawnLevelSaveRecord");

	Params::FortExposedContentValidationWorldProxy_SpawnLevelSaveRecord Parms{};

	Parms.LevelSaveRecord = LevelSaveRecord;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortExposedContentValidationWorldProxy.SpawnLevelSaveRecordProvider
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// TScriptInterface<class ILevelSaveRecordProvider>LevelSaveRecordProvider                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UFortExposedContentValidationActorProxy*>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UFortExposedContentValidationActorProxy*> UFortExposedContentValidationWorldProxy::SpawnLevelSaveRecordProvider(TScriptInterface<class ILevelSaveRecordProvider> LevelSaveRecordProvider)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortExposedContentValidationWorldProxy", "SpawnLevelSaveRecordProvider");

	Params::FortExposedContentValidationWorldProxy_SpawnLevelSaveRecordProvider Parms{};

	Parms.LevelSaveRecordProvider = LevelSaveRecordProvider;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortExposedContentValidationWorldProxy.SpawnLevelSaveRecordProviderWithTransform
// (Final, RequiredAPI, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// TScriptInterface<class ILevelSaveRecordProvider>LevelSaveRecordProvider                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       LevelSaveRecordRootTransform                           (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UFortExposedContentValidationActorProxy*>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UFortExposedContentValidationActorProxy*> UFortExposedContentValidationWorldProxy::SpawnLevelSaveRecordProviderWithTransform(TScriptInterface<class ILevelSaveRecordProvider> LevelSaveRecordProvider, const struct FTransform& LevelSaveRecordRootTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortExposedContentValidationWorldProxy", "SpawnLevelSaveRecordProviderWithTransform");

	Params::FortExposedContentValidationWorldProxy_SpawnLevelSaveRecordProviderWithTransform Parms{};

	Parms.LevelSaveRecordProvider = LevelSaveRecordProvider;
	Parms.LevelSaveRecordRootTransform = std::move(LevelSaveRecordRootTransform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortExposedContentValidationWorldProxy.SpawnLevelSaveRecordWithTransform
// (Final, RequiredAPI, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class ULevelSaveRecord*                 LevelSaveRecord                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       LevelSaveRecordRootTransform                           (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UFortExposedContentValidationActorProxy*>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UFortExposedContentValidationActorProxy*> UFortExposedContentValidationWorldProxy::SpawnLevelSaveRecordWithTransform(class ULevelSaveRecord* LevelSaveRecord, const struct FTransform& LevelSaveRecordRootTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortExposedContentValidationWorldProxy", "SpawnLevelSaveRecordWithTransform");

	Params::FortExposedContentValidationWorldProxy_SpawnLevelSaveRecordWithTransform Parms{};

	Parms.LevelSaveRecord = LevelSaveRecord;
	Parms.LevelSaveRecordRootTransform = std::move(LevelSaveRecordRootTransform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortExposedContentValidationWorldProxy.GetWorld
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UWorld*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWorld* UFortExposedContentValidationWorldProxy::GetWorld() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortExposedContentValidationWorldProxy", "GetWorld");

	Params::FortExposedContentValidationWorldProxy_GetWorld Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortExposedContentValidationSubsystem.CreateBackgroundValidationWorld
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// class UFortExposedContentValidationWorldProxy*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFortExposedContentValidationWorldProxy* UFortExposedContentValidationSubsystem::CreateBackgroundValidationWorld()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortExposedContentValidationSubsystem", "CreateBackgroundValidationWorld");

	Params::FortExposedContentValidationSubsystem_CreateBackgroundValidationWorld Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortExposedContentValidationSubsystem.CreateEditorValidationWorld
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bSilent                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UFortExposedContentValidationWorldProxy*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFortExposedContentValidationWorldProxy* UFortExposedContentValidationSubsystem::CreateEditorValidationWorld(const bool bSilent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortExposedContentValidationSubsystem", "CreateEditorValidationWorld");

	Params::FortExposedContentValidationSubsystem_CreateEditorValidationWorld Parms{};

	Parms.bSilent = bSilent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortExposedContentValidationSubsystem.GetCurrentManifest
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// const class UFortExposedContentManifest*ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UFortExposedContentManifest* UFortExposedContentValidationSubsystem::GetCurrentManifest()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortExposedContentValidationSubsystem", "GetCurrentManifest");

	Params::FortExposedContentValidationSubsystem_GetCurrentManifest Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortExposedContentValidationSubsystem.GetPreviousManifest
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// const class UFortExposedContentManifest*ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UFortExposedContentManifest* UFortExposedContentValidationSubsystem::GetPreviousManifest()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortExposedContentValidationSubsystem", "GetPreviousManifest");

	Params::FortExposedContentValidationSubsystem_GetPreviousManifest Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortExposedContentValidationSubsystem.ShowValidationReport
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FFortExposedContentValidatePackagesResultResult                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bClearPage                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortExposedContentValidationSubsystem::ShowValidationReport(const struct FFortExposedContentValidatePackagesResult& Result, const bool bClearPage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortExposedContentValidationSubsystem", "ShowValidationReport");

	Params::FortExposedContentValidationSubsystem_ShowValidationReport Parms{};

	Parms.Result = std::move(Result);
	Parms.bClearPage = bClearPage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.FortExposedContentValidationSubsystem.BuildCurrentManifest
// (Final, RequiredAPI, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    bSilent                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortExposedContentValidationSubsystem::BuildCurrentManifest(const bool bSilent) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortExposedContentValidationSubsystem", "BuildCurrentManifest");

	Params::FortExposedContentValidationSubsystem_BuildCurrentManifest Parms{};

	Parms.bSilent = bSilent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortExposedContentValidationSubsystem.SyncCurrentManifest
// (Final, RequiredAPI, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    bSilent                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortExposedContentValidationSubsystem::SyncCurrentManifest(const bool bSilent) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortExposedContentValidationSubsystem", "SyncCurrentManifest");

	Params::FortExposedContentValidationSubsystem_SyncCurrentManifest Parms{};

	Parms.bSilent = bSilent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortEditorUtilityLibrary.ExitEditor
// (Final, Native, Static, Public, BlueprintCallable)

void UFortEditorUtilityLibrary::ExitEditor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortEditorUtilityLibrary", "ExitEditor");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.FortEditorUtilityLibrary.FindServerPlayWorld
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UObject* UFortEditorUtilityLibrary::FindServerPlayWorld()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortEditorUtilityLibrary", "FindServerPlayWorld");

	Params::FortEditorUtilityLibrary_FindServerPlayWorld Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortEditorUtilityLibrary.GetAvailableMaterialParameters
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UMaterial*                        Material                                               (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInstance*                MaterialInstance                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FMaterialParameterInfo>   VisibleExpressions                                     (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UFortEditorUtilityLibrary::GetAvailableMaterialParameters(const class UMaterial* Material, class UMaterialInstance* MaterialInstance, TArray<struct FMaterialParameterInfo>* VisibleExpressions)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortEditorUtilityLibrary", "GetAvailableMaterialParameters");

	Params::FortEditorUtilityLibrary_GetAvailableMaterialParameters Parms{};

	Parms.Material = Material;
	Parms.MaterialInstance = MaterialInstance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (VisibleExpressions != nullptr)
		*VisibleExpressions = std::move(Parms.VisibleExpressions);
}


// Function FortniteEditor.FortEditorUtilityLibrary.IsMaterialParameterAvailable
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UMaterialInstance*                MaterialInstance                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ParameterName                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortEditorUtilityLibrary::IsMaterialParameterAvailable(class UMaterialInstance* MaterialInstance, class FName ParameterName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortEditorUtilityLibrary", "IsMaterialParameterAvailable");

	Params::FortEditorUtilityLibrary_IsMaterialParameterAvailable Parms{};

	Parms.MaterialInstance = MaterialInstance;
	Parms.ParameterName = ParameterName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortEditorUtilityLibrary.SaveAssetsWhilePlaying
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class UObject*>                  AssetsToSave                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bOnlyIfIsDirty                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortEditorUtilityLibrary::SaveAssetsWhilePlaying(const TArray<class UObject*>& AssetsToSave, bool bOnlyIfIsDirty)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortEditorUtilityLibrary", "SaveAssetsWhilePlaying");

	Params::FortEditorUtilityLibrary_SaveAssetsWhilePlaying Parms{};

	Parms.AssetsToSave = std::move(AssetsToSave);
	Parms.bOnlyIfIsDirty = bOnlyIfIsDirty;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortMapMarkerIconOverrideComboBox.HandleSelectedIconChanged
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// class FName                             SelectedIconName                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESelectInfo                             SelectionType                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortMapMarkerIconOverrideComboBox::HandleSelectedIconChanged(const class FName SelectedIconName, const ESelectInfo SelectionType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortMapMarkerIconOverrideComboBox", "HandleSelectedIconChanged");

	Params::FortMapMarkerIconOverrideComboBox_HandleSelectedIconChanged Parms{};

	Parms.SelectedIconName = SelectedIconName;
	Parms.SelectionType = SelectionType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.FortMapMarkerIconOverrideComboBox.SyncBrowserToMapMarkersIconDataTable
// (Final, Native, Protected, BlueprintCallable)

void UFortMapMarkerIconOverrideComboBox::SyncBrowserToMapMarkersIconDataTable()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortMapMarkerIconOverrideComboBox", "SyncBrowserToMapMarkersIconDataTable");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.FortMapMarkerIconOverrideComboBox.GenerateMapIconOverrideEntry
// (Final, Native, Private, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             IconName                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMapMarkerIconOverrideComboBoxEntryType Type                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWidget*                          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWidget* UFortMapMarkerIconOverrideComboBox::GenerateMapIconOverrideEntry(const class FName IconName, const EMapMarkerIconOverrideComboBoxEntryType Type) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortMapMarkerIconOverrideComboBox", "GenerateMapIconOverrideEntry");

	Params::FortMapMarkerIconOverrideComboBox_GenerateMapIconOverrideEntry Parms{};

	Parms.IconName = IconName;
	Parms.Type = Type;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.EditorOnlyGateExpressionExtension.GetAllGateNames
// (Final, Native, Public, Const)
// Parameters:
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FName> UEditorOnlyGateExpressionExtension::GetAllGateNames() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditorOnlyGateExpressionExtension", "GetAllGateNames");

	Params::EditorOnlyGateExpressionExtension_GetAllGateNames Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.EditorOnlyGateEntryExtension.GetAllGateNames
// (Final, Native, Public, Const)
// Parameters:
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FName> UEditorOnlyGateEntryExtension::GetAllGateNames() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditorOnlyGateEntryExtension", "GetAllGateNames");

	Params::EditorOnlyGateEntryExtension_GetAllGateNames Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.EditorOnlyGateEntryExtension.GetObjectiveSubjectNames
// (Final, Native, Public, Const)
// Parameters:
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FName> UEditorOnlyGateEntryExtension::GetObjectiveSubjectNames() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditorOnlyGateEntryExtension", "GetObjectiveSubjectNames");

	Params::EditorOnlyGateEntryExtension_GetObjectiveSubjectNames Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortMultiPropertyView.AddGeneratePathPropertyNestedIndexData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           RootPropertyName                                       (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           NestedPropertyName                                     (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   IndexData                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortMultiPropertyView::AddGeneratePathPropertyNestedIndexData(const class FString& RootPropertyName, const class FString& NestedPropertyName, const int32 IndexData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortMultiPropertyView", "AddGeneratePathPropertyNestedIndexData");

	Params::FortMultiPropertyView_AddGeneratePathPropertyNestedIndexData Parms{};

	Parms.RootPropertyName = std::move(RootPropertyName);
	Parms.NestedPropertyName = std::move(NestedPropertyName);
	Parms.IndexData = IndexData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.FortMultiPropertyView.RebuildPropertyView
// (Final, Native, Public, BlueprintCallable)

void UFortMultiPropertyView::RebuildPropertyView()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortMultiPropertyView", "RebuildPropertyView");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.FortQuestToolPropertyView.SetObjectiveFiltersIndexToShow
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InObjectiveIndexToShow                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InObjectiveFiltersIndexToShow                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortQuestToolPropertyView::SetObjectiveFiltersIndexToShow(const int32 InObjectiveIndexToShow, const int32 InObjectiveFiltersIndexToShow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortQuestToolPropertyView", "SetObjectiveFiltersIndexToShow");

	Params::FortQuestToolPropertyView_SetObjectiveFiltersIndexToShow Parms{};

	Parms.InObjectiveIndexToShow = InObjectiveIndexToShow;
	Parms.InObjectiveFiltersIndexToShow = InObjectiveFiltersIndexToShow;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.FortQuestToolPropertyView.SetObjectiveIndexToShow
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InObjectiveIndexToShow                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortQuestToolPropertyView::SetObjectiveIndexToShow(const int32 InObjectiveIndexToShow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortQuestToolPropertyView", "SetObjectiveIndexToShow");

	Params::FortQuestToolPropertyView_SetObjectiveIndexToShow Parms{};

	Parms.InObjectiveIndexToShow = InObjectiveIndexToShow;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.FortQuestToolPropertyView.SetObjectiveStatsIndexToShow
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InObjectiveIndexToShow                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InObjectiveStatsIndexToShow                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortQuestToolPropertyView::SetObjectiveStatsIndexToShow(const int32 InObjectiveIndexToShow, const int32 InObjectiveStatsIndexToShow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortQuestToolPropertyView", "SetObjectiveStatsIndexToShow");

	Params::FortQuestToolPropertyView_SetObjectiveStatsIndexToShow Parms{};

	Parms.InObjectiveIndexToShow = InObjectiveIndexToShow;
	Parms.InObjectiveStatsIndexToShow = InObjectiveStatsIndexToShow;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.QuestEditorSubWidget.HandleExpandableAreaChanged
// (Native, Protected)
// Parameters:
// class UExpandableArea*                  Area                                                   (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsExpanded                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UQuestEditorSubWidget::HandleExpandableAreaChanged(class UExpandableArea* Area, bool bIsExpanded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestEditorSubWidget", "HandleExpandableAreaChanged");

	Params::QuestEditorSubWidget_HandleExpandableAreaChanged Parms{};

	Parms.Area = Area;
	Parms.bIsExpanded = bIsExpanded;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.QuestEditorHeader.CreateNewQuestAsset
// (Native, Protected, BlueprintCallable)

void UQuestEditorHeader::CreateNewQuestAsset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestEditorHeader", "CreateNewQuestAsset");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.QuestEditorHeader.MakeNextInTheSeries
// (Native, Protected, BlueprintCallable)

void UQuestEditorHeader::MakeNextInTheSeries()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestEditorHeader", "MakeNextInTheSeries");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.FortQuestEditorHeader.OpenObjectiveDebugger
// (Native, Protected, BlueprintCallable)

void UFortQuestEditorHeader::OpenObjectiveDebugger()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortQuestEditorHeader", "OpenObjectiveDebugger");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.FortQuestEditorHeader.OpenQuestInDetailsView
// (Native, Protected, BlueprintCallable)

void UFortQuestEditorHeader::OpenQuestInDetailsView()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortQuestEditorHeader", "OpenQuestInDetailsView");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.FortQuestItemDefComponentEditor_MapMarkers.HandleIconOverrideChanged
// (Final, Native, Private)
// Parameters:
// class FName                             SelectedIconOverride                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortQuestItemDefComponentEditor_MapMarkers::HandleIconOverrideChanged(const class FName SelectedIconOverride)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortQuestItemDefComponentEditor_MapMarkers", "HandleIconOverrideChanged");

	Params::FortQuestItemDefComponentEditor_MapMarkers_HandleIconOverrideChanged Parms{};

	Parms.SelectedIconOverride = SelectedIconOverride;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.FortQuestItemDefComponentEditor_MapMarkers.HandleMapSelectionChanged
// (Final, Native, Private)
// Parameters:
// class FName                             SelectedMapName                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESelectInfo                             SelectionType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortQuestItemDefComponentEditor_MapMarkers::HandleMapSelectionChanged(class FName SelectedMapName, ESelectInfo SelectionType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortQuestItemDefComponentEditor_MapMarkers", "HandleMapSelectionChanged");

	Params::FortQuestItemDefComponentEditor_MapMarkers_HandleMapSelectionChanged Parms{};

	Parms.SelectedMapName = SelectedMapName;
	Parms.SelectionType = SelectionType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.FortQuestItemDefComponentEditor_Objective.HandleAddObjectiveExtension
// (Native, Protected)

void UFortQuestItemDefComponentEditor_Objective::HandleAddObjectiveExtension()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortQuestItemDefComponentEditor_Objective", "HandleAddObjectiveExtension");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.FortQuestItemDefComponentEditor_Objective.HandleRemoveObjectiveExtension
// (Native, Protected)

void UFortQuestItemDefComponentEditor_Objective::HandleRemoveObjectiveExtension()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortQuestItemDefComponentEditor_Objective", "HandleRemoveObjectiveExtension");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.FortQuestItemDefComponentEditor_ObjectiveMapMarkers.HandleIconOverrideChanged
// (Final, Native, Private)
// Parameters:
// class FName                             SelectedIconOverride                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortQuestItemDefComponentEditor_ObjectiveMapMarkers::HandleIconOverrideChanged(const class FName SelectedIconOverride)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortQuestItemDefComponentEditor_ObjectiveMapMarkers", "HandleIconOverrideChanged");

	Params::FortQuestItemDefComponentEditor_ObjectiveMapMarkers_HandleIconOverrideChanged Parms{};

	Parms.SelectedIconOverride = SelectedIconOverride;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.FortQuestItemDefComponentManager.HandleComponentStatusButtonClicked
// (Final, Native, Private)

void UFortQuestItemDefComponentManager::HandleComponentStatusButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortQuestItemDefComponentManager", "HandleComponentStatusButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.EUO_ItemSaleVerification.CreateOutputTableFromVendingMachineBlueprints
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           VmName                                                 (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           OnDanceMsg                                             (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           OnDanceStyleMat                                        (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<TSoftObjectPtr<class UFortMontageItemDefinitionBase>, class FName>DanceMatStyleMap                                       (ConstParm, Parm, NativeAccessSpecifierPublic)
// TMap<TSoftObjectPtr<class UFortMontageItemDefinitionBase>, class FText>OnPlayerDanceMsgs                                      (ConstParm, Parm, NativeAccessSpecifierPublic)
// TMap<class FName, class FText>          DamageResponses                                        (ConstParm, Parm, NativeAccessSpecifierPublic)

void UEUO_ItemSaleVerification::CreateOutputTableFromVendingMachineBlueprints(const class FString& VmName, const class FString& OnDanceMsg, const class FString& OnDanceStyleMat, const TMap<TSoftObjectPtr<class UFortMontageItemDefinitionBase>, class FName>& DanceMatStyleMap, const TMap<TSoftObjectPtr<class UFortMontageItemDefinitionBase>, class FText>& OnPlayerDanceMsgs, const TMap<class FName, class FText>& DamageResponses)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EUO_ItemSaleVerification", "CreateOutputTableFromVendingMachineBlueprints");

	Params::EUO_ItemSaleVerification_CreateOutputTableFromVendingMachineBlueprints Parms{};

	Parms.VmName = std::move(VmName);
	Parms.OnDanceMsg = std::move(OnDanceMsg);
	Parms.OnDanceStyleMat = std::move(OnDanceStyleMat);
	Parms.DanceMatStyleMap = std::move(DanceMatStyleMap);
	Parms.OnPlayerDanceMsgs = std::move(OnPlayerDanceMsgs);
	Parms.DamageResponses = std::move(DamageResponses);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.EUO_ItemSaleVerification.ExtractContextualMessagesFromSpeechInConvoDB
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UConversationDatabase*            InConvoDB                                              (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEUO_ItemSaleVerification::ExtractContextualMessagesFromSpeechInConvoDB(const class UConversationDatabase* InConvoDB)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EUO_ItemSaleVerification", "ExtractContextualMessagesFromSpeechInConvoDB");

	Params::EUO_ItemSaleVerification_ExtractContextualMessagesFromSpeechInConvoDB Parms{};

	Parms.InConvoDB = InConvoDB;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.EUO_ItemSaleVerification.ExtractInfoFromContextualMessageConfigCollection
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UContextualMessageConfigCollection*InDataAssetConfig                                      (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEUO_ItemSaleVerification::ExtractInfoFromContextualMessageConfigCollection(const class UContextualMessageConfigCollection* InDataAssetConfig)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EUO_ItemSaleVerification", "ExtractInfoFromContextualMessageConfigCollection");

	Params::EUO_ItemSaleVerification_ExtractInfoFromContextualMessageConfigCollection Parms{};

	Parms.InDataAssetConfig = InDataAssetConfig;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.EUO_ItemSaleVerification.ForceLoadAssetFromSoftObjectPtr
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSoftObjectPtr<class UObject>           ObjectToLoad                                           (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UObject* UEUO_ItemSaleVerification::ForceLoadAssetFromSoftObjectPtr(TSoftObjectPtr<class UObject> ObjectToLoad)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EUO_ItemSaleVerification", "ForceLoadAssetFromSoftObjectPtr");

	Params::EUO_ItemSaleVerification_ForceLoadAssetFromSoftObjectPtr Parms{};

	Parms.ObjectToLoad = ObjectToLoad;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.EUO_ItemSaleVerification.ForceLoadDataTableFromSoftObjectPtr
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSoftObjectPtr<class UDataTable>        DataTableToLoad                                        (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDataTable*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDataTable* UEUO_ItemSaleVerification::ForceLoadDataTableFromSoftObjectPtr(TSoftObjectPtr<class UDataTable> DataTableToLoad)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EUO_ItemSaleVerification", "ForceLoadDataTableFromSoftObjectPtr");

	Params::EUO_ItemSaleVerification_ForceLoadDataTableFromSoftObjectPtr Parms{};

	Parms.DataTableToLoad = DataTableToLoad;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.EUO_ItemSaleVerification.GetRowNamesOfCurveTable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          KnownCurveTable                                        (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> UEUO_ItemSaleVerification::GetRowNamesOfCurveTable(const class UObject* KnownCurveTable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EUO_ItemSaleVerification", "GetRowNamesOfCurveTable");

	Params::EUO_ItemSaleVerification_GetRowNamesOfCurveTable Parms{};

	Parms.KnownCurveTable = KnownCurveTable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortQuestItemDefComponentTabbedView.OnRefreshedComponentTabs
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bComponentsAvailable                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortQuestItemDefComponentTabbedView::OnRefreshedComponentTabs(const bool bComponentsAvailable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortQuestItemDefComponentTabbedView", "OnRefreshedComponentTabs");

	Params::FortQuestItemDefComponentTabbedView_OnRefreshedComponentTabs Parms{};

	Parms.bComponentsAvailable = bComponentsAvailable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FortniteEditor.FortQuestItemDefComponentObjectiveExtensionTabbedView.SetObjectiveBackEndName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             InObjectiveBackendName                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortQuestItemDefComponentObjectiveExtensionTabbedView::SetObjectiveBackEndName(const class FName InObjectiveBackendName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortQuestItemDefComponentObjectiveExtensionTabbedView", "SetObjectiveBackEndName");

	Params::FortQuestItemDefComponentObjectiveExtensionTabbedView_SetObjectiveBackEndName Parms{};

	Parms.InObjectiveBackendName = InObjectiveBackendName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.FortHotfixTool.CopyHotfixToClipboard
// (Final, Native, Public, BlueprintCallable, Const)

void UFortHotfixTool::CopyHotfixToClipboard() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortHotfixTool", "CopyHotfixToClipboard");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.FortHotfixTool.GenerateHotfixFile
// (Final, Native, Public, BlueprintCallable, Const)

void UFortHotfixTool::GenerateHotfixFile() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortHotfixTool", "GenerateHotfixFile");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.FortQuestItemDefComponentsWidget.OpenComponentsMenu
// (Final, Native, Public, BlueprintCallable)

void UFortQuestItemDefComponentsWidget::OpenComponentsMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortQuestItemDefComponentsWidget", "OpenComponentsMenu");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.FortQuestPropPropagator.MakePropActors
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UClass*                           InQuestPropParentClass                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UFortQuestItemDefinition*         QuestItemDef                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortQuestPropPropagator::MakePropActors(class UClass* InQuestPropParentClass, class UFortQuestItemDefinition* QuestItemDef)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortQuestPropPropagator", "MakePropActors");

	Params::FortQuestPropPropagator_MakePropActors Parms{};

	Parms.InQuestPropParentClass = InQuestPropParentClass;
	Parms.QuestItemDef = QuestItemDef;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.FortQuestPropPropagator.SetPropActorData
// (Event, Public, BlueprintEvent)
// Parameters:
// class UBlueprint*                       BlueprintObject                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          BlueprintObjectCDO                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ObjectiveIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortQuestPropPropagator::SetPropActorData(class UBlueprint* BlueprintObject, class UObject* BlueprintObjectCDO, int32 ObjectiveIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortQuestPropPropagator", "SetPropActorData");

	Params::FortQuestPropPropagator_SetPropActorData Parms{};

	Parms.BlueprintObject = BlueprintObject;
	Parms.BlueprintObjectCDO = BlueprintObjectCDO;
	Parms.ObjectiveIndex = ObjectiveIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FortniteEditor.FortQuestObjectiveEditor.CreateObjectiveHotfix
// (Final, Native, Protected, BlueprintCallable)

void UFortQuestObjectiveEditor::CreateObjectiveHotfix()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortQuestObjectiveEditor", "CreateObjectiveHotfix");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.FortQuestObjectiveFilterEditor.DuplicateObjectiveFilter
// (Final, Native, Public, BlueprintCallable)

void UFortQuestObjectiveFilterEditor::DuplicateObjectiveFilter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortQuestObjectiveFilterEditor", "DuplicateObjectiveFilter");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.FortQuestObjectiveFilterEditor.OnObjectiveFilterDataSet
// (Event, Public, BlueprintEvent)

void UFortQuestObjectiveFilterEditor::OnObjectiveFilterDataSet()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortQuestObjectiveFilterEditor", "OnObjectiveFilterDataSet");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FortniteEditor.FortQuestObjectiveFilterEditor.RemoveObjectiveFilter
// (Final, Native, Public, BlueprintCallable)

void UFortQuestObjectiveFilterEditor::RemoveObjectiveFilter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortQuestObjectiveFilterEditor", "RemoveObjectiveFilter");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.FortQuestObjectiveFiltersEditor.AddQuestItemObjectiveFilter
// (Final, Native, Public, BlueprintCallable)

void UFortQuestObjectiveFiltersEditor::AddQuestItemObjectiveFilter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortQuestObjectiveFiltersEditor", "AddQuestItemObjectiveFilter");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.MinimapCaptureRequirementStatics.FindCurrentCaptureRequirements
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UMinimapCaptureRequirements*      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMinimapCaptureRequirements* UMinimapCaptureRequirementStatics::FindCurrentCaptureRequirements()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MinimapCaptureRequirementStatics", "FindCurrentCaptureRequirements");

	Params::MinimapCaptureRequirementStatics_FindCurrentCaptureRequirements Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortQuestScopePolicyWidget.GenerateWidgetForOption
// (Final, Native, Private)
// Parameters:
// class FString                           Option                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWidget*                          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWidget* UFortQuestScopePolicyWidget::GenerateWidgetForOption(const class FString& Option)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortQuestScopePolicyWidget", "GenerateWidgetForOption");

	Params::FortQuestScopePolicyWidget_GenerateWidgetForOption Parms{};

	Parms.Option = std::move(Option);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortQuestScopePolicyWidget.HandleParticipantScopeChanged
// (Final, Native, Private)
// Parameters:
// class FString                           SelectedScope                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESelectInfo                             SelectionType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortQuestScopePolicyWidget::HandleParticipantScopeChanged(const class FString& SelectedScope, ESelectInfo SelectionType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortQuestScopePolicyWidget", "HandleParticipantScopeChanged");

	Params::FortQuestScopePolicyWidget_HandleParticipantScopeChanged Parms{};

	Parms.SelectedScope = std::move(SelectedScope);
	Parms.SelectionType = SelectionType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.FortQuestScopePolicyWidget.InitQuestParticipantScope
// (Final, Native, Public, BlueprintCallable)

void UFortQuestScopePolicyWidget::InitQuestParticipantScope()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortQuestScopePolicyWidget", "InitQuestParticipantScope");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.FortRetroFoliageSettingsTool.OnRunButtonClicked
// (Final, Native, Private)

void UFortRetroFoliageSettingsTool::OnRunButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortRetroFoliageSettingsTool", "OnRunButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.FortWeeklyQuestNumEditorWidget.HandleWeekNumChanged
// (Final, Native, Public, BlueprintCallable)

void UFortWeeklyQuestNumEditorWidget::HandleWeekNumChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortWeeklyQuestNumEditorWidget", "HandleWeekNumChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.FortQuestToolTemplatesLibrary.GetQuestTemplateNamesFromTableForType
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UDataTable*                       QuestTemplatesTable                                    (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             QuestTemplateTypeName                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<class FName, struct FFortQuestToolTemplatesRow>ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

TMap<class FName, struct FFortQuestToolTemplatesRow> UFortQuestToolTemplatesLibrary::GetQuestTemplateNamesFromTableForType(const class UDataTable* QuestTemplatesTable, const class FName QuestTemplateTypeName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortQuestToolTemplatesLibrary", "GetQuestTemplateNamesFromTableForType");

	Params::FortQuestToolTemplatesLibrary_GetQuestTemplateNamesFromTableForType Parms{};

	Parms.QuestTemplatesTable = QuestTemplatesTable;
	Parms.QuestTemplateTypeName = QuestTemplateTypeName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortQuestToolTemplatesLibrary.GetQuestTemplateRowsBySeasonNumber
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UDataTable*                       QuestTemplatesTable                                    (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SeasonNum                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FFortQuestToolTemplatesRowDataPair>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FFortQuestToolTemplatesRowDataPair> UFortQuestToolTemplatesLibrary::GetQuestTemplateRowsBySeasonNumber(const class UDataTable* QuestTemplatesTable, const int32 SeasonNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortQuestToolTemplatesLibrary", "GetQuestTemplateRowsBySeasonNumber");

	Params::FortQuestToolTemplatesLibrary_GetQuestTemplateRowsBySeasonNumber Parms{};

	Parms.QuestTemplatesTable = QuestTemplatesTable;
	Parms.SeasonNum = SeasonNum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortQuestToolTemplatesLibrary.LoadQuestTemplateFromRow
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FFortQuestToolTemplatesRow       RowData                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UFortQuestItemDefinition*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFortQuestItemDefinition* UFortQuestToolTemplatesLibrary::LoadQuestTemplateFromRow(const struct FFortQuestToolTemplatesRow& RowData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortQuestToolTemplatesLibrary", "LoadQuestTemplateFromRow");

	Params::FortQuestToolTemplatesLibrary_LoadQuestTemplateFromRow Parms{};

	Parms.RowData = std::move(RowData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortQuestToolTemplatesLibrary.LoadQuestTemplateFromTableByRowName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UDataTable*                       QuestTemplatesTable                                    (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             TemplateRowName                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UFortQuestItemDefinition*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFortQuestItemDefinition* UFortQuestToolTemplatesLibrary::LoadQuestTemplateFromTableByRowName(const class UDataTable* QuestTemplatesTable, const class FName TemplateRowName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortQuestToolTemplatesLibrary", "LoadQuestTemplateFromTableByRowName");

	Params::FortQuestToolTemplatesLibrary_LoadQuestTemplateFromTableByRowName Parms{};

	Parms.QuestTemplatesTable = QuestTemplatesTable;
	Parms.TemplateRowName = TemplateRowName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortQuestToolTemplatesLibrary.LoadQuestTemplateFromTableBySeasonAndType
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UDataTable*                       QuestTemplatesTable                                    (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SeasonNum                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             QuestTemplateTypeName                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UFortQuestItemDefinition*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFortQuestItemDefinition* UFortQuestToolTemplatesLibrary::LoadQuestTemplateFromTableBySeasonAndType(const class UDataTable* QuestTemplatesTable, const int32 SeasonNum, const class FName QuestTemplateTypeName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortQuestToolTemplatesLibrary", "LoadQuestTemplateFromTableBySeasonAndType");

	Params::FortQuestToolTemplatesLibrary_LoadQuestTemplateFromTableBySeasonAndType Parms{};

	Parms.QuestTemplatesTable = QuestTemplatesTable;
	Parms.SeasonNum = SeasonNum;
	Parms.QuestTemplateTypeName = QuestTemplateTypeName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.QuestEditorBase.HandleEditorProfileChanged
// (Final, Native, Protected)
// Parameters:
// class FString                           SelectedItem                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESelectInfo                             SelectionType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UQuestEditorBase::HandleEditorProfileChanged(const class FString& SelectedItem, ESelectInfo SelectionType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestEditorBase", "HandleEditorProfileChanged");

	Params::QuestEditorBase_HandleEditorProfileChanged Parms{};

	Parms.SelectedItem = std::move(SelectedItem);
	Parms.SelectionType = SelectionType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.QuestEditorBase.InitEmptyEditor
// (Final, Native, Public, BlueprintCallable)

void UQuestEditorBase::InitEmptyEditor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestEditorBase", "InitEmptyEditor");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.QuestEditorBase.UpdateScrollIndicatorsVisibility
// (Final, Native, Private)
// Parameters:
// ESlateVisibility                        NewVisibility                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UQuestEditorBase::UpdateScrollIndicatorsVisibility(ESlateVisibility NewVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestEditorBase", "UpdateScrollIndicatorsVisibility");

	Params::QuestEditorBase_UpdateScrollIndicatorsVisibility Parms{};

	Parms.NewVisibility = NewVisibility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.QuestEditorBase.OpenSelectedAssets
// (Final, Native, Public, BlueprintCallable, Const)

void UQuestEditorBase::OpenSelectedAssets() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestEditorBase", "OpenSelectedAssets");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.QuestEditorButton.SetText
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FText                             InText                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UQuestEditorButton::SetText(const class FText& InText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestEditorButton", "SetText");

	Params::QuestEditorButton_SetText Parms{};

	Parms.InText = std::move(InText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.QuestEditorButton.GetText
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FText                       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const class FText UQuestEditorButton::GetText() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestEditorButton", "GetText");

	Params::QuestEditorButton_GetText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.QuestTabButton.RemoveQuestAssetTab
// (Final, Native, Public, BlueprintCallable)

void UQuestTabButton::RemoveQuestAssetTab()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestTabButton", "RemoveQuestAssetTab");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.FortAssetDataUtilityToolArrayModifier.RunArrayModifier
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// TArray<struct FAssetData>               InOutAssetDataArray                                    (Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UFortAssetDataUtilityToolArrayModifier::RunArrayModifier(TArray<struct FAssetData>& InOutAssetDataArray) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAssetDataUtilityToolArrayModifier", "RunArrayModifier");

	Params::FortAssetDataUtilityToolArrayModifier_RunArrayModifier Parms{};

	Parms.InOutAssetDataArray = std::move(InOutAssetDataArray);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	InOutAssetDataArray = std::move(Parms.InOutAssetDataArray);
}


// Function FortniteEditor.FortAssetDataUtilityTool.RunActionsOnAssets
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable, Const)
// Parameters:
// TArray<struct FAssetData>               AssetsToRunActions                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortAssetDataUtilityTool::RunActionsOnAssets(const TArray<struct FAssetData>& AssetsToRunActions) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAssetDataUtilityTool", "RunActionsOnAssets");

	Params::FortAssetDataUtilityTool_RunActionsOnAssets Parms{};

	Parms.AssetsToRunActions = std::move(AssetsToRunActions);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortAssetDataUtilityTool.RunFiltersAndPostFilterModifiers
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable, Const)
// Parameters:
// TArray<struct FAssetData>               AssetsToFilter                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<struct FAssetData>               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FAssetData> UFortAssetDataUtilityTool::RunFiltersAndPostFilterModifiers(const TArray<struct FAssetData>& AssetsToFilter) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAssetDataUtilityTool", "RunFiltersAndPostFilterModifiers");

	Params::FortAssetDataUtilityTool_RunFiltersAndPostFilterModifiers Parms{};

	Parms.AssetsToFilter = std::move(AssetsToFilter);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortAssetDataUtilityTool.RunFiltersOnAssets
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable, Const)
// Parameters:
// TArray<struct FAssetData>               AssetsToFilter                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<struct FAssetData>               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FAssetData> UFortAssetDataUtilityTool::RunFiltersOnAssets(const TArray<struct FAssetData>& AssetsToFilter) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAssetDataUtilityTool", "RunFiltersOnAssets");

	Params::FortAssetDataUtilityTool_RunFiltersOnAssets Parms{};

	Parms.AssetsToFilter = std::move(AssetsToFilter);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortAssetDataUtilityTool.RunGatherers
// (Final, RequiredAPI, Native, Public, BlueprintCallable, Const)
// Parameters:
// TArray<struct FAssetData>               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FAssetData> UFortAssetDataUtilityTool::RunGatherers() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAssetDataUtilityTool", "RunGatherers");

	Params::FortAssetDataUtilityTool_RunGatherers Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortAssetDataUtilityTool.RunGatherersAndPostGatherModifiers
// (Final, RequiredAPI, Native, Public, BlueprintCallable, Const)
// Parameters:
// TArray<struct FAssetData>               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FAssetData> UFortAssetDataUtilityTool::RunGatherersAndPostGatherModifiers() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAssetDataUtilityTool", "RunGatherersAndPostGatherModifiers");

	Params::FortAssetDataUtilityTool_RunGatherersAndPostGatherModifiers Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortAssetDataUtilityTool.RunPostFilterModifiers
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable, Const)
// Parameters:
// TArray<struct FAssetData>               InOutArrayToModify                                     (Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UFortAssetDataUtilityTool::RunPostFilterModifiers(TArray<struct FAssetData>& InOutArrayToModify) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAssetDataUtilityTool", "RunPostFilterModifiers");

	Params::FortAssetDataUtilityTool_RunPostFilterModifiers Parms{};

	Parms.InOutArrayToModify = std::move(InOutArrayToModify);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	InOutArrayToModify = std::move(Parms.InOutArrayToModify);
}


// Function FortniteEditor.FortAssetDataUtilityTool.RunPostGatherModifiers
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable, Const)
// Parameters:
// TArray<struct FAssetData>               InOutArrayToModify                                     (Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UFortAssetDataUtilityTool::RunPostGatherModifiers(TArray<struct FAssetData>& InOutArrayToModify) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAssetDataUtilityTool", "RunPostGatherModifiers");

	Params::FortAssetDataUtilityTool_RunPostGatherModifiers Parms{};

	Parms.InOutArrayToModify = std::move(InOutArrayToModify);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	InOutArrayToModify = std::move(Parms.InOutArrayToModify);
}


// Function FortniteEditor.FortAssetDataUtilityTool.RunTool
// (Final, RequiredAPI, Native, Public, BlueprintCallable, Const)

void UFortAssetDataUtilityTool::RunTool() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAssetDataUtilityTool", "RunTool");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.FortAssetDataUtilityToolEditorWidget.MakeTempToolAssetDataToModify
// (Final, Native, Public, BlueprintCallable)

void UFortAssetDataUtilityToolEditorWidget::MakeTempToolAssetDataToModify()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAssetDataUtilityToolEditorWidget", "MakeTempToolAssetDataToModify");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.FortAssetDataUtilityToolEditorWidget.RunActionsOnAssets
// (Final, Native, Public, HasOutParams, BlueprintCallable, Const)
// Parameters:
// TArray<struct FAssetData>               AssetsToRunActions                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UFortAssetDataUtilityToolEditorWidget::RunActionsOnAssets(const TArray<struct FAssetData>& AssetsToRunActions) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAssetDataUtilityToolEditorWidget", "RunActionsOnAssets");

	Params::FortAssetDataUtilityToolEditorWidget_RunActionsOnAssets Parms{};

	Parms.AssetsToRunActions = std::move(AssetsToRunActions);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.FortAssetDataUtilityToolEditorWidget.RunFiltersOnAssets
// (Final, Native, Public, HasOutParams, BlueprintCallable, Const)
// Parameters:
// TArray<struct FAssetData>               AssetsToFilter                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<struct FAssetData>               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FAssetData> UFortAssetDataUtilityToolEditorWidget::RunFiltersOnAssets(const TArray<struct FAssetData>& AssetsToFilter) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAssetDataUtilityToolEditorWidget", "RunFiltersOnAssets");

	Params::FortAssetDataUtilityToolEditorWidget_RunFiltersOnAssets Parms{};

	Parms.AssetsToFilter = std::move(AssetsToFilter);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortAssetDataUtilityToolBlueprintLibrary.GetClassToolTipText
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UClass*                           ClassToGetToolTip                                      (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UFortAssetDataUtilityToolBlueprintLibrary::GetClassToolTipText(const class UClass* ClassToGetToolTip)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortAssetDataUtilityToolBlueprintLibrary", "GetClassToolTipText");

	Params::FortAssetDataUtilityToolBlueprintLibrary_GetClassToolTipText Parms{};

	Parms.ClassToGetToolTip = ClassToGetToolTip;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortAssetDataUtilityToolGatherer_Collection.GetAllCollectionNames
// (Final, Native, Static, Public)
// Parameters:
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FName> UFortAssetDataUtilityToolGatherer_Collection::GetAllCollectionNames()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortAssetDataUtilityToolGatherer_Collection", "GetAllCollectionNames");

	Params::FortAssetDataUtilityToolGatherer_Collection_GetAllCollectionNames Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortAssetDataUtilityToolAction_AddToLocalCollection.GetLocalCollectionNames
// (Final, Native, Static, Public)
// Parameters:
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FName> UFortAssetDataUtilityToolAction_AddToLocalCollection::GetLocalCollectionNames()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortAssetDataUtilityToolAction_AddToLocalCollection", "GetLocalCollectionNames");

	Params::FortAssetDataUtilityToolAction_AddToLocalCollection_GetLocalCollectionNames Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortniteEditorLibrary.AddNewGameplayTagToINI
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           NewTag                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Comment                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             TagSourceName                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsRestrictedTag                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAllowNonRestrictedChildren                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortniteEditorLibrary::AddNewGameplayTagToINI(const class FString& NewTag, const class FString& Comment, class FName TagSourceName, bool bIsRestrictedTag, bool bAllowNonRestrictedChildren)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortniteEditorLibrary", "AddNewGameplayTagToINI");

	Params::FortniteEditorLibrary_AddNewGameplayTagToINI Parms{};

	Parms.NewTag = std::move(NewTag);
	Parms.Comment = std::move(Comment);
	Parms.TagSourceName = TagSourceName;
	Parms.bIsRestrictedTag = bIsRestrictedTag;
	Parms.bAllowNonRestrictedChildren = bAllowNonRestrictedChildren;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortniteEditorLibrary.AddTag
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGameplayTagContainer            Container                                              (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FGameplayTag                     GameplayTag                                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortniteEditorLibrary::AddTag(struct FGameplayTagContainer& Container, const struct FGameplayTag& GameplayTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortniteEditorLibrary", "AddTag");

	Params::FortniteEditorLibrary_AddTag Parms{};

	Parms.Container = std::move(Container);
	Parms.GameplayTag = std::move(GameplayTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Container = std::move(Parms.Container);
}


// Function FortniteEditor.FortniteEditorLibrary.CalculateEditorOnlyPropertiesSize
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ClassPath                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UFortniteEditorLibrary::CalculateEditorOnlyPropertiesSize(const class FString& ClassPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortniteEditorLibrary", "CalculateEditorOnlyPropertiesSize");

	Params::FortniteEditorLibrary_CalculateEditorOnlyPropertiesSize Parms{};

	Parms.ClassPath = std::move(ClassPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortniteEditorLibrary.ChangeTargetSkeleton
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAnimBlueprint*                   AnimBlueprint                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USkeleton*                        TargetSkeleton                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortniteEditorLibrary::ChangeTargetSkeleton(class UAnimBlueprint* AnimBlueprint, class USkeleton* TargetSkeleton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortniteEditorLibrary", "ChangeTargetSkeleton");

	Params::FortniteEditorLibrary_ChangeTargetSkeleton Parms{};

	Parms.AnimBlueprint = AnimBlueprint;
	Parms.TargetSkeleton = TargetSkeleton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.FortniteEditorLibrary.CompareStrings
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           LeftStr                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           RightStr                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UFortniteEditorLibrary::CompareStrings(const class FString& LeftStr, const class FString& RightStr)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortniteEditorLibrary", "CompareStrings");

	Params::FortniteEditorLibrary_CompareStrings Parms{};

	Parms.LeftStr = std::move(LeftStr);
	Parms.RightStr = std::move(RightStr);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortniteEditorLibrary.CreateClassPropertyReport
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           BaseClassPath                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FClassPropertyReportConfig       Config                                                 (ConstParm, Parm, NativeAccessSpecifierPublic)
// bool                                    bValid                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FClassPropertyReportData         ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FClassPropertyReportData UFortniteEditorLibrary::CreateClassPropertyReport(const class FString& BaseClassPath, const struct FClassPropertyReportConfig& Config, bool* bValid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortniteEditorLibrary", "CreateClassPropertyReport");

	Params::FortniteEditorLibrary_CreateClassPropertyReport Parms{};

	Parms.BaseClassPath = std::move(BaseClassPath);
	Parms.Config = std::move(Config);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bValid != nullptr)
		*bValid = Parms.bValid;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortniteEditorLibrary.CreateClassSizeReport
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           BaseClassPath                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FClassSizeReportConfig           Config                                                 (ConstParm, Parm, NativeAccessSpecifierPublic)
// bool                                    bValid                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FClassSizeReportData             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FClassSizeReportData UFortniteEditorLibrary::CreateClassSizeReport(const class FString& BaseClassPath, const struct FClassSizeReportConfig& Config, bool* bValid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortniteEditorLibrary", "CreateClassSizeReport");

	Params::FortniteEditorLibrary_CreateClassSizeReport Parms{};

	Parms.BaseClassPath = std::move(BaseClassPath);
	Parms.Config = std::move(Config);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bValid != nullptr)
		*bValid = Parms.bValid;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortniteEditorLibrary.CreateNewAnimBlueprint
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USkeletalMesh*                    SkeletalMesh                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimBlueprint*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAnimBlueprint* UFortniteEditorLibrary::CreateNewAnimBlueprint(class USkeletalMesh* SkeletalMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortniteEditorLibrary", "CreateNewAnimBlueprint");

	Params::FortniteEditorLibrary_CreateNewAnimBlueprint Parms{};

	Parms.SkeletalMesh = SkeletalMesh;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortniteEditorLibrary.CreateSocket
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class USkeleton*                        Skeleton                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             JointParent                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       Offset                                                 (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SocketName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USkeletalMeshSocket*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USkeletalMeshSocket* UFortniteEditorLibrary::CreateSocket(class USkeleton* Skeleton, class FName JointParent, const struct FTransform& Offset, class FName SocketName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortniteEditorLibrary", "CreateSocket");

	Params::FortniteEditorLibrary_CreateSocket Parms{};

	Parms.Skeleton = Skeleton;
	Parms.JointParent = JointParent;
	Parms.Offset = std::move(Offset);
	Parms.SocketName = SocketName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortniteEditorLibrary.DuplicateAndRetarget
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UAnimBlueprint*                   AnimBlueprint                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USkeleton*                        NewSkeleton                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          NewAnimBlueprint                                       (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UObject*>                  DuplicatedAssets                                       (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    bRetargetReferredAssets                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bConvertSpace                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortniteEditorLibrary::DuplicateAndRetarget(class UAnimBlueprint* AnimBlueprint, class USkeleton* NewSkeleton, class UObject** NewAnimBlueprint, TArray<class UObject*>* DuplicatedAssets, bool bRetargetReferredAssets, bool bConvertSpace)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortniteEditorLibrary", "DuplicateAndRetarget");

	Params::FortniteEditorLibrary_DuplicateAndRetarget Parms{};

	Parms.AnimBlueprint = AnimBlueprint;
	Parms.NewSkeleton = NewSkeleton;
	Parms.bRetargetReferredAssets = bRetargetReferredAssets;
	Parms.bConvertSpace = bConvertSpace;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (NewAnimBlueprint != nullptr)
		*NewAnimBlueprint = Parms.NewAnimBlueprint;

	if (DuplicatedAssets != nullptr)
		*DuplicatedAssets = std::move(Parms.DuplicatedAssets);

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortniteEditorLibrary.FindActorsUsingDetailModeInCurrentWorld
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EDetailMode                             DetailMode                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bOverridesOnly                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FFortActorUsingDetailMode>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FFortActorUsingDetailMode> UFortniteEditorLibrary::FindActorsUsingDetailModeInCurrentWorld(const EDetailMode DetailMode, const bool bOverridesOnly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortniteEditorLibrary", "FindActorsUsingDetailModeInCurrentWorld");

	Params::FortniteEditorLibrary_FindActorsUsingDetailModeInCurrentWorld Parms{};

	Parms.DetailMode = DetailMode;
	Parms.bOverridesOnly = bOverridesOnly;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortniteEditorLibrary.FindActorsUsingDetailModeInWorld
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UWorld*                           World                                                  (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EDetailMode                             DetailMode                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bOverridesOnly                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FFortActorUsingDetailMode>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FFortActorUsingDetailMode> UFortniteEditorLibrary::FindActorsUsingDetailModeInWorld(const class UWorld* World, const EDetailMode DetailMode, const bool bOverridesOnly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortniteEditorLibrary", "FindActorsUsingDetailModeInWorld");

	Params::FortniteEditorLibrary_FindActorsUsingDetailModeInWorld Parms{};

	Parms.World = World;
	Parms.DetailMode = DetailMode;
	Parms.bOverridesOnly = bOverridesOnly;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortniteEditorLibrary.GeneratedClass
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UBlueprint*                       BlueprintObj                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UClass*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UClass* UFortniteEditorLibrary::GeneratedClass(class UBlueprint* BlueprintObj)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortniteEditorLibrary", "GeneratedClass");

	Params::FortniteEditorLibrary_GeneratedClass Parms{};

	Parms.BlueprintObj = BlueprintObj;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortniteEditorLibrary.GetAllPluginDependantRootCatalogOffersAndFulfillments
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TMap<class FString, class FString>      ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

TMap<class FString, class FString> UFortniteEditorLibrary::GetAllPluginDependantRootCatalogOffersAndFulfillments()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortniteEditorLibrary", "GetAllPluginDependantRootCatalogOffersAndFulfillments");

	Params::FortniteEditorLibrary_GetAllPluginDependantRootCatalogOffersAndFulfillments Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortniteEditorLibrary.GetAnimBlueprintGeneratedClass
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAnimBlueprint*                   AnimBlueprint                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UClass*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UClass* UFortniteEditorLibrary::GetAnimBlueprintGeneratedClass(class UAnimBlueprint* AnimBlueprint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortniteEditorLibrary", "GetAnimBlueprintGeneratedClass");

	Params::FortniteEditorLibrary_GetAnimBlueprintGeneratedClass Parms{};

	Parms.AnimBlueprint = AnimBlueprint;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortniteEditorLibrary.GetClassDefaultObject
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UClass*                           Class_0                                                (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UObject*                    ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UObject* UFortniteEditorLibrary::GetClassDefaultObject(const class UClass* Class_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortniteEditorLibrary", "GetClassDefaultObject");

	Params::FortniteEditorLibrary_GetClassDefaultObject Parms{};

	Parms.Class_0 = Class_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortniteEditorLibrary.GetClassDefaultObjectFromPath
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ClassAssetPath                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UObject*                    ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UObject* UFortniteEditorLibrary::GetClassDefaultObjectFromPath(const class FString& ClassAssetPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortniteEditorLibrary", "GetClassDefaultObjectFromPath");

	Params::FortniteEditorLibrary_GetClassDefaultObjectFromPath Parms{};

	Parms.ClassAssetPath = std::move(ClassAssetPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortniteEditorLibrary.MovePluginDependantOffersAndFulfillmentsToPlugins
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TMap<class FString, class FString>      PluginDependencies                                     (Parm, NativeAccessSpecifierPublic)

void UFortniteEditorLibrary::MovePluginDependantOffersAndFulfillmentsToPlugins(const TMap<class FString, class FString>& PluginDependencies)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortniteEditorLibrary", "MovePluginDependantOffersAndFulfillmentsToPlugins");

	Params::FortniteEditorLibrary_MovePluginDependantOffersAndFulfillmentsToPlugins Parms{};

	Parms.PluginDependencies = std::move(PluginDependencies);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.FortniteEditorLibrary.OutputClassPropertyReport
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FClassPropertyReportData         InData                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UFortniteEditorLibrary::OutputClassPropertyReport(const struct FClassPropertyReportData& InData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortniteEditorLibrary", "OutputClassPropertyReport");

	Params::FortniteEditorLibrary_OutputClassPropertyReport Parms{};

	Parms.InData = std::move(InData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.FortniteEditorLibrary.OutputClassSizeReport
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FClassSizeReportData             InData                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UFortniteEditorLibrary::OutputClassSizeReport(const struct FClassSizeReportData& InData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortniteEditorLibrary", "OutputClassSizeReport");

	Params::FortniteEditorLibrary_OutputClassSizeReport Parms{};

	Parms.InData = std::move(InData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.FortniteEditorLibrary.ParentClass
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UBlueprint*                       BlueprintObj                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UClass*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UClass* UFortniteEditorLibrary::ParentClass(class UBlueprint* BlueprintObj)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortniteEditorLibrary", "ParentClass");

	Params::FortniteEditorLibrary_ParentClass Parms{};

	Parms.BlueprintObj = BlueprintObj;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortniteEditorLibrary.Reparent
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UBlueprint*                       BlueprintObj                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UClass*                           NewParentClass                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bForce                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortniteEditorLibrary::Reparent(class UBlueprint* BlueprintObj, class UClass* NewParentClass, bool bForce)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortniteEditorLibrary", "Reparent");

	Params::FortniteEditorLibrary_Reparent Parms{};

	Parms.BlueprintObj = BlueprintObj;
	Parms.NewParentClass = NewParentClass;
	Parms.bForce = bForce;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortniteEditorLibrary.RequestGameplayTag
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGameplayTag                     OutTag                                                 (Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           TagName                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bErrorIfNotFound                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortniteEditorLibrary::RequestGameplayTag(struct FGameplayTag* OutTag, const class FString& TagName, bool bErrorIfNotFound)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortniteEditorLibrary", "RequestGameplayTag");

	Params::FortniteEditorLibrary_RequestGameplayTag Parms{};

	Parms.TagName = std::move(TagName);
	Parms.bErrorIfNotFound = bErrorIfNotFound;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutTag != nullptr)
		*OutTag = std::move(Parms.OutTag);

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortniteEditorLibrary.RequestGameplayTagChildren
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGameplayTag                     Parent                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTagContainer            ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGameplayTagContainer UFortniteEditorLibrary::RequestGameplayTagChildren(const struct FGameplayTag& Parent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortniteEditorLibrary", "RequestGameplayTagChildren");

	Params::FortniteEditorLibrary_RequestGameplayTagChildren Parms{};

	Parms.Parent = std::move(Parent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortniteEditorLibrary.RunCustomFilterForFindClassUsages
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Object                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortniteEditorLibrary::RunCustomFilterForFindClassUsages(const class UObject* Object)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortniteEditorLibrary", "RunCustomFilterForFindClassUsages");

	Params::FortniteEditorLibrary_RunCustomFilterForFindClassUsages Parms{};

	Parms.Object = Object;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortniteEditorLibrary.SetDeveloperSettingPlaylist
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TSoftObjectPtr<class UFortPlaylistAthena>Playlist                                               (ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortniteEditorLibrary::SetDeveloperSettingPlaylist(const TSoftObjectPtr<class UFortPlaylistAthena> Playlist)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortniteEditorLibrary", "SetDeveloperSettingPlaylist");

	Params::FortniteEditorLibrary_SetDeveloperSettingPlaylist Parms{};

	Parms.Playlist = Playlist;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.FortniteEditorLibrary.SetDeveloperSettingPlaylistConditionalFlags
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TArray<class FString>                   PlaylistConditionalFlags                               (ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)

void UFortniteEditorLibrary::SetDeveloperSettingPlaylistConditionalFlags(const TArray<class FString>& PlaylistConditionalFlags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortniteEditorLibrary", "SetDeveloperSettingPlaylistConditionalFlags");

	Params::FortniteEditorLibrary_SetDeveloperSettingPlaylistConditionalFlags Parms{};

	Parms.PlaylistConditionalFlags = std::move(PlaylistConditionalFlags);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.FortniteEditorLibrary.SetDeveloperSettingPlaylistOptions
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TMap<class FString, class FString>      PlaylistOptions                                        (ConstParm, Parm, NativeAccessSpecifierPublic)

void UFortniteEditorLibrary::SetDeveloperSettingPlaylistOptions(const TMap<class FString, class FString>& PlaylistOptions)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortniteEditorLibrary", "SetDeveloperSettingPlaylistOptions");

	Params::FortniteEditorLibrary_SetDeveloperSettingPlaylistOptions Parms{};

	Parms.PlaylistOptions = std::move(PlaylistOptions);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.FortniteEditorLibrary.SetPreviewMesh
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAnimBlueprint*                   AnimBlueprint                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USkeletalMesh*                    TargetPreviewSkeletalMesh                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortniteEditorLibrary::SetPreviewMesh(class UAnimBlueprint* AnimBlueprint, class USkeletalMesh* TargetPreviewSkeletalMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortniteEditorLibrary", "SetPreviewMesh");

	Params::FortniteEditorLibrary_SetPreviewMesh Parms{};

	Parms.AnimBlueprint = AnimBlueprint;
	Parms.TargetPreviewSkeletalMesh = TargetPreviewSkeletalMesh;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.FortniteEditorLibrary.SortStringArray
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FString>                   InStrings                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<class FString>                   OutSortedStrings                                       (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UFortniteEditorLibrary::SortStringArray(const TArray<class FString>& InStrings, TArray<class FString>* OutSortedStrings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortniteEditorLibrary", "SortStringArray");

	Params::FortniteEditorLibrary_SortStringArray Parms{};

	Parms.InStrings = std::move(InStrings);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutSortedStrings != nullptr)
		*OutSortedStrings = std::move(Parms.OutSortedStrings);
}


// Function FortniteEditor.FortniteEditorLibrary.SortStringArrayWithPredicate
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FString>                   InStrings                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(const class FString& LeftStr, const class FString& RightStr)>Predicate                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>                   OutSortedStrings                                       (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UFortniteEditorLibrary::SortStringArrayWithPredicate(const TArray<class FString>& InStrings, const TDelegate<void(const class FString& LeftStr, const class FString& RightStr)>& Predicate, TArray<class FString>* OutSortedStrings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortniteEditorLibrary", "SortStringArrayWithPredicate");

	Params::FortniteEditorLibrary_SortStringArrayWithPredicate Parms{};

	Parms.InStrings = std::move(InStrings);
	Parms.Predicate = Predicate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutSortedStrings != nullptr)
		*OutSortedStrings = std::move(Parms.OutSortedStrings);
}


// Function FortniteEditor.FortniteEditorLibrary.UpdateClassPropertyReport
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FClassPropertyReportData         InData                                                 (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           AssetPath                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortniteEditorLibrary::UpdateClassPropertyReport(struct FClassPropertyReportData& InData, const class FString& AssetPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortniteEditorLibrary", "UpdateClassPropertyReport");

	Params::FortniteEditorLibrary_UpdateClassPropertyReport Parms{};

	Parms.InData = std::move(InData);
	Parms.AssetPath = std::move(AssetPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	InData = std::move(Parms.InData);
}


// Function FortniteEditor.FortniteEditorLibrary.UpdateClassSizeReport
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FClassSizeReportData             InData                                                 (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           AssetPath                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortniteEditorLibrary::UpdateClassSizeReport(struct FClassSizeReportData& InData, const class FString& AssetPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortniteEditorLibrary", "UpdateClassSizeReport");

	Params::FortniteEditorLibrary_UpdateClassSizeReport Parms{};

	Parms.InData = std::move(InData);
	Parms.AssetPath = std::move(AssetPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	InData = std::move(Parms.InData);
}


// Function FortniteEditor.TechArtEditorHelpers.QuerryIfSkeletonTexturesAreAtHighestQuality
// (Final, Native, Static, Public, BlueprintCallable, EditorOnly)
// Parameters:
// class USkeletalMeshComponent*           SkeletalMeshPart                                       (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTechArtEditorHelpers::QuerryIfSkeletonTexturesAreAtHighestQuality(class USkeletalMeshComponent* SkeletalMeshPart)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TechArtEditorHelpers", "QuerryIfSkeletonTexturesAreAtHighestQuality");

	Params::TechArtEditorHelpers_QuerryIfSkeletonTexturesAreAtHighestQuality Parms{};

	Parms.SkeletalMeshPart = SkeletalMeshPart;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.TechArtEditorHelpers.TagSkeletonTexturesForHighestQuality
// (Final, Native, Static, Public, BlueprintCallable, EditorOnly)
// Parameters:
// class USkeletalMeshComponent*           SkeletalMeshPart                                       (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTechArtEditorHelpers::TagSkeletonTexturesForHighestQuality(class USkeletalMeshComponent* SkeletalMeshPart)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TechArtEditorHelpers", "TagSkeletonTexturesForHighestQuality");

	Params::TechArtEditorHelpers_TagSkeletonTexturesForHighestQuality Parms{};

	Parms.SkeletalMeshPart = SkeletalMeshPart;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.FortHotfixToolAssetEntry.GenerateOptionForRevision
// (Final, Native, Private)
// Parameters:
// class FString                           Option                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWidget*                          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWidget* UFortHotfixToolAssetEntry::GenerateOptionForRevision(const class FString& Option)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortHotfixToolAssetEntry", "GenerateOptionForRevision");

	Params::FortHotfixToolAssetEntry_GenerateOptionForRevision Parms{};

	Parms.Option = std::move(Option);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortHotfixToolAssetEntry.InitHotfixAssetEntry
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Asset                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortHotfixToolAssetEntry::InitHotfixAssetEntry(class UObject* Asset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortHotfixToolAssetEntry", "InitHotfixAssetEntry");

	Params::FortHotfixToolAssetEntry_InitHotfixAssetEntry Parms{};

	Parms.Asset = Asset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.FortHotfixToolAssetEntry.OnHotfixChangeFound
// (Event, Public, BlueprintEvent)
// Parameters:
// class FString                           RowName                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ColumnName                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           OldValue                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           NewValue                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortHotfixToolAssetEntry::OnHotfixChangeFound(const class FString& RowName, const class FString& ColumnName, const class FString& OldValue, const class FString& NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortHotfixToolAssetEntry", "OnHotfixChangeFound");

	Params::FortHotfixToolAssetEntry_OnHotfixChangeFound Parms{};

	Parms.RowName = std::move(RowName);
	Parms.ColumnName = std::move(ColumnName);
	Parms.OldValue = std::move(OldValue);
	Parms.NewValue = std::move(NewValue);

	UObject::ProcessEvent(Func, &Parms);
}


// Function FortniteEditor.FortHotfixToolAssetEntry.UpdateHotfixTypeForAsset
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Asset                                                  (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           HotfixType                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortHotfixToolAssetEntry::UpdateHotfixTypeForAsset(const class UObject* Asset, const class FString& HotfixType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortHotfixToolAssetEntry", "UpdateHotfixTypeForAsset");

	Params::FortHotfixToolAssetEntry_UpdateHotfixTypeForAsset Parms{};

	Parms.Asset = Asset;
	Parms.HotfixType = std::move(HotfixType);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.FortEditorTool_MakeAthenaDance.MakeEmoteItemDefinition
// (Final, Native, Public)

void UFortEditorTool_MakeAthenaDance::MakeEmoteItemDefinition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEditorTool_MakeAthenaDance", "MakeEmoteItemDefinition");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.MinimapCaptureRequirements.SetupCaptureRequest
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FMinimapCaptureRequest           Request                                                (Parm, NativeAccessSpecifierPublic)

void UMinimapCaptureRequirements::SetupCaptureRequest(const struct FMinimapCaptureRequest& Request)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MinimapCaptureRequirements", "SetupCaptureRequest");

	Params::MinimapCaptureRequirements_SetupCaptureRequest Parms{};

	Parms.Request = std::move(Request);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.FortBulkFindAndReplaceUtilityWidget.ApplyFindAndReplacePreview
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FFortBulkFindAndReplaceResultForAsset>PreviewToApply                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<struct FFortBulkFindAndReplaceResultForAsset>OutFinalResults                                        (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    bSkipPropertiesThatChanged                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSave                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortBulkFindAndReplaceUtilityWidget::ApplyFindAndReplacePreview(const TArray<struct FFortBulkFindAndReplaceResultForAsset>& PreviewToApply, TArray<struct FFortBulkFindAndReplaceResultForAsset>* OutFinalResults, bool bSkipPropertiesThatChanged, bool bSave)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortBulkFindAndReplaceUtilityWidget", "ApplyFindAndReplacePreview");

	Params::FortBulkFindAndReplaceUtilityWidget_ApplyFindAndReplacePreview Parms{};

	Parms.PreviewToApply = std::move(PreviewToApply);
	Parms.bSkipPropertiesThatChanged = bSkipPropertiesThatChanged;
	Parms.bSave = bSave;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutFinalResults != nullptr)
		*OutFinalResults = std::move(Parms.OutFinalResults);
}


// Function FortniteEditor.FortBulkFindAndReplaceUtilityWidget.GetAssetsMatchingFilter
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FFortBulkFindAndReplaceAssetFilterFilter                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<struct FAssetData>               OutAssetsMatchingFilter                                (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    bLoadAssets                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortBulkFindAndReplaceUtilityWidget::GetAssetsMatchingFilter(const struct FFortBulkFindAndReplaceAssetFilter& Filter, TArray<struct FAssetData>* OutAssetsMatchingFilter, bool bLoadAssets)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortBulkFindAndReplaceUtilityWidget", "GetAssetsMatchingFilter");

	Params::FortBulkFindAndReplaceUtilityWidget_GetAssetsMatchingFilter Parms{};

	Parms.Filter = std::move(Filter);
	Parms.bLoadAssets = bLoadAssets;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutAssetsMatchingFilter != nullptr)
		*OutAssetsMatchingFilter = std::move(Parms.OutAssetsMatchingFilter);
}


// Function FortniteEditor.FortBulkFindAndReplaceUtilityWidget.MakeFindResultsEditable
// (Final, Native, Static, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FFortBulkFindAndReplaceResultForAsset>FindResults                                            (Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UFortBulkFindAndReplaceUtilityWidget::MakeFindResultsEditable(TArray<struct FFortBulkFindAndReplaceResultForAsset>& FindResults)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortBulkFindAndReplaceUtilityWidget", "MakeFindResultsEditable");

	Params::FortBulkFindAndReplaceUtilityWidget_MakeFindResultsEditable Parms{};

	Parms.FindResults = std::move(FindResults);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	FindResults = std::move(Parms.FindResults);
}


// Function FortniteEditor.FortBulkFindAndReplaceUtilityWidget.PreviewFindAndReplace
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FFortBulkFindAndReplaceAssetFilterAssetsFilter                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FFortBulkFindAndReplaceSearchTermsSearchTerms                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<struct FFortBulkFindAndReplaceResultForAsset>OutResults                                             (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    bSortResultsByPath                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortBulkFindAndReplaceUtilityWidget::PreviewFindAndReplace(const struct FFortBulkFindAndReplaceAssetFilter& AssetsFilter, const struct FFortBulkFindAndReplaceSearchTerms& SearchTerms, TArray<struct FFortBulkFindAndReplaceResultForAsset>* OutResults, bool bSortResultsByPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortBulkFindAndReplaceUtilityWidget", "PreviewFindAndReplace");

	Params::FortBulkFindAndReplaceUtilityWidget_PreviewFindAndReplace Parms{};

	Parms.AssetsFilter = std::move(AssetsFilter);
	Parms.SearchTerms = std::move(SearchTerms);
	Parms.bSortResultsByPath = bSortResultsByPath;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutResults != nullptr)
		*OutResults = std::move(Parms.OutResults);
}


// Function FortniteEditor.FortItemQuantityPairUtilityLibrary.GetEditorOnlyItemDefinition
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FFortHiddenRewardQuantityPair    HiddenReward                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TSoftObjectPtr<class UFortItemDefinition>ReturnValue                                            (Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSoftObjectPtr<class UFortItemDefinition> UFortItemQuantityPairUtilityLibrary::GetEditorOnlyItemDefinition(const struct FFortHiddenRewardQuantityPair& HiddenReward)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortItemQuantityPairUtilityLibrary", "GetEditorOnlyItemDefinition");

	Params::FortItemQuantityPairUtilityLibrary_GetEditorOnlyItemDefinition Parms{};

	Parms.HiddenReward = std::move(HiddenReward);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortItemQuantityPairUtilityLibrary.MakeFortHiddenRewardQuantityPairFromItemDefinition
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TSoftObjectPtr<class UFortItemDefinition>ItemDefinitionToGrant                                  (ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   QuantityToGrant                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFortHiddenRewardQuantityPair    ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FFortHiddenRewardQuantityPair UFortItemQuantityPairUtilityLibrary::MakeFortHiddenRewardQuantityPairFromItemDefinition(const TSoftObjectPtr<class UFortItemDefinition> ItemDefinitionToGrant, const int32 QuantityToGrant)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortItemQuantityPairUtilityLibrary", "MakeFortHiddenRewardQuantityPairFromItemDefinition");

	Params::FortItemQuantityPairUtilityLibrary_MakeFortHiddenRewardQuantityPairFromItemDefinition Parms{};

	Parms.ItemDefinitionToGrant = ItemDefinitionToGrant;
	Parms.QuantityToGrant = QuantityToGrant;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortItemQuantityPairUtilityLibrary.SetEditorOnlyItemDefinition
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FFortHiddenRewardQuantityPair    HiddenReward                                           (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TSoftObjectPtr<class UFortItemDefinition>ItemDefinitionToGrant                                  (ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortItemQuantityPairUtilityLibrary::SetEditorOnlyItemDefinition(struct FFortHiddenRewardQuantityPair& HiddenReward, const TSoftObjectPtr<class UFortItemDefinition> ItemDefinitionToGrant)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortItemQuantityPairUtilityLibrary", "SetEditorOnlyItemDefinition");

	Params::FortItemQuantityPairUtilityLibrary_SetEditorOnlyItemDefinition Parms{};

	Parms.HiddenReward = std::move(HiddenReward);
	Parms.ItemDefinitionToGrant = ItemDefinitionToGrant;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	HiddenReward = std::move(Parms.HiddenReward);
}


// Function FortniteEditor.FortItemQuantityPairUtilityLibrary.UsesEditorOnlyItemDefinition
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FFortHiddenRewardQuantityPair    HiddenReward                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortItemQuantityPairUtilityLibrary::UsesEditorOnlyItemDefinition(const struct FFortHiddenRewardQuantityPair& HiddenReward)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortItemQuantityPairUtilityLibrary", "UsesEditorOnlyItemDefinition");

	Params::FortItemQuantityPairUtilityLibrary_UsesEditorOnlyItemDefinition Parms{};

	Parms.HiddenReward = std::move(HiddenReward);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortQuestToolDetailsView.RebuildDetailsViewPanel
// (Final, Native, Public, BlueprintCallable)

void UFortQuestToolDetailsView::RebuildDetailsViewPanel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortQuestToolDetailsView", "RebuildDetailsViewPanel");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.FortQuestToolDetailsView.SetObjectiveIndexToShow
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InObjectiveIndexToShow                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortQuestToolDetailsView::SetObjectiveIndexToShow(const int32 InObjectiveIndexToShow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortQuestToolDetailsView", "SetObjectiveIndexToShow");

	Params::FortQuestToolDetailsView_SetObjectiveIndexToShow Parms{};

	Parms.InObjectiveIndexToShow = InObjectiveIndexToShow;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.FortQuestToolDetailsView.SetObjectiveStatsIndexToShow
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InObjectiveIndexToShow                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InObjectiveStatsIndexToShow                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortQuestToolDetailsView::SetObjectiveStatsIndexToShow(const int32 InObjectiveIndexToShow, const int32 InObjectiveStatsIndexToShow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortQuestToolDetailsView", "SetObjectiveStatsIndexToShow");

	Params::FortQuestToolDetailsView_SetObjectiveStatsIndexToShow Parms{};

	Parms.InObjectiveIndexToShow = InObjectiveIndexToShow;
	Parms.InObjectiveStatsIndexToShow = InObjectiveStatsIndexToShow;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.FortQuestToolUtilityLibrary.AddEmptyObjectiveWithGeneratedBackendName
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UFortQuestItemDefinition*         Quest                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OutNewObjectiveIndex                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bCreateTransaction                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortQuestToolUtilityLibrary::AddEmptyObjectiveWithGeneratedBackendName(class UFortQuestItemDefinition* Quest, int32* OutNewObjectiveIndex, const bool bCreateTransaction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortQuestToolUtilityLibrary", "AddEmptyObjectiveWithGeneratedBackendName");

	Params::FortQuestToolUtilityLibrary_AddEmptyObjectiveWithGeneratedBackendName Parms{};

	Parms.Quest = Quest;
	Parms.bCreateTransaction = bCreateTransaction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutNewObjectiveIndex != nullptr)
		*OutNewObjectiveIndex = Parms.OutNewObjectiveIndex;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortQuestToolUtilityLibrary.AddMapForQuestTagToLocation
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             InMapName                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTopLevelAssetPath               RelativeTagToLocationDataTablePath                     (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortQuestToolUtilityLibrary::AddMapForQuestTagToLocation(const class FName& InMapName, const struct FTopLevelAssetPath& RelativeTagToLocationDataTablePath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortQuestToolUtilityLibrary", "AddMapForQuestTagToLocation");

	Params::FortQuestToolUtilityLibrary_AddMapForQuestTagToLocation Parms{};

	Parms.InMapName = InMapName;
	Parms.RelativeTagToLocationDataTablePath = std::move(RelativeTagToLocationDataTablePath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.FortQuestToolUtilityLibrary.AddQuestEntryToBundle
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UFortChallengeBundleItemDefinition*BundleDef                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFortChallengeBundleQuestEntry   QuestEntry                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortQuestToolUtilityLibrary::AddQuestEntryToBundle(class UFortChallengeBundleItemDefinition* BundleDef, const struct FFortChallengeBundleQuestEntry& QuestEntry)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortQuestToolUtilityLibrary", "AddQuestEntryToBundle");

	Params::FortQuestToolUtilityLibrary_AddQuestEntryToBundle Parms{};

	Parms.BundleDef = BundleDef;
	Parms.QuestEntry = std::move(QuestEntry);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortQuestToolUtilityLibrary.AddQuestItemObjectiveFilter
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UFortQuestItemDefinition*         Quest                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ObjectiveIdx                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInstancedStruct                 ObjectiveFilter                                        (ConstParm, Parm, NativeAccessSpecifierPublic)
// bool                                    bCreateTransaction                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortQuestToolUtilityLibrary::AddQuestItemObjectiveFilter(class UFortQuestItemDefinition* Quest, const int32 ObjectiveIdx, const struct FInstancedStruct& ObjectiveFilter, const bool bCreateTransaction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortQuestToolUtilityLibrary", "AddQuestItemObjectiveFilter");

	Params::FortQuestToolUtilityLibrary_AddQuestItemObjectiveFilter Parms{};

	Parms.Quest = Quest;
	Parms.ObjectiveIdx = ObjectiveIdx;
	Parms.ObjectiveFilter = std::move(ObjectiveFilter);
	Parms.bCreateTransaction = bCreateTransaction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortQuestToolUtilityLibrary.AddQuestMarkerLocationDataRow
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UDataTable*                       DataTable                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             RowName                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFortQuestTagToLocationDataRow   NewRowStruct                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UFortQuestToolUtilityLibrary::AddQuestMarkerLocationDataRow(class UDataTable* DataTable, const class FName& RowName, const struct FFortQuestTagToLocationDataRow& NewRowStruct)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortQuestToolUtilityLibrary", "AddQuestMarkerLocationDataRow");

	Params::FortQuestToolUtilityLibrary_AddQuestMarkerLocationDataRow Parms{};

	Parms.DataTable = DataTable;
	Parms.RowName = RowName;
	Parms.NewRowStruct = std::move(NewRowStruct);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.FortQuestToolUtilityLibrary.AddTagForQuestMapMarkerCollection
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGameplayTag                     InTagToAdd                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             InMapName                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortQuestToolUtilityLibrary::AddTagForQuestMapMarkerCollection(const struct FGameplayTag& InTagToAdd, const class FName& InMapName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortQuestToolUtilityLibrary", "AddTagForQuestMapMarkerCollection");

	Params::FortQuestToolUtilityLibrary_AddTagForQuestMapMarkerCollection Parms{};

	Parms.InTagToAdd = std::move(InTagToAdd);
	Parms.InMapName = InMapName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.FortQuestToolUtilityLibrary.AdvancedCopyPackagesToTargetPath
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FName>                     PackageNamesToCopy                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           TargetPath                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortQuestToolUtilityLibrary::AdvancedCopyPackagesToTargetPath(const TArray<class FName>& PackageNamesToCopy, const class FString& TargetPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortQuestToolUtilityLibrary", "AdvancedCopyPackagesToTargetPath");

	Params::FortQuestToolUtilityLibrary_AdvancedCopyPackagesToTargetPath Parms{};

	Parms.PackageNamesToCopy = std::move(PackageNamesToCopy);
	Parms.TargetPath = std::move(TargetPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.FortQuestToolUtilityLibrary.ClearBundleQuestEntries
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UFortChallengeBundleItemDefinition*BundleDef                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortQuestToolUtilityLibrary::ClearBundleQuestEntries(class UFortChallengeBundleItemDefinition* BundleDef)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortQuestToolUtilityLibrary", "ClearBundleQuestEntries");

	Params::FortQuestToolUtilityLibrary_ClearBundleQuestEntries Parms{};

	Parms.BundleDef = BundleDef;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortQuestToolUtilityLibrary.ConvertAssetPathToFilePath
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           InAssetPath                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           OutPath                                                (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           InExtension                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortQuestToolUtilityLibrary::ConvertAssetPathToFilePath(const class FString& InAssetPath, class FString* OutPath, const class FString& InExtension)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortQuestToolUtilityLibrary", "ConvertAssetPathToFilePath");

	Params::FortQuestToolUtilityLibrary_ConvertAssetPathToFilePath Parms{};

	Parms.InAssetPath = std::move(InAssetPath);
	Parms.InExtension = std::move(InExtension);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutPath != nullptr)
		*OutPath = std::move(Parms.OutPath);

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortQuestToolUtilityLibrary.ConvertFilePathToAssetPath
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           InPath                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           OutPath                                                (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortQuestToolUtilityLibrary::ConvertFilePathToAssetPath(const class FString& InPath, class FString* OutPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortQuestToolUtilityLibrary", "ConvertFilePathToAssetPath");

	Params::FortQuestToolUtilityLibrary_ConvertFilePathToAssetPath Parms{};

	Parms.InPath = std::move(InPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutPath != nullptr)
		*OutPath = std::move(Parms.OutPath);

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortQuestToolUtilityLibrary.CopyFortReleaseVersion
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UFortItemDefinition*              ItemDefinition                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UFortItemDefinition*              ItemDefinitionToCopyFrom                               (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortQuestToolUtilityLibrary::CopyFortReleaseVersion(class UFortItemDefinition* ItemDefinition, const class UFortItemDefinition* ItemDefinitionToCopyFrom)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortQuestToolUtilityLibrary", "CopyFortReleaseVersion");

	Params::FortQuestToolUtilityLibrary_CopyFortReleaseVersion Parms{};

	Parms.ItemDefinition = ItemDefinition;
	Parms.ItemDefinitionToCopyFrom = ItemDefinitionToCopyFrom;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortQuestToolUtilityLibrary.CopyQuestObjective
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FFortMcpQuestObjectiveInfo       ObjectiveInfo                                          (ConstParm, Parm, NativeAccessSpecifierPublic)

void UFortQuestToolUtilityLibrary::CopyQuestObjective(const struct FFortMcpQuestObjectiveInfo& ObjectiveInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortQuestToolUtilityLibrary", "CopyQuestObjective");

	Params::FortQuestToolUtilityLibrary_CopyQuestObjective Parms{};

	Parms.ObjectiveInfo = std::move(ObjectiveInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.FortQuestToolUtilityLibrary.CopyStringToClipboard
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           InString                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortQuestToolUtilityLibrary::CopyStringToClipboard(const class FString& InString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortQuestToolUtilityLibrary", "CopyStringToClipboard");

	Params::FortQuestToolUtilityLibrary_CopyStringToClipboard Parms{};

	Parms.InString = std::move(InString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.FortQuestToolUtilityLibrary.DuplicateObjective
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UFortQuestItemDefinition*         Quest                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SourceObjectiveIndex                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OutNewObjectiveIndex                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bCreateTransaction                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortQuestToolUtilityLibrary::DuplicateObjective(class UFortQuestItemDefinition* Quest, const int32 SourceObjectiveIndex, int32* OutNewObjectiveIndex, const bool bCreateTransaction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortQuestToolUtilityLibrary", "DuplicateObjective");

	Params::FortQuestToolUtilityLibrary_DuplicateObjective Parms{};

	Parms.Quest = Quest;
	Parms.SourceObjectiveIndex = SourceObjectiveIndex;
	Parms.bCreateTransaction = bCreateTransaction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutNewObjectiveIndex != nullptr)
		*OutNewObjectiveIndex = Parms.OutNewObjectiveIndex;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortQuestToolUtilityLibrary.DuplicateQuestItemObjectiveFilter
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UFortQuestItemDefinition*         Quest                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ObjectiveIdx                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ObjectiveFilterIdx                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bCreateTransaction                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortQuestToolUtilityLibrary::DuplicateQuestItemObjectiveFilter(class UFortQuestItemDefinition* Quest, const int32 ObjectiveIdx, const int32 ObjectiveFilterIdx, const bool bCreateTransaction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortQuestToolUtilityLibrary", "DuplicateQuestItemObjectiveFilter");

	Params::FortQuestToolUtilityLibrary_DuplicateQuestItemObjectiveFilter Parms{};

	Parms.Quest = Quest;
	Parms.ObjectiveIdx = ObjectiveIdx;
	Parms.ObjectiveFilterIdx = ObjectiveFilterIdx;
	Parms.bCreateTransaction = bCreateTransaction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortQuestToolUtilityLibrary.ExportDataTableToCSV
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UDataTable*                       DataTable                                              (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bShowFilePickerDialog                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           PathToWriteDataTable                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortQuestToolUtilityLibrary::ExportDataTableToCSV(const class UDataTable* DataTable, const bool bShowFilePickerDialog, const class FString& PathToWriteDataTable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortQuestToolUtilityLibrary", "ExportDataTableToCSV");

	Params::FortQuestToolUtilityLibrary_ExportDataTableToCSV Parms{};

	Parms.DataTable = DataTable;
	Parms.bShowFilePickerDialog = bShowFilePickerDialog;
	Parms.PathToWriteDataTable = std::move(PathToWriteDataTable);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortQuestToolUtilityLibrary.GetAllTagsForQuestMapMarkers
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UFortQuestItemDefinition*         InQuest                                                (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ObjectiveIdx                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTagContainer            OutTags                                                (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortQuestToolUtilityLibrary::GetAllTagsForQuestMapMarkers(const class UFortQuestItemDefinition* InQuest, const int32 ObjectiveIdx, struct FGameplayTagContainer* OutTags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortQuestToolUtilityLibrary", "GetAllTagsForQuestMapMarkers");

	Params::FortQuestToolUtilityLibrary_GetAllTagsForQuestMapMarkers Parms{};

	Parms.InQuest = InQuest;
	Parms.ObjectiveIdx = ObjectiveIdx;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutTags != nullptr)
		*OutTags = std::move(Parms.OutTags);

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortQuestToolUtilityLibrary.GetCopiedQuestObjective
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FFortMcpQuestObjectiveInfo       ObjectiveInfo                                          (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortQuestToolUtilityLibrary::GetCopiedQuestObjective(struct FFortMcpQuestObjectiveInfo* ObjectiveInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortQuestToolUtilityLibrary", "GetCopiedQuestObjective");

	Params::FortQuestToolUtilityLibrary_GetCopiedQuestObjective Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ObjectiveInfo != nullptr)
		*ObjectiveInfo = std::move(Parms.ObjectiveInfo);

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortQuestToolUtilityLibrary.GetGameFeaturesDirAbsolutePath
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UFortQuestToolUtilityLibrary::GetGameFeaturesDirAbsolutePath()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortQuestToolUtilityLibrary", "GetGameFeaturesDirAbsolutePath");

	Params::FortQuestToolUtilityLibrary_GetGameFeaturesDirAbsolutePath Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortQuestToolUtilityLibrary.GetInlineStat
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UFortQuestItemDefinition*         Quest                                                  (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ObjectiveIdx                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InlineStatIdx                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFortQuestObjectiveStat          InlineObjectiveStat                                    (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortQuestToolUtilityLibrary::GetInlineStat(const class UFortQuestItemDefinition* Quest, const int32 ObjectiveIdx, const int32 InlineStatIdx, struct FFortQuestObjectiveStat* InlineObjectiveStat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortQuestToolUtilityLibrary", "GetInlineStat");

	Params::FortQuestToolUtilityLibrary_GetInlineStat Parms{};

	Parms.Quest = Quest;
	Parms.ObjectiveIdx = ObjectiveIdx;
	Parms.InlineStatIdx = InlineStatIdx;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (InlineObjectiveStat != nullptr)
		*InlineObjectiveStat = std::move(Parms.InlineObjectiveStat);

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortQuestToolUtilityLibrary.GetInlineStatArray
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UFortQuestItemDefinition*         Quest                                                  (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ObjectiveIdx                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FFortQuestObjectiveStat>  InlineObjectiveStats                                   (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortQuestToolUtilityLibrary::GetInlineStatArray(const class UFortQuestItemDefinition* Quest, const int32 ObjectiveIdx, TArray<struct FFortQuestObjectiveStat>* InlineObjectiveStats)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortQuestToolUtilityLibrary", "GetInlineStatArray");

	Params::FortQuestToolUtilityLibrary_GetInlineStatArray Parms{};

	Parms.Quest = Quest;
	Parms.ObjectiveIdx = ObjectiveIdx;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (InlineObjectiveStats != nullptr)
		*InlineObjectiveStats = std::move(Parms.InlineObjectiveStats);

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortQuestToolUtilityLibrary.GetInlineStatCondition
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UFortQuestItemDefinition*         Quest                                                  (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ObjectiveIdx                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InlineStatIdx                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           OutConditionString                                     (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortQuestToolUtilityLibrary::GetInlineStatCondition(const class UFortQuestItemDefinition* Quest, const int32 ObjectiveIdx, const int32 InlineStatIdx, class FString* OutConditionString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortQuestToolUtilityLibrary", "GetInlineStatCondition");

	Params::FortQuestToolUtilityLibrary_GetInlineStatCondition Parms{};

	Parms.Quest = Quest;
	Parms.ObjectiveIdx = ObjectiveIdx;
	Parms.InlineStatIdx = InlineStatIdx;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutConditionString != nullptr)
		*OutConditionString = std::move(Parms.OutConditionString);

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortQuestToolUtilityLibrary.GetInlineStatGameplayTagContainerByName
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UFortQuestItemDefinition*         Quest                                                  (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ObjectiveIdx                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InlineStatIdx                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             TagContainerPropertyName                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTagContainer            OutTags                                                (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortQuestToolUtilityLibrary::GetInlineStatGameplayTagContainerByName(const class UFortQuestItemDefinition* Quest, const int32 ObjectiveIdx, const int32 InlineStatIdx, const class FName TagContainerPropertyName, struct FGameplayTagContainer* OutTags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortQuestToolUtilityLibrary", "GetInlineStatGameplayTagContainerByName");

	Params::FortQuestToolUtilityLibrary_GetInlineStatGameplayTagContainerByName Parms{};

	Parms.Quest = Quest;
	Parms.ObjectiveIdx = ObjectiveIdx;
	Parms.InlineStatIdx = InlineStatIdx;
	Parms.TagContainerPropertyName = TagContainerPropertyName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutTags != nullptr)
		*OutTags = std::move(Parms.OutTags);

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortQuestToolUtilityLibrary.GetObjectiveDisplayInfo
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UFortQuestItemDefinition*         Quest                                                  (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ObjectiveIdx                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFortMcpQuestObjectiveDisplayInfoOutObjectiveDisplayInfo                                (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortQuestToolUtilityLibrary::GetObjectiveDisplayInfo(const class UFortQuestItemDefinition* Quest, const int32 ObjectiveIdx, struct FFortMcpQuestObjectiveDisplayInfo* OutObjectiveDisplayInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortQuestToolUtilityLibrary", "GetObjectiveDisplayInfo");

	Params::FortQuestToolUtilityLibrary_GetObjectiveDisplayInfo Parms{};

	Parms.Quest = Quest;
	Parms.ObjectiveIdx = ObjectiveIdx;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutObjectiveDisplayInfo != nullptr)
		*OutObjectiveDisplayInfo = std::move(Parms.OutObjectiveDisplayInfo);

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortQuestToolUtilityLibrary.GetQuestGameplayTagContainerByName
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UFortQuestItemDefinition*         Quest                                                  (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             TagContainerPropertyName                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTagContainer            OutTags                                                (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortQuestToolUtilityLibrary::GetQuestGameplayTagContainerByName(const class UFortQuestItemDefinition* Quest, const class FName TagContainerPropertyName, struct FGameplayTagContainer* OutTags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortQuestToolUtilityLibrary", "GetQuestGameplayTagContainerByName");

	Params::FortQuestToolUtilityLibrary_GetQuestGameplayTagContainerByName Parms{};

	Parms.Quest = Quest;
	Parms.TagContainerPropertyName = TagContainerPropertyName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutTags != nullptr)
		*OutTags = std::move(Parms.OutTags);

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortQuestToolUtilityLibrary.GetQuestMapMarkerMapNames
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FName>                     OutMapNames                                            (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UFortQuestToolUtilityLibrary::GetQuestMapMarkerMapNames(TArray<class FName>* OutMapNames)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortQuestToolUtilityLibrary", "GetQuestMapMarkerMapNames");

	Params::FortQuestToolUtilityLibrary_GetQuestMapMarkerMapNames Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutMapNames != nullptr)
		*OutMapNames = std::move(Parms.OutMapNames);
}


// Function FortniteEditor.FortQuestToolUtilityLibrary.GetQuestObjectiveTagForQuestProp
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FFortMcpQuestObjectiveInfo       Objective                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FGameplayTagContainer            OutContainerTag                                        (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortQuestToolUtilityLibrary::GetQuestObjectiveTagForQuestProp(const struct FFortMcpQuestObjectiveInfo& Objective, struct FGameplayTagContainer* OutContainerTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortQuestToolUtilityLibrary", "GetQuestObjectiveTagForQuestProp");

	Params::FortQuestToolUtilityLibrary_GetQuestObjectiveTagForQuestProp Parms{};

	Parms.Objective = std::move(Objective);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutContainerTag != nullptr)
		*OutContainerTag = std::move(Parms.OutContainerTag);

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortQuestToolUtilityLibrary.GetTagToQuestMapMarkerTagNames
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FName>                     OutTagNames                                            (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UFortQuestToolUtilityLibrary::GetTagToQuestMapMarkerTagNames(TArray<class FName>* OutTagNames)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortQuestToolUtilityLibrary", "GetTagToQuestMapMarkerTagNames");

	Params::FortQuestToolUtilityLibrary_GetTagToQuestMapMarkerTagNames Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutTagNames != nullptr)
		*OutTagNames = std::move(Parms.OutTagNames);
}


// Function FortniteEditor.FortQuestToolUtilityLibrary.InsertQuestEntryToBundle
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UFortChallengeBundleItemDefinition*BundleDef                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFortChallengeBundleQuestEntry   QuestEntry                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   InsertIndex                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortQuestToolUtilityLibrary::InsertQuestEntryToBundle(class UFortChallengeBundleItemDefinition* BundleDef, const struct FFortChallengeBundleQuestEntry& QuestEntry, const int32 InsertIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortQuestToolUtilityLibrary", "InsertQuestEntryToBundle");

	Params::FortQuestToolUtilityLibrary_InsertQuestEntryToBundle Parms{};

	Parms.BundleDef = BundleDef;
	Parms.QuestEntry = std::move(QuestEntry);
	Parms.InsertIndex = InsertIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortQuestToolUtilityLibrary.IsTagValidToUseAsQuestMarker
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGameplayTag                     TagToCheck                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortQuestToolUtilityLibrary::IsTagValidToUseAsQuestMarker(const struct FGameplayTag& TagToCheck)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortQuestToolUtilityLibrary", "IsTagValidToUseAsQuestMarker");

	Params::FortQuestToolUtilityLibrary_IsTagValidToUseAsQuestMarker Parms{};

	Parms.TagToCheck = std::move(TagToCheck);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortQuestToolUtilityLibrary.RemoveObjectiveFromQuest
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UFortQuestItemDefinition*         Quest                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ObjectiveIdx                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bCreateTransaction                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortQuestToolUtilityLibrary::RemoveObjectiveFromQuest(class UFortQuestItemDefinition* Quest, const int32 ObjectiveIdx, const bool bCreateTransaction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortQuestToolUtilityLibrary", "RemoveObjectiveFromQuest");

	Params::FortQuestToolUtilityLibrary_RemoveObjectiveFromQuest Parms{};

	Parms.Quest = Quest;
	Parms.ObjectiveIdx = ObjectiveIdx;
	Parms.bCreateTransaction = bCreateTransaction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortQuestToolUtilityLibrary.RemoveQuestItemObjectiveFilter
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UFortQuestItemDefinition*         Quest                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ObjectiveIdx                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ObjectiveFilterIdx                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bCreateTransaction                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortQuestToolUtilityLibrary::RemoveQuestItemObjectiveFilter(class UFortQuestItemDefinition* Quest, const int32 ObjectiveIdx, const int32 ObjectiveFilterIdx, const bool bCreateTransaction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortQuestToolUtilityLibrary", "RemoveQuestItemObjectiveFilter");

	Params::FortQuestToolUtilityLibrary_RemoveQuestItemObjectiveFilter Parms{};

	Parms.Quest = Quest;
	Parms.ObjectiveIdx = ObjectiveIdx;
	Parms.ObjectiveFilterIdx = ObjectiveFilterIdx;
	Parms.bCreateTransaction = bCreateTransaction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortQuestToolUtilityLibrary.ReplaceEditorOnlyItemDefinitionInQuestHiddenRewards
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UFortQuestItemDefinition*         Quest                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   RewardIndex                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSoftObjectPtr<class UFortItemDefinition>NewEditorOnlyItemDefinition                            (ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortQuestToolUtilityLibrary::ReplaceEditorOnlyItemDefinitionInQuestHiddenRewards(class UFortQuestItemDefinition* Quest, const int32 RewardIndex, const TSoftObjectPtr<class UFortItemDefinition>& NewEditorOnlyItemDefinition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortQuestToolUtilityLibrary", "ReplaceEditorOnlyItemDefinitionInQuestHiddenRewards");

	Params::FortQuestToolUtilityLibrary_ReplaceEditorOnlyItemDefinitionInQuestHiddenRewards Parms{};

	Parms.Quest = Quest;
	Parms.RewardIndex = RewardIndex;
	Parms.NewEditorOnlyItemDefinition = NewEditorOnlyItemDefinition;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortQuestToolUtilityLibrary.ReplaceTemplateIdInQuestHiddenRewards
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UFortQuestItemDefinition*         Quest                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Index_0                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             NewTemplateId                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortQuestToolUtilityLibrary::ReplaceTemplateIdInQuestHiddenRewards(class UFortQuestItemDefinition* Quest, const int32 Index_0, const class FName& NewTemplateId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortQuestToolUtilityLibrary", "ReplaceTemplateIdInQuestHiddenRewards");

	Params::FortQuestToolUtilityLibrary_ReplaceTemplateIdInQuestHiddenRewards Parms{};

	Parms.Quest = Quest;
	Parms.Index_0 = Index_0;
	Parms.NewTemplateId = NewTemplateId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortQuestToolUtilityLibrary.ResetCopiedQuestObjective
// (Final, Native, Static, Public, BlueprintCallable)

void UFortQuestToolUtilityLibrary::ResetCopiedQuestObjective()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortQuestToolUtilityLibrary", "ResetCopiedQuestObjective");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.FortQuestToolUtilityLibrary.SetFortReleaseVersionBySeason
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UFortItemDefinition*              ItemDefinition                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SeasonNum                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   PointNum                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortQuestToolUtilityLibrary::SetFortReleaseVersionBySeason(class UFortItemDefinition* ItemDefinition, const int32 SeasonNum, const uint8 PointNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortQuestToolUtilityLibrary", "SetFortReleaseVersionBySeason");

	Params::FortQuestToolUtilityLibrary_SetFortReleaseVersionBySeason Parms{};

	Parms.ItemDefinition = ItemDefinition;
	Parms.SeasonNum = SeasonNum;
	Parms.PointNum = PointNum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortQuestToolUtilityLibrary.SetInlineStatArray
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UFortQuestItemDefinition*         Quest                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ObjectiveIdx                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FFortQuestObjectiveStat>  NewInlineObjectiveStats                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bCreateTransaction                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortQuestToolUtilityLibrary::SetInlineStatArray(class UFortQuestItemDefinition* Quest, const int32 ObjectiveIdx, const TArray<struct FFortQuestObjectiveStat>& NewInlineObjectiveStats, const bool bCreateTransaction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortQuestToolUtilityLibrary", "SetInlineStatArray");

	Params::FortQuestToolUtilityLibrary_SetInlineStatArray Parms{};

	Parms.Quest = Quest;
	Parms.ObjectiveIdx = ObjectiveIdx;
	Parms.NewInlineObjectiveStats = std::move(NewInlineObjectiveStats);
	Parms.bCreateTransaction = bCreateTransaction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortQuestToolUtilityLibrary.SetInlineStatCondition
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UFortQuestItemDefinition*         Quest                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ObjectiveIdx                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InlineStatIdx                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           NewConditionString                                     (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bCreateTransaction                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortQuestToolUtilityLibrary::SetInlineStatCondition(class UFortQuestItemDefinition* Quest, const int32 ObjectiveIdx, const int32 InlineStatIdx, const class FString& NewConditionString, const bool bCreateTransaction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortQuestToolUtilityLibrary", "SetInlineStatCondition");

	Params::FortQuestToolUtilityLibrary_SetInlineStatCondition Parms{};

	Parms.Quest = Quest;
	Parms.ObjectiveIdx = ObjectiveIdx;
	Parms.InlineStatIdx = InlineStatIdx;
	Parms.NewConditionString = std::move(NewConditionString);
	Parms.bCreateTransaction = bCreateTransaction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortQuestToolUtilityLibrary.SetInlineStatGameplayTagContainerByName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UFortQuestItemDefinition*         Quest                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ObjectiveIdx                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InlineStatIdx                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             TagContainerPropertyName                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTagContainer            NewTags                                                (ConstParm, Parm, NativeAccessSpecifierPublic)
// EFortGameplayTagContainerUpdateType     UpdateType                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bCreateTransaction                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortQuestToolUtilityLibrary::SetInlineStatGameplayTagContainerByName(class UFortQuestItemDefinition* Quest, const int32 ObjectiveIdx, const int32 InlineStatIdx, const class FName TagContainerPropertyName, const struct FGameplayTagContainer& NewTags, const EFortGameplayTagContainerUpdateType UpdateType, const bool bCreateTransaction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortQuestToolUtilityLibrary", "SetInlineStatGameplayTagContainerByName");

	Params::FortQuestToolUtilityLibrary_SetInlineStatGameplayTagContainerByName Parms{};

	Parms.Quest = Quest;
	Parms.ObjectiveIdx = ObjectiveIdx;
	Parms.InlineStatIdx = InlineStatIdx;
	Parms.TagContainerPropertyName = TagContainerPropertyName;
	Parms.NewTags = std::move(NewTags);
	Parms.UpdateType = UpdateType;
	Parms.bCreateTransaction = bCreateTransaction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortQuestToolUtilityLibrary.SetObjectiveBackendName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UFortQuestItemDefinition*         Quest                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ObjectiveIdx                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             NewBackendName                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bCreateTransaction                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortQuestToolUtilityLibrary::SetObjectiveBackendName(class UFortQuestItemDefinition* Quest, const int32 ObjectiveIdx, const class FName NewBackendName, const bool bCreateTransaction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortQuestToolUtilityLibrary", "SetObjectiveBackendName");

	Params::FortQuestToolUtilityLibrary_SetObjectiveBackendName Parms{};

	Parms.Quest = Quest;
	Parms.ObjectiveIdx = ObjectiveIdx;
	Parms.NewBackendName = NewBackendName;
	Parms.bCreateTransaction = bCreateTransaction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortQuestToolUtilityLibrary.SetObjectiveCount
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UFortQuestItemDefinition*         Quest                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ObjectiveIdx                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NewCount                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bCreateTransaction                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortQuestToolUtilityLibrary::SetObjectiveCount(class UFortQuestItemDefinition* Quest, const int32 ObjectiveIdx, const int32 NewCount, const bool bCreateTransaction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortQuestToolUtilityLibrary", "SetObjectiveCount");

	Params::FortQuestToolUtilityLibrary_SetObjectiveCount Parms{};

	Parms.Quest = Quest;
	Parms.ObjectiveIdx = ObjectiveIdx;
	Parms.NewCount = NewCount;
	Parms.bCreateTransaction = bCreateTransaction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortQuestToolUtilityLibrary.SetObjectiveDisplayInfo
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UFortQuestItemDefinition*         Quest                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ObjectiveIdx                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFortMcpQuestObjectiveDisplayInfoNewObjectiveDisplayInfo                                (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bCreateTransaction                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortQuestToolUtilityLibrary::SetObjectiveDisplayInfo(class UFortQuestItemDefinition* Quest, const int32 ObjectiveIdx, const struct FFortMcpQuestObjectiveDisplayInfo& NewObjectiveDisplayInfo, const bool bCreateTransaction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortQuestToolUtilityLibrary", "SetObjectiveDisplayInfo");

	Params::FortQuestToolUtilityLibrary_SetObjectiveDisplayInfo Parms{};

	Parms.Quest = Quest;
	Parms.ObjectiveIdx = ObjectiveIdx;
	Parms.NewObjectiveDisplayInfo = std::move(NewObjectiveDisplayInfo);
	Parms.bCreateTransaction = bCreateTransaction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortQuestToolUtilityLibrary.SetQuestGameplayTagContainerByName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UFortQuestItemDefinition*         Quest                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTagContainer            NewTags                                                (ConstParm, Parm, NativeAccessSpecifierPublic)
// class FName                             TagContainerPropertyName                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EFortGameplayTagContainerUpdateType     UpdateType                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bCreateTransaction                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortQuestToolUtilityLibrary::SetQuestGameplayTagContainerByName(class UFortQuestItemDefinition* Quest, const struct FGameplayTagContainer& NewTags, const class FName TagContainerPropertyName, const EFortGameplayTagContainerUpdateType UpdateType, const bool bCreateTransaction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortQuestToolUtilityLibrary", "SetQuestGameplayTagContainerByName");

	Params::FortQuestToolUtilityLibrary_SetQuestGameplayTagContainerByName Parms{};

	Parms.Quest = Quest;
	Parms.NewTags = std::move(NewTags);
	Parms.TagContainerPropertyName = TagContainerPropertyName;
	Parms.UpdateType = UpdateType;
	Parms.bCreateTransaction = bCreateTransaction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortQuestToolUtilityLibrary.StartValidateCheckedOutContent
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FAssetData>               PackagesToSkip                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UFortQuestToolUtilityLibrary::StartValidateCheckedOutContent(const TArray<struct FAssetData>& PackagesToSkip)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortQuestToolUtilityLibrary", "StartValidateCheckedOutContent");

	Params::FortQuestToolUtilityLibrary_StartValidateCheckedOutContent Parms{};

	Parms.PackagesToSkip = std::move(PackagesToSkip);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.FortQuestToolUtilityLibrary.TestInlineStatCondition
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Condition                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortQuestToolUtilityLibrary::TestInlineStatCondition(const class FString& Condition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortQuestToolUtilityLibrary", "TestInlineStatCondition");

	Params::FortQuestToolUtilityLibrary_TestInlineStatCondition Parms{};

	Parms.Condition = std::move(Condition);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.SearchableStringComboBox.AddOption
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Option                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USearchableStringComboBox::AddOption(const class FString& Option)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SearchableStringComboBox", "AddOption");

	Params::SearchableStringComboBox_AddOption Parms{};

	Parms.Option = std::move(Option);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.SearchableStringComboBox.ClearOptions
// (Final, Native, Public, BlueprintCallable)

void USearchableStringComboBox::ClearOptions()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SearchableStringComboBox", "ClearOptions");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.SearchableStringComboBox.ClearSelection
// (Final, Native, Public, BlueprintCallable)

void USearchableStringComboBox::ClearSelection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SearchableStringComboBox", "ClearSelection");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.SearchableStringComboBox.RefreshOptions
// (Final, Native, Public, BlueprintCallable)

void USearchableStringComboBox::RefreshOptions()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SearchableStringComboBox", "RefreshOptions");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.SearchableStringComboBox.RemoveOption
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Option                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USearchableStringComboBox::RemoveOption(const class FString& Option)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SearchableStringComboBox", "RemoveOption");

	Params::SearchableStringComboBox_RemoveOption Parms{};

	Parms.Option = std::move(Option);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.SearchableStringComboBox.SetSelectedIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Index_0                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USearchableStringComboBox::SetSelectedIndex(const int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SearchableStringComboBox", "SetSelectedIndex");

	Params::SearchableStringComboBox_SetSelectedIndex Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.SearchableStringComboBox.SetSelectedOption
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Option                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USearchableStringComboBox::SetSelectedOption(const class FString& Option)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SearchableStringComboBox", "SetSelectedOption");

	Params::SearchableStringComboBox_SetSelectedOption Parms{};

	Parms.Option = std::move(Option);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.SearchableStringComboBox.FindOptionIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           Option                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USearchableStringComboBox::FindOptionIndex(const class FString& Option) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SearchableStringComboBox", "FindOptionIndex");

	Params::SearchableStringComboBox_FindOptionIndex Parms{};

	Parms.Option = std::move(Option);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.SearchableStringComboBox.GetOptionAtIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Index_0                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USearchableStringComboBox::GetOptionAtIndex(const int32 Index_0) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SearchableStringComboBox", "GetOptionAtIndex");

	Params::SearchableStringComboBox_GetOptionAtIndex Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.SearchableStringComboBox.GetOptionCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USearchableStringComboBox::GetOptionCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SearchableStringComboBox", "GetOptionCount");

	Params::SearchableStringComboBox_GetOptionCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.SearchableStringComboBox.GetSelectedIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USearchableStringComboBox::GetSelectedIndex() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SearchableStringComboBox", "GetSelectedIndex");

	Params::SearchableStringComboBox_GetSelectedIndex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.SearchableStringComboBox.GetSelectedOption
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USearchableStringComboBox::GetSelectedOption() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SearchableStringComboBox", "GetSelectedOption");

	Params::SearchableStringComboBox_GetSelectedOption Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.SearchableStringComboBox.IsOpen
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USearchableStringComboBox::IsOpen() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SearchableStringComboBox", "IsOpen");

	Params::SearchableStringComboBox_IsOpen Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.SearchableVerticalBox.UpdateSearchableChildren
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           SearchString                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USearchableVerticalBox::UpdateSearchableChildren(const class FString& SearchString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SearchableVerticalBox", "UpdateSearchableChildren");

	Params::SearchableVerticalBox_UpdateSearchableChildren Parms{};

	Parms.SearchString = std::move(SearchString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FortniteEditor.FortReleaseVersionEditorLibrary.EditorOnly_BuildFortReleaseVersionFromAssetData
// (Final, Native, Static, Private, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FAssetData                       AssetData                                              (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFortReleaseVersion              OutVersion                                             (Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortReleaseVersionEditorLibrary::EditorOnly_BuildFortReleaseVersionFromAssetData(const struct FAssetData& AssetData, struct FFortReleaseVersion* OutVersion)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortReleaseVersionEditorLibrary", "EditorOnly_BuildFortReleaseVersionFromAssetData");

	Params::FortReleaseVersionEditorLibrary_EditorOnly_BuildFortReleaseVersionFromAssetData Parms{};

	Parms.AssetData = std::move(AssetData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutVersion != nullptr)
		*OutVersion = std::move(Parms.OutVersion);

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortReleaseVersionEditorLibrary.EditorOnly_BuildFortReleaseVersionFromString
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           VersionString                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFortReleaseVersion              OutVersion                                             (Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortReleaseVersionEditorLibrary::EditorOnly_BuildFortReleaseVersionFromString(const class FString& VersionString, struct FFortReleaseVersion* OutVersion)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortReleaseVersionEditorLibrary", "EditorOnly_BuildFortReleaseVersionFromString");

	Params::FortReleaseVersionEditorLibrary_EditorOnly_BuildFortReleaseVersionFromString Parms{};

	Parms.VersionString = std::move(VersionString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutVersion != nullptr)
		*OutVersion = std::move(Parms.OutVersion);

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortReleaseVersionEditorLibrary.EditorOnly_DoVersionSeasonsMatch
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FFortReleaseVersion              VersionA                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFortReleaseVersion              VersionB                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortReleaseVersionEditorLibrary::EditorOnly_DoVersionSeasonsMatch(const struct FFortReleaseVersion& VersionA, const struct FFortReleaseVersion& VersionB)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortReleaseVersionEditorLibrary", "EditorOnly_DoVersionSeasonsMatch");

	Params::FortReleaseVersionEditorLibrary_EditorOnly_DoVersionSeasonsMatch Parms{};

	Parms.VersionA = std::move(VersionA);
	Parms.VersionB = std::move(VersionB);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortReleaseVersionEditorLibrary.EditorOnly_GetCurrentFortReleaseVersion
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// struct FFortReleaseVersion              ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FFortReleaseVersion UFortReleaseVersionEditorLibrary::EditorOnly_GetCurrentFortReleaseVersion()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortReleaseVersionEditorLibrary", "EditorOnly_GetCurrentFortReleaseVersion");

	Params::FortReleaseVersionEditorLibrary_EditorOnly_GetCurrentFortReleaseVersion Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortReleaseVersionEditorLibrary.EditorOnly_GetItemDefinitionFortReleaseVersion
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class UItemDefinitionBase*              ItemDefinition                                         (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFortReleaseVersion              ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FFortReleaseVersion UFortReleaseVersionEditorLibrary::EditorOnly_GetItemDefinitionFortReleaseVersion(const class UItemDefinitionBase* ItemDefinition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortReleaseVersionEditorLibrary", "EditorOnly_GetItemDefinitionFortReleaseVersion");

	Params::FortReleaseVersionEditorLibrary_EditorOnly_GetItemDefinitionFortReleaseVersion Parms{};

	Parms.ItemDefinition = ItemDefinition;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortReleaseVersionEditorLibrary.EditorOnly_GetVersionDisplayTextForUIPurposes
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FFortReleaseVersion              Version                                                (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UFortReleaseVersionEditorLibrary::EditorOnly_GetVersionDisplayTextForUIPurposes(const struct FFortReleaseVersion& Version)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortReleaseVersionEditorLibrary", "EditorOnly_GetVersionDisplayTextForUIPurposes");

	Params::FortReleaseVersionEditorLibrary_EditorOnly_GetVersionDisplayTextForUIPurposes Parms{};

	Parms.Version = std::move(Version);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortReleaseVersionEditorLibrary.EditorOnly_GetVersionSeasonNumber
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FFortReleaseVersion              Version                                                (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UFortReleaseVersionEditorLibrary::EditorOnly_GetVersionSeasonNumber(const struct FFortReleaseVersion& Version)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortReleaseVersionEditorLibrary", "EditorOnly_GetVersionSeasonNumber");

	Params::FortReleaseVersionEditorLibrary_EditorOnly_GetVersionSeasonNumber Parms{};

	Parms.Version = std::move(Version);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortReleaseVersionEditorLibrary.EditorOnly_IsVersionEqualTo
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FFortReleaseVersion              VersionA                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFortReleaseVersion              VersionB                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortReleaseVersionEditorLibrary::EditorOnly_IsVersionEqualTo(const struct FFortReleaseVersion& VersionA, const struct FFortReleaseVersion& VersionB)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortReleaseVersionEditorLibrary", "EditorOnly_IsVersionEqualTo");

	Params::FortReleaseVersionEditorLibrary_EditorOnly_IsVersionEqualTo Parms{};

	Parms.VersionA = std::move(VersionA);
	Parms.VersionB = std::move(VersionB);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortReleaseVersionEditorLibrary.EditorOnly_IsVersionGreaterThan
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FFortReleaseVersion              VersionA                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFortReleaseVersion              VersionB                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortReleaseVersionEditorLibrary::EditorOnly_IsVersionGreaterThan(const struct FFortReleaseVersion& VersionA, const struct FFortReleaseVersion& VersionB)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortReleaseVersionEditorLibrary", "EditorOnly_IsVersionGreaterThan");

	Params::FortReleaseVersionEditorLibrary_EditorOnly_IsVersionGreaterThan Parms{};

	Parms.VersionA = std::move(VersionA);
	Parms.VersionB = std::move(VersionB);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FortniteEditor.FortReleaseVersionEditorLibrary.EditorOnly_IsVersionLessThan
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FFortReleaseVersion              VersionA                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFortReleaseVersion              VersionB                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortReleaseVersionEditorLibrary::EditorOnly_IsVersionLessThan(const struct FFortReleaseVersion& VersionA, const struct FFortReleaseVersion& VersionB)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortReleaseVersionEditorLibrary", "EditorOnly_IsVersionLessThan");

	Params::FortReleaseVersionEditorLibrary_EditorOnly_IsVersionLessThan Parms{};

	Parms.VersionA = std::move(VersionA);
	Parms.VersionB = std::move(VersionB);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

