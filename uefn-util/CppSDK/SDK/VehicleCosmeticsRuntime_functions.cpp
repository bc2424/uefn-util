#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VehicleCosmeticsRuntime

#include "Basic.hpp"

#include "VehicleCosmeticsRuntime_classes.hpp"
#include "VehicleCosmeticsRuntime_parameters.hpp"


namespace SDK
{

// Function VehicleCosmeticsRuntime.DealershipAssetProfiler.KickOffProfiling
// (Final, Native, Public, BlueprintCallable)

void ADealershipAssetProfiler::KickOffProfiling()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DealershipAssetProfiler", "KickOffProfiling");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function VehicleCosmeticsRuntime.DealershipProfilerCommand.DeinitCommand
// (Native, Public)

void UDealershipProfilerCommand::DeinitCommand()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DealershipProfilerCommand", "DeinitCommand");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function VehicleCosmeticsRuntime.DealershipProfilerCommand.InitCommand
// (Native, Public, HasOutParams)
// Parameters:
// class UObject*                          WorldContext                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FTransform>               SpawnLocators                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UDealershipProfilerCommand::InitCommand(const class UObject* WorldContext, const TArray<struct FTransform>& SpawnLocators)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DealershipProfilerCommand", "InitCommand");

	Params::DealershipProfilerCommand_InitCommand Parms{};

	Parms.WorldContext = WorldContext;
	Parms.SpawnLocators = std::move(SpawnLocators);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VehicleCosmeticsRuntime.DealershipProfilerCommand_Body.BeginReport
// (Final, Native, Public)

void UDealershipProfilerCommand_Body::BeginReport()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DealershipProfilerCommand_Body", "BeginReport");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function VehicleCosmeticsRuntime.DealershipProfilerCommand_Body.OnCustomizableObjectLoaded
// (Final, Native, Public)

void UDealershipProfilerCommand_Body::OnCustomizableObjectLoaded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DealershipProfilerCommand_Body", "OnCustomizableObjectLoaded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function VehicleCosmeticsRuntime.DealershipProfilerCommand_Body.OnItemDefinitionLoaded
// (Final, Native, Public)

void UDealershipProfilerCommand_Body::OnItemDefinitionLoaded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DealershipProfilerCommand_Body", "OnItemDefinitionLoaded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function VehicleCosmeticsRuntime.DealershipProfilerCommand_Body.TryProfileNextBody
// (Final, Native, Public)

void UDealershipProfilerCommand_Body::TryProfileNextBody()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DealershipProfilerCommand_Body", "TryProfileNextBody");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function VehicleCosmeticsRuntime.DealershipProfilerCommand_Body.UpdateSkeletalMeshesAndProfileNextBody
// (Final, Native, Public, HasOutParams)
// Parameters:
// struct FUpdateContext                   Result                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UDealershipProfilerCommand_Body::UpdateSkeletalMeshesAndProfileNextBody(const struct FUpdateContext& Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DealershipProfilerCommand_Body", "UpdateSkeletalMeshesAndProfileNextBody");

	Params::DealershipProfilerCommand_Body_UpdateSkeletalMeshesAndProfileNextBody Parms{};

	Parms.Result = std::move(Result);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VehicleCosmeticsRuntime.FortItemVehiclePreviewActor.HandleBoostFinished
// (Final, Native, Public)

void AFortItemVehiclePreviewActor::HandleBoostFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortItemVehiclePreviewActor", "HandleBoostFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function VehicleCosmeticsRuntime.FortItemVehiclePreviewActor.HandleBoostStarted
// (Final, Native, Public)

void AFortItemVehiclePreviewActor::HandleBoostStarted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortItemVehiclePreviewActor", "HandleBoostStarted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function VehicleCosmeticsRuntime.FortItemVehiclePreviewActor.HandleDriftTrailStarted
// (Final, Native, Public)

void AFortItemVehiclePreviewActor::HandleDriftTrailStarted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortItemVehiclePreviewActor", "HandleDriftTrailStarted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function VehicleCosmeticsRuntime.FortItemVehiclePreviewActor.HandleVehicleCosmeticsReady
// (Final, Native, Public)

void AFortItemVehiclePreviewActor::HandleVehicleCosmeticsReady()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortItemVehiclePreviewActor", "HandleVehicleCosmeticsReady");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function VehicleCosmeticsRuntime.FortItemVehiclePreviewActor.OnVehicleDriftStarted
// (Final, Native, Private)
// Parameters:
// bool                                    bEnableVFX                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortItemVehiclePreviewActor::OnVehicleDriftStarted(const bool bEnableVFX)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortItemVehiclePreviewActor", "OnVehicleDriftStarted");

	Params::FortItemVehiclePreviewActor_OnVehicleDriftStarted Parms{};

	Parms.bEnableVFX = bEnableVFX;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VehicleCosmeticsRuntime.FortVehicleCosmeticsLevelPreviewActor.SetBodyAsset
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// class UFortVehicleCosmeticsItemDefinition_Body*NewBodyAsset                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortVehicleCosmeticsLevelPreviewActor::SetBodyAsset(class UFortVehicleCosmeticsItemDefinition_Body* NewBodyAsset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortVehicleCosmeticsLevelPreviewActor", "SetBodyAsset");

	Params::FortVehicleCosmeticsLevelPreviewActor_SetBodyAsset Parms{};

	Parms.NewBodyAsset = NewBodyAsset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VehicleCosmeticsRuntime.FortVehicleCosmeticsLevelPreviewActor.SetBodyPaintName
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           NewBodyPaintName                                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortVehicleCosmeticsLevelPreviewActor::SetBodyPaintName(const class FString& NewBodyPaintName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortVehicleCosmeticsLevelPreviewActor", "SetBodyPaintName");

	Params::FortVehicleCosmeticsLevelPreviewActor_SetBodyPaintName Parms{};

	Parms.NewBodyPaintName = std::move(NewBodyPaintName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VehicleCosmeticsRuntime.FortVehicleCosmeticsLevelPreviewActor.SetBodyTierTag
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGameplayTag                     NewTierTag                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortVehicleCosmeticsLevelPreviewActor::SetBodyTierTag(const struct FGameplayTag& NewTierTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortVehicleCosmeticsLevelPreviewActor", "SetBodyTierTag");

	Params::FortVehicleCosmeticsLevelPreviewActor_SetBodyTierTag Parms{};

	Parms.NewTierTag = std::move(NewTierTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VehicleCosmeticsRuntime.FortVehicleCosmeticsLevelPreviewActor.SetBoosterAsset
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// class UFortVehicleCosmeticsItemDefinition_Booster*NewBoosterAsset                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortVehicleCosmeticsLevelPreviewActor::SetBoosterAsset(class UFortVehicleCosmeticsItemDefinition_Booster* NewBoosterAsset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortVehicleCosmeticsLevelPreviewActor", "SetBoosterAsset");

	Params::FortVehicleCosmeticsLevelPreviewActor_SetBoosterAsset Parms{};

	Parms.NewBoosterAsset = NewBoosterAsset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VehicleCosmeticsRuntime.FortVehicleCosmeticsLevelPreviewActor.SetBoosterEnabled
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortVehicleCosmeticsLevelPreviewActor::SetBoosterEnabled(bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortVehicleCosmeticsLevelPreviewActor", "SetBoosterEnabled");

	Params::FortVehicleCosmeticsLevelPreviewActor_SetBoosterEnabled Parms{};

	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VehicleCosmeticsRuntime.FortVehicleCosmeticsLevelPreviewActor.SetBoosterTierTag
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGameplayTag                     NewTierTag                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortVehicleCosmeticsLevelPreviewActor::SetBoosterTierTag(const struct FGameplayTag& NewTierTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortVehicleCosmeticsLevelPreviewActor", "SetBoosterTierTag");

	Params::FortVehicleCosmeticsLevelPreviewActor_SetBoosterTierTag Parms{};

	Parms.NewTierTag = std::move(NewTierTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VehicleCosmeticsRuntime.FortVehicleCosmeticsLevelPreviewActor.SetDriftTrailAsset
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// class UFortVehicleCosmeticsItemDefinition_DriftTrail*NewDriftTrailAsset                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortVehicleCosmeticsLevelPreviewActor::SetDriftTrailAsset(class UFortVehicleCosmeticsItemDefinition_DriftTrail* NewDriftTrailAsset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortVehicleCosmeticsLevelPreviewActor", "SetDriftTrailAsset");

	Params::FortVehicleCosmeticsLevelPreviewActor_SetDriftTrailAsset Parms{};

	Parms.NewDriftTrailAsset = NewDriftTrailAsset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VehicleCosmeticsRuntime.FortVehicleCosmeticsLevelPreviewActor.SetDriftTrailEnabled
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortVehicleCosmeticsLevelPreviewActor::SetDriftTrailEnabled(bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortVehicleCosmeticsLevelPreviewActor", "SetDriftTrailEnabled");

	Params::FortVehicleCosmeticsLevelPreviewActor_SetDriftTrailEnabled Parms{};

	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VehicleCosmeticsRuntime.FortVehicleCosmeticsLevelPreviewActor.SetDriftTrailTierTag
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGameplayTag                     NewTierTag                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortVehicleCosmeticsLevelPreviewActor::SetDriftTrailTierTag(const struct FGameplayTag& NewTierTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortVehicleCosmeticsLevelPreviewActor", "SetDriftTrailTierTag");

	Params::FortVehicleCosmeticsLevelPreviewActor_SetDriftTrailTierTag Parms{};

	Parms.NewTierTag = std::move(NewTierTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VehicleCosmeticsRuntime.FortVehicleCosmeticsLevelPreviewActor.SetSkinAsset
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// class UFortVehicleCosmeticsItemDefinition_Skin*NewSkinAsset                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortVehicleCosmeticsLevelPreviewActor::SetSkinAsset(class UFortVehicleCosmeticsItemDefinition_Skin* NewSkinAsset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortVehicleCosmeticsLevelPreviewActor", "SetSkinAsset");

	Params::FortVehicleCosmeticsLevelPreviewActor_SetSkinAsset Parms{};

	Parms.NewSkinAsset = NewSkinAsset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VehicleCosmeticsRuntime.FortVehicleCosmeticsLevelPreviewActor.SetSkinPaintName
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           NewSkinPaintName                                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortVehicleCosmeticsLevelPreviewActor::SetSkinPaintName(const class FString& NewSkinPaintName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortVehicleCosmeticsLevelPreviewActor", "SetSkinPaintName");

	Params::FortVehicleCosmeticsLevelPreviewActor_SetSkinPaintName Parms{};

	Parms.NewSkinPaintName = std::move(NewSkinPaintName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VehicleCosmeticsRuntime.FortVehicleCosmeticsLevelPreviewActor.SetSkinTierTag
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGameplayTag                     NewTierTag                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortVehicleCosmeticsLevelPreviewActor::SetSkinTierTag(const struct FGameplayTag& NewTierTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortVehicleCosmeticsLevelPreviewActor", "SetSkinTierTag");

	Params::FortVehicleCosmeticsLevelPreviewActor_SetSkinTierTag Parms{};

	Parms.NewTierTag = std::move(NewTierTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VehicleCosmeticsRuntime.FortVehicleCosmeticsLevelPreviewActor.SetWheelAsset
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// class UFortVehicleCosmeticsItemDefinition_Wheel*NewWheelAsset                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortVehicleCosmeticsLevelPreviewActor::SetWheelAsset(class UFortVehicleCosmeticsItemDefinition_Wheel* NewWheelAsset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortVehicleCosmeticsLevelPreviewActor", "SetWheelAsset");

	Params::FortVehicleCosmeticsLevelPreviewActor_SetWheelAsset Parms{};

	Parms.NewWheelAsset = NewWheelAsset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VehicleCosmeticsRuntime.FortVehicleCosmeticsLevelPreviewActor.SetWheelPaintName
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           NewWheelPaintName                                      (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortVehicleCosmeticsLevelPreviewActor::SetWheelPaintName(const class FString& NewWheelPaintName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortVehicleCosmeticsLevelPreviewActor", "SetWheelPaintName");

	Params::FortVehicleCosmeticsLevelPreviewActor_SetWheelPaintName Parms{};

	Parms.NewWheelPaintName = std::move(NewWheelPaintName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VehicleCosmeticsRuntime.FortVehicleCosmeticsLevelPreviewActor.SetWheelTierTag
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGameplayTag                     NewTierTag                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortVehicleCosmeticsLevelPreviewActor::SetWheelTierTag(const struct FGameplayTag& NewTierTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortVehicleCosmeticsLevelPreviewActor", "SetWheelTierTag");

	Params::FortVehicleCosmeticsLevelPreviewActor_SetWheelTierTag Parms{};

	Parms.NewTierTag = std::move(NewTierTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VehicleCosmeticsRuntime.FortVehicleCosmeticsLevelPreviewActor.TryRebuildCosmetics
// (Final, Native, Protected)

void AFortVehicleCosmeticsLevelPreviewActor::TryRebuildCosmetics()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortVehicleCosmeticsLevelPreviewActor", "TryRebuildCosmetics");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function VehicleCosmeticsRuntime.FortVehicleCosmeticsLevelPreviewActor.GetPossiblePaintNames
// (Final, RequiredAPI, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> AFortVehicleCosmeticsLevelPreviewActor::GetPossiblePaintNames() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortVehicleCosmeticsLevelPreviewActor", "GetPossiblePaintNames");

	Params::FortVehicleCosmeticsLevelPreviewActor_GetPossiblePaintNames Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VehicleCosmeticsRuntime.FortVehicleCosmeticsLevelPreviewActor.GetPossibleSkinNames
// (Final, RequiredAPI, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> AFortVehicleCosmeticsLevelPreviewActor::GetPossibleSkinNames() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortVehicleCosmeticsLevelPreviewActor", "GetPossibleSkinNames");

	Params::FortVehicleCosmeticsLevelPreviewActor_GetPossibleSkinNames Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VehicleCosmeticsRuntime.VehicleCosmeticsPreviewVehicle.HandleOnBoostApplied
// (Final, Native, Public)

void AVehicleCosmeticsPreviewVehicle::HandleOnBoostApplied()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleCosmeticsPreviewVehicle", "HandleOnBoostApplied");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function VehicleCosmeticsRuntime.VehicleCosmeticsPreviewVehicle.HandleOnDriftTrailApplied
// (Final, Native, Public)

void AVehicleCosmeticsPreviewVehicle::HandleOnDriftTrailApplied()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleCosmeticsPreviewVehicle", "HandleOnDriftTrailApplied");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function VehicleCosmeticsRuntime.VehicleCosmeticsPreviewVehicle.HandleOnVehicleCosmeticsFinished
// (Final, Native, Public)

void AVehicleCosmeticsPreviewVehicle::HandleOnVehicleCosmeticsFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleCosmeticsPreviewVehicle", "HandleOnVehicleCosmeticsFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function VehicleCosmeticsRuntime.VehicleCosmeticsBlueprintLibrary.GetMaxSignificanceLOD_BoostFX
// (Final, RequiredAPI, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UVehicleCosmeticsBlueprintLibrary::GetMaxSignificanceLOD_BoostFX()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VehicleCosmeticsBlueprintLibrary", "GetMaxSignificanceLOD_BoostFX");

	Params::VehicleCosmeticsBlueprintLibrary_GetMaxSignificanceLOD_BoostFX Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VehicleCosmeticsRuntime.VehicleCosmeticsBlueprintLibrary.GetMaxSignificanceLOD_FrontWheelDriftFX
// (Final, RequiredAPI, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UVehicleCosmeticsBlueprintLibrary::GetMaxSignificanceLOD_FrontWheelDriftFX()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VehicleCosmeticsBlueprintLibrary", "GetMaxSignificanceLOD_FrontWheelDriftFX");

	Params::VehicleCosmeticsBlueprintLibrary_GetMaxSignificanceLOD_FrontWheelDriftFX Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VehicleCosmeticsRuntime.VehicleCosmeticsBlueprintLibrary.GetMaxSignificanceLOD_Generic
// (Final, RequiredAPI, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UVehicleCosmeticsBlueprintLibrary::GetMaxSignificanceLOD_Generic()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VehicleCosmeticsBlueprintLibrary", "GetMaxSignificanceLOD_Generic");

	Params::VehicleCosmeticsBlueprintLibrary_GetMaxSignificanceLOD_Generic Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VehicleCosmeticsRuntime.VehicleCosmeticsBlueprintLibrary.GetMaxSignificanceLOD_RearWheelDriftFX
// (Final, RequiredAPI, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UVehicleCosmeticsBlueprintLibrary::GetMaxSignificanceLOD_RearWheelDriftFX()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VehicleCosmeticsBlueprintLibrary", "GetMaxSignificanceLOD_RearWheelDriftFX");

	Params::VehicleCosmeticsBlueprintLibrary_GetMaxSignificanceLOD_RearWheelDriftFX Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VehicleCosmeticsRuntime.PlayerCustomizableObjectCacheComponent.OnPlayerDisconnected
// (Final, Native, Protected)
// Parameters:
// class AFortPlayerStateAthena*           PlayerState                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsDisconnected                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPlayerCustomizableObjectCacheComponent::OnPlayerDisconnected(class AFortPlayerStateAthena* PlayerState, bool bIsDisconnected)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerCustomizableObjectCacheComponent", "OnPlayerDisconnected");

	Params::PlayerCustomizableObjectCacheComponent_OnPlayerDisconnected Parms{};

	Parms.PlayerState = PlayerState;
	Parms.bIsDisconnected = bIsDisconnected;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VehicleCosmeticsRuntime.PlayerCustomizableObjectCacheComponent.OnSeamlessTravelStart
// (Final, Native, Protected)
// Parameters:
// class UWorld*                           CurrentWorld                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           LevelName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPlayerCustomizableObjectCacheComponent::OnSeamlessTravelStart(class UWorld* CurrentWorld, const class FString& LevelName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerCustomizableObjectCacheComponent", "OnSeamlessTravelStart");

	Params::PlayerCustomizableObjectCacheComponent_OnSeamlessTravelStart Parms{};

	Parms.CurrentWorld = CurrentWorld;
	Parms.LevelName = std::move(LevelName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VehicleCosmeticsRuntime.VehicleCosmeticsActor.ApplyCosmetic
// (Native, Public)

void AVehicleCosmeticsActor::ApplyCosmetic()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleCosmeticsActor", "ApplyCosmetic");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function VehicleCosmeticsRuntime.VehicleCosmeticsActor.BoostFinished
// (Final, Native, Public)

void AVehicleCosmeticsActor::BoostFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleCosmeticsActor", "BoostFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function VehicleCosmeticsRuntime.VehicleCosmeticsActor.BoostStarted
// (Final, Native, Public)

void AVehicleCosmeticsActor::BoostStarted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleCosmeticsActor", "BoostStarted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function VehicleCosmeticsRuntime.VehicleCosmeticsActor.BP_OnBonusSpeedActivated
// (Event, Protected, BlueprintEvent)

void AVehicleCosmeticsActor::BP_OnBonusSpeedActivated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleCosmeticsActor", "BP_OnBonusSpeedActivated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VehicleCosmeticsRuntime.VehicleCosmeticsActor.BP_OnBonusSpeedDeactivated
// (Event, Protected, BlueprintEvent)

void AVehicleCosmeticsActor::BP_OnBonusSpeedDeactivated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleCosmeticsActor", "BP_OnBonusSpeedDeactivated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VehicleCosmeticsRuntime.VehicleCosmeticsActor.BP_OnBoostFinished
// (Event, Protected, BlueprintEvent)

void AVehicleCosmeticsActor::BP_OnBoostFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleCosmeticsActor", "BP_OnBoostFinished");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VehicleCosmeticsRuntime.VehicleCosmeticsActor.BP_OnBoostStarted
// (Event, Protected, BlueprintEvent)

void AVehicleCosmeticsActor::BP_OnBoostStarted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleCosmeticsActor", "BP_OnBoostStarted");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VehicleCosmeticsRuntime.VehicleCosmeticsActor.BP_OnColorReady
// (Event, Protected, BlueprintEvent)
// Parameters:
// class FName                             Color                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVehicleCosmeticsAdditionalParameterInfosAdditionalInfo                                         (Parm, NativeAccessSpecifierPublic)

void AVehicleCosmeticsActor::BP_OnColorReady(class FName Color, const struct FVehicleCosmeticsAdditionalParameterInfos& AdditionalInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleCosmeticsActor", "BP_OnColorReady");

	Params::VehicleCosmeticsActor_BP_OnColorReady Parms{};

	Parms.Color = Color;
	Parms.AdditionalInfo = std::move(AdditionalInfo);

	UObject::ProcessEvent(Func, &Parms);
}


// Function VehicleCosmeticsRuntime.VehicleCosmeticsActor.BP_OnCosmeticApplied
// (Event, Protected, BlueprintEvent)

void AVehicleCosmeticsActor::BP_OnCosmeticApplied()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleCosmeticsActor", "BP_OnCosmeticApplied");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VehicleCosmeticsRuntime.VehicleCosmeticsActor.BP_OnDeactivated
// (Event, Protected, BlueprintEvent)

void AVehicleCosmeticsActor::BP_OnDeactivated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleCosmeticsActor", "BP_OnDeactivated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VehicleCosmeticsRuntime.VehicleCosmeticsActor.BP_OnDriftFinished
// (Event, Protected, BlueprintEvent)

void AVehicleCosmeticsActor::BP_OnDriftFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleCosmeticsActor", "BP_OnDriftFinished");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VehicleCosmeticsRuntime.VehicleCosmeticsActor.BP_OnDriftStarted
// (Event, Protected, BlueprintEvent)

void AVehicleCosmeticsActor::BP_OnDriftStarted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleCosmeticsActor", "BP_OnDriftStarted");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VehicleCosmeticsRuntime.VehicleCosmeticsActor.BP_OnVehicleLanded
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   LandingForced                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bLandedKickflip                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVehicleCosmeticsActor::BP_OnVehicleLanded(float LandingForced, bool bLandedKickflip)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleCosmeticsActor", "BP_OnVehicleLanded");

	Params::VehicleCosmeticsActor_BP_OnVehicleLanded Parms{};

	Parms.LandingForced = LandingForced;
	Parms.bLandedKickflip = bLandedKickflip;

	UObject::ProcessEvent(Func, &Parms);
}


// Function VehicleCosmeticsRuntime.VehicleCosmeticsActor.BP_OnVehicleWheelsLeftGround
// (Event, Protected, BlueprintEvent)

void AVehicleCosmeticsActor::BP_OnVehicleWheelsLeftGround()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleCosmeticsActor", "BP_OnVehicleWheelsLeftGround");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VehicleCosmeticsRuntime.VehicleCosmeticsActor.ColorReady
// (Final, Native, Public, HasOutParams)
// Parameters:
// class FName                             InColor                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVehicleCosmeticsAdditionalParameterInfosInInfo                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void AVehicleCosmeticsActor::ColorReady(const class FName InColor, const struct FVehicleCosmeticsAdditionalParameterInfos& InInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleCosmeticsActor", "ColorReady");

	Params::VehicleCosmeticsActor_ColorReady Parms{};

	Parms.InColor = InColor;
	Parms.InInfo = std::move(InInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VehicleCosmeticsRuntime.VehicleCosmeticsActor.DriftFinished
// (Final, Native, Public)

void AVehicleCosmeticsActor::DriftFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleCosmeticsActor", "DriftFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function VehicleCosmeticsRuntime.VehicleCosmeticsActor.DriftStarted
// (Final, Native, Public)

void AVehicleCosmeticsActor::DriftStarted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleCosmeticsActor", "DriftStarted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function VehicleCosmeticsRuntime.VehicleCosmeticsActor.GetBodyMeshComponent
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USkeletalMeshComponent*           ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USkeletalMeshComponent* AVehicleCosmeticsActor::GetBodyMeshComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleCosmeticsActor", "GetBodyMeshComponent");

	Params::VehicleCosmeticsActor_GetBodyMeshComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VehicleCosmeticsRuntime.VehicleCosmeticsAssembledMeshUserComponent.ClientOnCosmeticsFailed
// (Final, RequiredAPI, Net, NetReliable, Native, Event, Private, NetClient)
// Parameters:
// struct FVehicleCosmeticsFailureInfo     ReasonInfo                                             (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)

void UVehicleCosmeticsAssembledMeshUserComponent::ClientOnCosmeticsFailed(const struct FVehicleCosmeticsFailureInfo& ReasonInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleCosmeticsAssembledMeshUserComponent", "ClientOnCosmeticsFailed");

	Params::VehicleCosmeticsAssembledMeshUserComponent_ClientOnCosmeticsFailed Parms{};

	Parms.ReasonInfo = std::move(ReasonInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VehicleCosmeticsRuntime.VehicleCosmeticsAssembledMeshUserComponent.HandleBeginVehicleCosmetics
// (Final, Native, Private)

void UVehicleCosmeticsAssembledMeshUserComponent::HandleBeginVehicleCosmetics()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleCosmeticsAssembledMeshUserComponent", "HandleBeginVehicleCosmetics");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function VehicleCosmeticsRuntime.VehicleCosmeticsAssembledMeshUserComponent.HandleBodyPhysicsChanges
// (Final, Native, Protected)

void UVehicleCosmeticsAssembledMeshUserComponent::HandleBodyPhysicsChanges()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleCosmeticsAssembledMeshUserComponent", "HandleBodyPhysicsChanges");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function VehicleCosmeticsRuntime.VehicleCosmeticsAssembledMeshUserComponent.HandleBoostFinished
// (Final, Native, Private)

void UVehicleCosmeticsAssembledMeshUserComponent::HandleBoostFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleCosmeticsAssembledMeshUserComponent", "HandleBoostFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function VehicleCosmeticsRuntime.VehicleCosmeticsAssembledMeshUserComponent.HandleBoostStarted
// (Final, Native, Private)

void UVehicleCosmeticsAssembledMeshUserComponent::HandleBoostStarted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleCosmeticsAssembledMeshUserComponent", "HandleBoostStarted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function VehicleCosmeticsRuntime.VehicleCosmeticsAssembledMeshUserComponent.HandleDriftFinished
// (Final, Native, Private)

void UVehicleCosmeticsAssembledMeshUserComponent::HandleDriftFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleCosmeticsAssembledMeshUserComponent", "HandleDriftFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function VehicleCosmeticsRuntime.VehicleCosmeticsAssembledMeshUserComponent.HandleDriftStarted
// (Final, Native, Private)
// Parameters:
// bool                                    bEnableVFX                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVehicleCosmeticsAssembledMeshUserComponent::HandleDriftStarted(const bool bEnableVFX)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleCosmeticsAssembledMeshUserComponent", "HandleDriftStarted");

	Params::VehicleCosmeticsAssembledMeshUserComponent_HandleDriftStarted Parms{};

	Parms.bEnableVFX = bEnableVFX;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VehicleCosmeticsRuntime.VehicleCosmeticsAssembledMeshUserComponent.HandleForceApplyVehicleCosmetics
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FSpawnerInfoForcedCosmetics      ForcedCosmetics                                        (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVehicleCosmeticsAssembledMeshUserComponent::HandleForceApplyVehicleCosmetics(const struct FSpawnerInfoForcedCosmetics& ForcedCosmetics)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleCosmeticsAssembledMeshUserComponent", "HandleForceApplyVehicleCosmetics");

	Params::VehicleCosmeticsAssembledMeshUserComponent_HandleForceApplyVehicleCosmetics Parms{};

	Parms.ForcedCosmetics = std::move(ForcedCosmetics);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VehicleCosmeticsRuntime.VehicleCosmeticsAssembledMeshUserComponent.HandleModApplied
// (Final, Native, Protected, HasOutParams)
// Parameters:
// class AFortAthenaVehicle*               Vehicle                                                (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     ModTag                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVehicleCosmeticsAssembledMeshUserComponent::HandleModApplied(const class AFortAthenaVehicle* Vehicle, const struct FGameplayTag& ModTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleCosmeticsAssembledMeshUserComponent", "HandleModApplied");

	Params::VehicleCosmeticsAssembledMeshUserComponent_HandleModApplied Parms{};

	Parms.Vehicle = Vehicle;
	Parms.ModTag = std::move(ModTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VehicleCosmeticsRuntime.VehicleCosmeticsAssembledMeshUserComponent.HandleOnExplode
// (Final, Native, Protected)
// Parameters:
// class AController*                      LastDamageInstigator                                   (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AFortAthenaVehicle*               Vehicle                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVehicleCosmeticsAssembledMeshUserComponent::HandleOnExplode(const class AController* LastDamageInstigator, class AFortAthenaVehicle* Vehicle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleCosmeticsAssembledMeshUserComponent", "HandleOnExplode");

	Params::VehicleCosmeticsAssembledMeshUserComponent_HandleOnExplode Parms{};

	Parms.LastDamageInstigator = LastDamageInstigator;
	Parms.Vehicle = Vehicle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VehicleCosmeticsRuntime.VehicleCosmeticsAssembledMeshUserComponent.HandleTirePopped
// (Final, Native, Protected)
// Parameters:
// int32                                   TireIndex                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVehicleCosmeticsAssembledMeshUserComponent::HandleTirePopped(const int32 TireIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleCosmeticsAssembledMeshUserComponent", "HandleTirePopped");

	Params::VehicleCosmeticsAssembledMeshUserComponent_HandleTirePopped Parms{};

	Parms.TireIndex = TireIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VehicleCosmeticsRuntime.VehicleCosmeticsAssembledMeshUserComponent.HandleTireRepaired
// (Final, Native, Protected)
// Parameters:
// int32                                   TireIndex                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVehicleCosmeticsAssembledMeshUserComponent::HandleTireRepaired(const int32 TireIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleCosmeticsAssembledMeshUserComponent", "HandleTireRepaired");

	Params::VehicleCosmeticsAssembledMeshUserComponent_HandleTireRepaired Parms{};

	Parms.TireIndex = TireIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VehicleCosmeticsRuntime.VehicleCosmeticsAssembledMeshUserComponent.OnRep_OwningCosmeticsLoadoutData
// (Final, Native, Protected)

void UVehicleCosmeticsAssembledMeshUserComponent::OnRep_OwningCosmeticsLoadoutData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleCosmeticsAssembledMeshUserComponent", "OnRep_OwningCosmeticsLoadoutData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function VehicleCosmeticsRuntime.VehicleCosmeticsAssembledMeshUserComponent.SetVehicleCosmeticsEnabled
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnabled                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVehicleCosmeticsAssembledMeshUserComponent::SetVehicleCosmeticsEnabled(const bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleCosmeticsAssembledMeshUserComponent", "SetVehicleCosmeticsEnabled");

	Params::VehicleCosmeticsAssembledMeshUserComponent_SetVehicleCosmeticsEnabled Parms{};

	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VehicleCosmeticsRuntime.VehicleCosmeticsCheatManager.ClearVehicleCosmeticsLoadout
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)

void UVehicleCosmeticsCheatManager::ClearVehicleCosmeticsLoadout()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleCosmeticsCheatManager", "ClearVehicleCosmeticsLoadout");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function VehicleCosmeticsRuntime.VehicleCosmeticsCheatManager.CustomizeAllVehicles
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)
// Parameters:
// class FString                           BodyName                                               (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           WheelName                                              (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           SkinName                                               (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           BoosterName                                            (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           DriftTrailName                                         (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           BodyPainted                                            (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           WheelPainted                                           (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           BodyColor                                              (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           SkinColor                                              (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           GlowColor                                              (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           SkinPainted                                            (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           BoosterPainted                                         (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           DriftTrailPainted                                      (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVehicleCosmeticsCheatManager::CustomizeAllVehicles(const class FString& BodyName, const class FString& WheelName, const class FString& SkinName, const class FString& BoosterName, const class FString& DriftTrailName, const class FString& BodyPainted, const class FString& WheelPainted, const class FString& BodyColor, const class FString& SkinColor, const class FString& GlowColor, const class FString& SkinPainted, const class FString& BoosterPainted, const class FString& DriftTrailPainted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleCosmeticsCheatManager", "CustomizeAllVehicles");

	Params::VehicleCosmeticsCheatManager_CustomizeAllVehicles Parms{};

	Parms.BodyName = std::move(BodyName);
	Parms.WheelName = std::move(WheelName);
	Parms.SkinName = std::move(SkinName);
	Parms.BoosterName = std::move(BoosterName);
	Parms.DriftTrailName = std::move(DriftTrailName);
	Parms.BodyPainted = std::move(BodyPainted);
	Parms.WheelPainted = std::move(WheelPainted);
	Parms.BodyColor = std::move(BodyColor);
	Parms.SkinColor = std::move(SkinColor);
	Parms.GlowColor = std::move(GlowColor);
	Parms.SkinPainted = std::move(SkinPainted);
	Parms.BoosterPainted = std::move(BoosterPainted);
	Parms.DriftTrailPainted = std::move(DriftTrailPainted);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VehicleCosmeticsRuntime.VehicleCosmeticsCheatManager.CustomizeVehicle
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)
// Parameters:
// class FString                           BodyName                                               (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           WheelName                                              (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           SkinName                                               (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           BoosterName                                            (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           DriftTrailName                                         (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           BodyPainted                                            (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           WheelPainted                                           (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           BodyColor                                              (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           SkinColor                                              (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           GlowColor                                              (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           SkinPainted                                            (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           BoosterPainted                                         (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           DriftTrailPainted                                      (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVehicleCosmeticsCheatManager::CustomizeVehicle(const class FString& BodyName, const class FString& WheelName, const class FString& SkinName, const class FString& BoosterName, const class FString& DriftTrailName, const class FString& BodyPainted, const class FString& WheelPainted, const class FString& BodyColor, const class FString& SkinColor, const class FString& GlowColor, const class FString& SkinPainted, const class FString& BoosterPainted, const class FString& DriftTrailPainted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleCosmeticsCheatManager", "CustomizeVehicle");

	Params::VehicleCosmeticsCheatManager_CustomizeVehicle Parms{};

	Parms.BodyName = std::move(BodyName);
	Parms.WheelName = std::move(WheelName);
	Parms.SkinName = std::move(SkinName);
	Parms.BoosterName = std::move(BoosterName);
	Parms.DriftTrailName = std::move(DriftTrailName);
	Parms.BodyPainted = std::move(BodyPainted);
	Parms.WheelPainted = std::move(WheelPainted);
	Parms.BodyColor = std::move(BodyColor);
	Parms.SkinColor = std::move(SkinColor);
	Parms.GlowColor = std::move(GlowColor);
	Parms.SkinPainted = std::move(SkinPainted);
	Parms.BoosterPainted = std::move(BoosterPainted);
	Parms.DriftTrailPainted = std::move(DriftTrailPainted);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VehicleCosmeticsRuntime.VehicleCosmeticsCheatManager.DumpVehicleCosmeticsComponents
// (Final, Exec, Native, Public)

void UVehicleCosmeticsCheatManager::DumpVehicleCosmeticsComponents()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleCosmeticsCheatManager", "DumpVehicleCosmeticsComponents");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function VehicleCosmeticsRuntime.VehicleCosmeticsCheatManager.DumpVehicleCosmeticsLoadedAssetCheatNames
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)

void UVehicleCosmeticsCheatManager::DumpVehicleCosmeticsLoadedAssetCheatNames()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleCosmeticsCheatManager", "DumpVehicleCosmeticsLoadedAssetCheatNames");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function VehicleCosmeticsRuntime.VehicleCosmeticsCheatManager.DumpVehicleCosmeticsLoadedAssetSkeletalMeshes
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)

void UVehicleCosmeticsCheatManager::DumpVehicleCosmeticsLoadedAssetSkeletalMeshes()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleCosmeticsCheatManager", "DumpVehicleCosmeticsLoadedAssetSkeletalMeshes");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function VehicleCosmeticsRuntime.VehicleCosmeticsCheatManager.DumpVehicleCosmeticsLoadedAssetTemplateIds
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)

void UVehicleCosmeticsCheatManager::DumpVehicleCosmeticsLoadedAssetTemplateIds()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleCosmeticsCheatManager", "DumpVehicleCosmeticsLoadedAssetTemplateIds");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function VehicleCosmeticsRuntime.VehicleCosmeticsCheatManager.DumpVehicleCosmeticsLoadedAssetVariantTokenTypes
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)

void UVehicleCosmeticsCheatManager::DumpVehicleCosmeticsLoadedAssetVariantTokenTypes()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleCosmeticsCheatManager", "DumpVehicleCosmeticsLoadedAssetVariantTokenTypes");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function VehicleCosmeticsRuntime.VehicleCosmeticsCheatManager.DumpVehicleCosmeticsPhysicsShapeCollision
// (Final, Exec, Native, Public)

void UVehicleCosmeticsCheatManager::DumpVehicleCosmeticsPhysicsShapeCollision()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleCosmeticsCheatManager", "DumpVehicleCosmeticsPhysicsShapeCollision");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function VehicleCosmeticsRuntime.VehicleCosmeticsCheatManager.GrantVehicleCosmeticsLoadedAssets
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)
// Parameters:
// class FString                           CheatName                                              (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVehicleCosmeticsCheatManager::GrantVehicleCosmeticsLoadedAssets(const class FString& CheatName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleCosmeticsCheatManager", "GrantVehicleCosmeticsLoadedAssets");

	Params::VehicleCosmeticsCheatManager_GrantVehicleCosmeticsLoadedAssets Parms{};

	Parms.CheatName = std::move(CheatName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VehicleCosmeticsRuntime.VehicleCosmeticsCheatManager.SetVehicleActiveArchetype
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)
// Parameters:
// class FName                             VehicleArchetypeTagName                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVehicleCosmeticsCheatManager::SetVehicleActiveArchetype(const class FName VehicleArchetypeTagName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleCosmeticsCheatManager", "SetVehicleActiveArchetype");

	Params::VehicleCosmeticsCheatManager_SetVehicleActiveArchetype Parms{};

	Parms.VehicleArchetypeTagName = VehicleArchetypeTagName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VehicleCosmeticsRuntime.VehicleCosmeticsCheatManager.SetVehicleCosmetics_BoosterPainted
// (Final, Exec, Native, Public)
// Parameters:
// class FString                           PaintName                                              (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVehicleCosmeticsCheatManager::SetVehicleCosmetics_BoosterPainted(const class FString& PaintName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleCosmeticsCheatManager", "SetVehicleCosmetics_BoosterPainted");

	Params::VehicleCosmeticsCheatManager_SetVehicleCosmetics_BoosterPainted Parms{};

	Parms.PaintName = std::move(PaintName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VehicleCosmeticsRuntime.VehicleCosmeticsCheatManager.SetVehicleCosmetics_DriftTrailPainted
// (Final, Exec, Native, Public)
// Parameters:
// class FString                           PaintName                                              (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVehicleCosmeticsCheatManager::SetVehicleCosmetics_DriftTrailPainted(const class FString& PaintName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleCosmeticsCheatManager", "SetVehicleCosmetics_DriftTrailPainted");

	Params::VehicleCosmeticsCheatManager_SetVehicleCosmetics_DriftTrailPainted Parms{};

	Parms.PaintName = std::move(PaintName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VehicleCosmeticsRuntime.VehicleCosmeticsCheatManager.SetVehicleCosmeticsLoadout
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)
// Parameters:
// class FString                           BodyName                                               (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           WheelName                                              (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           SkinName                                               (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           BoosterName                                            (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           DriftTrailName                                         (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           BodyPainted                                            (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           WheelPainted                                           (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           BodyColor                                              (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           SkinColor                                              (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           GlowColor                                              (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           SkinPainted                                            (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           BoosterPainted                                         (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           DriftTrailPainted                                      (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVehicleCosmeticsCheatManager::SetVehicleCosmeticsLoadout(const class FString& BodyName, const class FString& WheelName, const class FString& SkinName, const class FString& BoosterName, const class FString& DriftTrailName, const class FString& BodyPainted, const class FString& WheelPainted, const class FString& BodyColor, const class FString& SkinColor, const class FString& GlowColor, const class FString& SkinPainted, const class FString& BoosterPainted, const class FString& DriftTrailPainted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleCosmeticsCheatManager", "SetVehicleCosmeticsLoadout");

	Params::VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout Parms{};

	Parms.BodyName = std::move(BodyName);
	Parms.WheelName = std::move(WheelName);
	Parms.SkinName = std::move(SkinName);
	Parms.BoosterName = std::move(BoosterName);
	Parms.DriftTrailName = std::move(DriftTrailName);
	Parms.BodyPainted = std::move(BodyPainted);
	Parms.WheelPainted = std::move(WheelPainted);
	Parms.BodyColor = std::move(BodyColor);
	Parms.SkinColor = std::move(SkinColor);
	Parms.GlowColor = std::move(GlowColor);
	Parms.SkinPainted = std::move(SkinPainted);
	Parms.BoosterPainted = std::move(BoosterPainted);
	Parms.DriftTrailPainted = std::move(DriftTrailPainted);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VehicleCosmeticsRuntime.VehicleCosmeticsCheatManager.SetVehicleCosmeticsLoadout_Body
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)
// Parameters:
// class FString                           BodyName                                               (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVehicleCosmeticsCheatManager::SetVehicleCosmeticsLoadout_Body(const class FString& BodyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleCosmeticsCheatManager", "SetVehicleCosmeticsLoadout_Body");

	Params::VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout_Body Parms{};

	Parms.BodyName = std::move(BodyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VehicleCosmeticsRuntime.VehicleCosmeticsCheatManager.SetVehicleCosmeticsLoadout_BodyColor
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)
// Parameters:
// class FString                           BodyColor                                              (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             VehicleArchetypeTagName                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVehicleCosmeticsCheatManager::SetVehicleCosmeticsLoadout_BodyColor(const class FString& BodyColor, class FName VehicleArchetypeTagName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleCosmeticsCheatManager", "SetVehicleCosmeticsLoadout_BodyColor");

	Params::VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout_BodyColor Parms{};

	Parms.BodyColor = std::move(BodyColor);
	Parms.VehicleArchetypeTagName = VehicleArchetypeTagName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VehicleCosmeticsRuntime.VehicleCosmeticsCheatManager.SetVehicleCosmeticsLoadout_BodyPainted
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)
// Parameters:
// class FString                           PaintName                                              (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             VehicleArchetypeTagName                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVehicleCosmeticsCheatManager::SetVehicleCosmeticsLoadout_BodyPainted(const class FString& PaintName, class FName VehicleArchetypeTagName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleCosmeticsCheatManager", "SetVehicleCosmeticsLoadout_BodyPainted");

	Params::VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout_BodyPainted Parms{};

	Parms.PaintName = std::move(PaintName);
	Parms.VehicleArchetypeTagName = VehicleArchetypeTagName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VehicleCosmeticsRuntime.VehicleCosmeticsCheatManager.SetVehicleCosmeticsLoadout_Booster
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)
// Parameters:
// class FString                           BoosterName                                            (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             VehicleArchetypeTagName                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVehicleCosmeticsCheatManager::SetVehicleCosmeticsLoadout_Booster(const class FString& BoosterName, class FName VehicleArchetypeTagName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleCosmeticsCheatManager", "SetVehicleCosmeticsLoadout_Booster");

	Params::VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout_Booster Parms{};

	Parms.BoosterName = std::move(BoosterName);
	Parms.VehicleArchetypeTagName = VehicleArchetypeTagName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VehicleCosmeticsRuntime.VehicleCosmeticsCheatManager.SetVehicleCosmeticsLoadout_BoosterPainted
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)
// Parameters:
// class FString                           PaintName                                              (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             VehicleArchetypeTagName                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVehicleCosmeticsCheatManager::SetVehicleCosmeticsLoadout_BoosterPainted(const class FString& PaintName, class FName VehicleArchetypeTagName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleCosmeticsCheatManager", "SetVehicleCosmeticsLoadout_BoosterPainted");

	Params::VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout_BoosterPainted Parms{};

	Parms.PaintName = std::move(PaintName);
	Parms.VehicleArchetypeTagName = VehicleArchetypeTagName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VehicleCosmeticsRuntime.VehicleCosmeticsCheatManager.SetVehicleCosmeticsLoadout_DriftTrail
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)
// Parameters:
// class FString                           DriftSmokeName                                         (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             VehicleArchetypeTagName                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVehicleCosmeticsCheatManager::SetVehicleCosmeticsLoadout_DriftTrail(const class FString& DriftSmokeName, class FName VehicleArchetypeTagName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleCosmeticsCheatManager", "SetVehicleCosmeticsLoadout_DriftTrail");

	Params::VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout_DriftTrail Parms{};

	Parms.DriftSmokeName = std::move(DriftSmokeName);
	Parms.VehicleArchetypeTagName = VehicleArchetypeTagName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VehicleCosmeticsRuntime.VehicleCosmeticsCheatManager.SetVehicleCosmeticsLoadout_DriftTrailPainted
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)
// Parameters:
// class FString                           PaintName                                              (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             VehicleArchetypeTagName                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVehicleCosmeticsCheatManager::SetVehicleCosmeticsLoadout_DriftTrailPainted(const class FString& PaintName, class FName VehicleArchetypeTagName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleCosmeticsCheatManager", "SetVehicleCosmeticsLoadout_DriftTrailPainted");

	Params::VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout_DriftTrailPainted Parms{};

	Parms.PaintName = std::move(PaintName);
	Parms.VehicleArchetypeTagName = VehicleArchetypeTagName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VehicleCosmeticsRuntime.VehicleCosmeticsCheatManager.SetVehicleCosmeticsLoadout_GlowColor
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)
// Parameters:
// class FString                           GlowColor                                              (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             VehicleArchetypeTagName                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVehicleCosmeticsCheatManager::SetVehicleCosmeticsLoadout_GlowColor(const class FString& GlowColor, class FName VehicleArchetypeTagName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleCosmeticsCheatManager", "SetVehicleCosmeticsLoadout_GlowColor");

	Params::VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout_GlowColor Parms{};

	Parms.GlowColor = std::move(GlowColor);
	Parms.VehicleArchetypeTagName = VehicleArchetypeTagName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VehicleCosmeticsRuntime.VehicleCosmeticsCheatManager.SetVehicleCosmeticsLoadout_Skin
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)
// Parameters:
// class FString                           SkinName                                               (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             VehicleArchetypeTagName                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVehicleCosmeticsCheatManager::SetVehicleCosmeticsLoadout_Skin(const class FString& SkinName, class FName VehicleArchetypeTagName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleCosmeticsCheatManager", "SetVehicleCosmeticsLoadout_Skin");

	Params::VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout_Skin Parms{};

	Parms.SkinName = std::move(SkinName);
	Parms.VehicleArchetypeTagName = VehicleArchetypeTagName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VehicleCosmeticsRuntime.VehicleCosmeticsCheatManager.SetVehicleCosmeticsLoadout_SkinColor
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)
// Parameters:
// class FString                           SkinColor                                              (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             VehicleArchetypeTagName                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVehicleCosmeticsCheatManager::SetVehicleCosmeticsLoadout_SkinColor(const class FString& SkinColor, class FName VehicleArchetypeTagName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleCosmeticsCheatManager", "SetVehicleCosmeticsLoadout_SkinColor");

	Params::VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout_SkinColor Parms{};

	Parms.SkinColor = std::move(SkinColor);
	Parms.VehicleArchetypeTagName = VehicleArchetypeTagName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VehicleCosmeticsRuntime.VehicleCosmeticsCheatManager.SetVehicleCosmeticsLoadout_SkinPainted
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)
// Parameters:
// class FString                           PaintName                                              (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             VehicleArchetypeTagName                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVehicleCosmeticsCheatManager::SetVehicleCosmeticsLoadout_SkinPainted(const class FString& PaintName, class FName VehicleArchetypeTagName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleCosmeticsCheatManager", "SetVehicleCosmeticsLoadout_SkinPainted");

	Params::VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout_SkinPainted Parms{};

	Parms.PaintName = std::move(PaintName);
	Parms.VehicleArchetypeTagName = VehicleArchetypeTagName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VehicleCosmeticsRuntime.VehicleCosmeticsCheatManager.SetVehicleCosmeticsLoadout_Wheel
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)
// Parameters:
// class FString                           WheelName                                              (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             VehicleArchetypeTagName                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVehicleCosmeticsCheatManager::SetVehicleCosmeticsLoadout_Wheel(const class FString& WheelName, class FName VehicleArchetypeTagName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleCosmeticsCheatManager", "SetVehicleCosmeticsLoadout_Wheel");

	Params::VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout_Wheel Parms{};

	Parms.WheelName = std::move(WheelName);
	Parms.VehicleArchetypeTagName = VehicleArchetypeTagName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VehicleCosmeticsRuntime.VehicleCosmeticsCheatManager.SetVehicleCosmeticsLoadout_WheelPainted
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)
// Parameters:
// class FString                           PaintName                                              (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             VehicleArchetypeTagName                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVehicleCosmeticsCheatManager::SetVehicleCosmeticsLoadout_WheelPainted(const class FString& PaintName, class FName VehicleArchetypeTagName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleCosmeticsCheatManager", "SetVehicleCosmeticsLoadout_WheelPainted");

	Params::VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout_WheelPainted Parms{};

	Parms.PaintName = std::move(PaintName);
	Parms.VehicleArchetypeTagName = VehicleArchetypeTagName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VehicleCosmeticsRuntime.VehicleCosmeticsCheatManager.VehicleCosmeticsDriftEnabled
// (Final, Exec, Native, Public)
// Parameters:
// bool                                    bNewValue                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVehicleCosmeticsCheatManager::VehicleCosmeticsDriftEnabled(const bool bNewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleCosmeticsCheatManager", "VehicleCosmeticsDriftEnabled");

	Params::VehicleCosmeticsCheatManager_VehicleCosmeticsDriftEnabled Parms{};

	Parms.bNewValue = bNewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VehicleCosmeticsRuntime.VehicleCosmeticsInterface.ApplyFXParams
// (RequiredAPI, Native, Public, BlueprintCallable)

void IVehicleCosmeticsInterface::ApplyFXParams()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleCosmeticsInterface", "ApplyFXParams");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function VehicleCosmeticsRuntime.VehicleCosmeticsInterface.GetBodyItemName
// (RequiredAPI, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName IVehicleCosmeticsInterface::GetBodyItemName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleCosmeticsInterface", "GetBodyItemName");

	Params::VehicleCosmeticsInterface_GetBodyItemName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VehicleCosmeticsRuntime.VehicleCosmeticsInterface.GetDraftingAppliedBonusSpeed
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float IVehicleCosmeticsInterface::GetDraftingAppliedBonusSpeed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleCosmeticsInterface", "GetDraftingAppliedBonusSpeed");

	Params::VehicleCosmeticsInterface_GetDraftingAppliedBonusSpeed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VehicleCosmeticsRuntime.VehicleCosmeticsInterface.GetDriftTrailItemName
// (RequiredAPI, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName IVehicleCosmeticsInterface::GetDriftTrailItemName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleCosmeticsInterface", "GetDriftTrailItemName");

	Params::VehicleCosmeticsInterface_GetDriftTrailItemName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VehicleCosmeticsRuntime.VehicleCosmeticsInterface.GetTurboItemName
// (RequiredAPI, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName IVehicleCosmeticsInterface::GetTurboItemName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleCosmeticsInterface", "GetTurboItemName");

	Params::VehicleCosmeticsInterface_GetTurboItemName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VehicleCosmeticsRuntime.VehicleCosmeticsInterface.GetWheelItemName
// (RequiredAPI, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName IVehicleCosmeticsInterface::GetWheelItemName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleCosmeticsInterface", "GetWheelItemName");

	Params::VehicleCosmeticsInterface_GetWheelItemName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VehicleCosmeticsRuntime.VehicleCosmeticsInterface.GetWheelSkeletalMeshComponents
// (RequiredAPI, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class USkeletalMeshComponent*>   ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<class USkeletalMeshComponent*> IVehicleCosmeticsInterface::GetWheelSkeletalMeshComponents() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleCosmeticsInterface", "GetWheelSkeletalMeshComponents");

	Params::VehicleCosmeticsInterface_GetWheelSkeletalMeshComponents Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VehicleCosmeticsRuntime.VehicleCosmeticsInterface.IsDriftBoostActive
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IVehicleCosmeticsInterface::IsDriftBoostActive() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleCosmeticsInterface", "IsDriftBoostActive");

	Params::VehicleCosmeticsInterface_IsDriftBoostActive Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VehicleCosmeticsRuntime.VehicleCosmeticsInterface.IsDrifting
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IVehicleCosmeticsInterface::IsDrifting() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleCosmeticsInterface", "IsDrifting");

	Params::VehicleCosmeticsInterface_IsDrifting Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VehicleCosmeticsRuntime.VehicleCosmeticsInterface.IsJumpAbilityActive
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IVehicleCosmeticsInterface::IsJumpAbilityActive() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleCosmeticsInterface", "IsJumpAbilityActive");

	Params::VehicleCosmeticsInterface_IsJumpAbilityActive Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VehicleCosmeticsRuntime.VehicleCosmeticsInterface.IsKickflipActive
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IVehicleCosmeticsInterface::IsKickflipActive() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleCosmeticsInterface", "IsKickflipActive");

	Params::VehicleCosmeticsInterface_IsKickflipActive Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VehicleCosmeticsRuntime.VehicleCosmeticsInterface.IsStartlineBoostActive
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IVehicleCosmeticsInterface::IsStartlineBoostActive() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleCosmeticsInterface", "IsStartlineBoostActive");

	Params::VehicleCosmeticsInterface_IsStartlineBoostActive Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VehicleCosmeticsRuntime.VehicleCosmeticsInterface.IsTurboActive
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IVehicleCosmeticsInterface::IsTurboActive() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleCosmeticsInterface", "IsTurboActive");

	Params::VehicleCosmeticsInterface_IsTurboActive Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VehicleCosmeticsRuntime.VehicleCosmeticsInterface.IsUnderthrustActive
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IVehicleCosmeticsInterface::IsUnderthrustActive() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleCosmeticsInterface", "IsUnderthrustActive");

	Params::VehicleCosmeticsInterface_IsUnderthrustActive Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VehicleCosmeticsRuntime.VehicleCosmeticsInterface.ShouldWheelSpinForPreview
// (RequiredAPI, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IVehicleCosmeticsInterface::ShouldWheelSpinForPreview() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleCosmeticsInterface", "ShouldWheelSpinForPreview");

	Params::VehicleCosmeticsInterface_ShouldWheelSpinForPreview Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VehicleCosmeticsRuntime.VehicleAudioCosmeticData.GetEngineSound
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    bHighSpec                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSoftObjectPtr<class USoundBase>        ReturnValue                                            (Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSoftObjectPtr<class USoundBase> UVehicleAudioCosmeticData::GetEngineSound(bool bHighSpec)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleAudioCosmeticData", "GetEngineSound");

	Params::VehicleAudioCosmeticData_GetEngineSound Parms{};

	Parms.bHighSpec = bHighSpec;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

