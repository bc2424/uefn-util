#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RigVMDeveloper

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "RigVMDeveloper_structs.hpp"
#include "RigVM_structs.hpp"


namespace SDK
{

// Class RigVMDeveloper.RigVMSchema
// 0x0020 (0x0050 - 0x0030)
class URigVMSchema : public UObject
{
public:
	class UScriptStruct*                          ExecuteContextStruct;                              // 0x0030(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_38[0x18];                                      // 0x0038(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RigVMSchema">();
	}
	static class URigVMSchema* GetDefaultObj()
	{
		return GetDefaultObjImpl<URigVMSchema>();
	}
};

// Class RigVMDeveloper.RigVMEdGraph
// 0x0100 (0x01B0 - 0x00B0)
class URigVMEdGraph : public UEdGraph
{
public:
	uint8                                         Pad_B0[0x10];                                      // 0x00B0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ModelNodePath;                                     // 0x00C0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFunctionDefinition;                             // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D1[0xDF];                                      // 0x00D1(0x00DF)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RigVMEdGraph">();
	}
	static class URigVMEdGraph* GetDefaultObj()
	{
		return GetDefaultObjImpl<URigVMEdGraph>();
	}
};

// Class RigVMDeveloper.RigVMEdGraphNode
// 0x02F8 (0x03B8 - 0x00C0)
class URigVMEdGraphNode : public UEdGraphNode
{
public:
	class FString                                 ModelNodePath;                                     // 0x00C0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class URigVMNode>              CachedModelNode;                                   // 0x00D0(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMap<class FString, TWeakObjectPtr<class URigVMPin>> PinPathToModelPin;                                 // 0x00D8(0x0050)(Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	class FName                                   PropertyName;                                      // 0x0128(0x000C)(ZeroConstructor, Deprecated, IsPlainOldData, EditorOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_134[0x4];                                      // 0x0134(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 StructPath;                                        // 0x0138(0x0010)(ZeroConstructor, Deprecated, EditorOnly, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FEdGraphPinType                        PinType;                                           // 0x0148(0x0070)(Deprecated, EditorOnly, NoDestructor, NativeAccessSpecifierPrivate)
	int32                                         ParameterType;                                     // 0x01B8(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, EditorOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1BC[0x4];                                      // 0x01BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         ExpandedPins;                                      // 0x01C0(0x0010)(ZeroConstructor, Deprecated, EditorOnly, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1D0[0x1E8];                                    // 0x01D0(0x01E8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RigVMEdGraphNode">();
	}
	static class URigVMEdGraphNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<URigVMEdGraphNode>();
	}
};

// Class RigVMDeveloper.RigVMEdGraphSchema
// 0x0078 (0x00A8 - 0x0030)
class URigVMEdGraphSchema : public UEdGraphSchema
{
public:
	uint8                                         Pad_30[0x78];                                      // 0x0030(0x0078)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RigVMEdGraphSchema">();
	}
	static class URigVMEdGraphSchema* GetDefaultObj()
	{
		return GetDefaultObjImpl<URigVMEdGraphSchema>();
	}
};

// Class RigVMDeveloper.RigVMBlueprint
// 0x07D0 (0x0D30 - 0x0560)
class URigVMBlueprint : public UBlueprint
{
public:
	uint8                                         Pad_560[0x10];                                     // 0x0560(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class URigVMEdGraph*                          FunctionLibraryEdGraph;                            // 0x0570(0x0008)(ZeroConstructor, EditorOnly, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigVMEdGraphDisplaySettings           RigGraphDisplaySettings;                           // 0x0578(0x0098)(Edit, NativeAccessSpecifierPublic)
	struct FRigVMRuntimeSettings                  VMRuntimeSettings;                                 // 0x0610(0x0018)(Edit, NativeAccessSpecifierPublic)
	struct FRigVMCompileSettings                  VMCompileSettings;                                 // 0x0628(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FRigVMPythonSettings                   PythonLogSettings;                                 // 0x0668(0x0001)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_669[0x7];                                      // 0x0669(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, struct FSoftObjectPath>   UserDefinedStructGuidToPathName;                   // 0x0670(0x0050)(NativeAccessSpecifierPublic)
	TSet<class UObject*>                          UserDefinedTypesInUse;                             // 0x06C0(0x0050)(Transient, UObjectWrapper, NativeAccessSpecifierPublic)
	class URigVMGraph*                            Model;                                             // 0x0710(0x0008)(ZeroConstructor, Deprecated, EditorOnly, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class URigVMFunctionLibrary*                  FunctionLibrary;                                   // 0x0718(0x0008)(ZeroConstructor, Deprecated, EditorOnly, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRigVMClient                           RigVMClient;                                       // 0x0720(0x00D0)(Protected, NativeAccessSpecifierProtected)
	bool                                          ReferencedObjectPathsStored;                       // 0x07F0(0x0001)(ZeroConstructor, IsPlainOldData, EditorOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_7F1[0x7];                                      // 0x07F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSoftObjectPath>                ReferencedObjectPaths;                             // 0x07F8(0x0010)(ZeroConstructor, EditorOnly, Protected, NativeAccessSpecifierProtected)
	TArray<struct FRigVMGraphFunctionHeader>      PublicGraphFunctions;                              // 0x0808(0x0010)(ZeroConstructor, AssetRegistrySearchable, Protected, NativeAccessSpecifierProtected)
	TArray<struct FRigVMReferenceNodeData>        FunctionReferenceNodeData;                         // 0x0818(0x0010)(ZeroConstructor, AssetRegistrySearchable, Protected, NativeAccessSpecifierProtected)
	struct FRigVMVariant                          AssetVariant;                                      // 0x0828(0x0020)(Edit, EditorOnly, AssetRegistrySearchable, Protected, NativeAccessSpecifierProtected)
	class URigVMGraph*                            TemplateModel;                                     // 0x0848(0x0008)(ZeroConstructor, Transient, DuplicateTransient, EditorOnly, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class URigVMController*                       TemplateController;                                // 0x0850(0x0008)(ZeroConstructor, Transient, DuplicateTransient, EditorOnly, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_858[0x10];                                     // 0x0858(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, struct FRigVMOperand>     PinToOperandMap;                                   // 0x0868(0x0050)(Transient, DuplicateTransient, NativeAccessSpecifierPublic)
	uint8                                         Pad_8B8[0x8];                                      // 0x08B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           SupportedEventNames;                               // 0x08C0(0x0010)(ZeroConstructor, AssetRegistrySearchable, NativeAccessSpecifierPrivate)
	bool                                          bAutoRecompileVM;                                  // 0x08D0(0x0001)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bVMRecompilationRequired;                          // 0x08D1(0x0001)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bIsCompiling;                                      // 0x08D2(0x0001)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_8D3[0x1];                                      // 0x08D3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         VMRecompilationBracket;                            // 0x08D4(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bSkipDirtyBlueprintStatus;                         // 0x08D8(0x0001)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_8D9[0xDF];                                     // 0x08D9(0x00DF)(Fixing Size After Last Property [ Dumper-7 ])
	class URigVMHost*                             EditorHost;                                        // 0x09B8(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<TSubclassOf<class UObject>>            OldMemoryStorageGeneratorClasses;                  // 0x09C0(0x0010)(ZeroConstructor, Transient, EditorOnly, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_9D0[0x360];                                    // 0x09D0(0x0360)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class FName AddMemberVariable(const class FName& InName, const class FString& InCPPType, bool bIsPublic, bool bIsReadOnly, const class FString& InDefaultValue);
	class URigVMGraph* AddModel(const class FString& InName, bool bSetupUndoRedo, bool bPrintPythonCommand);
	bool ChangeMemberVariableType(const class FName& InName, const class FString& InCPPType, bool bIsPublic, bool bIsReadOnly, const class FString& InDefaultValue);
	class URigVMHost* CreateRigVMHost();
	TArray<class FString> GeneratePythonCommands(const class FString& InNewBlueprintName);
	class URigVMHost* GetDebuggedRigVMHost();
	class URigVMController* GetOrCreateController(class URigVMGraph* InGraph);
	void RecompileVM();
	void RecompileVMIfRequired();
	bool RemoveMemberVariable(const class FName& InName);
	bool RemoveModel(const class FString& InName, bool bSetupUndoRedo, bool bPrintPythonCommand);
	bool RenameMemberVariable(const class FName& InOldName, const class FName& InNewName);
	void RequestAutoVMRecompilation();
	void RequestRigVMInit();
	void SetAutoVMRecompile(bool bAutoRecompile);
	void SuspendNotifications(bool bSuspendNotifs);

	TArray<class URigVMGraph*> GetAllModels() const;
	bool GetAutoVMRecompile() const;
	TArray<class UStruct*> GetAvailableRigVMStructs() const;
	class URigVMController* GetController(const class URigVMGraph* InGraph) const;
	class URigVMController* GetControllerByName(const class FString& InGraphName) const;
	class URigVMGraph* GetDefaultModel() const;
	class URigVMGraph* GetFocusedModel() const;
	class URigVMFunctionLibrary* GetLocalFunctionLibrary() const;
	TArray<struct FRigVMGraphVariableDescription> GetMemberVariables() const;
	class URigVMGraph* GetModel(const class UEdGraph* InEdGraph) const;
	class UClass* GetRigVMHostClass() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RigVMBlueprint">();
	}
	static class URigVMBlueprint* GetDefaultObj()
	{
		return GetDefaultObjImpl<URigVMBlueprint>();
	}
};

// Class RigVMDeveloper.RigVMCompiler
// 0x00F8 (0x0128 - 0x0030)
class URigVMCompiler final : public UObject
{
public:
	struct FRigVMCompileSettings                  Settings;                                          // 0x0030(0x0040)(Deprecated, NativeAccessSpecifierPublic)
	uint8                                         Pad_70[0xB8];                                      // 0x0070(0x00B8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool Compile(const TArray<class URigVMGraph*>& InGraphs, class URigVMController* InController, class URigVM* OutVM);
	bool CompileVM(const TArray<class URigVMGraph*>& InGraphs, class URigVMController* InController, class URigVM* OutVM, struct FRigVMExtendedExecuteContext* Context);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RigVMCompiler">();
	}
	static class URigVMCompiler* GetDefaultObj()
	{
		return GetDefaultObjImpl<URigVMCompiler>();
	}
};

// Class RigVMDeveloper.RigVMNode
// 0x0128 (0x0158 - 0x0030)
class URigVMNode : public UObject
{
public:
	class FString                                 NodeTitle;                                         // 0x0030(0x0010)(ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                              Position;                                          // 0x0040(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                              Size;                                              // 0x0050(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           NodeColor;                                         // 0x0060(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   PreviousName;                                      // 0x0070(0x000C)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHasBreakpoint;                                    // 0x007C(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHaltedAtThisNode;                                 // 0x007D(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_7E[0x2];                                       // 0x007E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         TraitRootPinNames;                                 // 0x0080(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class URigVMPin*>                      Pins;                                              // 0x0090(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<class URigVMPin*>                      OrphanedPins;                                      // 0x00A0(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_B0[0xA8];                                      // 0x00B0(0x00A8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetExecutionIsHaltedAtThisNode(const bool bValue);
	void SetHasBreakpoint(const bool bValue);

	bool CanBeUpgraded() const;
	bool CanOnlyExistOnce() const;
	bool ExecutionIsHaltedAtThisNode() const;
	class URigVMLibraryNode* FindFunctionForNode() const;
	class URigVMPin* FindPin(const class FString& InPinPath) const;
	class URigVMPin* FindRootPinByName(const class FName& InPinName) const;
	TArray<class URigVMPin*> GetAggregateInputs() const;
	TArray<class URigVMPin*> GetAggregateOutputs() const;
	TArray<class URigVMPin*> GetAllPinsRecursively() const;
	class FName GetEventName() const;
	class URigVMPin* GetFirstAggregatePin() const;
	class URigVMGraph* GetGraph() const;
	int32 GetGraphDepth() const;
	class URigVMInjectionInfo* GetInjectionInfo() const;
	TArray<class URigVMNode*> GetLinkedSourceNodes() const;
	TArray<class URigVMNode*> GetLinkedTargetNodes() const;
	TArray<class URigVMLink*> GetLinks() const;
	class FName GetNextAggregateName(const class FName& InLastAggregatePinName) const;
	struct FLinearColor GetNodeColor() const;
	int32 GetNodeIndex() const;
	class FString GetNodePath(bool bRecursive) const;
	class FString GetNodeTitle() const;
	class URigVMPin* GetOppositeAggregatePin() const;
	const TArray<class URigVMPin*> GetOrphanedPins() const;
	const TArray<class URigVMPin*> GetPins() const;
	struct FVector2D GetPosition() const;
	class FName GetPreviousFName() const;
	class URigVMGraph* GetRootGraph() const;
	class URigVMPin* GetSecondAggregatePin() const;
	struct FVector2D GetSize() const;
	TArray<struct FRigVMUserWorkflow> GetSupportedWorkflows(ERigVMUserWorkflowType InType, const class UObject* InSubject) const;
	class FText GetToolTipText() const;
	TArray<class URigVMPin*> GetTraitPins() const;
	bool HasBreakpoint() const;
	bool HasInputPin(bool bIncludeIO) const;
	bool HasIOPin() const;
	bool HasLazyPin(bool bOnlyConsiderPinsWithLinks) const;
	bool HasOrphanedPins() const;
	bool HasOutputPin(bool bIncludeIO) const;
	bool HasPinOfDirection(ERigVMPinDirection InDirection) const;
	bool IsAggregate() const;
	bool IsControlFlowNode() const;
	bool IsDefinedAsConstant() const;
	bool IsDefinedAsVarying() const;
	bool IsEvent() const;
	bool IsInjected() const;
	bool IsInputAggregate() const;
	bool IsLinkedTo(class URigVMNode* InNode) const;
	bool IsLoopNode() const;
	bool IsMutable() const;
	bool IsPure() const;
	bool IsSelected() const;
	bool IsTraitPin(class FName InName) const;
	bool IsVisibleInUI() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RigVMNode">();
	}
	static class URigVMNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<URigVMNode>();
	}
};

// Class RigVMDeveloper.RigVMTemplateNode
// 0x0058 (0x01B0 - 0x0158)
class URigVMTemplateNode : public URigVMNode
{
public:
	class FName                                   TemplateNotation;                                  // 0x0158(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_164[0x4];                                      // 0x0164(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ResolvedFunctionName;                              // 0x0168(0x0010)(ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class FString>                         PreferredPermutationTypes;                         // 0x0178(0x0010)(ZeroConstructor, Deprecated, EditorOnly, Protected, NativeAccessSpecifierProtected)
	TArray<struct FRigVMTemplatePreferredType>    PreferredPermutationPairs;                         // 0x0188(0x0010)(ZeroConstructor, Deprecated, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_198[0x18];                                     // 0x0198(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class FName GetNotation() const;
	class UScriptStruct* GetScriptStruct() const;
	bool IsFullyUnresolved() const;
	bool IsResolved() const;
	bool IsSingleton() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RigVMTemplateNode">();
	}
	static class URigVMTemplateNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<URigVMTemplateNode>();
	}
};

// Class RigVMDeveloper.RigVMLibraryNode
// 0x0000 (0x01B0 - 0x01B0)
class URigVMLibraryNode : public URigVMTemplateNode
{
public:
	class URigVMGraph* GetContainedGraph() const;
	class URigVMFunctionLibrary* GetLibrary() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RigVMLibraryNode">();
	}
	static class URigVMLibraryNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<URigVMLibraryNode>();
	}
};

// Class RigVMDeveloper.RigVMCollapseNode
// 0x0038 (0x01E8 - 0x01B0)
class URigVMCollapseNode : public URigVMLibraryNode
{
public:
	class URigVMGraph*                            ContainedGraph;                                    // 0x01B0(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 NodeCategory;                                      // 0x01B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 NodeKeywords;                                      // 0x01C8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 NodeDescription;                                   // 0x01D8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RigVMCollapseNode">();
	}
	static class URigVMCollapseNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<URigVMCollapseNode>();
	}
};

// Class RigVMDeveloper.RigVMAggregateNode
// 0x0010 (0x01F8 - 0x01E8)
class URigVMAggregateNode final : public URigVMCollapseNode
{
public:
	uint8                                         Pad_1E8[0x10];                                     // 0x01E8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RigVMAggregateNode">();
	}
	static class URigVMAggregateNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<URigVMAggregateNode>();
	}
};

// Class RigVMDeveloper.RigVMArrayNode
// 0x0008 (0x01B8 - 0x01B0)
class URigVMArrayNode final : public URigVMTemplateNode
{
public:
	ERigVMOpCode                                  OpCode;                                            // 0x01B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1B1[0x7];                                      // 0x01B1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class FString GetCPPType() const;
	class UObject* GetCPPTypeObject() const;
	ERigVMOpCode GetOpCode() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RigVMArrayNode">();
	}
	static class URigVMArrayNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<URigVMArrayNode>();
	}
};

// Class RigVMDeveloper.RigVMBranchNode
// 0x0000 (0x0158 - 0x0158)
class URigVMBranchNode final : public URigVMNode
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RigVMBranchNode">();
	}
	static class URigVMBranchNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<URigVMBranchNode>();
	}
};

// Class RigVMDeveloper.RigVMCommentNode
// 0x0018 (0x0170 - 0x0158)
class URigVMCommentNode final : public URigVMNode
{
public:
	class FString                                 CommentText;                                       // 0x0158(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         FontSize;                                          // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bBubbleVisible;                                    // 0x016C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bColorBubble;                                      // 0x016D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_16E[0x2];                                      // 0x016E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool GetCommentBubbleVisible() const;
	bool GetCommentColorBubble() const;
	int32 GetCommentFontSize() const;
	class FString GetCommentText() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RigVMCommentNode">();
	}
	static class URigVMCommentNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<URigVMCommentNode>();
	}
};

// Class RigVMDeveloper.RigVMDispatchNode
// 0x0058 (0x0208 - 0x01B0)
class URigVMDispatchNode final : public URigVMTemplateNode
{
public:
	uint8                                         Pad_1B0[0x58];                                     // 0x01B0(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RigVMDispatchNode">();
	}
	static class URigVMDispatchNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<URigVMDispatchNode>();
	}
};

// Class RigVMDeveloper.RigVMEnumNode
// 0x0000 (0x0158 - 0x0158)
class URigVMEnumNode final : public URigVMNode
{
public:
	class FString GetCPPType() const;
	class UObject* GetCPPTypeObject() const;
	class UEnum* GetEnum() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RigVMEnumNode">();
	}
	static class URigVMEnumNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<URigVMEnumNode>();
	}
};

// Class RigVMDeveloper.RigVMFunctionEntryNode
// 0x0000 (0x01B0 - 0x01B0)
class URigVMFunctionEntryNode final : public URigVMTemplateNode
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RigVMFunctionEntryNode">();
	}
	static class URigVMFunctionEntryNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<URigVMFunctionEntryNode>();
	}
};

// Class RigVMDeveloper.RigVMFunctionReferenceNode
// 0x01E0 (0x0390 - 0x01B0)
class URigVMFunctionReferenceNode final : public URigVMLibraryNode
{
public:
	struct FRigVMGraphFunctionHeader              ReferencedFunctionHeader;                          // 0x01B0(0x0160)(AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftObjectPtr<class URigVMLibraryNode>       ReferencedNodePtr;                                 // 0x0310(0x0030)(Deprecated, AssetRegistrySearchable, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMap<class FName, class FName>                VariableMap;                                       // 0x0340(0x0050)(NativeAccessSpecifierPrivate)

public:
	struct FRigVMGraphFunctionHeader GetReferencedFunctionHeader_ForBlueprint() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RigVMFunctionReferenceNode">();
	}
	static class URigVMFunctionReferenceNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<URigVMFunctionReferenceNode>();
	}
};

// Class RigVMDeveloper.RigVMFunctionReturnNode
// 0x0000 (0x01B0 - 0x01B0)
class URigVMFunctionReturnNode final : public URigVMTemplateNode
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RigVMFunctionReturnNode">();
	}
	static class URigVMFunctionReturnNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<URigVMFunctionReturnNode>();
	}
};

// Class RigVMDeveloper.RigVMIfNode
// 0x0000 (0x01B0 - 0x01B0)
class URigVMIfNode final : public URigVMTemplateNode
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RigVMIfNode">();
	}
	static class URigVMIfNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<URigVMIfNode>();
	}
};

// Class RigVMDeveloper.RigVMInvokeEntryNode
// 0x0000 (0x0158 - 0x0158)
class URigVMInvokeEntryNode final : public URigVMNode
{
public:
	class FName GetEntryName() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RigVMInvokeEntryNode">();
	}
	static class URigVMInvokeEntryNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<URigVMInvokeEntryNode>();
	}
};

// Class RigVMDeveloper.RigVMParameterNode
// 0x0000 (0x0158 - 0x0158)
class URigVMParameterNode final : public URigVMNode
{
public:
	class FString GetCPPType() const;
	class UObject* GetCPPTypeObject() const;
	class FString GetDefaultValue() const;
	struct FRigVMGraphParameterDescription GetParameterDescription() const;
	class FName GetParameterName() const;
	bool IsInput() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RigVMParameterNode">();
	}
	static class URigVMParameterNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<URigVMParameterNode>();
	}
};

// Class RigVMDeveloper.RigVMRerouteNode
// 0x0000 (0x0158 - 0x0158)
class URigVMRerouteNode final : public URigVMNode
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RigVMRerouteNode">();
	}
	static class URigVMRerouteNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<URigVMRerouteNode>();
	}
};

// Class RigVMDeveloper.RigVMSelectNode
// 0x0000 (0x01B0 - 0x01B0)
class URigVMSelectNode final : public URigVMTemplateNode
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RigVMSelectNode">();
	}
	static class URigVMSelectNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<URigVMSelectNode>();
	}
};

// Class RigVMDeveloper.RigVMUnitNode
// 0x0018 (0x01C8 - 0x01B0)
class URigVMUnitNode final : public URigVMTemplateNode
{
public:
	class UScriptStruct*                          ScriptStruct;                                      // 0x01B0(0x0008)(ZeroConstructor, Deprecated, EditorOnly, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   MethodName;                                        // 0x01B8(0x000C)(ZeroConstructor, Deprecated, IsPlainOldData, EditorOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1C4[0x4];                                      // 0x01C4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class FName GetMethodName() const;
	class FString GetStructDefaultValue() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RigVMUnitNode">();
	}
	static class URigVMUnitNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<URigVMUnitNode>();
	}
};

// Class RigVMDeveloper.RigVMVariableNode
// 0x0000 (0x0158 - 0x0158)
class URigVMVariableNode final : public URigVMNode
{
public:
	class FString GetCPPType() const;
	class UObject* GetCPPTypeObject() const;
	class FString GetDefaultValue() const;
	struct FRigVMGraphVariableDescription GetVariableDescription() const;
	class FName GetVariableName() const;
	bool IsExternalVariable() const;
	bool IsGetter() const;
	bool IsInputArgument() const;
	bool IsLocalVariable() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RigVMVariableNode">();
	}
	static class URigVMVariableNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<URigVMVariableNode>();
	}
};

// Class RigVMDeveloper.RigVMBuildData
// 0x00A8 (0x00D8 - 0x0030)
class URigVMBuildData final : public UObject
{
public:
	TMap<TSoftObjectPtr<class URigVMLibraryNode>, struct FRigVMFunctionReferenceArray> FunctionReferences;                                // 0x0030(0x0050)(Deprecated, NativeAccessSpecifierPrivate)
	TMap<struct FRigVMGraphFunctionIdentifier, struct FRigVMFunctionReferenceArray> GraphFunctionReferences;                           // 0x0080(0x0050)(Edit, EditConst, NativeAccessSpecifierPrivate)
	uint8                                         Pad_D0[0x8];                                       // 0x00D0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RigVMBuildData">();
	}
	static class URigVMBuildData* GetDefaultObj()
	{
		return GetDefaultObjImpl<URigVMBuildData>();
	}
};

// Class RigVMDeveloper.RigVMClientHost
// 0x0000 (0x0030 - 0x0030)
class IRigVMClientHost final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RigVMClientHost">();
	}
	static class IRigVMClientHost* GetDefaultObj()
	{
		return GetDefaultObjImpl<IRigVMClientHost>();
	}
};

// Class RigVMDeveloper.RigVMEditorSideObject
// 0x0000 (0x0030 - 0x0030)
class IRigVMEditorSideObject final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RigVMEditorSideObject">();
	}
	static class IRigVMEditorSideObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<IRigVMEditorSideObject>();
	}
};

// Class RigVMDeveloper.RigVMController
// 0x0218 (0x0248 - 0x0030)
class URigVMController final : public UObject
{
public:
	uint8                                         Pad_30[0xA8];                                      // 0x0030(0x00A8)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(ERigVMGraphNotifType NotifType, class URigVMGraph* Graph, class UObject* Subject)> ModifiedEventDynamic;                              // 0x00D8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_E8[0x18];                                      // 0x00E8(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class URigVMGraph*>                    Graphs;                                            // 0x0100(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	TSubclassOf<class URigVMSchema>               SchemaClass;                                       // 0x0110(0x0008)(ZeroConstructor, Transient, DuplicateTransient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_118[0x130];                                    // 0x0118(0x0130)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static TArray<class FString> GetRegisteredTemplates();
	static TArray<class UScriptStruct*> GetRegisteredUnitStructs();
	static class FString GetTemplateForUnitStruct(class UScriptStruct* InFunction, const class FString& InMethodName);
	static TArray<class UScriptStruct*> GetUnitStructsForTemplate(const class FName& InNotation);

	class FString AddAggregatePin(const class FString& InNodeName, const class FString& InPinName, const class FString& InDefaultValue, bool bSetupUndoRedo, bool bPrintPythonCommand);
	class URigVMNode* AddArrayNode(ERigVMOpCode InOpCode, const class FString& InCPPType, class UObject* InCPPTypeObject, const struct FVector2D& InPosition, const class FString& InNodeName, bool bSetupUndoRedo, bool bPrintPythonCommand, bool bIsPatching);
	class URigVMNode* AddArrayNodeFromObjectPath(ERigVMOpCode InOpCode, const class FString& InCPPType, const class FString& InCPPTypeObjectPath, const struct FVector2D& InPosition, const class FString& InNodeName, bool bSetupUndoRedo, bool bPrintPythonCommand, bool bIsPatching);
	class FString AddArrayPin(const class FString& InArrayPinPath, const class FString& InDefaultValue, bool bSetupUndoRedo, bool bPrintPythonCommand);
	class URigVMNode* AddBranchNode(const struct FVector2D& InPosition, const class FString& InNodeName, bool bSetupUndoRedo, bool bPrintPythonCommand);
	class URigVMCommentNode* AddCommentNode(const class FString& InCommentText, const struct FVector2D& InPosition, const struct FVector2D& InSize, const struct FLinearColor& InColor, const class FString& InNodeName, bool bSetupUndoRedo, bool bPrintPythonCommand);
	bool AddDefaultTagToFunctionVariant(const class FName& InFunctionName, const class FName& InTagName, bool bSetupUndoRedo, bool bPrintPythonCommand);
	class URigVMEnumNode* AddEnumNode(const class FName& InCPPTypeObjectPath, const struct FVector2D& InPosition, const class FString& InNodeName, bool bSetupUndoRedo, bool bPrintPythonCommand);
	class FName AddExposedPin(const class FName& InPinName, ERigVMPinDirection InDirection, const class FString& InCPPType, const class FName& InCPPTypeObjectPath, const class FString& InDefaultValue, bool bSetupUndoRedo, bool bPrintPythonCommand);
	class URigVMFunctionReferenceNode* AddExternalFunctionReferenceNode(const class FString& InHostPath, const class FName& InFunctionName, const struct FVector2D& InNodePosition, const class FString& InNodeName, bool bSetupUndoRedo, bool bPrintPythonCommand);
	class URigVMRerouteNode* AddFreeRerouteNode(const class FString& InCPPType, const class FName& InCPPTypeObjectPath, bool bIsConstant, const class FName& InCustomWidgetName, const class FString& InDefaultValue, const struct FVector2D& InPosition, const class FString& InNodeName, bool bSetupUndoRedo);
	class URigVMFunctionReferenceNode* AddFunctionReferenceNode(class URigVMLibraryNode* InFunctionDefinition, const struct FVector2D& InNodePosition, const class FString& InNodeName, bool bSetupUndoRedo, bool bPrintPythonCommand);
	class URigVMFunctionReferenceNode* AddFunctionReferenceNodeFromDescription(const struct FRigVMGraphFunctionHeader& InFunctionDefinition, const struct FVector2D& InNodePosition, const class FString& InNodeName, bool bSetupUndoRedo, bool bPrintPythonCommand);
	class URigVMLibraryNode* AddFunctionToLibrary(const class FName& InFunctionName, bool bMutable, const struct FVector2D& InNodePosition, bool bSetupUndoRedo, bool bPrintPythonCommand);
	class URigVMNode* AddIfNode(const class FString& InCPPType, const class FName& InCPPTypeObjectPath, const struct FVector2D& InPosition, const class FString& InNodeName, bool bSetupUndoRedo, bool bPrintPythonCommand);
	class URigVMNode* AddIfNodeFromStruct(class UScriptStruct* InScriptStruct, const struct FVector2D& InPosition, const class FString& InNodeName, bool bSetupUndoRedo);
	class URigVMInjectionInfo* AddInjectedNode(const class FString& InPinPath, bool bAsInput, class UScriptStruct* InScriptStruct, const class FName& InMethodName, const class FName& InInputPinName, const class FName& InOutputPinName, const class FString& InNodeName, bool bSetupUndoRedo, bool bPrintPythonCommand);
	class URigVMInjectionInfo* AddInjectedNodeFromStructPath(const class FString& InPinPath, bool bAsInput, const class FString& InScriptStructPath, const class FName& InMethodName, const class FName& InInputPinName, const class FName& InOutputPinName, const class FString& InNodeName, bool bSetupUndoRedo);
	class URigVMInvokeEntryNode* AddInvokeEntryNode(const class FName& InEntryName, const struct FVector2D& InPosition, const class FString& InNodeName, bool bSetupUndoRedo, bool bPrintPythonCommand);
	bool AddLink(const class FString& InOutputPinPath, const class FString& InInputPinPath, bool bSetupUndoRedo, bool bPrintPythonCommand, ERigVMPinDirection InUserDirection, bool bCreateCastNode);
	struct FRigVMGraphVariableDescription AddLocalVariable(const class FName& InVariableName, const class FString& InCPPType, class UObject* InCPPTypeObject, const class FString& InDefaultValue, bool bSetupUndoRedo, bool bPrintPythonCommand);
	struct FRigVMGraphVariableDescription AddLocalVariableFromObjectPath(const class FName& InVariableName, const class FString& InCPPType, const class FString& InCPPTypeObjectPath, const class FString& InDefaultValue, bool bSetupUndoRedo);
	class URigVMParameterNode* AddParameterNode(const class FName& InParameterName, const class FString& InCPPType, class UObject* InCPPTypeObject, bool bIsInput, const class FString& InDefaultValue, const struct FVector2D& InPosition, const class FString& InNodeName, bool bSetupUndoRedo, bool bPrintPythonCommand);
	class URigVMParameterNode* AddParameterNodeFromObjectPath(const class FName& InParameterName, const class FString& InCPPType, const class FString& InCPPTypeObjectPath, bool bIsInput, const class FString& InDefaultValue, const struct FVector2D& InPosition, const class FString& InNodeName, bool bSetupUndoRedo, bool bPrintPythonCommand);
	class URigVMRerouteNode* AddRerouteNodeOnLink(class URigVMLink* InLink, const struct FVector2D& InPosition, const class FString& InNodeName, bool bSetupUndoRedo, bool bPrintPythonCommand);
	class URigVMRerouteNode* AddRerouteNodeOnLinkPath(const class FString& InLinkPinPathRepresentation, const struct FVector2D& InPosition, const class FString& InNodeName, bool bSetupUndoRedo, bool bPrintPythonCommand);
	class URigVMRerouteNode* AddRerouteNodeOnPin(const class FString& InPinPath, bool bAsInput, const struct FVector2D& InPosition, const class FString& InNodeName, bool bSetupUndoRedo, bool bPrintPythonCommand);
	class URigVMNode* AddSelectNode(const class FString& InCPPType, const class FName& InCPPTypeObjectPath, const struct FVector2D& InPosition, const class FString& InNodeName, bool bSetupUndoRedo, bool bPrintPythonCommand);
	class URigVMNode* AddSelectNodeFromStruct(class UScriptStruct* InScriptStruct, const struct FVector2D& InPosition, const class FString& InNodeName, bool bSetupUndoRedo);
	bool AddTagToFunctionVariant(const class FName& InFunctionName, const struct FRigVMTag& InTag, bool bSetupUndoRedo, bool bPrintPythonCommand);
	class URigVMTemplateNode* AddTemplateNode(const class FName& InNotation, const struct FVector2D& InPosition, const class FString& InNodeName, bool bSetupUndoRedo, bool bPrintPythonCommand);
	class FName AddTrait(const class FName& InNodeName, const class FName& InTraitTypeObjectPath, const class FName& InTraitName, const class FString& InDefaultValue, int32 InPinIndex, bool bSetupUndoRedo, bool bPrintPythonCommand);
	class URigVMUnitNode* AddUnitNode(class UScriptStruct* InScriptStruct, const class FName& InMethodName, const struct FVector2D& InPosition, const class FString& InNodeName, bool bSetupUndoRedo, bool bPrintPythonCommand);
	class URigVMUnitNode* AddUnitNodeFromStructPath(const class FString& InScriptStructPath, const class FName& InMethodName, const struct FVector2D& InPosition, const class FString& InNodeName, bool bSetupUndoRedo, bool bPrintPythonCommand);
	class URigVMUnitNode* AddUnitNodeWithDefaults(class UScriptStruct* InScriptStruct, const class FString& InDefaults, const class FName& InMethodName, const struct FVector2D& InPosition, const class FString& InNodeName, bool bSetupUndoRedo, bool bPrintPythonCommand);
	class URigVMVariableNode* AddVariableNode(const class FName& InVariableName, const class FString& InCPPType, class UObject* InCPPTypeObject, bool bIsGetter, const class FString& InDefaultValue, const struct FVector2D& InPosition, const class FString& InNodeName, bool bSetupUndoRedo, bool bPrintPythonCommand);
	class URigVMVariableNode* AddVariableNodeFromObjectPath(const class FName& InVariableName, const class FString& InCPPType, const class FString& InCPPTypeObjectPath, bool bIsGetter, const class FString& InDefaultValue, const struct FVector2D& InPosition, const class FString& InNodeName, bool bSetupUndoRedo, bool bPrintPythonCommand);
	bool BindPinToVariable(const class FString& InPinPath, const class FString& InNewBoundVariablePath, bool bSetupUndoRedo, bool bPrintPythonCommand);
	bool BreakAllLinks(const class FString& InPinPath, bool bAsInput, bool bSetupUndoRedo, bool bPrintPythonCommand);
	bool BreakLink(const class FString& InOutputPinPath, const class FString& InInputPinPath, bool bSetupUndoRedo, bool bPrintPythonCommand);
	bool CancelUndoBracket();
	bool CanImportNodesFromText(const class FString& InText);
	bool ChangeExposedPinType(const class FName& InPinName, const class FString& InCPPType, const class FName& InCPPTypeObjectPath, bool& bSetupUndoRedo, bool bSetupOrphanPins, bool bPrintPythonCommand);
	bool ClearArrayPin(const class FString& InArrayPinPath, bool bSetupUndoRedo, bool bPrintPythonCommand);
	bool ClearNodeSelection(bool bSetupUndoRedo, bool bPrintPythonCommand);
	bool CloseUndoBracket();
	class URigVMCollapseNode* CollapseNodes(const TArray<class FName>& InNodeNames, const class FString& InCollapseNodeName, bool bSetupUndoRedo, bool bPrintPythonCommand, bool bIsAggregate);
	class URigVMLibraryNode* CreateFunctionVariant(const class FName& InFunctionName, const class FName& InVariantName, bool bSetupUndoRedo, bool bPrintPythonCommand);
	class FString DuplicateArrayPin(const class FString& InArrayElementPinPath, bool bSetupUndoRedo, bool bPrintPythonCommand);
	class URigVMNode* EjectNodeFromPin(const class FString& InPinPath, bool bSetupUndoRedo, bool bPrintPythonCommand);
	void EnableReporting(bool bEnabled);
	TArray<class URigVMNode*> ExpandLibraryNode(const class FName& InNodeName, bool bSetupUndoRedo, bool bPrintPythonCommand);
	class FString ExportNodesToText(const TArray<class FName>& InNodeNames, bool bIncludeExteriorLinks);
	class FString ExportSelectedNodesToText(bool bIncludeExteriorLinks);
	TArray<struct FRigVMVariantRef> FindVariantsOfFunction(const class FName& InFunctionName);
	TArray<class FString> GeneratePythonCommands();
	class FString GetPinDefaultValue(const class FString& InPinPath);
	TArray<class FName> ImportNodesFromText(const class FString& InText, bool bSetupUndoRedo, bool bPrintPythonCommands);
	class FString InsertArrayPin(const class FString& InArrayPinPath, int32 InIndex, const class FString& InDefaultValue, bool bSetupUndoRedo, bool bPrintPythonCommand);
	bool IsFunctionPublic(const class FName& InFunctionName);
	class URigVMLibraryNode* LocalizeFunction(const struct FRigVMGraphFunctionIdentifier& InFunctionDefinition, bool bLocalizeDependentPrivateFunctions, bool bSetupUndoRedo, bool bPrintPythonCommand);
	class URigVMLibraryNode* LocalizeFunctionFromPath(const class FString& InHostPath, const class FName& InFunctionName, bool bLocalizeDependentPrivateFunctions, bool bSetupUndoRedo, bool bPrintPythonCommand);
	TMap<struct FRigVMGraphFunctionIdentifier, class URigVMLibraryNode*> LocalizeFunctions(const TArray<struct FRigVMGraphFunctionIdentifier>& InFunctionDefinitions, bool bLocalizeDependentPrivateFunctions, bool bSetupUndoRedo, bool bPrintPythonCommand);
	bool MakeBindingsFromVariableNode(const class FName& InNodeName, bool bSetupUndoRedo, bool bPrintPythonCommand);
	class URigVMUserWorkflowOptions* MakeOptionsForWorkflow(class UObject* InSubject, const struct FRigVMUserWorkflow& InWorkflow);
	bool MakeVariableNodeFromBinding(const class FString& InPinPath, const struct FVector2D& InNodePosition, bool bSetupUndoRedo, bool bPrintPythonCommand);
	bool MarkFunctionAsPublic(const class FName& InFunctionName, bool bInIsPublic, bool bSetupUndoRedo, bool bPrintPythonCommand);
	bool OpenUndoBracket(const class FString& InTitle);
	bool PerformUserWorkflow(const struct FRigVMUserWorkflow& InWorkflow, const class URigVMUserWorkflowOptions* InOptions, bool bSetupUndoRedo);
	class URigVMGraph* PopGraph(bool bSetupUndoRedo);
	class FName PromoteCollapseNodeToFunctionReferenceNode(const class FName& InNodeName, bool bSetupUndoRedo, bool bPrintPythonCommand, const class FString& InExistingFunctionDefinitionPath);
	class FName PromoteFunctionReferenceNodeToCollapseNode(const class FName& InNodeName, bool bSetupUndoRedo, bool bPrintPythonCommand, bool bRemoveFunctionDefinition);
	bool PromotePinToVariable(const class FString& InPinPath, bool bCreateVariableNode, const struct FVector2D& InNodePosition, bool bSetupUndoRedo, bool bPrintPythonCommand);
	bool PushGraph(class URigVMGraph* InGraph, bool bSetupUndoRedo);
	bool Redo();
	void RefreshVariableNode(const class FName& InNodeName, const class FName& InVariableName, const class FString& InCPPType, class UObject* InCPPTypeObject, bool bSetupUndoRedo, bool bSetupOrphanPins);
	bool RemoveAggregatePin(const class FString& InPinPath, bool bSetupUndoRedo, bool bPrintPythonCommand);
	bool RemoveArrayPin(const class FString& InArrayElementPinPath, bool bSetupUndoRedo, bool bPrintPythonCommand);
	bool RemoveExposedPin(const class FName& InPinName, bool bSetupUndoRedo, bool bPrintPythonCommand);
	bool RemoveFunctionFromLibrary(const class FName& InFunctionName, bool bSetupUndoRedo);
	bool RemoveInjectedNode(const class FString& InPinPath, bool bAsInput, bool bSetupUndoRedo, bool bPrintPythonCommand);
	bool RemoveLocalVariable(const class FName& InVariableName, bool bSetupUndoRedo, bool bPrintPythonCommand);
	bool RemoveNode(class URigVMNode* InNode, bool bSetupUndoRedo, bool bPrintPythonCommand);
	bool RemoveNodeByName(const class FName& InNodeName, bool bSetupUndoRedo, bool bPrintPythonCommand);
	bool RemoveNodes(const TArray<class URigVMNode*>& InNodes, bool bSetupUndoRedo, bool bPrintPythonCommand);
	bool RemoveNodesByName(const TArray<class FName>& InNodeNames, bool bSetupUndoRedo, bool bPrintPythonCommand);
	bool RemoveTagFromFunctionVariant(const class FName& InFunctionName, const class FName& InTagName, bool bSetupUndoRedo, bool bPrintPythonCommand);
	bool RemoveTrait(const class FName& InNodeName, const class FName& InTraitName, bool bSetupUndoRedo, bool bPrintPythonCommand);
	bool RenameExposedPin(const class FName& InOldPinName, const class FName& InNewPinName, bool bSetupUndoRedo, bool bPrintPythonCommand);
	bool RenameFunction(const class FName& InOldFunctionName, const class FName& InNewFunctionName, bool bSetupUndoRedo);
	bool RenameLocalVariable(const class FName& InVariableName, const class FName& InNewVariableName, bool bSetupUndoRedo, bool bPrintPythonCommand);
	bool RenameNode(class URigVMNode* InNode, const class FName& InNewName, bool bSetupUndoRedo, bool bPrintPythonCommand);
	bool RenameParameter(const class FName& InOldName, const class FName& InNewName, bool bSetupUndoRedo);
	bool RenameVariable(const class FName& InOldName, const class FName& InNewName, bool bSetupUndoRedo);
	class URigVMVariableNode* ReplaceParameterNodeWithVariable(const class FName& InNodeName, const class FName& InVariableName, const class FString& InCPPType, class UObject* InCPPTypeObject, bool bSetupUndoRedo);
	bool ResetPinDefaultValue(const class FString& InPinPath, bool bSetupUndoRedo, bool bPrintPythonCommand);
	bool ResolveWildCardPin(const class FString& InPinPath, const class FString& InCPPType, const class FName& InCPPTypeObjectPath, bool bSetupUndoRedo, bool bPrintPythonCommand);
	bool SelectNode(class URigVMNode* InNode, bool bSelect, bool bSetupUndoRedo, bool bPrintPythonCommand);
	bool SelectNodeByName(const class FName& InNodeName, bool bSelect, bool bSetupUndoRedo);
	void SetActionStack(class URigVMActionStack* InActionStack);
	bool SetArrayPinSize(const class FString& InArrayPinPath, int32 InSize, const class FString& InDefaultValue, bool bSetupUndoRedo, bool bPrintPythonCommand);
	bool SetCommentText(class URigVMNode* InNode, const class FString& InCommentText, const int32& InCommentFontSize, const bool& bInCommentBubbleVisible, const bool& bInCommentColorBubble, bool bSetupUndoRedo, bool bPrintPythonCommand);
	bool SetCommentTextByName(const class FName& InNodeName, const class FString& InCommentText, const int32& InCommentFontSize, const bool& bInCommentBubbleVisible, const bool& bInCommentColorBubble, bool bSetupUndoRedo, bool bPrintPythonCommand);
	bool SetExposedPinIndex(const class FName& InPinName, int32 InNewIndex, bool bSetupUndoRedo, bool bPrintPythonCommand);
	void SetGraph(class URigVMGraph* InGraph);
	void SetIsRunningUnitTest(bool bIsRunning);
	bool SetLocalVariableDefaultValue(const class FName& InVariableName, const class FString& InDefaultValue, bool bSetupUndoRedo, bool bPrintPythonCommand);
	bool SetLocalVariableType(const class FName& InVariableName, const class FString& InCPPType, class UObject* InCPPTypeObject, bool bSetupUndoRedo, bool bPrintPythonCommand);
	bool SetLocalVariableTypeFromObjectPath(const class FName& InVariableName, const class FString& InCPPType, const class FString& InCPPTypeObjectPath, bool bSetupUndoRedo, bool bPrintPythonCommand);
	bool SetNodeCategory(class URigVMCollapseNode* InNode, const class FString& InCategory, bool bSetupUndoRedo, bool bMergeUndoAction, bool bPrintPythonCommand);
	bool SetNodeCategoryByName(const class FName& InNodeName, const class FString& InCategory, bool bSetupUndoRedo, bool bMergeUndoAction);
	bool SetNodeColor(class URigVMNode* InNode, const struct FLinearColor& InColor, bool bSetupUndoRedo, bool bMergeUndoAction, bool bPrintPythonCommand);
	bool SetNodeColorByName(const class FName& InNodeName, const struct FLinearColor& InColor, bool bSetupUndoRedo, bool bMergeUndoAction);
	bool SetNodeDescription(class URigVMCollapseNode* InNode, const class FString& InDescription, bool bSetupUndoRedo, bool bMergeUndoAction, bool bPrintPythonCommand);
	bool SetNodeDescriptionByName(const class FName& InNodeName, const class FString& InDescription, bool bSetupUndoRedo, bool bMergeUndoAction);
	bool SetNodeKeywords(class URigVMCollapseNode* InNode, const class FString& InKeywords, bool bSetupUndoRedo, bool bMergeUndoAction, bool bPrintPythonCommand);
	bool SetNodeKeywordsByName(const class FName& InNodeName, const class FString& InKeywords, bool bSetupUndoRedo, bool bMergeUndoAction);
	bool SetNodePosition(class URigVMNode* InNode, const struct FVector2D& InPosition, bool bSetupUndoRedo, bool bMergeUndoAction, bool bPrintPythonCommand);
	bool SetNodePositionByName(const class FName& InNodeName, const struct FVector2D& InPosition, bool bSetupUndoRedo, bool bMergeUndoAction, bool bPrintPythonCommand);
	bool SetNodeSelection(const TArray<class FName>& InNodeNames, bool bSetupUndoRedo, bool bPrintPythonCommand);
	bool SetNodeSize(class URigVMNode* InNode, const struct FVector2D& InSize, bool bSetupUndoRedo, bool bMergeUndoAction, bool bPrintPythonCommand);
	bool SetNodeSizeByName(const class FName& InNodeName, const struct FVector2D& InSize, bool bSetupUndoRedo, bool bMergeUndoAction, bool bPrintPythonCommand);
	bool SetPinDefaultValue(const class FString& InPinPath, const class FString& InDefaultValue, bool bResizeArrays, bool bSetupUndoRedo, bool bMergeUndoAction, bool bPrintPythonCommand, bool bSetValueOnLinkedPins);
	bool SetPinExpansion(const class FString& InPinPath, bool bIsExpanded, bool bSetupUndoRedo, bool bPrintPythonCommand);
	bool SetPinIsWatched(const class FString& InPinPath, bool bIsWatched, bool bSetupUndoRedo);
	bool SetRemappedVariable(class URigVMFunctionReferenceNode* InFunctionRefNode, const class FName& InInnerVariableName, const class FName& InOuterVariableName, bool bSetupUndoRedo);
	void SetSchema(class URigVMSchema* InSchema);
	void SetSchemaClass(TSubclassOf<class URigVMSchema> InSchemaClass);
	bool SetUnitNodeDefaults(class URigVMUnitNode* InNode, const class FString& InDefaults, bool bSetupUndoRedo, bool bPrintPythonCommand);
	bool SwapAllFunctionReferences(const struct FRigVMGraphFunctionIdentifier& InOldFunctionIdentifier, const struct FRigVMGraphFunctionIdentifier& InNewFunctionIdentifier, bool bSetupOrphanPins, bool bSetupUndoRedo, bool bPrintPythonCommand);
	bool SwapFunctionReference(class URigVMFunctionReferenceNode* InFunctionReferenceNode, const struct FRigVMGraphFunctionIdentifier& InNewFunctionIdentifier, bool bSetupOrphanPins, bool bSetupUndoRedo, bool bPrintPythonCommand);
	bool SwapFunctionReferenceByName(const class FName& InFunctionReferenceNodeName, const struct FRigVMGraphFunctionIdentifier& InNewFunctionIdentifier, bool bSetupOrphanPins, bool bSetupUndoRedo, bool bPrintPythonCommand);
	bool UnbindPinFromVariable(const class FString& InPinPath, bool bSetupUndoRedo, bool bPrintPythonCommand);
	bool Undo();
	bool UnresolveTemplateNodes(const TArray<class FName>& InNodeNames, bool bSetupUndoRedo, bool bPrintPythonCommand);
	TArray<class URigVMNode*> UpgradeNodes(const TArray<class FName>& InNodeNames, bool bRecursive, bool bSetupUndoRedo, bool bPrintPythonCommand);

	struct FRigVMGraphFunctionHeader FindGraphFunctionHeader(const struct FRigVMGraphFunctionIdentifier& InFunctionIdentifier) const;
	struct FRigVMGraphFunctionHeader FindGraphFunctionHeaderByName(const class FString& InHostPath, class FName InFunctionName) const;
	struct FRigVMGraphFunctionIdentifier FindGraphFunctionIdentifier(const class FString& InHostPath, class FName InFunctionName) const;
	class URigVMActionStack* GetActionStack() const;
	class URigVMController* GetControllerForGraph(const class URigVMGraph* InGraph) const;
	class URigVMGraph* GetGraph() const;
	class URigVMSchema* GetSchema() const;
	class URigVMGraph* GetTopLevelGraph() const;
	bool IsReportingEnabled() const;
	bool IsTransacting() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RigVMController">();
	}
	static class URigVMController* GetDefaultObj()
	{
		return GetDefaultObjImpl<URigVMController>();
	}
};

// Class RigVMDeveloper.RigVMControllerSettings
// 0x0058 (0x0088 - 0x0030)
class URigVMControllerSettings final : public UObject
{
public:
	bool                                          bAutoResolveTemplateNodesWhenLinkingExecute;       // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, struct FRigVMController_CommonTypePerTemplate> TemplateDefaultTypes;                              // 0x0038(0x0050)(NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RigVMControllerSettings">();
	}
	static class URigVMControllerSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<URigVMControllerSettings>();
	}
};

// Class RigVMDeveloper.RigVMActionStack
// 0x0060 (0x0090 - 0x0030)
class URigVMActionStack final : public UObject
{
public:
	int32                                         ActionIndex;                                       // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRigVMActionKey>                UndoActions;                                       // 0x0038(0x0010)(ZeroConstructor, NonTransactional, NativeAccessSpecifierPrivate)
	TArray<struct FRigVMActionKey>                RedoActions;                                       // 0x0048(0x0010)(ZeroConstructor, NonTransactional, NativeAccessSpecifierPrivate)
	uint8                                         Pad_58[0x38];                                      // 0x0058(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool CancelUndoBracket(class URigVMController* InController);
	bool CloseUndoBracket(class URigVMController* InController);
	bool OpenUndoBracket(class URigVMController* InController, const class FString& InTitle);
	bool Redo(class URigVMController* InController);
	bool Undo(class URigVMController* InController);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RigVMActionStack">();
	}
	static class URigVMActionStack* GetDefaultObj()
	{
		return GetDefaultObjImpl<URigVMActionStack>();
	}
};

// Class RigVMDeveloper.RigVMExternalDependencyManager
// 0x0000 (0x0030 - 0x0030)
class IRigVMExternalDependencyManager final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RigVMExternalDependencyManager">();
	}
	static class IRigVMExternalDependencyManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<IRigVMExternalDependencyManager>();
	}
};

// Class RigVMDeveloper.RigVMGraph
// 0x00C8 (0x00F8 - 0x0030)
class URigVMGraph : public UObject
{
public:
	uint8                                         Pad_30[0x18];                                      // 0x0030(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class URigVMNode*>                     Nodes;                                             // 0x0048(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<class URigVMLink*>                     Links;                                             // 0x0058(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<class URigVMLink*>                     DetachedLinks;                                     // 0x0068(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<class FName>                           SelectedNodes;                                     // 0x0078(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class URigVMGraph>             DefaultFunctionLibraryPtr;                         // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UScriptStruct*                          ExecuteContextStruct;                              // 0x0090(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_98[0x40];                                      // 0x0098(0x0040)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        LastStructureHash;                                 // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bEditable;                                         // 0x00DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_DD[0x3];                                       // 0x00DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRigVMGraphVariableDescription> LocalVariables;                                    // 0x00E0(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TSubclassOf<class URigVMSchema>               SchemaClass;                                       // 0x00F0(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void SetDefaultFunctionLibrary(class URigVMFunctionLibrary* InFunctionLibrary);
	void SetSchemaClass(TSubclassOf<class URigVMSchema> InSchemaClass);

	bool ContainsLink(const class FString& InPinPathRepresentation) const;
	class URigVMLink* FindLink(const class FString& InLinkPinPathRepresentation) const;
	class URigVMNode* FindNode(const class FString& InNodePath) const;
	class URigVMNode* FindNodeByName(const class FName& InNodeName) const;
	class URigVMPin* FindPin(const class FString& InPinPath) const;
	TArray<class URigVMGraph*> GetContainedGraphs(bool bRecursive) const;
	class URigVMFunctionLibrary* GetDefaultFunctionLibrary() const;
	class URigVMFunctionEntryNode* GetEntryNode() const;
	TArray<class FName> GetEventNames() const;
	int32 GetGraphDepth() const;
	class FString GetGraphName() const;
	TArray<struct FRigVMGraphVariableDescription> GetInputArguments() const;
	const TArray<class URigVMLink*> GetLinks() const;
	TArray<struct FRigVMGraphVariableDescription> GetLocalVariables(bool bIncludeInputArguments) const;
	class FString GetNodePath() const;
	const TArray<class URigVMNode*> GetNodes() const;
	TArray<struct FRigVMGraphVariableDescription> GetOutputArguments() const;
	class URigVMGraph* GetParentGraph() const;
	class URigVMFunctionReturnNode* GetReturnNode() const;
	class URigVMGraph* GetRootGraph() const;
	class URigVMSchema* GetSchema() const;
	TSubclassOf<class URigVMSchema> GetSchemaClass() const;
	const TArray<class FName> GetSelectNodes() const;
	TArray<struct FRigVMGraphVariableDescription> GetVariableDescriptions() const;
	bool IsNodeSelected(const class FName& InNodeName) const;
	bool IsRootGraph() const;
	bool IsTopLevelGraph() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RigVMGraph">();
	}
	static class URigVMGraph* GetDefaultObj()
	{
		return GetDefaultObjImpl<URigVMGraph>();
	}
};

// Class RigVMDeveloper.RigVMFunctionLibrary
// 0x0110 (0x0208 - 0x00F8)
class URigVMFunctionLibrary final : public URigVMGraph
{
public:
	uint8                                         Pad_F8[0x10];                                      // 0x00F8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           PublicFunctionNames;                               // 0x0108(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TMap<class FName, struct FRigVMVariant>       FunctionToVariant;                                 // 0x0118(0x0050)(NativeAccessSpecifierPrivate)
	TMap<class URigVMLibraryNode*, struct FRigVMFunctionReferenceArray> FunctionReferences;                                // 0x0168(0x0050)(Deprecated, EditorOnly, NativeAccessSpecifierPrivate)
	TMap<class FString, class URigVMLibraryNode*> LocalizedFunctions;                                // 0x01B8(0x0050)(UObjectWrapper, NativeAccessSpecifierPrivate)

public:
	TArray<class FString> GetReferencePathsForFunction(const class FName& InFunctionName);
	TArray<TSoftObjectPtr<class URigVMFunctionReferenceNode>> GetReferencesForFunction(const class FName& InFunctionName);

	class URigVMLibraryNode* FindFunction(const class FName& InFunctionName) const;
	class URigVMLibraryNode* FindFunctionForNode(class URigVMNode* InNode) const;
	TArray<class URigVMLibraryNode*> GetFunctions() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RigVMFunctionLibrary">();
	}
	static class URigVMFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<URigVMFunctionLibrary>();
	}
};

// Class RigVMDeveloper.RigVMLink
// 0x0030 (0x0060 - 0x0030)
class URigVMLink final : public UObject
{
public:
	class FString                                 SourcePinPath;                                     // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 TargetPinPath;                                     // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_50[0x10];                                      // 0x0050(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class URigVMGraph* GetGraph() const;
	int32 GetGraphDepth() const;
	int32 GetLinkIndex() const;
	class URigVMPin* GetOppositePin(const class URigVMPin* InPin) const;
	class FString GetPinPathRepresentation() const;
	class URigVMNode* GetSourceNode() const;
	class URigVMPin* GetSourcePin() const;
	class URigVMNode* GetTargetNode() const;
	class URigVMPin* GetTargetPin() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RigVMLink">();
	}
	static class URigVMLink* GetDefaultObj()
	{
		return GetDefaultObjImpl<URigVMLink>();
	}
};

// Class RigVMDeveloper.RigVMInjectionInfo
// 0x0028 (0x0058 - 0x0030)
class URigVMInjectionInfo final : public UObject
{
public:
	class URigVMUnitNode*                         UnitNode;                                          // 0x0030(0x0008)(ZeroConstructor, Deprecated, EditorOnly, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URigVMNode*                             Node;                                              // 0x0038(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInjectedAsInput;                                  // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class URigVMPin*                              InputPin;                                          // 0x0048(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URigVMPin*                              OutputPin;                                         // 0x0050(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	class URigVMGraph* GetGraph() const;
	class URigVMPin* GetPin() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RigVMInjectionInfo">();
	}
	static class URigVMInjectionInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<URigVMInjectionInfo>();
	}
};

// Class RigVMDeveloper.RigVMPin
// 0x00B8 (0x00E8 - 0x0030)
class URigVMPin final : public UObject
{
public:
	class FName                                   DisplayName;                                       // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	ERigVMPinDirection                            Direction;                                         // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bIsExpanded;                                       // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bIsConstant;                                       // 0x003E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bRequiresWatch;                                    // 0x003F(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bIsDynamicArray;                                   // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bIsLazy;                                           // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CPPType;                                           // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UObject*                                CPPTypeObject;                                     // 0x0058(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   CPPTypeObjectPath;                                 // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DefaultValue;                                      // 0x0070(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	ERigVMPinDefaultValueType                     DefaultValueType;                                  // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CustomWidgetName;                                  // 0x0084(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class URigVMPin*>                      SubPins;                                           // 0x0090(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<class URigVMLink*>                     Links;                                             // 0x00A0(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<class URigVMInjectionInfo*>            InjectionInfos;                                    // 0x00B0(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	class FString                                 BoundVariablePath;                                 // 0x00C0(0x0010)(ZeroConstructor, Deprecated, EditorOnly, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_D0[0x18];                                      // 0x00D0(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool CanProvideDefaultValue() const;
	bool ContainsWildCardSubPin() const;
	class URigVMLink* FindLinkForPin(const class URigVMPin* InOtherPin) const;
	class URigVMPin* FindSubPin(const class FString& InPinPath) const;
	int32 GetAbsolutePinIndex() const;
	class FString GetArrayElementCppType() const;
	int32 GetArraySize() const;
	class FString GetCPPType() const;
	class UObject* GetCPPTypeObject() const;
	class FName GetCustomWidgetName() const;
	class FString GetDefaultValue() const;
	ERigVMPinDefaultValueType GetDefaultValueType() const;
	ERigVMPinDirection GetDirection() const;
	class FName GetDisplayName() const;
	class UEnum* GetEnum() const;
	class URigVMGraph* GetGraph() const;
	TArray<class URigVMPin*> GetLinkedSourcePins(bool bRecursive) const;
	TArray<class URigVMPin*> GetLinkedTargetPins(bool bRecursive) const;
	const TArray<class URigVMLink*> GetLinks() const;
	class FString GetMetaData(class FName InKey) const;
	class URigVMNode* GetNode() const;
	class FString GetOriginalDefaultValue() const;
	class URigVMPin* GetOriginalPinFromInjectedNode() const;
	class URigVMPin* GetParentPin() const;
	class URigVMPin* GetPinForLink() const;
	int32 GetPinIndex() const;
	class FString GetPinPath(bool bUseNodePath) const;
	class URigVMPin* GetRootPin() const;
	class UScriptStruct* GetScriptStruct() const;
	class FString GetSegmentPath(bool bIncludeRootPin) const;
	TArray<class URigVMLink*> GetSourceLinks(bool bRecursive) const;
	class FString GetSubPinPath(const class URigVMPin* InParentPin, bool bIncludeParentPinName) const;
	const TArray<class URigVMPin*> GetSubPins() const;
	TArray<class URigVMLink*> GetTargetLinks(bool bRecursive) const;
	class FText GetToolTipText() const;
	bool HasUserProvidedDefaultValue() const;
	bool IsArray() const;
	bool IsArrayElement() const;
	bool IsDefinedAsConstant() const;
	bool IsDynamicArray() const;
	bool IsEnum() const;
	bool IsExecuteContext() const;
	bool IsExpanded() const;
	bool IsFixedSizeArray() const;
	bool IsInterface() const;
	bool IsLazy() const;
	bool IsLinkedTo(const class URigVMPin* InPin) const;
	bool IsReferenceCountedContainer() const;
	bool IsRootPin() const;
	bool IsStringType() const;
	bool IsStruct() const;
	bool IsStructMember() const;
	bool IsTraitPin() const;
	bool IsUObject() const;
	bool IsValidDefaultValue(const class FString& InDefaultValue) const;
	bool IsWildCard() const;
	bool RequiresWatch(const bool bCheckExposedPinChain) const;
	bool ShouldHideSubPins() const;
	bool ShouldOnlyShowSubPins() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RigVMPin">();
	}
	static class URigVMPin* GetDefaultObj()
	{
		return GetDefaultObjImpl<URigVMPin>();
	}
};

// Class RigVMDeveloper.RigVMUserWorkflowRegistry
// 0x0018 (0x0048 - 0x0030)
class URigVMUserWorkflowRegistry final : public UObject
{
public:
	uint8                                         Pad_30[0x18];                                      // 0x0030(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class URigVMUserWorkflowRegistry* Get();

	int32 RegisterProvider(const class UScriptStruct* InStruct, TDelegate<void(class UObject* InSubject)> InProvider);
	void UnregisterProvider(int32 InHandle);

	TArray<struct FRigVMUserWorkflow> GetWorkflows(ERigVMUserWorkflowType InType, const class UScriptStruct* InStruct, const class UObject* InSubject) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RigVMUserWorkflowRegistry">();
	}
	static class URigVMUserWorkflowRegistry* GetDefaultObj()
	{
		return GetDefaultObjImpl<URigVMUserWorkflowRegistry>();
	}
};

}

