#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AssetTools

#include "Basic.hpp"

#include "UnrealEd_classes.hpp"
#include "AssetTools_structs.hpp"
#include "DeveloperSettings_classes.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class AssetTools.AssetDefinition_AssetTypeActionsProxy
// 0x0028 (0x0070 - 0x0048)
class UAssetDefinition_AssetTypeActionsProxy final : public UAssetDefinitionDefault
{
public:
	uint8                                         Pad_48[0x28];                                      // 0x0048(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AssetDefinition_AssetTypeActionsProxy">();
	}
	static class UAssetDefinition_AssetTypeActionsProxy* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAssetDefinition_AssetTypeActionsProxy>();
	}
};

// Class AssetTools.AssetToolsSettings
// 0x0010 (0x0070 - 0x0060)
class UAssetToolsSettings final : public UDeveloperSettings
{
public:
	TArray<struct FAdvancedCopyMap>               AdvancedCopyCustomizations;                        // 0x0060(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AssetToolsSettings">();
	}
	static class UAssetToolsSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAssetToolsSettings>();
	}
};

// Class AssetTools.AssetTools
// 0x0000 (0x0030 - 0x0030)
class IAssetTools final : public IInterface
{
public:
	class UObject* CreateAsset(const class FString& AssetName, const class FString& PackagePath, class UClass* AssetClass, class UFactory* Factory, class FName CallingContext);
	class UObject* CreateAssetWithDialog(const class FString& AssetName, const class FString& PackagePath, class UClass* AssetClass, class UFactory* Factory, class FName CallingContext, const bool bCallConfigureProperties);
	void CreateUniqueAssetName(const class FString& InBasePackageName, const class FString& InSuffix, class FString* OutPackageName, class FString* OutAssetName);
	class UObject* DuplicateAsset(const class FString& AssetName, const class FString& PackagePath, class UObject* OriginalObject);
	class UObject* DuplicateAssetWithDialog(const class FString& AssetName, const class FString& PackagePath, class UObject* OriginalObject);
	class UObject* DuplicateAssetWithDialogAndTitle(const class FString& AssetName, const class FString& PackagePath, class UObject* OriginalObject, const class FText& DialogTitle);
	void ExportAssets(const TArray<class FString>& AssetsToExport, const class FString& ExportPath);
	void ExportAssetsWithDialog(const TArray<class FString>& AssetsToExport, bool bPromptForIndividualFilenames);
	void FindSoftReferencesToObject(const struct FSoftObjectPath& TargetObject, TArray<class UObject*>* ReferencingObjects);
	TArray<class UObject*> ImportAssetsAutomated(const class UAutomatedAssetImportData* ImportData);
	TArray<class UObject*> ImportAssetsWithDialog(const class FString& DestinationPath);
	void ImportAssetTasks(const TArray<class UAssetImportTask*>& ImportTasks);
	void OpenEditorForAssets(const TArray<class UObject*>& Assets);
	bool RenameAssets(const TArray<struct FAssetRenameData>& AssetsAndNames);
	EAssetRenameResult RenameAssetsWithDialog(const TArray<struct FAssetRenameData>& AssetsAndNames, bool bAutoCheckout);
	void RenameReferencingSoftObjectPaths(const TArray<class UPackage*>& PackagesToCheck, const TMap<struct FSoftObjectPath, struct FSoftObjectPath>& AssetRedirectorMap);

	void BeginAdvancedCopyPackages(const TArray<class FName>& InputNamesToCopy, const class FString& TargetPath, const TDelegate<void(bool bSuccess, TArray<struct FAssetRenameData>& AllCopiedAssets)>& OnCopyComplete) const;
	void DiffAgainstDepot(class UObject* InObject, const class FString& InPackagePath, const class FString& InPackageName) const;
	void DiffAssets(class UObject* OldAsset, class UObject* NewAsset, const struct FRevisionInfo& OldRevision, const struct FRevisionInfo& NewRevision) const;
	void MigratePackages(const TArray<class FName>& PackageNamesToMigrate, const class FString& DestinationPath, const struct FMigrationOptions& Options) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AssetTools">();
	}
	static class IAssetTools* GetDefaultObj()
	{
		return GetDefaultObjImpl<IAssetTools>();
	}
};

// Class AssetTools.AssetToolsHelpers
// 0x0000 (0x0030 - 0x0030)
class UAssetToolsHelpers final : public UObject
{
public:
	static TScriptInterface<class IAssetTools> GetAssetTools();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AssetToolsHelpers">();
	}
	static class UAssetToolsHelpers* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAssetToolsHelpers>();
	}
};

// Class AssetTools.AdvancedCopyCustomization
// 0x0178 (0x01A8 - 0x0030)
class UAdvancedCopyCustomization : public UObject
{
public:
	uint8                                         Pad_30[0x178];                                     // 0x0030(0x0178)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AdvancedCopyCustomization">();
	}
	static class UAdvancedCopyCustomization* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAdvancedCopyCustomization>();
	}
};

// Class AssetTools.AssetToolsImpl
// 0x0330 (0x0360 - 0x0030)
class UAssetToolsImpl final : public UObject
{
public:
	uint8                                         Pad_30[0x330];                                     // 0x0030(0x0330)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AssetToolsImpl">();
	}
	static class UAssetToolsImpl* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAssetToolsImpl>();
	}
};

}

