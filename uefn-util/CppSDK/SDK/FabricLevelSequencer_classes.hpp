#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FabricLevelSequencer

#include "Basic.hpp"

#include "HarmonixMetasound_structs.hpp"
#include "FabricLevelSequencer_structs.hpp"
#include "HarmonixMidi_structs.hpp"
#include "Engine_classes.hpp"
#include "FabricRuntime_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// Class FabricLevelSequencer.FabricSongSyncComponent
// 0x0190 (0x0268 - 0x00D8)
class UFabricSongSyncComponent final : public UActorComponent
{
public:
	uint8                                         Pad_D8[0x8];                                       // 0x00D8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinAllowedTempo;                                   // 0x00E0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAllowedTempo;                                   // 0x00E4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 AllowedTimeSignatureNumerators;                    // 0x00E8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<int32>                                 AllowedTimeSignatureDenominators;                  // 0x00F8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FName                                   MidiFilePropertyName;                              // 0x0108(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OffsetBarsProperty;                                // 0x0114(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OffsetBeatsProperty;                               // 0x0120(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   IgnoreSeeksProperty;                               // 0x012C(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnSongSyncPlayInitiated;                           // 0x0138(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnSongSyncStarted;                                 // 0x0148(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnSongSyncStopped;                                 // 0x0158(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FSongSyncPlaybackRequest               ServerPlaybackRequest;                             // 0x0168(0x000C)(Net, Transient, RepNotify, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_174[0x10];                                     // 0x0174(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMusicTimestamp                        PlaybackStartTimestamp;                            // 0x0184(0x0008)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FMusicTimestamp                        RelativeOffsetTimestampMidi;                       // 0x018C(0x0008)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FMusicTimestamp                        RelativeOffsetTimestampLinked;                     // 0x0194(0x0008)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bWaitForClockRestart;                              // 0x019C(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_19D[0x3];                                      // 0x019D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMusicTimestamp                        CachedTimeStampPreRestart;                         // 0x01A0(0x0008)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1A8[0x60];                                     // 0x01A8(0x0060)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UMidiFile>               TempoMapMidiFile;                                  // 0x0208(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FSongSyncSequenceActor                 ServerLevelSequenceActor;                          // 0x0210(0x0010)(Net, Transient, RepNotify, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_220[0x18];                                     // 0x0220(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UFabricSongSyncComponent> AuthoritySongSync;                                 // 0x0238(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<TWeakObjectPtr<class UFabricSongSyncComponent>> LinkedSongSyncs;                                   // 0x0240(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	class UMusicClockMovieSceneClockSource*       CustomClockSource;                                 // 0x0250(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class UFabricTimelineSyncComponent> FabricTimelineSyncComponent;                       // 0x0258(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class UFabricMidiFollowComponent> FollowComponent;                                   // 0x0260(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void AddLevelSequence(TSoftObjectPtr<class ULevelSequence> LevelSequenceAsset);
	void AddLinkedSongSync(class UFabricSongSyncComponent* FollowerSongSync);
	void LocalStopSongSync(class UFabricSongSyncComponent* InAuthoritySongSync);
	void OnClockAuthorityChanged(EFabricMetasoundClock ClockType, class ABuildingActor* OldAuthority, class ABuildingActor* NewAuthority);
	void OnDiscontinuity(EMusicTimeDiscontinuityType DiscontinuityType, const struct FMidiSongPos& PreviousPos, const struct FMidiSongPos& NewPos);
	void OnLevelSequenceLooped(const struct FMusicTimestamp& NewStartTimestamp);
	void OnMidiLooped(const struct FMusicTimestamp& NewStartTimestamp);
	void OnRep_ServerLevelSequenceActor();
	void OnRep_ServerPlaybackRequest();
	void OnTimelineSyncSeek(const struct FMidiSongPos& ClientPos, const struct FMidiSongPos& ServerPos);
	void ServerPlaySongSync(const struct FMusicTimestamp& StartingTimestamp);
	void ServerStopSongSync();
	void SetControllingTempoInGroup(bool bInControllingTempoInGroup);
	void SetFabricMetaSoundManager(class UFabricMetaSoundManagerComponent* InFabricMetaSoundManager);
	void SetFabricMIDIPlayerPatchWrapper(class UFabricMIDIPlayerPatchWrapper* PatchWrapper);
	void SetFabricTimelineSync(class UFabricTimelineSyncComponent* InFabricTimelineSync);
	void SetLooping(bool bInLooping);
	void SetMidiFile(class UMidiFile* InMidiFile);
	void SetPlaybackType(EFabricSongSyncPlaybackType InPlaybackType);
	void SetStartSeekToTimeSeconds(float InStartSeekToTimeSeconds);
	void SetTimingType(EFabricSongSyncTimingType InTimingType);

	struct FMusicTimestamp GetCurrentTimestamp() const;
	bool IsControllingTempo() const;
	bool IsPlaying() const;
	bool MidiFileHasAnyTempoData(class UMidiFile* InMidiFile) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FabricSongSyncComponent">();
	}
	static class UFabricSongSyncComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFabricSongSyncComponent>();
	}
};

// Class FabricLevelSequencer.PlaylistUserOptionLinkedSequence
// 0x0030 (0x0220 - 0x01F0)
class UPlaylistUserOptionLinkedSequence final : public UPlaylistUserOptionBase
{
public:
	struct FLinkedSequence                        DefaultValue;                                      // 0x01F0(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PlaylistUserOptionLinkedSequence">();
	}
	static class UPlaylistUserOptionLinkedSequence* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPlaylistUserOptionLinkedSequence>();
	}
};

// Class FabricLevelSequencer.PlaylistUserOptionLinkedSongSyncList
// 0x0010 (0x0200 - 0x01F0)
class UPlaylistUserOptionLinkedSongSyncList final : public UPlaylistUserOptionBase
{
public:
	struct FLinkedSongSyncList                    DefaultValue;                                      // 0x01F0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PlaylistUserOptionLinkedSongSyncList">();
	}
	static class UPlaylistUserOptionLinkedSongSyncList* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPlaylistUserOptionLinkedSongSyncList>();
	}
};

}

