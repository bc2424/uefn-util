#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SparksCosmeticsRuntime

#include "Basic.hpp"

#include "SparksCosmeticsRuntime_classes.hpp"
#include "SparksCosmeticsRuntime_parameters.hpp"


namespace SDK
{

// Function SparksCosmeticsRuntime.SparksCosmeticsCheatManager.GrantSparksCosmeticsLoadedAssets
// (Final, BlueprintAuthorityOnly, Exec, Native, Private, Const)

void USparksCosmeticsCheatManager::GrantSparksCosmeticsLoadedAssets() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SparksCosmeticsCheatManager", "GrantSparksCosmeticsLoadedAssets");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SparksCosmeticsRuntime.SparksCosmeticsCheatManager.GrantSparksSongsLoadedAssets
// (Final, BlueprintAuthorityOnly, Exec, Native, Private, Const)
// Parameters:
// bool                                    bIncludeSongsWithoutCatalogData                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USparksCosmeticsCheatManager::GrantSparksSongsLoadedAssets(bool bIncludeSongsWithoutCatalogData) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SparksCosmeticsCheatManager", "GrantSparksSongsLoadedAssets");

	Params::SparksCosmeticsCheatManager_GrantSparksSongsLoadedAssets Parms{};

	Parms.bIncludeSongsWithoutCatalogData = bIncludeSongsWithoutCatalogData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SparksCosmeticsRuntime.SparksInstrumentPreviewActor.GetCurrentChoices
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FSparksVariantChoices            ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FSparksVariantChoices ASparksInstrumentPreviewActor::GetCurrentChoices() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SparksInstrumentPreviewActor", "GetCurrentChoices");

	Params::SparksInstrumentPreviewActor_GetCurrentChoices Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SparksCosmeticsRuntime.SparksItemPreviewOffPawnActor.GetInstrumentType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ESparksInstrumentType                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESparksInstrumentType ASparksItemPreviewOffPawnActor::GetInstrumentType()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SparksItemPreviewOffPawnActor", "GetInstrumentType");

	Params::SparksItemPreviewOffPawnActor_GetInstrumentType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SparksCosmeticsRuntime.SparksPlayerStateComponent.SetSparksInstrumentChoice
// (BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// ESparksInstrumentType                   Instrument                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USparksPlayerStateComponent::SetSparksInstrumentChoice(ESparksInstrumentType Instrument)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SparksPlayerStateComponent", "SetSparksInstrumentChoice");

	Params::SparksPlayerStateComponent_SetSparksInstrumentChoice Parms{};

	Parms.Instrument = Instrument;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SparksCosmeticsRuntime.SparksPlayerStateComponent.GetSparksInstrumentChoice
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ESparksInstrumentType                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESparksInstrumentType USparksPlayerStateComponent::GetSparksInstrumentChoice() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SparksPlayerStateComponent", "GetSparksInstrumentChoice");

	Params::SparksPlayerStateComponent_GetSparksInstrumentChoice Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SparksCosmeticsRuntime.SparksSongPreviewActor.OnSongTextureLoaded
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UTexture2D*                       CoverArt                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASparksSongPreviewActor::OnSongTextureLoaded(class UTexture2D* CoverArt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SparksSongPreviewActor", "OnSongTextureLoaded");

	Params::SparksSongPreviewActor_OnSongTextureLoaded Parms{};

	Parms.CoverArt = CoverArt;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SparksCosmeticsRuntime.SparksSongPreviewActor.StartSongPreview
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ASparksSongPreviewActor::StartSongPreview()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SparksSongPreviewActor", "StartSongPreview");

	UObject::ProcessEvent(Func, nullptr);
}

}

