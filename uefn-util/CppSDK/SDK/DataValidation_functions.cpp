#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DataValidation

#include "Basic.hpp"

#include "DataValidation_classes.hpp"
#include "DataValidation_parameters.hpp"


namespace SDK
{

// Function DataValidation.EditorValidatorBase.AssetFails
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          InAsset                                                (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             InMessage                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UEditorValidatorBase::AssetFails(const class UObject* InAsset, const class FText& InMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditorValidatorBase", "AssetFails");

	Params::EditorValidatorBase_AssetFails Parms{};

	Parms.InAsset = InAsset;
	Parms.InMessage = std::move(InMessage);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DataValidation.EditorValidatorBase.AssetPasses
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          InAsset                                                (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEditorValidatorBase::AssetPasses(const class UObject* InAsset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditorValidatorBase", "AssetPasses");

	Params::EditorValidatorBase_AssetPasses Parms{};

	Parms.InAsset = InAsset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DataValidation.EditorValidatorBase.AssetWarning
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          InAsset                                                (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             InMessage                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UEditorValidatorBase::AssetWarning(const class UObject* InAsset, const class FText& InMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditorValidatorBase", "AssetWarning");

	Params::EditorValidatorBase_AssetWarning Parms{};

	Parms.InAsset = InAsset;
	Parms.InMessage = std::move(InMessage);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DataValidation.EditorValidatorBase.K2_ValidateLoadedAsset
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UObject*                          InAsset                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EDataValidationResult                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EDataValidationResult UEditorValidatorBase::K2_ValidateLoadedAsset(class UObject* InAsset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditorValidatorBase", "K2_ValidateLoadedAsset");

	Params::EditorValidatorBase_K2_ValidateLoadedAsset Parms{};

	Parms.InAsset = InAsset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DataValidation.EditorValidatorBase.GetValidationResult
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EDataValidationResult                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EDataValidationResult UEditorValidatorBase::GetValidationResult() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditorValidatorBase", "GetValidationResult");

	Params::EditorValidatorBase_GetValidationResult Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DataValidation.EditorValidatorBase.K2_CanValidate
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// EDataValidationUsecase                  InUsecase                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEditorValidatorBase::K2_CanValidate(const EDataValidationUsecase InUsecase) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditorValidatorBase", "K2_CanValidate");

	Params::EditorValidatorBase_K2_CanValidate Parms{};

	Parms.InUsecase = InUsecase;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DataValidation.EditorValidatorBase.K2_CanValidateAsset
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class UObject*                          InAsset                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEditorValidatorBase::K2_CanValidateAsset(class UObject* InAsset) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditorValidatorBase", "K2_CanValidateAsset");

	Params::EditorValidatorBase_K2_CanValidateAsset Parms{};

	Parms.InAsset = InAsset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DataValidation.EditorValidatorSubsystem.AddValidator
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UEditorValidatorBase*             InValidator                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEditorValidatorSubsystem::AddValidator(class UEditorValidatorBase* InValidator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditorValidatorSubsystem", "AddValidator");

	Params::EditorValidatorSubsystem_AddValidator Parms{};

	Parms.InValidator = InValidator;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DataValidation.EditorValidatorSubsystem.RemoveValidator
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UEditorValidatorBase*             InValidator                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEditorValidatorSubsystem::RemoveValidator(class UEditorValidatorBase* InValidator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditorValidatorSubsystem", "RemoveValidator");

	Params::EditorValidatorSubsystem_RemoveValidator Parms{};

	Parms.InValidator = InValidator;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DataValidation.EditorValidatorSubsystem.IsAssetValid
// (Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FAssetData                       AssetData                                              (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FText>                     ValidationErrors                                       (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<class FText>                     ValidationWarnings                                     (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// EDataValidationUsecase                  InValidationUsecase                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EDataValidationResult                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EDataValidationResult UEditorValidatorSubsystem::IsAssetValid(const struct FAssetData& AssetData, TArray<class FText>* ValidationErrors, TArray<class FText>* ValidationWarnings, const EDataValidationUsecase InValidationUsecase) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditorValidatorSubsystem", "IsAssetValid");

	Params::EditorValidatorSubsystem_IsAssetValid Parms{};

	Parms.AssetData = std::move(AssetData);
	Parms.InValidationUsecase = InValidationUsecase;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ValidationErrors != nullptr)
		*ValidationErrors = std::move(Parms.ValidationErrors);

	if (ValidationWarnings != nullptr)
		*ValidationWarnings = std::move(Parms.ValidationWarnings);

	return Parms.ReturnValue;
}


// Function DataValidation.EditorValidatorSubsystem.IsObjectValid
// (Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UObject*                          InObject                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FText>                     ValidationErrors                                       (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<class FText>                     ValidationWarnings                                     (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// EDataValidationUsecase                  InValidationUsecase                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EDataValidationResult                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EDataValidationResult UEditorValidatorSubsystem::IsObjectValid(class UObject* InObject, TArray<class FText>* ValidationErrors, TArray<class FText>* ValidationWarnings, const EDataValidationUsecase InValidationUsecase) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditorValidatorSubsystem", "IsObjectValid");

	Params::EditorValidatorSubsystem_IsObjectValid Parms{};

	Parms.InObject = InObject;
	Parms.InValidationUsecase = InValidationUsecase;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ValidationErrors != nullptr)
		*ValidationErrors = std::move(Parms.ValidationErrors);

	if (ValidationWarnings != nullptr)
		*ValidationWarnings = std::move(Parms.ValidationWarnings);

	return Parms.ReturnValue;
}


// Function DataValidation.EditorValidatorSubsystem.ValidateAssetsWithSettings
// (Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FAssetData>               AssetDataList                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FValidateAssetsSettings          InSettings                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FValidateAssetsResults           OutResults                                             (Parm, OutParm, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UEditorValidatorSubsystem::ValidateAssetsWithSettings(const TArray<struct FAssetData>& AssetDataList, const struct FValidateAssetsSettings& InSettings, struct FValidateAssetsResults* OutResults) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditorValidatorSubsystem", "ValidateAssetsWithSettings");

	Params::EditorValidatorSubsystem_ValidateAssetsWithSettings Parms{};

	Parms.AssetDataList = std::move(AssetDataList);
	Parms.InSettings = std::move(InSettings);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutResults != nullptr)
		*OutResults = std::move(Parms.OutResults);

	return Parms.ReturnValue;
}


// Function DataValidation.EditorValidatorSubsystem.ValidateChangelist
// (Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UDataValidationChangelist*        InChangelist                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FValidateAssetsSettings          InSettings                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FValidateAssetsResults           OutResults                                             (Parm, OutParm, NativeAccessSpecifierPublic)
// EDataValidationResult                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EDataValidationResult UEditorValidatorSubsystem::ValidateChangelist(class UDataValidationChangelist* InChangelist, const struct FValidateAssetsSettings& InSettings, struct FValidateAssetsResults* OutResults) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditorValidatorSubsystem", "ValidateChangelist");

	Params::EditorValidatorSubsystem_ValidateChangelist Parms{};

	Parms.InChangelist = InChangelist;
	Parms.InSettings = std::move(InSettings);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutResults != nullptr)
		*OutResults = std::move(Parms.OutResults);

	return Parms.ReturnValue;
}


// Function DataValidation.EditorValidatorSubsystem.ValidateChangelists
// (Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class UDataValidationChangelist*>InChangelists                                          (ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// struct FValidateAssetsSettings          InSettings                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FValidateAssetsResults           OutResults                                             (Parm, OutParm, NativeAccessSpecifierPublic)
// EDataValidationResult                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EDataValidationResult UEditorValidatorSubsystem::ValidateChangelists(const TArray<class UDataValidationChangelist*>& InChangelists, const struct FValidateAssetsSettings& InSettings, struct FValidateAssetsResults* OutResults) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditorValidatorSubsystem", "ValidateChangelists");

	Params::EditorValidatorSubsystem_ValidateChangelists Parms{};

	Parms.InChangelists = std::move(InChangelists);
	Parms.InSettings = std::move(InSettings);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutResults != nullptr)
		*OutResults = std::move(Parms.OutResults);

	return Parms.ReturnValue;
}

}

