#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: InstancedActors

#include "Basic.hpp"

#include "InstancedActors_classes.hpp"
#include "InstancedActors_parameters.hpp"


namespace SDK
{

// Function InstancedActors.InstancedActorsComponent.OnRep_InstanceHandle
// (Final, Native, Protected)

void UInstancedActorsComponent::OnRep_InstanceHandle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InstancedActorsComponent", "OnRep_InstanceHandle");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InstancedActors.InstancedActorsComponent.HasMassEntity
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInstancedActorsComponent::HasMassEntity() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InstancedActorsComponent", "HasMassEntity");

	Params::InstancedActorsComponent_HasMassEntity Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InstancedActors.InstancedActorsData.GetManager
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AInstancedActorsManager*          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AInstancedActorsManager* UInstancedActorsData::GetManager() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InstancedActorsData", "GetManager");

	Params::InstancedActorsData_GetManager Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InstancedActors.InstancedActorsSubsystem.InstanceActor
// (Final, RequiredAPI, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, EditorOnly)
// Parameters:
// TSubclassOf<class AActor>               ActorClass                                             (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       InstanceTransform                                      (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULevel*                           Level                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTagContainer            InstanceTags                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TSubclassOf<class AInstancedActorsManager>ManagerClass                                           (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInstancedActorsInstanceHandle   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FInstancedActorsInstanceHandle UInstancedActorsSubsystem::InstanceActor(TSubclassOf<class AActor> ActorClass, const struct FTransform& InstanceTransform, class ULevel* Level, const struct FGameplayTagContainer& InstanceTags, TSubclassOf<class AInstancedActorsManager> ManagerClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InstancedActorsSubsystem", "InstanceActor");

	Params::InstancedActorsSubsystem_InstanceActor Parms{};

	Parms.ActorClass = ActorClass;
	Parms.InstanceTransform = std::move(InstanceTransform);
	Parms.Level = Level;
	Parms.InstanceTags = std::move(InstanceTags);
	Parms.ManagerClass = ManagerClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InstancedActors.InstancedActorsSubsystem.RemoveActorInstance
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable, EditorOnly)
// Parameters:
// struct FInstancedActorsInstanceHandle   InstanceHandle                                         (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bDestroyManagerIfEmpty                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInstancedActorsSubsystem::RemoveActorInstance(const struct FInstancedActorsInstanceHandle& InstanceHandle, bool bDestroyManagerIfEmpty)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InstancedActorsSubsystem", "RemoveActorInstance");

	Params::InstancedActorsSubsystem_RemoveActorInstance Parms{};

	Parms.InstanceHandle = std::move(InstanceHandle);
	Parms.bDestroyManagerIfEmpty = bDestroyManagerIfEmpty;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

