#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AttachableWheelsRuntime

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "AttachableWheelsRuntime_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class AttachableWheelsRuntime.AttachableWheel
// 0x00A8 (0x04C8 - 0x0420)
class AAttachableWheel : public AActor
{
public:
	class UStaticMeshComponent*                   WheelMeshComponent;                                // 0x0420(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRotator                               WheelOrientation;                                  // 0x0428(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	float                                         WheelDistance;                                     // 0x0440(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_444[0x4];                                      // 0x0444(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicsConstraintComponent*            AxleConstraint;                                    // 0x0448(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FAttachableWheelAttachData             AttachData;                                        // 0x0450(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, Net, Transient, EditConst, RepNotify, NoDestructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	bool                                          bAutoCreateAttachableWheelsComponent;              // 0x04B0(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bEnableWheelWheelCollision;                        // 0x04B1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bReplicateRuntimeData;                             // 0x04B2(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4B3[0x1];                                      // 0x04B3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAttachableWheelRuntimeData            RuntimeData;                                       // 0x04B4(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, Net, Transient, EditConst, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_4C0[0x8];                                      // 0x04C0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool AttachInPlace(class UPrimitiveComponent* InComponent);
	bool AttachTo(class UPrimitiveComponent* InComponent, const struct FVector& WorldLocation, const struct FVector& AxleDirection, const struct FVector& SteerAxis);
	void Detach();
	bool DetachFrom(class UPrimitiveComponent* InComponent);
	void OnAttached(class UPrimitiveComponent* AttachedComponent);
	void OnDetached(class UPrimitiveComponent* DetachedComponent);
	void OnPhysicsStateChanged(class UPrimitiveComponent* PrimitiveComponent, EComponentPhysicsStateChange StateChange);
	void OnRep_AttachData(const struct FAttachableWheelAttachData& AttachDataPrev);
	void OnRep_RuntimeData(const struct FAttachableWheelRuntimeData& RuntimeDataPrev);
	void SetRuntimeData(float Torque, float Velocity, float SteerAngle);
	void SetRuntimeData_SteerAngle(float SteerAngle);
	void SetRuntimeData_Torque(float Torque);
	void SetRuntimeData_Velocity(float Velocity);

	void DrawDebug() const;
	const struct FAttachableWheelAttachData GetAttachData() const;
	class UPrimitiveComponent* GetAttachedComponent() const;
	bool GetWorldSpaceAttachData(struct FAttachableWheelAttachData* OutAttachData, class UPrimitiveComponent* PrimitiveComponent, const class FName BodyName) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AttachableWheel">();
	}
	static class AAttachableWheel* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAttachableWheel>();
	}
};

// Class AttachableWheelsRuntime.AttachableWheelsComponent
// 0x0068 (0x0140 - 0x00D8)
class UAttachableWheelsComponent final : public UActorComponent
{
public:
	uint8                                         Pad_D8[0x8];                                       // 0x00D8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<class AAttachableWheel*>                 AttachedWheels;                                    // 0x00E0(0x0050)(NativeAccessSpecifierPrivate)
	float                                         MaxChassisMassFraction;                            // 0x0130(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_134[0xC];                                      // 0x0134(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	int32 DetachAllWheels();
	bool HandleWheelAttached_Internal(class AAttachableWheel* AttachedWheel);
	bool HandleWheelDetached_Internal(class AAttachableWheel* AttachedWheel);
	void OnWheelAttached(class AAttachableWheel* AttachedWheel);
	void OnWheelDetached(class AAttachableWheel* AttachedWheel);
	void SetMaxChassisMassFraction(float InMaxChassisMassFraction);

	void DrawDebug() const;
	class AAttachableWheel* GetAttachedWheelClosestOnAxis(const struct FVector& Point, float* OutClosetDistanceToAxis, struct FVector* OutClosestPointOnAxis, struct FVector* OutClosestAxis) const;
	TArray<class AAttachableWheel*> GetAttachedWheels() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AttachableWheelsComponent">();
	}
	static class UAttachableWheelsComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAttachableWheelsComponent>();
	}
};

}

