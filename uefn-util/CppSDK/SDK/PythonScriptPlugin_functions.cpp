#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PythonScriptPlugin

#include "Basic.hpp"

#include "PythonScriptPlugin_classes.hpp"
#include "PythonScriptPlugin_parameters.hpp"


namespace SDK
{

// Function PythonScriptPlugin.PyTestInterface.FuncInterface
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   InValue                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 IPyTestInterface::FuncInterface(const int32 InValue) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyTestInterface", "FuncInterface");

	Params::PyTestInterface_FuncInterface Parms{};

	Parms.InValue = InValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PythonScriptPlugin.PyTestChildInterface.FuncInterfaceChild
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   InValue                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 IPyTestChildInterface::FuncInterfaceChild(const int32 InValue) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyTestChildInterface", "FuncInterfaceChild");

	Params::PyTestChildInterface_FuncInterfaceChild Parms{};

	Parms.InValue = InValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PythonScriptPlugin.PyTestOtherInterface.FuncInterfaceOther
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   InValue                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 IPyTestOtherInterface::FuncInterfaceOther(const int32 InValue) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyTestOtherInterface", "FuncInterfaceOther");

	Params::PyTestOtherInterface_FuncInterfaceOther Parms{};

	Parms.InValue = InValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PythonScriptPlugin.PyTestStructLibrary.AddFloat
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FPyTestStruct                    InStruct                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   InValue                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FPyTestStruct                    ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FPyTestStruct UPyTestStructLibrary::AddFloat(const struct FPyTestStruct& InStruct, const float InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PyTestStructLibrary", "AddFloat");

	Params::PyTestStructLibrary_AddFloat Parms{};

	Parms.InStruct = std::move(InStruct);
	Parms.InValue = InValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PythonScriptPlugin.PyTestStructLibrary.AddInt
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FPyTestStruct                    InStruct                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   InValue                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FPyTestStruct                    ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FPyTestStruct UPyTestStructLibrary::AddInt(const struct FPyTestStruct& InStruct, const int32 InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PyTestStructLibrary", "AddInt");

	Params::PyTestStructLibrary_AddInt Parms{};

	Parms.InStruct = std::move(InStruct);
	Parms.InValue = InValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PythonScriptPlugin.PyTestStructLibrary.AddStr
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FPyTestStruct                    InStruct                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           InValue                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FPyTestStruct                    ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FPyTestStruct UPyTestStructLibrary::AddStr(const struct FPyTestStruct& InStruct, const class FString& InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PyTestStructLibrary", "AddStr");

	Params::PyTestStructLibrary_AddStr Parms{};

	Parms.InStruct = std::move(InStruct);
	Parms.InValue = std::move(InValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PythonScriptPlugin.PyTestStructLibrary.ClearBoolMutable
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FPyTestStruct                    InStruct                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UPyTestStructLibrary::ClearBoolMutable(const struct FPyTestStruct& InStruct)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PyTestStructLibrary", "ClearBoolMutable");

	Params::PyTestStructLibrary_ClearBoolMutable Parms{};

	Parms.InStruct = std::move(InStruct);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PythonScriptPlugin.PyTestStructLibrary.ClearBoolMutableViaRef
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FPyTestStruct                    InStruct                                               (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UPyTestStructLibrary::ClearBoolMutableViaRef(struct FPyTestStruct& InStruct)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PyTestStructLibrary", "ClearBoolMutableViaRef");

	Params::PyTestStructLibrary_ClearBoolMutableViaRef Parms{};

	Parms.InStruct = std::move(InStruct);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	InStruct = std::move(Parms.InStruct);
}


// Function PythonScriptPlugin.PyTestStructLibrary.GetConstantValue
// (Final, Native, Static, Private, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UPyTestStructLibrary::GetConstantValue()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PyTestStructLibrary", "GetConstantValue");

	Params::PyTestStructLibrary_GetConstantValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PythonScriptPlugin.PyTestStructLibrary.IsBoolSet
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FPyTestStruct                    InStruct                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPyTestStructLibrary::IsBoolSet(const struct FPyTestStruct& InStruct)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PyTestStructLibrary", "IsBoolSet");

	Params::PyTestStructLibrary_IsBoolSet Parms{};

	Parms.InStruct = std::move(InStruct);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PythonScriptPlugin.PyTestStructLibrary.LegacyIsBoolSet
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FPyTestStruct                    InStruct                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPyTestStructLibrary::LegacyIsBoolSet(const struct FPyTestStruct& InStruct)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PyTestStructLibrary", "LegacyIsBoolSet");

	Params::PyTestStructLibrary_LegacyIsBoolSet Parms{};

	Parms.InStruct = std::move(InStruct);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PythonScriptPlugin.PyTestStructLibrary.SetBoolMutable
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FPyTestStruct                    InStruct                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UPyTestStructLibrary::SetBoolMutable(const struct FPyTestStruct& InStruct)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PyTestStructLibrary", "SetBoolMutable");

	Params::PyTestStructLibrary_SetBoolMutable Parms{};

	Parms.InStruct = std::move(InStruct);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PythonScriptPlugin.PyTestStructLibrary.SetBoolMutableViaRef
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FPyTestStruct                    InStruct                                               (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UPyTestStructLibrary::SetBoolMutableViaRef(struct FPyTestStruct& InStruct)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PyTestStructLibrary", "SetBoolMutableViaRef");

	Params::PyTestStructLibrary_SetBoolMutableViaRef Parms{};

	Parms.InStruct = std::move(InStruct);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	InStruct = std::move(Parms.InStruct);
}


// Function PythonScriptPlugin.PyTestObject.EmitScriptError
// (Final, Native, Static, Public, BlueprintCallable)

void UPyTestObject::EmitScriptError()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PyTestObject", "EmitScriptError");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function PythonScriptPlugin.PyTestObject.EmitScriptWarning
// (Final, Native, Static, Public, BlueprintCallable)

void UPyTestObject::EmitScriptWarning()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PyTestObject", "EmitScriptWarning");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function PythonScriptPlugin.PyTestObject.GetConstantValue
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UPyTestObject::GetConstantValue()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PyTestObject", "GetConstantValue");

	Params::PyTestObject_GetConstantValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PythonScriptPlugin.PyTestObject.ReturnArray
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TArray<int32>                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<int32> UPyTestObject::ReturnArray()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PyTestObject", "ReturnArray");

	Params::PyTestObject_ReturnArray Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PythonScriptPlugin.PyTestObject.ReturnFieldPath
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TFieldPath<class FProperty>             ReturnValue                                            (Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TFieldPath<class FProperty> UPyTestObject::ReturnFieldPath()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PyTestObject", "ReturnFieldPath");

	Params::PyTestObject_ReturnFieldPath Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PythonScriptPlugin.PyTestObject.ReturnMap
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TMap<int32, bool>                       ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

TMap<int32, bool> UPyTestObject::ReturnMap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PyTestObject", "ReturnMap");

	Params::PyTestObject_ReturnMap Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PythonScriptPlugin.PyTestObject.ReturnSet
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TSet<int32>                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

TSet<int32> UPyTestObject::ReturnSet()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PyTestObject", "ReturnSet");

	Params::PyTestObject_ReturnSet Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PythonScriptPlugin.PyTestObject.FuncTakingFieldPath
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TFieldPath<class FProperty>             InFieldPath                                            (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPyTestObject::FuncTakingFieldPath(const TFieldPath<class FProperty>& InFieldPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyTestObject", "FuncTakingFieldPath");

	Params::PyTestObject_FuncTakingFieldPath Parms{};

	Parms.InFieldPath = InFieldPath;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PythonScriptPlugin.PyTestObject.FuncTakingPyTestStructDefault
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FPyTestStruct                    InStruct                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UPyTestObject::FuncTakingPyTestStructDefault(const struct FPyTestStruct& InStruct)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyTestObject", "FuncTakingPyTestStructDefault");

	Params::PyTestObject_FuncTakingPyTestStructDefault Parms{};

	Parms.InStruct = std::move(InStruct);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PythonScriptPlugin.PyTestObject.CallFuncBlueprintImplementable
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   InValue                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UPyTestObject::CallFuncBlueprintImplementable(const int32 InValue) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyTestObject", "CallFuncBlueprintImplementable");

	Params::PyTestObject_CallFuncBlueprintImplementable Parms{};

	Parms.InValue = InValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PythonScriptPlugin.PyTestObject.CallFuncBlueprintImplementablePackedGetter
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   OutValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPyTestObject::CallFuncBlueprintImplementablePackedGetter(int32* OutValue) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyTestObject", "CallFuncBlueprintImplementablePackedGetter");

	Params::PyTestObject_CallFuncBlueprintImplementablePackedGetter Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutValue != nullptr)
		*OutValue = Parms.OutValue;

	return Parms.ReturnValue;
}


// Function PythonScriptPlugin.PyTestObject.CallFuncBlueprintNative
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   InValue                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UPyTestObject::CallFuncBlueprintNative(const int32 InValue) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyTestObject", "CallFuncBlueprintNative");

	Params::PyTestObject_CallFuncBlueprintNative Parms{};

	Parms.InValue = InValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PythonScriptPlugin.PyTestObject.CallFuncBlueprintNativeRef
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FPyTestStruct                    InOutStruct                                            (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UPyTestObject::CallFuncBlueprintNativeRef(struct FPyTestStruct& InOutStruct) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyTestObject", "CallFuncBlueprintNativeRef");

	Params::PyTestObject_CallFuncBlueprintNativeRef Parms{};

	Parms.InOutStruct = std::move(InOutStruct);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	InOutStruct = std::move(Parms.InOutStruct);
}


// Function PythonScriptPlugin.PyTestObject.DelegatePropertyCallback
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   InValue                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UPyTestObject::DelegatePropertyCallback(const int32 InValue) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyTestObject", "DelegatePropertyCallback");

	Params::PyTestObject_DelegatePropertyCallback Parms{};

	Parms.InValue = InValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PythonScriptPlugin.PyTestObject.FuncBlueprintImplementable
// (Event, Public, BlueprintEvent, Const)
// Parameters:
// int32                                   InValue                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UPyTestObject::FuncBlueprintImplementable(const int32 InValue) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyTestObject", "FuncBlueprintImplementable");

	Params::PyTestObject_FuncBlueprintImplementable Parms{};

	Parms.InValue = InValue;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function PythonScriptPlugin.PyTestObject.FuncBlueprintImplementablePackedGetter
// (Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// int32                                   OutValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPyTestObject::FuncBlueprintImplementablePackedGetter(int32* OutValue) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyTestObject", "FuncBlueprintImplementablePackedGetter");

	Params::PyTestObject_FuncBlueprintImplementablePackedGetter Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutValue != nullptr)
		*OutValue = Parms.OutValue;

	return Parms.ReturnValue;
}


// Function PythonScriptPlugin.PyTestObject.FuncBlueprintNative
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// int32                                   InValue                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UPyTestObject::FuncBlueprintNative(const int32 InValue) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyTestObject", "FuncBlueprintNative");

	Params::PyTestObject_FuncBlueprintNative Parms{};

	Parms.InValue = InValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PythonScriptPlugin.PyTestObject.FuncBlueprintNativeRef
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// struct FPyTestStruct                    InOutStruct                                            (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UPyTestObject::FuncBlueprintNativeRef(struct FPyTestStruct& InOutStruct) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyTestObject", "FuncBlueprintNativeRef");

	Params::PyTestObject_FuncBlueprintNativeRef Parms{};

	Parms.InOutStruct = std::move(InOutStruct);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	InOutStruct = std::move(Parms.InOutStruct);
}


// Function PythonScriptPlugin.PyTestObject.FuncTakingPyTestChildStruct
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FPyTestChildStruct               InStruct                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UPyTestObject::FuncTakingPyTestChildStruct(const struct FPyTestChildStruct& InStruct) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyTestObject", "FuncTakingPyTestChildStruct");

	Params::PyTestObject_FuncTakingPyTestChildStruct Parms{};

	Parms.InStruct = std::move(InStruct);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PythonScriptPlugin.PyTestObject.FuncTakingPyTestDelegate
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TDelegate<void(int32 InValue)>          InDelegate                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InValue                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UPyTestObject::FuncTakingPyTestDelegate(const TDelegate<void(int32 InValue)>& InDelegate, const int32 InValue) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyTestObject", "FuncTakingPyTestDelegate");

	Params::PyTestObject_FuncTakingPyTestDelegate Parms{};

	Parms.InDelegate = InDelegate;
	Parms.InValue = InValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PythonScriptPlugin.PyTestObject.FuncTakingPyTestStruct
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FPyTestStruct                    InStruct                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UPyTestObject::FuncTakingPyTestStruct(const struct FPyTestStruct& InStruct) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyTestObject", "FuncTakingPyTestStruct");

	Params::PyTestObject_FuncTakingPyTestStruct Parms{};

	Parms.InStruct = std::move(InStruct);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PythonScriptPlugin.PyTestObject.LegacyFuncTakingPyTestStruct
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FPyTestStruct                    InStruct                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UPyTestObject::LegacyFuncTakingPyTestStruct(const struct FPyTestStruct& InStruct) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyTestObject", "LegacyFuncTakingPyTestStruct");

	Params::PyTestObject_LegacyFuncTakingPyTestStruct Parms{};

	Parms.InStruct = std::move(InStruct);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PythonScriptPlugin.PyTestObject.MulticastDelegatePropertyCallback
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// class FString                           InStr                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPyTestObject::MulticastDelegatePropertyCallback(const class FString& InStr) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyTestObject", "MulticastDelegatePropertyCallback");

	Params::PyTestObject_MulticastDelegatePropertyCallback Parms{};

	Parms.InStr = std::move(InStr);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PythonScriptPlugin.PyTestObjectLibrary.GetOtherConstantValue
// (Final, Native, Static, Private, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UPyTestObjectLibrary::GetOtherConstantValue()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PyTestObjectLibrary", "GetOtherConstantValue");

	Params::PyTestObjectLibrary_GetOtherConstantValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PythonScriptPlugin.PyTestObjectLibrary.IsBoolSet
// (Final, Native, Static, Private, BlueprintCallable, BlueprintPure)
// Parameters:
// class UPyTestObject*                    InObj                                                  (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPyTestObjectLibrary::IsBoolSet(const class UPyTestObject* InObj)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PyTestObjectLibrary", "IsBoolSet");

	Params::PyTestObjectLibrary_IsBoolSet Parms{};

	Parms.InObj = InObj;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PythonScriptPlugin.PyTestTypeHint.CheckStaticFunction
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    Param1                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Param2                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double                                  Param3                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Param4                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPyTestTypeHint::CheckStaticFunction(bool Param1, int32 Param2, double Param3, const class FString& Param4)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PyTestTypeHint", "CheckStaticFunction");

	Params::PyTestTypeHint_CheckStaticFunction Parms{};

	Parms.Param1 = Param1;
	Parms.Param2 = Param2;
	Parms.Param3 = Param3;
	Parms.Param4 = std::move(Param4);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PythonScriptPlugin.PyTestTypeHint.CheckTupleReturnType
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           InOutString                                            (Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UPyTestTypeHint::CheckTupleReturnType(class FString& InOutString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PyTestTypeHint", "CheckTupleReturnType");

	Params::PyTestTypeHint_CheckTupleReturnType Parms{};

	Parms.InOutString = std::move(InOutString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	InOutString = std::move(Parms.InOutString);

	return Parms.ReturnValue;
}


// Function PythonScriptPlugin.PyTestTypeHint.GetIntConst
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UPyTestTypeHint::GetIntConst()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PyTestTypeHint", "GetIntConst");

	Params::PyTestTypeHint_GetIntConst Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PythonScriptPlugin.PyTestTypeHint.GetStringConst
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UPyTestTypeHint::GetStringConst()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PyTestTypeHint", "GetStringConst");

	Params::PyTestTypeHint_GetStringConst Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PythonScriptPlugin.PyTestTypeHint.CheckArrayTypeHints
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<class FString>                   Param1                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<class FName>                     Param2                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<class FText>                     Param3                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<class UObject*>                  Param4                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<class FText>                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FText> UPyTestTypeHint::CheckArrayTypeHints(const TArray<class FString>& Param1, const TArray<class FName>& Param2, const TArray<class FText>& Param3, const TArray<class UObject*>& Param4)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyTestTypeHint", "CheckArrayTypeHints");

	Params::PyTestTypeHint_CheckArrayTypeHints Parms{};

	Parms.Param1 = std::move(Param1);
	Parms.Param2 = std::move(Param2);
	Parms.Param3 = std::move(Param3);
	Parms.Param4 = std::move(Param4);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PythonScriptPlugin.PyTestTypeHint.CheckBoolTypeHints
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    bParam1                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bParam2                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bParam3                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPyTestTypeHint::CheckBoolTypeHints(bool bParam1, bool bParam2, bool bParam3)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyTestTypeHint", "CheckBoolTypeHints");

	Params::PyTestTypeHint_CheckBoolTypeHints Parms{};

	Parms.bParam1 = bParam1;
	Parms.bParam2 = bParam2;
	Parms.bParam3 = bParam3;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PythonScriptPlugin.PyTestTypeHint.CheckDelegateTypeHints
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// TDelegate<void(int32 InValue)>          Param1                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(int32 InValue)>          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TDelegate<void(int32 InValue)> UPyTestTypeHint::CheckDelegateTypeHints(const TDelegate<void(int32 InValue)>& Param1)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyTestTypeHint", "CheckDelegateTypeHints");

	Params::PyTestTypeHint_CheckDelegateTypeHints Parms{};

	Parms.Param1 = Param1;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PythonScriptPlugin.PyTestTypeHint.CheckEnumTypeHints
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EPyTestEnum                             Param1                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EPyTestEnum                             Param2                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EPyTestEnum                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EPyTestEnum UPyTestTypeHint::CheckEnumTypeHints(EPyTestEnum Param1, EPyTestEnum Param2)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyTestTypeHint", "CheckEnumTypeHints");

	Params::PyTestTypeHint_CheckEnumTypeHints Parms{};

	Parms.Param1 = Param1;
	Parms.Param2 = Param2;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PythonScriptPlugin.PyTestTypeHint.CheckFieldPathTypeHints
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TFieldPath<class FProperty>             Param1                                                 (ConstParm, Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TFieldPath<class FProperty>             ReturnValue                                            (Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TFieldPath<class FProperty> UPyTestTypeHint::CheckFieldPathTypeHints(const TFieldPath<class FProperty> Param1)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyTestTypeHint", "CheckFieldPathTypeHints");

	Params::PyTestTypeHint_CheckFieldPathTypeHints Parms{};

	Parms.Param1 = Param1;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PythonScriptPlugin.PyTestTypeHint.CheckFloatTypeHints
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   Param1                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double                                  Param2                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Param3                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double                                  Param4                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

double UPyTestTypeHint::CheckFloatTypeHints(float Param1, double Param2, float Param3, double Param4)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyTestTypeHint", "CheckFloatTypeHints");

	Params::PyTestTypeHint_CheckFloatTypeHints Parms{};

	Parms.Param1 = Param1;
	Parms.Param2 = Param2;
	Parms.Param3 = Param3;
	Parms.Param4 = Param4;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PythonScriptPlugin.PyTestTypeHint.CheckIntegerTypeHints
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// uint8                                   Param1                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Param2                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   Param3                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UPyTestTypeHint::CheckIntegerTypeHints(uint8 Param1, int32 Param2, int64 Param3)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyTestTypeHint", "CheckIntegerTypeHints");

	Params::PyTestTypeHint_CheckIntegerTypeHints Parms{};

	Parms.Param1 = Param1;
	Parms.Param2 = Param2;
	Parms.Param3 = Param3;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PythonScriptPlugin.PyTestTypeHint.CheckMapTypeHints
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// TMap<int32, class FString>              Param1                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TMap<int32, class FName>                Param2                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TMap<int32, class FText>                Param3                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TMap<int32, class UObject*>             Param4                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TMap<class FString, class UObject*>     ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

TMap<class FString, class UObject*> UPyTestTypeHint::CheckMapTypeHints(const TMap<int32, class FString>& Param1, const TMap<int32, class FName>& Param2, const TMap<int32, class FText>& Param3, const TMap<int32, class UObject*>& Param4)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyTestTypeHint", "CheckMapTypeHints");

	Params::PyTestTypeHint_CheckMapTypeHints Parms{};

	Parms.Param1 = std::move(Param1);
	Parms.Param2 = std::move(Param2);
	Parms.Param3 = std::move(Param3);
	Parms.Param4 = std::move(Param4);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PythonScriptPlugin.PyTestTypeHint.CheckNameTypeHints
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             Param1                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Param2                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UPyTestTypeHint::CheckNameTypeHints(const class FName& Param1, const class FName& Param2)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyTestTypeHint", "CheckNameTypeHints");

	Params::PyTestTypeHint_CheckNameTypeHints Parms{};

	Parms.Param1 = Param1;
	Parms.Param2 = Param2;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PythonScriptPlugin.PyTestTypeHint.CheckObjectTypeHints
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UPyTestObject*                    Param1                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPyTestObject*                    Param4                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPyTestObject*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UPyTestObject* UPyTestTypeHint::CheckObjectTypeHints(const class UPyTestObject* Param1, const class UPyTestObject* Param4)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyTestTypeHint", "CheckObjectTypeHints");

	Params::PyTestTypeHint_CheckObjectTypeHints Parms{};

	Parms.Param1 = Param1;
	Parms.Param4 = Param4;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PythonScriptPlugin.PyTestTypeHint.CheckSetTypeHints
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// TSet<class FString>                     Param1                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TSet<class FName>                       Param2                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TSet<class UObject*>                    Param3                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TSet<class FName>                       ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

TSet<class FName> UPyTestTypeHint::CheckSetTypeHints(const TSet<class FString>& Param1, const TSet<class FName>& Param2, const TSet<class UObject*>& Param3)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyTestTypeHint", "CheckSetTypeHints");

	Params::PyTestTypeHint_CheckSetTypeHints Parms{};

	Parms.Param1 = std::move(Param1);
	Parms.Param2 = std::move(Param2);
	Parms.Param3 = std::move(Param3);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PythonScriptPlugin.PyTestTypeHint.CheckStringTypeHints
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           Param1                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Param2                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UPyTestTypeHint::CheckStringTypeHints(const class FString& Param1, const class FString& Param2)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyTestTypeHint", "CheckStringTypeHints");

	Params::PyTestTypeHint_CheckStringTypeHints Parms{};

	Parms.Param1 = std::move(Param1);
	Parms.Param2 = std::move(Param2);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PythonScriptPlugin.PyTestTypeHint.CheckStructTypeHints
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FPyTestStruct                    Param1                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FPyTestStruct                    Param2                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FPyTestStruct                    ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FPyTestStruct UPyTestTypeHint::CheckStructTypeHints(const struct FPyTestStruct& Param1, const struct FPyTestStruct& Param2)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyTestTypeHint", "CheckStructTypeHints");

	Params::PyTestTypeHint_CheckStructTypeHints Parms{};

	Parms.Param1 = std::move(Param1);
	Parms.Param2 = std::move(Param2);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PythonScriptPlugin.PyTestTypeHint.CheckTextTypeHints
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class FText                             Param1                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FText                             Param2                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UPyTestTypeHint::CheckTextTypeHints(const class FText& Param1, const class FText& Param2)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyTestTypeHint", "CheckTextTypeHints");

	Params::PyTestTypeHint_CheckTextTypeHints Parms{};

	Parms.Param1 = std::move(Param1);
	Parms.Param2 = std::move(Param2);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PythonScriptPlugin.PythonScriptLibrary.ExecutePythonCommand
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           PythonCommand                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPythonScriptLibrary::ExecutePythonCommand(const class FString& PythonCommand)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PythonScriptLibrary", "ExecutePythonCommand");

	Params::PythonScriptLibrary_ExecutePythonCommand Parms{};

	Parms.PythonCommand = std::move(PythonCommand);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PythonScriptPlugin.PythonScriptLibrary.ExecutePythonCommandEx
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           PythonCommand                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           CommandResult                                          (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FPythonLogOutputEntry>    LogOutput                                              (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// EPythonCommandExecutionMode             ExecutionMode                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EPythonFileExecutionScope               FileExecutionScope                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPythonScriptLibrary::ExecutePythonCommandEx(const class FString& PythonCommand, class FString* CommandResult, TArray<struct FPythonLogOutputEntry>* LogOutput, const EPythonCommandExecutionMode ExecutionMode, const EPythonFileExecutionScope FileExecutionScope)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PythonScriptLibrary", "ExecutePythonCommandEx");

	Params::PythonScriptLibrary_ExecutePythonCommandEx Parms{};

	Parms.PythonCommand = std::move(PythonCommand);
	Parms.ExecutionMode = ExecutionMode;
	Parms.FileExecutionScope = FileExecutionScope;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (CommandResult != nullptr)
		*CommandResult = std::move(Parms.CommandResult);

	if (LogOutput != nullptr)
		*LogOutput = std::move(Parms.LogOutput);

	return Parms.ReturnValue;
}


// Function PythonScriptPlugin.PythonScriptLibrary.ExecutePythonScript
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           PythonScript                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>                   PythonInputs                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<class FString>                   PythonOutputs                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPythonScriptLibrary::ExecutePythonScript(const class FString& PythonScript, const TArray<class FString>& PythonInputs, const TArray<class FString>& PythonOutputs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PythonScriptLibrary", "ExecutePythonScript");

	Params::PythonScriptLibrary_ExecutePythonScript Parms{};

	Parms.PythonScript = std::move(PythonScript);
	Parms.PythonInputs = std::move(PythonInputs);
	Parms.PythonOutputs = std::move(PythonOutputs);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PythonScriptPlugin.PythonScriptLibrary.IsPythonAvailable
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPythonScriptLibrary::IsPythonAvailable()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PythonScriptLibrary", "IsPythonAvailable");

	Params::PythonScriptLibrary_IsPythonAvailable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

