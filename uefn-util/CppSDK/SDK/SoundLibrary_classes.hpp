#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SoundLibrary

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Engine_classes.hpp"
#include "SoundLibrary_structs.hpp"
#include "GameFeatures_classes.hpp"
#include "AudioGameplay_structs.hpp"
#include "AudioGameplay_classes.hpp"
#include "DeveloperSettings_classes.hpp"


namespace SDK
{

// Class SoundLibrary.SoundLibraryContext
// 0x0040 (0x0070 - 0x0030)
class USoundLibraryContext : public UObject
{
public:
	TWeakObjectPtr<class AActor>                  Actor;                                             // 0x0030(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           BaseEventName;                                     // 0x0038(0x000C)(BlueprintVisible, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForwardToActorOwner;                              // 0x0044(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForwardToAttachedActors;                          // 0x0045(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoResetContext;                                 // 0x0046(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_47[0x1];                                       // 0x0047(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  PlaybackTags;                                      // 0x0048(0x0020)(Transient, NativeAccessSpecifierPublic)
	uint8                                         Pad_68[0x8];                                       // 0x0068(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnAddedToActor(const class AActor* InActor);
	void OnRemovedFromActor(const class AActor* InActor);
	bool Play(const struct FSoundLibraryContextEventInput& InEventData, TArray<class UAudioComponent*>* OutComponents);

	bool CreateEventName(struct FGameplayTag& OutEventName) const;
	bool GatherActorTargets(TArray<class AActor*>& OutActors) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SoundLibraryContext">();
	}
	static class USoundLibraryContext* GetDefaultObj()
	{
		return GetDefaultObjImpl<USoundLibraryContext>();
	}
};

// Class SoundLibrary.SoundLibraryAnimContext
// 0x0050 (0x00C0 - 0x0070)
class USoundLibraryAnimContext : public USoundLibraryContext
{
public:
	struct FSoundLibraryAnimContextSettings       AnimSettings;                                      // 0x0070(0x0038)(Edit, BlueprintVisible, NoDestructor, ExposeOnSpawn, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UAnimSequenceBase>       Animation;                                         // 0x00A8(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class USkeletalMeshComponent>  MeshComponent;                                     // 0x00B0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSupportsNotifyEnd;                                // 0x00B8(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x3];                                       // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AnimRate;                                          // 0x00BC(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void ConfigureContext(class AActor* OwningActor, class UAnimSequenceBase* InAnimation, const struct FSoundLibraryAnimContextSettings& InSettings);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SoundLibraryAnimContext">();
	}
	static class USoundLibraryAnimContext* GetDefaultObj()
	{
		return GetDefaultObjImpl<USoundLibraryAnimContext>();
	}
};

// Class SoundLibrary.SoundLibraryAnimNotifyHelper
// 0x0010 (0x0040 - 0x0030)
class USoundLibraryAnimNotifyHelper final : public UObject
{
public:
	TArray<TWeakObjectPtr<class UAudioComponent>> PlayingComps;                                      // 0x0030(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SoundLibraryAnimNotifyHelper">();
	}
	static class USoundLibraryAnimNotifyHelper* GetDefaultObj()
	{
		return GetDefaultObjImpl<USoundLibraryAnimNotifyHelper>();
	}
};

// Class SoundLibrary.AnimNotify_SoundLibrary
// 0x0010 (0x0050 - 0x0040)
class UAnimNotify_SoundLibrary final : public UAnimNotify
{
public:
	class USoundLibraryContext*                   SoundContext;                                      // 0x0040(0x0008)(Edit, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundLibraryAnimNotifyHelper*          NotifyHelper;                                      // 0x0048(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotify_SoundLibrary">();
	}
	static class UAnimNotify_SoundLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotify_SoundLibrary>();
	}
};

// Class SoundLibrary.AnimNotifyState_SoundLibrary
// 0x0010 (0x0048 - 0x0038)
class UAnimNotifyState_SoundLibrary final : public UAnimNotifyState
{
public:
	class USoundLibraryContext*                   SoundContext;                                      // 0x0038(0x0008)(Edit, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundLibraryAnimNotifyHelper*          NotifyHelper;                                      // 0x0040(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotifyState_SoundLibrary">();
	}
	static class UAnimNotifyState_SoundLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotifyState_SoundLibrary>();
	}
};

// Class SoundLibrary.GameFeatureAction_AddSoundLibraryCollection
// 0x0030 (0x0060 - 0x0030)
class UGameFeatureAction_AddSoundLibraryCollection final : public UGameFeatureAction
{
public:
	TArray<TSoftObjectPtr<class USoundLibraryCollection>> CollectionList;                                    // 0x0030(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TWeakObjectPtr<class USoundLibrarySubsystem>> TrackedSubsystems;                                 // 0x0040(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x10];                                      // 0x0050(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameFeatureAction_AddSoundLibraryCollection">();
	}
	static class UGameFeatureAction_AddSoundLibraryCollection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameFeatureAction_AddSoundLibraryCollection>();
	}
};

// Class SoundLibrary.SoundLibrary
// 0x01D0 (0x0200 - 0x0030)
class USoundLibrary final : public UObject
{
public:
	class FString                                 Description;                                       // 0x0030(0x0010)(Edit, ZeroConstructor, DuplicateTransient, EditorOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<struct FGameplayTag, TSoftObjectPtr<class USoundBase>> Sounds;                                            // 0x0040(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, NativeAccessSpecifierPublic)
	struct FAudioGameplayRequirements             LibraryRequirements;                               // 0x0090(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Channel;                                           // 0x00E0(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x00EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  Metadata;                                          // 0x00F0(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnRebuildMap;                                      // 0x0110(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, EditorOnly, Protected, NativeAccessSpecifierProtected)
	class USoundLibrary*                          Parent;                                            // 0x0120(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditorOnly, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCanActAsParent;                                   // 0x0128(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, EditorOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_129[0x7];                                      // 0x0129(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<struct FGameplayTag, TSoftObjectPtr<class USoundBase>> FullLibrary;                                       // 0x0130(0x0050)(Edit, DisableEditOnInstance, EditConst, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TMap<struct FGameplayTag, class USoundBase*>  RuntimeSounds;                                     // 0x0180(0x0050)(Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<class USoundBase*>                     LoadedSoundObjects;                                // 0x01D0(0x0010)(ZeroConstructor, Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<TSoftObjectPtr<class USoundBase>>      Assets;                                            // 0x01E0(0x0010)(ZeroConstructor, Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	uint8                                         Pad_1F0[0x10];                                     // 0x01F0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddSound(const struct FGameplayTag& InTag, class USoundBase* InSound);
	void SetChannel(const struct FGameplayTag& InTag);
	void SetPriority(int32 InPriority);
	void Sort();

	class USoundBase* FindSound(const struct FGameplayTag& InTag) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SoundLibrary">();
	}
	static class USoundLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USoundLibrary>();
	}
};

// Class SoundLibrary.SoundLibraryComponent
// 0x00B8 (0x0198 - 0x00E0)
class USoundLibraryComponent : public UAudioGameplayComponent
{
public:
	uint8                                         Pad_E0[0x8];                                       // 0x00E0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           ComponentTag;                                      // 0x00E8(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F4[0x4];                                       // 0x00F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class USoundLibraryContext>       ContextClass;                                      // 0x00F8(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USoundLibrary*>                  Libraries;                                         // 0x0100(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(struct FSoundLibraryPlayResult& Results, class USoundLibraryContext* Context)> OnSoundLibraryPlayEvent;                           // 0x0110(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FGameplayTag& EventName)> OnEventPlayedDelegate;                             // 0x0120(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FGameplayTag& EventName)> OnEventStoppedDelegate;                            // 0x0130(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_140[0x50];                                     // 0x0140(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundLibraryContext*                   Context;                                           // 0x0190(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void AddLibraries(const TArray<class USoundLibrary*>& InLibraries);
	void AddLibrary(class USoundLibrary* InLibrary);
	bool IsEventActive(const struct FGameplayTag& InEventName);
	void OnEventPlayed(const struct FGameplayTag& InEventName);
	void OnEventStopped(const struct FGameplayTag& InEventName);
	void OnSoundPlayed(const struct FGameplayTag& InEventName, class UAudioComponent* InComponent);
	void OnSoundStopped(const struct FGameplayTag& InEventName, class UAudioComponent* InComponent, bool* bStopped);
	struct FSoundLibraryPlayResult PlayEvent(const struct FGameplayTag& InEventName);
	void RemoveLibraries(const TArray<class USoundLibrary*>& InLibraries);
	void RemoveLibrary(class USoundLibrary* InLibrary);
	bool StopEvent(const struct FGameplayTag& InEventName);

	class USoundLibraryContext* GetContext() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SoundLibraryComponent">();
	}
	static class USoundLibraryComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USoundLibraryComponent>();
	}
};

// Class SoundLibrary.SoundLibraryProviderInterface
// 0x0000 (0x0030 - 0x0030)
class ISoundLibraryProviderInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SoundLibraryProviderInterface">();
	}
	static class ISoundLibraryProviderInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<ISoundLibraryProviderInterface>();
	}
};

// Class SoundLibrary.SoundLibraryCollection
// 0x0050 (0x0088 - 0x0038)
class USoundLibraryCollection final : public UDataAsset
{
public:
	TMap<struct FGameplayTag, struct FSoundLibrarySet> Libraries;                                         // 0x0038(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SoundLibraryCollection">();
	}
	static class USoundLibraryCollection* GetDefaultObj()
	{
		return GetDefaultObjImpl<USoundLibraryCollection>();
	}
};

// Class SoundLibrary.SoundLibrarySettings
// 0x0030 (0x0090 - 0x0060)
class USoundLibrarySettings final : public UDeveloperSettings
{
public:
	TSoftObjectPtr<class USoundLibraryCollection> CommonLibraries;                                   // 0x0060(0x0030)(Edit, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SoundLibrarySettings">();
	}
	static class USoundLibrarySettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<USoundLibrarySettings>();
	}
};

// Class SoundLibrary.SoundLibrarySimpleContext
// 0x0068 (0x00D8 - 0x0070)
class USoundLibrarySimpleContext final : public USoundLibraryContext
{
public:
	struct FSoundLibrarySimpleContextSettings     Settings;                                          // 0x0070(0x0068)(Edit, BlueprintVisible, NoDestructor, ContainsInstancedReference, ExposeOnSpawn, NativeAccessSpecifierPublic)

public:
	void ConfigureContext(class AActor* OwningActor, const struct FSoundLibrarySimpleContextSettings& InSettings);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SoundLibrarySimpleContext">();
	}
	static class USoundLibrarySimpleContext* GetDefaultObj()
	{
		return GetDefaultObjImpl<USoundLibrarySimpleContext>();
	}
};

// Class SoundLibrary.SoundLibrarySubsystem
// 0x0068 (0x00A0 - 0x0038)
class USoundLibrarySubsystem final : public UWorldSubsystem
{
public:
	TArray<class USoundLibraryCollection*>        LibraryCollections;                                // 0x0038(0x0010)(ZeroConstructor, Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	class USoundLibrarySimpleContext*             SimpleContext;                                     // 0x0048(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<uint32, struct FSoundLibraryActorData>   ActorDataMap;                                      // 0x0050(0x0050)(Transient, Protected, NativeAccessSpecifierProtected)

public:
	class USoundLibraryContext* AddContext(const class AActor* Actor, TSubclassOf<class USoundLibraryContext> ContextClass);
	void AddLibraries(const class AActor* Actor, const TArray<class USoundLibrary*>& Libraries);
	void AddLibrariesFromCollections(const class AActor* Actor, const struct FGameplayTagContainer& CollectionTags);
	void AddLibrary(const class AActor* Actor, class USoundLibrary* Library);
	void DisableEventsForActor(const class AActor* Actor);
	void EnableEventsForActor(const class AActor* Actor);
	class USoundLibraryContext* GetContext(const class AActor* Actor, TSubclassOf<class USoundLibraryContext> ContextClass);
	void PlaySound(class USoundLibraryContext* Context, struct FSoundLibraryPlayResult* OutResults);
	struct FSoundLibraryPlayResult PlaySoundSimple(class AActor* OwningActor, const struct FSoundLibrarySimpleContextSettings& InSettings);
	bool RemoveContext(const class AActor* Actor, TSubclassOf<class USoundLibraryContext> ContextClass);
	void RemoveLibraries(const class AActor* Actor, const TArray<class USoundLibrary*>& Libraries);
	void RemoveLibrariesFromCollections(const class AActor* Actor, const struct FGameplayTagContainer& CollectionTags);
	void RemoveLibrary(const class AActor* Actor, class USoundLibrary* Library);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SoundLibrarySubsystem">();
	}
	static class USoundLibrarySubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<USoundLibrarySubsystem>();
	}
};

// Class SoundLibrary.SoundLibraryTagHelperFunctions
// 0x0000 (0x0030 - 0x0030)
class USoundLibraryTagHelperFunctions final : public UObject
{
public:
	static struct FSoundLibraryTag MakeSoundLibraryTag(const struct FGameplayTag& Tag);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SoundLibraryTagHelperFunctions">();
	}
	static class USoundLibraryTagHelperFunctions* GetDefaultObj()
	{
		return GetDefaultObjImpl<USoundLibraryTagHelperFunctions>();
	}
};

}

