#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AnimationModifierLibrary

#include "Basic.hpp"

#include "AnimationModifierLibrary_classes.hpp"
#include "AnimationModifierLibrary_parameters.hpp"


namespace SDK
{

// Function AnimationModifierLibrary.MotionExtractorUtilityLibrary.GenerateCurveName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMotionExtractor_MotionType             MotionType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMotionExtractor_Axis                   Axis                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UMotionExtractorUtilityLibrary::GenerateCurveName(class FName BoneName, EMotionExtractor_MotionType MotionType, EMotionExtractor_Axis Axis)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MotionExtractorUtilityLibrary", "GenerateCurveName");

	Params::MotionExtractorUtilityLibrary_GenerateCurveName Parms{};

	Parms.BoneName = BoneName;
	Parms.MotionType = MotionType;
	Parms.Axis = Axis;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AnimationModifierLibrary.MotionExtractorUtilityLibrary.GetDesiredValue
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FTransform                       BoneTransform                                          (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       LastBoneTransform                                      (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMotionExtractor_MotionType             MotionType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMotionExtractor_Axis                   Axis                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMotionExtractorUtilityLibrary::GetDesiredValue(const struct FTransform& BoneTransform, const struct FTransform& LastBoneTransform, float DeltaTime, EMotionExtractor_MotionType MotionType, EMotionExtractor_Axis Axis)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MotionExtractorUtilityLibrary", "GetDesiredValue");

	Params::MotionExtractorUtilityLibrary_GetDesiredValue Parms{};

	Parms.BoneTransform = std::move(BoneTransform);
	Parms.LastBoneTransform = std::move(LastBoneTransform);
	Parms.DeltaTime = DeltaTime;
	Parms.MotionType = MotionType;
	Parms.Axis = Axis;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AnimationModifierLibrary.MotionExtractorUtilityLibrary.GetMovingRangesFromRootMotion
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAnimSequence*                    AnimSequence                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   StopSpeedThreshold                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SampleRate                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FVector2D>                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FVector2D> UMotionExtractorUtilityLibrary::GetMovingRangesFromRootMotion(const class UAnimSequence* AnimSequence, float StopSpeedThreshold, float SampleRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MotionExtractorUtilityLibrary", "GetMovingRangesFromRootMotion");

	Params::MotionExtractorUtilityLibrary_GetMovingRangesFromRootMotion Parms{};

	Parms.AnimSequence = AnimSequence;
	Parms.StopSpeedThreshold = StopSpeedThreshold;
	Parms.SampleRate = SampleRate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AnimationModifierLibrary.MotionExtractorUtilityLibrary.GetStoppedRangesFromRootMotion
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAnimSequence*                    AnimSequence                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   StopSpeedThreshold                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SampleRate                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FVector2D>                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FVector2D> UMotionExtractorUtilityLibrary::GetStoppedRangesFromRootMotion(const class UAnimSequence* AnimSequence, float StopSpeedThreshold, float SampleRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MotionExtractorUtilityLibrary", "GetStoppedRangesFromRootMotion");

	Params::MotionExtractorUtilityLibrary_GetStoppedRangesFromRootMotion Parms{};

	Parms.AnimSequence = AnimSequence;
	Parms.StopSpeedThreshold = StopSpeedThreshold;
	Parms.SampleRate = SampleRate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

