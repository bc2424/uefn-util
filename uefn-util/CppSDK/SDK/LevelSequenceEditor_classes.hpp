#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LevelSequenceEditor

#include "Basic.hpp"

#include "MovieScene_structs.hpp"
#include "Engine_classes.hpp"
#include "UnrealEd_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "LevelSequenceEditor_structs.hpp"
#include "Sequencer_structs.hpp"
#include "EditorSubsystem_classes.hpp"


namespace SDK
{

// Class LevelSequenceEditor.AssetDefinition_LevelSequence
// 0x0000 (0x0048 - 0x0048)
class UAssetDefinition_LevelSequence final : public UAssetDefinitionDefault
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AssetDefinition_LevelSequence">();
	}
	static class UAssetDefinition_LevelSequence* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAssetDefinition_LevelSequence>();
	}
};

// Class LevelSequenceEditor.FilmOverlayToolkit
// 0x0000 (0x0030 - 0x0030)
class UFilmOverlayToolkit final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FilmOverlayToolkit">();
	}
	static class UFilmOverlayToolkit* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFilmOverlayToolkit>();
	}
};

// Class LevelSequenceEditor.LevelSequenceEditorMenuContext
// 0x0010 (0x0040 - 0x0030)
class ULevelSequenceEditorMenuContext final : public UObject
{
public:
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LevelSequenceEditorMenuContext">();
	}
	static class ULevelSequenceEditorMenuContext* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULevelSequenceEditorMenuContext>();
	}
};

// Class LevelSequenceEditor.LevelSequenceFactoryNew
// 0x0000 (0x0088 - 0x0088)
class ULevelSequenceFactoryNew final : public UFactory
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LevelSequenceFactoryNew">();
	}
	static class ULevelSequenceFactoryNew* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULevelSequenceFactoryNew>();
	}
};

// Class LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary
// 0x0000 (0x0030 - 0x0030)
class ULevelSequenceEditorBlueprintLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void CloseLevelSequence();
	static void DeleteColorForChannels(class UClass* Class_0, class FString* Identifier);
	static void EmptySelection();
	static void FocusLevelSequence(class UMovieSceneSubSection* SubSection);
	static void FocusParentSequence();
	static void ForceUpdate();
	static TArray<class UObject*> GetBoundObjects(const struct FMovieSceneObjectBindingID& ObjectBinding);
	static TArray<struct FSequencerChannelProxy> GetChannelsWithSelectedKeys();
	static class ULevelSequence* GetCurrentLevelSequence();
	static int32 GetCurrentLocalTime();
	static int32 GetCurrentTime();
	static struct FLinearColor GetCustomColorForChannel(class UClass* Class_0, const class FString& Identifier);
	static class ULevelSequence* GetFocusedLevelSequence();
	static struct FMovieSceneSequencePlaybackParams GetGlobalPosition(EMovieSceneTimeUnit TimeUnit);
	static struct FMovieSceneSequencePlaybackParams GetLocalPosition(EMovieSceneTimeUnit TimeUnit);
	static ESequencerLoopMode GetLoopMode();
	static float GetPlaybackSpeed();
	static TArray<struct FMovieSceneBindingProxy> GetSelectedBindings();
	static TArray<struct FSequencerChannelProxy> GetSelectedChannels();
	static TArray<class UMovieSceneFolder*> GetSelectedFolders();
	static TArray<int32> GetSelectedKeys(const struct FSequencerChannelProxy& ChannelProxy);
	static TArray<class UMovieSceneSection*> GetSelectedSections();
	static TArray<class UMovieSceneTrack*> GetSelectedTracks();
	static int32 GetSelectionRangeEnd();
	static int32 GetSelectionRangeStart();
	static TArray<class UMovieSceneSubSection*> GetSubSequenceHierarchy();
	static TArray<class FText> GetTrackFilterNames();
	static bool HasCustomColorForChannel(class UClass* Class_0, const class FString& Identifier);
	static bool IsCameraCutLockedToViewport();
	static bool IsLevelSequenceLocked();
	static bool IsPlaying();
	static bool IsTrackFilterEnabled(const class FText& TrackFilterName);
	static bool OpenLevelSequence(class ULevelSequence* LevelSequence);
	static void Pause();
	static void Play();
	static void PlayTo(const struct FMovieSceneSequencePlaybackParams& PlaybackParams, EMovieSceneTimeUnit TimeUnit);
	static void RefreshCurrentLevelSequence();
	static void SelectBindings(const TArray<struct FMovieSceneBindingProxy>& ObjectBindings);
	static void SelectChannels(const TArray<struct FSequencerChannelProxy>& Channels);
	static void SelectFolders(const TArray<class UMovieSceneFolder*>& Folders);
	static void SelectKeys(const struct FSequencerChannelProxy& Channel, const TArray<int32>& Indices);
	static void SelectSections(const TArray<class UMovieSceneSection*>& Sections);
	static void SelectTracks(const TArray<class UMovieSceneTrack*>& Tracks);
	static void SetCurrentLocalTime(int32 NewFrame);
	static void SetCurrentTime(int32 NewFrame);
	static void SetCustomColorForChannel(class UClass* Class_0, const class FString& Identifier, const struct FLinearColor& NewColor);
	static void SetCustomColorForChannels(class UClass* Class_0, const TArray<class FString>& Identifiers, const TArray<struct FLinearColor>& NewColors);
	static void SetGlobalPosition(const struct FMovieSceneSequencePlaybackParams& PlaybackParams, EMovieSceneTimeUnit TimeUnit);
	static void SetLocalPosition(const struct FMovieSceneSequencePlaybackParams& PlaybackParams, EMovieSceneTimeUnit TimeUnit);
	static void SetLockCameraCutToViewport(bool bLock);
	static void SetLockLevelSequence(bool bLock);
	static void SetLoopMode(ESequencerLoopMode NewLoopMode);
	static void SetPlaybackSpeed(float NewPlaybackSpeed);
	static void SetRandomColorForChannels(class UClass* Class_0, const TArray<class FString>& Identifiers);
	static void SetSelectionRangeEnd(int32 NewFrame);
	static void SetSelectionRangeStart(int32 NewFrame);
	static void SetTrackFilterEnabled(const class FText& TrackFilterName, bool bEnabled);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LevelSequenceEditorBlueprintLibrary">();
	}
	static class ULevelSequenceEditorBlueprintLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULevelSequenceEditorBlueprintLibrary>();
	}
};

// Class LevelSequenceEditor.MovieSceneBindingPropertyInfoList
// 0x0010 (0x0040 - 0x0030)
class UMovieSceneBindingPropertyInfoList final : public UObject
{
public:
	TArray<struct FMovieSceneBindingPropertyInfo> Bindings;                                          // 0x0030(0x0010)(Edit, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneBindingPropertyInfoList">();
	}
	static class UMovieSceneBindingPropertyInfoList* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneBindingPropertyInfoList>();
	}
};

// Class LevelSequenceEditor.LevelSequenceEditorSubsystem
// 0x00F0 (0x0128 - 0x0038)
class ULevelSequenceEditorSubsystem final : public UEditorSubsystem
{
public:
	class UMovieSceneBindingPropertyInfoList*     BindingPropertyInfoList;                           // 0x0038(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_40[0x78];                                      // 0x0040(0x0078)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USequencerCurveEditorObject*>    CurveEditorArray;                                  // 0x00B8(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_C8[0x60];                                      // 0x00C8(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	TArray<struct FMovieSceneBindingProxy> AddActors(const TArray<class AActor*>& Actors);
	void AddActorsToBinding(const TArray<class AActor*>& Actors, const struct FMovieSceneBindingProxy& ObjectBinding);
	void BakeTransform(const TArray<struct FMovieSceneBindingProxy>& ObjectBindings, const struct FFrameTime& BakeInTime, const struct FFrameTime& BakeOutTime, const struct FFrameTime& BakeInterval, const struct FMovieSceneScriptingParams& Params_0);
	bool BakeTransformWithSettings(const TArray<struct FMovieSceneBindingProxy>& ObjectBindings, const struct FBakingAnimationKeySettings& InSettings, const struct FMovieSceneScriptingParams& Params_0);
	bool ChangeActorTemplateClass(const struct FMovieSceneBindingProxy& ObjectBinding, TSubclassOf<class AActor> ActorClass);
	struct FMovieSceneBindingProxy ConvertToCustomBinding(const struct FMovieSceneBindingProxy& ObjectBinding, TSubclassOf<class UMovieSceneCustomBinding> BindingType);
	struct FMovieSceneBindingProxy ConvertToPossessable(const struct FMovieSceneBindingProxy& ObjectBinding);
	TArray<struct FMovieSceneBindingProxy> ConvertToSpawnable(const struct FMovieSceneBindingProxy& ObjectBinding);
	void CopyBindings(const TArray<struct FMovieSceneBindingProxy>& Bindings, class FString* ExportedText);
	void CopyFolders(const TArray<class UMovieSceneFolder*>& Folders, class FString* ExportedText);
	void CopySections(const TArray<class UMovieSceneSection*>& Sections, class FString* ExportedText);
	void CopyTracks(const TArray<class UMovieSceneTrack*>& Tracks, class FString* ExportedText);
	struct FMovieSceneBindingProxy CreateCamera(bool bSpawnable, class ACineCameraActor** OutActor);
	void FixActorReferences();
	class USequencerCurveEditorObject* GetCurveEditor();
	TArray<class UMovieSceneCustomBinding*> GetCustomBindingObjects(const struct FMovieSceneBindingProxy& ObjectBinding);
	TArray<struct FMovieSceneBindingProxy> GetCustomBindingsOfType(TSubclassOf<class UMovieSceneCustomBinding> CustomBindingType);
	TSubclassOf<class UMovieSceneCustomBinding> GetCustomBindingType(const struct FMovieSceneBindingProxy& ObjectBinding);
	class USequencerModuleScriptingLayer* GetScriptingLayer();
	bool PasteBindings(const class FString& TextToImport, const struct FMovieScenePasteBindingsParams& PasteBindingsParams, TArray<struct FMovieSceneBindingProxy>* OutObjectBindings);
	bool PasteFolders(const class FString& TextToImport, const struct FMovieScenePasteFoldersParams& PasteFoldersParams, TArray<class UMovieSceneFolder*>* OutFolders);
	bool PasteSections(const class FString& TextToImport, const struct FMovieScenePasteSectionsParams& PasteSectionsParams, TArray<class UMovieSceneSection*>* OutSections);
	bool PasteTracks(const class FString& TextToImport, const struct FMovieScenePasteTracksParams& PasteTracksParams, TArray<class UMovieSceneTrack*>* OutTracks);
	void RebindComponent(const TArray<struct FMovieSceneBindingProxy>& ComponentBindings, const class FName& ComponentName);
	void RemoveActorsFromBinding(const TArray<class AActor*>& Actors, const struct FMovieSceneBindingProxy& ObjectBinding);
	void RemoveAllBindings(const struct FMovieSceneBindingProxy& ObjectBinding);
	void RemoveInvalidBindings(const struct FMovieSceneBindingProxy& ObjectBinding);
	void ReplaceBindingWithActors(const TArray<class AActor*>& Actors, const struct FMovieSceneBindingProxy& ObjectBinding);
	void SnapSectionsToTimelineUsingSourceTimecode(const TArray<class UMovieSceneSection*>& Sections);
	void SyncSectionsUsingSourceTimecode(const TArray<class UMovieSceneSection*>& Sections);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LevelSequenceEditorSubsystem">();
	}
	static class ULevelSequenceEditorSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULevelSequenceEditorSubsystem>();
	}
};

// Class LevelSequenceEditor.LevelSequenceEditorSettings
// 0x0018 (0x0048 - 0x0030)
class ULevelSequenceEditorSettings final : public UObject
{
public:
	TArray<struct FLevelSequenceTrackSettings>    TrackSettings;                                     // 0x0030(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	bool                                          bAutoBindToPIE;                                    // 0x0040(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoBindToSimulate;                               // 0x0041(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LevelSequenceEditorSettings">();
	}
	static class ULevelSequenceEditorSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULevelSequenceEditorSettings>();
	}
};

// Class LevelSequenceEditor.LevelSequenceWithShotsSettings
// 0x0068 (0x0098 - 0x0030)
class ULevelSequenceWithShotsSettings final : public UObject
{
public:
	class FString                                 Name_0;                                            // 0x0030(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Suffix;                                            // 0x0040(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDirectoryPath                         BasePath;                                          // 0x0050(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        NumShots;                                          // 0x0060(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TLazyObjectPtr<class ULevelSequence>          SequenceToDuplicate;                               // 0x0064(0x0018)(Edit, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           SubSequenceNames;                                  // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bInstanceSubSequences;                             // 0x0090(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LevelSequenceWithShotsSettings">();
	}
	static class ULevelSequenceWithShotsSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULevelSequenceWithShotsSettings>();
	}
};

}

