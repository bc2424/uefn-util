#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ChainsawGameplayRuntime

#include "Basic.hpp"

#include "ChainsawGameplayRuntime_classes.hpp"
#include "ChainsawGameplayRuntime_parameters.hpp"


namespace SDK
{

// Function ChainsawGameplayRuntime.ChainsawAttributeSet.OnRep_Overheat
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FFortGameplayAttributeData       OldValue                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UChainsawAttributeSet::OnRep_Overheat(const struct FFortGameplayAttributeData& OldValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChainsawAttributeSet", "OnRep_Overheat");

	Params::ChainsawAttributeSet_OnRep_Overheat Parms{};

	Parms.OldValue = std::move(OldValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChainsawGameplayRuntime.FortMovementMode_ExtChainsaw.BP_PhysUpdate
// (Event, Protected, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// struct FMMERuntimeContext               RuntimeContext                                         (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                          InVelocity                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          InAcceleration                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ResultVelocity                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ResultAcceleration                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortMovementMode_ExtChainsaw::BP_PhysUpdate(const struct FMMERuntimeContext& RuntimeContext, const struct FVector& InVelocity, const struct FVector& InAcceleration, struct FVector* ResultVelocity, struct FVector* ResultAcceleration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortMovementMode_ExtChainsaw", "BP_PhysUpdate");

	Params::FortMovementMode_ExtChainsaw_BP_PhysUpdate Parms{};

	Parms.RuntimeContext = std::move(RuntimeContext);
	Parms.InVelocity = std::move(InVelocity);
	Parms.InAcceleration = std::move(InAcceleration);

	UObject::ProcessEvent(Func, &Parms);

	if (ResultVelocity != nullptr)
		*ResultVelocity = std::move(Parms.ResultVelocity);

	if (ResultAcceleration != nullptr)
		*ResultAcceleration = std::move(Parms.ResultAcceleration);
}


// Function ChainsawGameplayRuntime.FortMovementMode_ExtChainsaw.BP_UpdateBeforeCharacterMovement
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// struct FMMERuntimeContext               RuntimeContext                                         (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// EFortMovementModeExt_UpdateResult       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EFortMovementModeExt_UpdateResult UFortMovementMode_ExtChainsaw::BP_UpdateBeforeCharacterMovement(const struct FMMERuntimeContext& RuntimeContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortMovementMode_ExtChainsaw", "BP_UpdateBeforeCharacterMovement");

	Params::FortMovementMode_ExtChainsaw_BP_UpdateBeforeCharacterMovement Parms{};

	Parms.RuntimeContext = std::move(RuntimeContext);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

