#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GeometryScriptingEditor

#include "Basic.hpp"

#include "GeometryScriptingEditor_classes.hpp"
#include "GeometryScriptingEditor_parameters.hpp"


namespace SDK
{

// Function GeometryScriptingEditor.GeometryScriptLibrary_EditorDynamicMeshFunctions.BeginTrackedMeshChange
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UDynamicMesh*                     TargetMesh                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDynamicMeshChangeContainer      ChangeTracker                                          (Parm, OutParm, NativeAccessSpecifierPublic)
// class UDynamicMesh*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDynamicMesh* UGeometryScriptLibrary_EditorDynamicMeshFunctions::BeginTrackedMeshChange(class UDynamicMesh* TargetMesh, struct FDynamicMeshChangeContainer* ChangeTracker)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GeometryScriptLibrary_EditorDynamicMeshFunctions", "BeginTrackedMeshChange");

	Params::GeometryScriptLibrary_EditorDynamicMeshFunctions_BeginTrackedMeshChange Parms{};

	Parms.TargetMesh = TargetMesh;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ChangeTracker != nullptr)
		*ChangeTracker = std::move(Parms.ChangeTracker);

	return Parms.ReturnValue;
}


// Function GeometryScriptingEditor.GeometryScriptLibrary_EditorDynamicMeshFunctions.EmitTrackedMeshChange
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UDynamicMesh*                     TargetMesh                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDynamicMeshChangeContainer      ChangeTracker                                          (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UDynamicMesh*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDynamicMesh* UGeometryScriptLibrary_EditorDynamicMeshFunctions::EmitTrackedMeshChange(class UDynamicMesh* TargetMesh, struct FDynamicMeshChangeContainer& ChangeTracker)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GeometryScriptLibrary_EditorDynamicMeshFunctions", "EmitTrackedMeshChange");

	Params::GeometryScriptLibrary_EditorDynamicMeshFunctions_EmitTrackedMeshChange Parms{};

	Parms.TargetMesh = TargetMesh;
	Parms.ChangeTracker = std::move(ChangeTracker);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	ChangeTracker = std::move(Parms.ChangeTracker);

	return Parms.ReturnValue;
}


// Function GeometryScriptingEditor.GeometryScriptLibrary_EditorDynamicMeshFunctions.FetchDebugMesh
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           DebugMeshName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDynamicMesh*                     ToTargetMesh                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bClearDebugMesh                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bDebugMeshExists                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDynamicMesh*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDynamicMesh* UGeometryScriptLibrary_EditorDynamicMeshFunctions::FetchDebugMesh(const class FString& DebugMeshName, class UDynamicMesh* ToTargetMesh, bool bClearDebugMesh, bool* bDebugMeshExists)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GeometryScriptLibrary_EditorDynamicMeshFunctions", "FetchDebugMesh");

	Params::GeometryScriptLibrary_EditorDynamicMeshFunctions_FetchDebugMesh Parms{};

	Parms.DebugMeshName = std::move(DebugMeshName);
	Parms.ToTargetMesh = ToTargetMesh;
	Parms.bClearDebugMesh = bClearDebugMesh;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bDebugMeshExists != nullptr)
		*bDebugMeshExists = Parms.bDebugMeshExists;

	return Parms.ReturnValue;
}


// Function GeometryScriptingEditor.GeometryScriptLibrary_EditorDynamicMeshFunctions.StashDebugMesh
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UDynamicMesh*                     TargetMesh                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           DebugMeshName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDynamicMesh*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDynamicMesh* UGeometryScriptLibrary_EditorDynamicMeshFunctions::StashDebugMesh(class UDynamicMesh* TargetMesh, const class FString& DebugMeshName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GeometryScriptLibrary_EditorDynamicMeshFunctions", "StashDebugMesh");

	Params::GeometryScriptLibrary_EditorDynamicMeshFunctions_StashDebugMesh Parms{};

	Parms.TargetMesh = TargetMesh;
	Parms.DebugMeshName = std::move(DebugMeshName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GeometryScriptingEditor.GeometryScriptLibrary_EditorTextureMapFunctions.ChannelPack
// (Final, Native, Static, Public, BlueprintCallable, EditorOnly)
// Parameters:
// struct FGeometryScriptChannelPackSource RChannelSource                                         (Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FGeometryScriptChannelPackSource GChannelSource                                         (Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FGeometryScriptChannelPackSource BChannelSource                                         (Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FGeometryScriptChannelPackSource AChannelSource                                         (Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    OutputSRGB                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGeometryScriptDebug*             Debug                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGeometryScriptChannelPackResult ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FGeometryScriptChannelPackResult UGeometryScriptLibrary_EditorTextureMapFunctions::ChannelPack(const struct FGeometryScriptChannelPackSource& RChannelSource, const struct FGeometryScriptChannelPackSource& GChannelSource, const struct FGeometryScriptChannelPackSource& BChannelSource, const struct FGeometryScriptChannelPackSource& AChannelSource, bool OutputSRGB, class UGeometryScriptDebug* Debug)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GeometryScriptLibrary_EditorTextureMapFunctions", "ChannelPack");

	Params::GeometryScriptLibrary_EditorTextureMapFunctions_ChannelPack Parms{};

	Parms.RChannelSource = std::move(RChannelSource);
	Parms.GChannelSource = std::move(GChannelSource);
	Parms.BChannelSource = std::move(BChannelSource);
	Parms.AChannelSource = std::move(AChannelSource);
	Parms.OutputSRGB = OutputSRGB;
	Parms.Debug = Debug;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GeometryScriptingEditor.GeometryScriptLibrary_CreateNewAssetFunctions.CreateNewSkeletalMeshAssetFromMesh
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UDynamicMesh*                     FromDynamicMesh                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USkeleton*                        InSkeleton                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           AssetPathAndName                                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGeometryScriptCreateNewSkeletalMeshAssetOptionsOptions                                                (Parm, NativeAccessSpecifierPublic)
// EGeometryScriptOutcomePins              Outcome                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGeometryScriptDebug*             Debug                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USkeletalMesh*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USkeletalMesh* UGeometryScriptLibrary_CreateNewAssetFunctions::CreateNewSkeletalMeshAssetFromMesh(class UDynamicMesh* FromDynamicMesh, class USkeleton* InSkeleton, const class FString& AssetPathAndName, const struct FGeometryScriptCreateNewSkeletalMeshAssetOptions& Options, EGeometryScriptOutcomePins* Outcome, class UGeometryScriptDebug* Debug)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GeometryScriptLibrary_CreateNewAssetFunctions", "CreateNewSkeletalMeshAssetFromMesh");

	Params::GeometryScriptLibrary_CreateNewAssetFunctions_CreateNewSkeletalMeshAssetFromMesh Parms{};

	Parms.FromDynamicMesh = FromDynamicMesh;
	Parms.InSkeleton = InSkeleton;
	Parms.AssetPathAndName = std::move(AssetPathAndName);
	Parms.Options = std::move(Options);
	Parms.Debug = Debug;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Outcome != nullptr)
		*Outcome = Parms.Outcome;

	return Parms.ReturnValue;
}


// Function GeometryScriptingEditor.GeometryScriptLibrary_CreateNewAssetFunctions.CreateNewSkeletalMeshAssetFromMeshLODs
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class UDynamicMesh*>             FromDynamicMeshLODs                                    (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// class USkeleton*                        InSkeleton                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           AssetPathAndName                                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGeometryScriptCreateNewSkeletalMeshAssetOptionsOptions                                                (Parm, NativeAccessSpecifierPublic)
// EGeometryScriptOutcomePins              Outcome                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGeometryScriptDebug*             Debug                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USkeletalMesh*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USkeletalMesh* UGeometryScriptLibrary_CreateNewAssetFunctions::CreateNewSkeletalMeshAssetFromMeshLODs(const TArray<class UDynamicMesh*>& FromDynamicMeshLODs, class USkeleton* InSkeleton, const class FString& AssetPathAndName, const struct FGeometryScriptCreateNewSkeletalMeshAssetOptions& Options, EGeometryScriptOutcomePins* Outcome, class UGeometryScriptDebug* Debug)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GeometryScriptLibrary_CreateNewAssetFunctions", "CreateNewSkeletalMeshAssetFromMeshLODs");

	Params::GeometryScriptLibrary_CreateNewAssetFunctions_CreateNewSkeletalMeshAssetFromMeshLODs Parms{};

	Parms.FromDynamicMeshLODs = std::move(FromDynamicMeshLODs);
	Parms.InSkeleton = InSkeleton;
	Parms.AssetPathAndName = std::move(AssetPathAndName);
	Parms.Options = std::move(Options);
	Parms.Debug = Debug;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Outcome != nullptr)
		*Outcome = Parms.Outcome;

	return Parms.ReturnValue;
}


// Function GeometryScriptingEditor.GeometryScriptLibrary_CreateNewAssetFunctions.CreateNewStaticMeshAssetFromMesh
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UDynamicMesh*                     FromDynamicMesh                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           AssetPathAndName                                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGeometryScriptCreateNewStaticMeshAssetOptionsOptions                                                (Parm, NativeAccessSpecifierPublic)
// EGeometryScriptOutcomePins              Outcome                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGeometryScriptDebug*             Debug                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UStaticMesh*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UStaticMesh* UGeometryScriptLibrary_CreateNewAssetFunctions::CreateNewStaticMeshAssetFromMesh(class UDynamicMesh* FromDynamicMesh, const class FString& AssetPathAndName, const struct FGeometryScriptCreateNewStaticMeshAssetOptions& Options, EGeometryScriptOutcomePins* Outcome, class UGeometryScriptDebug* Debug)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GeometryScriptLibrary_CreateNewAssetFunctions", "CreateNewStaticMeshAssetFromMesh");

	Params::GeometryScriptLibrary_CreateNewAssetFunctions_CreateNewStaticMeshAssetFromMesh Parms{};

	Parms.FromDynamicMesh = FromDynamicMesh;
	Parms.AssetPathAndName = std::move(AssetPathAndName);
	Parms.Options = std::move(Options);
	Parms.Debug = Debug;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Outcome != nullptr)
		*Outcome = Parms.Outcome;

	return Parms.ReturnValue;
}


// Function GeometryScriptingEditor.GeometryScriptLibrary_CreateNewAssetFunctions.CreateNewStaticMeshAssetFromMeshLODs
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class UDynamicMesh*>             FromDynamicMesh                                        (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// class FString                           AssetPathAndName                                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGeometryScriptCreateNewStaticMeshAssetOptionsOptions                                                (Parm, NativeAccessSpecifierPublic)
// EGeometryScriptOutcomePins              Outcome                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGeometryScriptDebug*             Debug                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UStaticMesh*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UStaticMesh* UGeometryScriptLibrary_CreateNewAssetFunctions::CreateNewStaticMeshAssetFromMeshLODs(const TArray<class UDynamicMesh*>& FromDynamicMesh, const class FString& AssetPathAndName, const struct FGeometryScriptCreateNewStaticMeshAssetOptions& Options, EGeometryScriptOutcomePins* Outcome, class UGeometryScriptDebug* Debug)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GeometryScriptLibrary_CreateNewAssetFunctions", "CreateNewStaticMeshAssetFromMeshLODs");

	Params::GeometryScriptLibrary_CreateNewAssetFunctions_CreateNewStaticMeshAssetFromMeshLODs Parms{};

	Parms.FromDynamicMesh = std::move(FromDynamicMesh);
	Parms.AssetPathAndName = std::move(AssetPathAndName);
	Parms.Options = std::move(Options);
	Parms.Debug = Debug;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Outcome != nullptr)
		*Outcome = Parms.Outcome;

	return Parms.ReturnValue;
}


// Function GeometryScriptingEditor.GeometryScriptLibrary_CreateNewAssetFunctions.CreateNewTexture2DAsset
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UTexture2D*                       FromTexture                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           AssetPathAndName                                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGeometryScriptCreateNewTexture2DAssetOptionsOptions                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)
// EGeometryScriptOutcomePins              Outcome                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGeometryScriptDebug*             Debug                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture2D*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture2D* UGeometryScriptLibrary_CreateNewAssetFunctions::CreateNewTexture2DAsset(class UTexture2D* FromTexture, const class FString& AssetPathAndName, const struct FGeometryScriptCreateNewTexture2DAssetOptions& Options, EGeometryScriptOutcomePins* Outcome, class UGeometryScriptDebug* Debug)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GeometryScriptLibrary_CreateNewAssetFunctions", "CreateNewTexture2DAsset");

	Params::GeometryScriptLibrary_CreateNewAssetFunctions_CreateNewTexture2DAsset Parms{};

	Parms.FromTexture = FromTexture;
	Parms.AssetPathAndName = std::move(AssetPathAndName);
	Parms.Options = std::move(Options);
	Parms.Debug = Debug;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Outcome != nullptr)
		*Outcome = Parms.Outcome;

	return Parms.ReturnValue;
}


// Function GeometryScriptingEditor.GeometryScriptLibrary_CreateNewAssetFunctions.CreateNewVolumeFromMesh
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UDynamicMesh*                     FromDynamicMesh                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWorld*                           CreateInWorld                                          (Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       ActorTransform                                         (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           BaseActorName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGeometryScriptCreateNewVolumeFromMeshOptionsOptions                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)
// EGeometryScriptOutcomePins              Outcome                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGeometryScriptDebug*             Debug                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AVolume*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AVolume* UGeometryScriptLibrary_CreateNewAssetFunctions::CreateNewVolumeFromMesh(class UDynamicMesh* FromDynamicMesh, class UWorld*& CreateInWorld, const struct FTransform& ActorTransform, const class FString& BaseActorName, const struct FGeometryScriptCreateNewVolumeFromMeshOptions& Options, EGeometryScriptOutcomePins* Outcome, class UGeometryScriptDebug* Debug)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GeometryScriptLibrary_CreateNewAssetFunctions", "CreateNewVolumeFromMesh");

	Params::GeometryScriptLibrary_CreateNewAssetFunctions_CreateNewVolumeFromMesh Parms{};

	Parms.FromDynamicMesh = FromDynamicMesh;
	Parms.CreateInWorld = CreateInWorld;
	Parms.ActorTransform = std::move(ActorTransform);
	Parms.BaseActorName = std::move(BaseActorName);
	Parms.Options = std::move(Options);
	Parms.Debug = Debug;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	CreateInWorld = Parms.CreateInWorld;

	if (Outcome != nullptr)
		*Outcome = Parms.Outcome;

	return Parms.ReturnValue;
}


// Function GeometryScriptingEditor.GeometryScriptLibrary_CreateNewAssetFunctions.CreateUniqueNewAssetPathName
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           AssetFolderPath                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           BaseAssetName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           UniqueAssetPathAndName                                 (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           UniqueAssetName                                        (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGeometryScriptUniqueAssetNameOptionsOptions                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)
// EGeometryScriptOutcomePins              Outcome                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGeometryScriptDebug*             Debug                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGeometryScriptLibrary_CreateNewAssetFunctions::CreateUniqueNewAssetPathName(const class FString& AssetFolderPath, const class FString& BaseAssetName, class FString* UniqueAssetPathAndName, class FString* UniqueAssetName, const struct FGeometryScriptUniqueAssetNameOptions& Options, EGeometryScriptOutcomePins* Outcome, class UGeometryScriptDebug* Debug)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GeometryScriptLibrary_CreateNewAssetFunctions", "CreateUniqueNewAssetPathName");

	Params::GeometryScriptLibrary_CreateNewAssetFunctions_CreateUniqueNewAssetPathName Parms{};

	Parms.AssetFolderPath = std::move(AssetFolderPath);
	Parms.BaseAssetName = std::move(BaseAssetName);
	Parms.Options = std::move(Options);
	Parms.Debug = Debug;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (UniqueAssetPathAndName != nullptr)
		*UniqueAssetPathAndName = std::move(Parms.UniqueAssetPathAndName);

	if (UniqueAssetName != nullptr)
		*UniqueAssetName = std::move(Parms.UniqueAssetName);

	if (Outcome != nullptr)
		*Outcome = Parms.Outcome;
}


// Function GeometryScriptingEditor.GeneratedDynamicMeshActor.CopyPropertiesFromStaticMesh
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AStaticMeshActor*                 StaticMeshActor                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bCopyComponentMaterials                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGeneratedDynamicMeshActor::CopyPropertiesFromStaticMesh(class AStaticMeshActor* StaticMeshActor, bool bCopyComponentMaterials)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GeneratedDynamicMeshActor", "CopyPropertiesFromStaticMesh");

	Params::GeneratedDynamicMeshActor_CopyPropertiesFromStaticMesh Parms{};

	Parms.StaticMeshActor = StaticMeshActor;
	Parms.bCopyComponentMaterials = bCopyComponentMaterials;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GeometryScriptingEditor.GeneratedDynamicMeshActor.CopyPropertiesToStaticMesh
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AStaticMeshActor*                 StaticMeshActor                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bCopyComponentMaterials                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGeneratedDynamicMeshActor::CopyPropertiesToStaticMesh(class AStaticMeshActor* StaticMeshActor, bool bCopyComponentMaterials)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GeneratedDynamicMeshActor", "CopyPropertiesToStaticMesh");

	Params::GeneratedDynamicMeshActor_CopyPropertiesToStaticMesh Parms{};

	Parms.StaticMeshActor = StaticMeshActor;
	Parms.bCopyComponentMaterials = bCopyComponentMaterials;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GeometryScriptingEditor.GeneratedDynamicMeshActor.IncrementProgress
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NumSteps                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Message                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGeneratedDynamicMeshActor::IncrementProgress(int32 NumSteps, const class FString& Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GeneratedDynamicMeshActor", "IncrementProgress");

	Params::GeneratedDynamicMeshActor_IncrementProgress Parms{};

	Parms.NumSteps = NumSteps;
	Parms.Message = std::move(Message);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GeometryScriptingEditor.GeneratedDynamicMeshActor.MarkForMeshRebuild
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bImmediate                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bImmediateEvenIfFrozen                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGeneratedDynamicMeshActor::MarkForMeshRebuild(bool bImmediate, bool bImmediateEvenIfFrozen)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GeneratedDynamicMeshActor", "MarkForMeshRebuild");

	Params::GeneratedDynamicMeshActor_MarkForMeshRebuild Parms{};

	Parms.bImmediate = bImmediate;
	Parms.bImmediateEvenIfFrozen = bImmediateEvenIfFrozen;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GeometryScriptingEditor.GeneratedDynamicMeshActor.OnRebuildGeneratedMesh
// (Event, Public, BlueprintEvent)
// Parameters:
// class UDynamicMesh*                     TargetMesh                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGeneratedDynamicMeshActor::OnRebuildGeneratedMesh(class UDynamicMesh* TargetMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GeneratedDynamicMeshActor", "OnRebuildGeneratedMesh");

	Params::GeneratedDynamicMeshActor_OnRebuildGeneratedMesh Parms{};

	Parms.TargetMesh = TargetMesh;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GeometryScriptingEditor.GeometryScriptLibrary_OpenSubdivFunctions.ApplyPolygroupCatmullClarkSubD
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UDynamicMesh*                     FromDynamicMesh                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Subdivisions                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGeometryScriptGroupLayer        GroupLayer                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)
// class UGeometryScriptDebug*             Debug                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDynamicMesh*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDynamicMesh* UGeometryScriptLibrary_OpenSubdivFunctions::ApplyPolygroupCatmullClarkSubD(class UDynamicMesh* FromDynamicMesh, int32 Subdivisions, const struct FGeometryScriptGroupLayer& GroupLayer, class UGeometryScriptDebug* Debug)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GeometryScriptLibrary_OpenSubdivFunctions", "ApplyPolygroupCatmullClarkSubD");

	Params::GeometryScriptLibrary_OpenSubdivFunctions_ApplyPolygroupCatmullClarkSubD Parms{};

	Parms.FromDynamicMesh = FromDynamicMesh;
	Parms.Subdivisions = Subdivisions;
	Parms.GroupLayer = std::move(GroupLayer);
	Parms.Debug = Debug;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GeometryScriptingEditor.GeometryScriptLibrary_OpenSubdivFunctions.ApplyTriangleLoopSubD
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UDynamicMesh*                     FromDynamicMesh                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Subdivisions                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGeometryScriptDebug*             Debug                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDynamicMesh*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDynamicMesh* UGeometryScriptLibrary_OpenSubdivFunctions::ApplyTriangleLoopSubD(class UDynamicMesh* FromDynamicMesh, int32 Subdivisions, class UGeometryScriptDebug* Debug)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GeometryScriptLibrary_OpenSubdivFunctions", "ApplyTriangleLoopSubD");

	Params::GeometryScriptLibrary_OpenSubdivFunctions_ApplyTriangleLoopSubD Parms{};

	Parms.FromDynamicMesh = FromDynamicMesh;
	Parms.Subdivisions = Subdivisions;
	Parms.Debug = Debug;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

