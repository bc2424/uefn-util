#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DataLayerEditor

#include "Basic.hpp"

#include "EditorSubsystem_classes.hpp"
#include "UnrealEd_classes.hpp"


namespace SDK
{

// Class DataLayerEditor.DataLayerEditorSubsystem
// 0x0100 (0x0138 - 0x0038)
class UDataLayerEditorSubsystem final : public UEditorSubsystem
{
public:
	uint8                                         Pad_38[0x100];                                     // 0x0038(0x0100)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool AddActorsToDataLayer(const TArray<class AActor*>& Actors, class UDataLayerInstance* DataLayer);
	bool AddActorsToDataLayers(const TArray<class AActor*>& Actors, const TArray<class UDataLayerInstance*>& DataLayers);
	bool AddActorToDataLayer(class AActor* Actor, class UDataLayerInstance* DataLayer);
	bool AddActorToDataLayers(class AActor* Actor, const TArray<class UDataLayerInstance*>& DataLayers);
	bool AddSelectedActorsToDataLayer(class UDataLayerInstance* DataLayer);
	bool AddSelectedActorsToDataLayers(const TArray<class UDataLayerInstance*>& DataLayers);
	void AddToActorEditorContext(class UDataLayerInstance* InDataLayerInstance);
	class UDataLayerInstance* CreateDataLayer(class UDataLayerInstance* ParentDataLayer);
	class UDataLayerInstance* CreateDataLayerInstance(const struct FDataLayerCreationParameters& Parameters);
	void DeleteDataLayer(class UDataLayerInstance* DataLayerToDelete);
	void DeleteDataLayers(const TArray<class UDataLayerInstance*>& DataLayersToDelete);
	TArray<class UDataLayerInstance*> GetAllDataLayers();
	bool IsActorValidForDataLayer(class AActor* Actor);
	bool IsActorValidForDataLayerInstances(class AActor* Actor, const TArray<class UDataLayerInstance*>& DataLayerInstances);
	void MakeAllDataLayersVisible();
	bool RemoveActorFromAllDataLayers(class AActor* Actor);
	bool RemoveActorFromDataLayer(class AActor* Actor, class UDataLayerInstance* DataLayerToRemove);
	bool RemoveActorFromDataLayers(class AActor* Actor, const TArray<class UDataLayerInstance*>& DataLayers);
	bool RemoveActorsFromAllDataLayers(const TArray<class AActor*>& Actors);
	bool RemoveActorsFromDataLayer(const TArray<class AActor*>& Actors, class UDataLayerInstance* DataLayer);
	bool RemoveActorsFromDataLayers(const TArray<class AActor*>& Actors, const TArray<class UDataLayerInstance*>& DataLayers);
	void RemoveFromActorEditorContext(class UDataLayerInstance* InDataLayerInstance);
	bool RemoveSelectedActorsFromDataLayer(class UDataLayerInstance* DataLayer);
	bool RemoveSelectedActorsFromDataLayers(const TArray<class UDataLayerInstance*>& DataLayers);
	bool RenameDataLayer(class UDataLayerInstance* DataLayer, const class FName& NewDataLayerLabel);
	bool SelectActorsInDataLayer(class UDataLayerInstance* DataLayer, const bool bSelect, const bool bNotify, const bool bSelectEvenIfHidden);
	bool SelectActorsInDataLayers(const TArray<class UDataLayerInstance*>& DataLayers, const bool bSelect, const bool bNotify, const bool bSelectEvenIfHidden);
	bool SetActorEditorContextCurrentExternalDataLayer(const class UExternalDataLayerAsset* InExternalDataLayerAsset);
	bool SetDataLayerIsDynamicallyLoadedInEditor(class UDataLayer* DataLayer, const bool bIsLoadedInEditor, const bool bIsFromUserChange);
	bool SetDataLayerIsLoadedInEditor(class UDataLayerInstance* DataLayer, const bool bIsLoadedInEditor, const bool bIsFromUserChange);
	bool SetDataLayersIsDynamicallyLoadedInEditor(const TArray<class UDataLayer*>& DataLayers, const bool bIsLoadedInEditor, const bool bIsFromUserChange);
	bool SetDataLayersIsLoadedInEditor(const TArray<class UDataLayerInstance*>& DataLayers, const bool bIsLoadedInEditor, const bool bIsFromUserChange);
	void SetDataLayersVisibility(const TArray<class UDataLayerInstance*>& DataLayers, const bool bIsVisible);
	void SetDataLayerVisibility(class UDataLayerInstance* DataLayer, const bool bIsVisible);
	bool SetParentDataLayer(class UDataLayerInstance* DataLayer, class UDataLayerInstance* ParentDataLayer);
	void SetParentDataLayerForDataLayers(const TArray<class UDataLayerInstance*>& DataLayers, class UDataLayerInstance* ParentDataLayer);
	bool ToggleDataLayerIsDynamicallyLoadedInEditor(class UDataLayer* DataLayer, const bool bIsFromUserChange);
	bool ToggleDataLayerIsLoadedInEditor(class UDataLayerInstance* DataLayer, const bool bIsFromUserChange);
	bool ToggleDataLayersIsDynamicallyLoadedInEditor(const TArray<class UDataLayer*>& DataLayers, const bool bIsFromUserChange);
	bool ToggleDataLayersIsLoadedInEditor(const TArray<class UDataLayerInstance*>& DataLayers, const bool bIsFromUserChange);
	void ToggleDataLayersVisibility(const TArray<class UDataLayerInstance*>& DataLayers);
	void ToggleDataLayerVisibility(class UDataLayerInstance* DataLayer);
	void UpdateActorAllViewsVisibility(class AActor* Actor);
	bool UpdateActorVisibility(class AActor* Actor, bool* bOutSelectionChanged, bool* bOutActorModified, const bool bNotifySelectionChange, const bool bRedrawViewports);
	bool UpdateAllActorsVisibility(const bool bNotifySelectionChange, const bool bRedrawViewports);
	void UpdateAllViewVisibility(class UDataLayer* DataLayerThatChanged);

	void AppendActorsFromDataLayer(class UDataLayerInstance* DataLayer, TArray<class AActor*>* InOutActors) const;
	void AppendActorsFromDataLayers(const TArray<class UDataLayerInstance*>& DataLayers, TArray<class AActor*>* InOutActors) const;
	const class UExternalDataLayerAsset* GetActorEditorContextCurrentExternalDataLayer() const;
	TArray<class AActor*> GetActorsFromDataLayer(class UDataLayerInstance* DataLayer) const;
	TArray<class AActor*> GetActorsFromDataLayers(const TArray<class UDataLayerInstance*>& DataLayers) const;
	class UDataLayerInstance* GetDataLayer(const struct FActorDataLayer& ActorDataLayer) const;
	class UDataLayerInstance* GetDataLayerFromLabel(const class FName& DataLayerLabel) const;
	class UDataLayerInstance* GetDataLayerInstance(const class UDataLayerAsset* DataLayerAsset) const;
	TArray<class UDataLayerInstance*> GetDataLayerInstances(const TArray<class UDataLayerAsset*>& DataLayerAssets) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DataLayerEditorSubsystem">();
	}
	static class UDataLayerEditorSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDataLayerEditorSubsystem>();
	}
};

// Class DataLayerEditor.DataLayerFactory
// 0x0000 (0x0088 - 0x0088)
class UDataLayerFactory final : public UFactory
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DataLayerFactory">();
	}
	static class UDataLayerFactory* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDataLayerFactory>();
	}
};

// Class DataLayerEditor.ExternalDataLayerFactory
// 0x0000 (0x0088 - 0x0088)
class UExternalDataLayerFactory final : public UFactory
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ExternalDataLayerFactory">();
	}
	static class UExternalDataLayerFactory* GetDefaultObj()
	{
		return GetDefaultObjImpl<UExternalDataLayerFactory>();
	}
};

}

