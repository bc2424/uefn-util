#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FoliageEdit

#include "Basic.hpp"

#include "FoliageEdit_classes.hpp"
#include "FoliageEdit_parameters.hpp"


namespace SDK
{

// Function FoliageEdit.ProceduralFoliageEditorLibrary.ClearProceduralFoliageComponents
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class UProceduralFoliageComponent*>ProceduralFoliageComponents                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UProceduralFoliageEditorLibrary::ClearProceduralFoliageComponents(const TArray<class UProceduralFoliageComponent*>& ProceduralFoliageComponents)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ProceduralFoliageEditorLibrary", "ClearProceduralFoliageComponents");

	Params::ProceduralFoliageEditorLibrary_ClearProceduralFoliageComponents Parms{};

	Parms.ProceduralFoliageComponents = std::move(ProceduralFoliageComponents);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FoliageEdit.ProceduralFoliageEditorLibrary.ClearProceduralFoliageVolumes
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class AProceduralFoliageVolume*> ProceduralFoliageVolumes                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UProceduralFoliageEditorLibrary::ClearProceduralFoliageVolumes(const TArray<class AProceduralFoliageVolume*>& ProceduralFoliageVolumes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ProceduralFoliageEditorLibrary", "ClearProceduralFoliageVolumes");

	Params::ProceduralFoliageEditorLibrary_ClearProceduralFoliageVolumes Parms{};

	Parms.ProceduralFoliageVolumes = std::move(ProceduralFoliageVolumes);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FoliageEdit.ProceduralFoliageEditorLibrary.ResimulateProceduralFoliageComponents
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class UProceduralFoliageComponent*>ProceduralFoliageComponents                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UProceduralFoliageEditorLibrary::ResimulateProceduralFoliageComponents(const TArray<class UProceduralFoliageComponent*>& ProceduralFoliageComponents)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ProceduralFoliageEditorLibrary", "ResimulateProceduralFoliageComponents");

	Params::ProceduralFoliageEditorLibrary_ResimulateProceduralFoliageComponents Parms{};

	Parms.ProceduralFoliageComponents = std::move(ProceduralFoliageComponents);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FoliageEdit.ProceduralFoliageEditorLibrary.ResimulateProceduralFoliageVolumes
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class AProceduralFoliageVolume*> ProceduralFoliageVolumes                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UProceduralFoliageEditorLibrary::ResimulateProceduralFoliageVolumes(const TArray<class AProceduralFoliageVolume*>& ProceduralFoliageVolumes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ProceduralFoliageEditorLibrary", "ResimulateProceduralFoliageVolumes");

	Params::ProceduralFoliageEditorLibrary_ResimulateProceduralFoliageVolumes Parms{};

	Parms.ProceduralFoliageVolumes = std::move(ProceduralFoliageVolumes);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

