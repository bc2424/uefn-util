#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ItemizationCoreUI

#include "Basic.hpp"

#include "ItemizationCoreUI_classes.hpp"
#include "ItemizationCoreUI_parameters.hpp"


namespace SDK
{

// Function ItemizationCoreUI.InventoryCollectionViewModelsManager.OnInventoryCollectionDestroyed
// (Final, Native, Private)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInventoryCollectionViewModelsManager::OnInventoryCollectionDestroyed(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryCollectionViewModelsManager", "OnInventoryCollectionDestroyed");

	Params::InventoryCollectionViewModelsManager_OnInventoryCollectionDestroyed Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ItemizationCoreUI.InventoryItemEntryViewModel.DropAll
// (Final, Native, Public, BlueprintCallable)

void UInventoryItemEntryViewModel::DropAll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryItemEntryViewModel", "DropAll");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function ItemizationCoreUI.InventoryItemEntryViewModel.DropAmount
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int64                                   Amount                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInventoryItemEntryViewModel::DropAmount(const int64 Amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryItemEntryViewModel", "DropAmount");

	Params::InventoryItemEntryViewModel_DropAmount Parms{};

	Parms.Amount = Amount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ItemizationCoreUI.InventoryItemEntryViewModel.DropHalf
// (Final, Native, Public, BlueprintCallable)

void UInventoryItemEntryViewModel::DropHalf()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryItemEntryViewModel", "DropHalf");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function ItemizationCoreUI.InventoryItemEntryViewModel.SetEquippableItemActive
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bActive                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInventoryItemEntryViewModel::SetEquippableItemActive(const bool bActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryItemEntryViewModel", "SetEquippableItemActive");

	Params::InventoryItemEntryViewModel_SetEquippableItemActive Parms{};

	Parms.bActive = bActive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ItemizationCoreUI.InventoryItemEntryViewModel.ToggleEquippableItemActive
// (Final, Native, Public, BlueprintCallable)

void UInventoryItemEntryViewModel::ToggleEquippableItemActive()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryItemEntryViewModel", "ToggleEquippableItemActive");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function ItemizationCoreUI.InventoryItemEntryViewModel.UpdateCanSwap
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UInventoryItemEntryViewModel*     SwapInventoryItemEntryViewModel                        (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInventoryItemEntryViewModel::UpdateCanSwap(const class UInventoryItemEntryViewModel* SwapInventoryItemEntryViewModel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryItemEntryViewModel", "UpdateCanSwap");

	Params::InventoryItemEntryViewModel_UpdateCanSwap Parms{};

	Parms.SwapInventoryItemEntryViewModel = SwapInventoryItemEntryViewModel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ItemizationCoreUI.InventoryItemEntryViewModel.UseItem
// (Final, Native, Public, BlueprintCallable)

void UInventoryItemEntryViewModel::UseItem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryItemEntryViewModel", "UseItem");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function ItemizationCoreUI.InventoryItemEntryViewModel.CanItemBeMadeActive
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInventoryItemEntryViewModel::CanItemBeMadeActive() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryItemEntryViewModel", "CanItemBeMadeActive");

	Params::InventoryItemEntryViewModel_CanItemBeMadeActive Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ItemizationCoreUI.InventoryItemEntryViewModel.CanItemBeMadeInactive
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInventoryItemEntryViewModel::CanItemBeMadeInactive() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryItemEntryViewModel", "CanItemBeMadeInactive");

	Params::InventoryItemEntryViewModel_CanItemBeMadeInactive Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ItemizationCoreUI.InventoryItemEntryViewModel.CanItemBeStacked
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInventoryItemEntryViewModel::CanItemBeStacked() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryItemEntryViewModel", "CanItemBeStacked");

	Params::InventoryItemEntryViewModel_CanItemBeStacked Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ItemizationCoreUI.InventoryItemEntryViewModel.GetEquipSlotInputAction
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class UInputAction*               ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UInputAction* UInventoryItemEntryViewModel::GetEquipSlotInputAction() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryItemEntryViewModel", "GetEquipSlotInputAction");

	Params::InventoryItemEntryViewModel_GetEquipSlotInputAction Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ItemizationCoreUI.InventoryItemEntryViewModel.GetInventoryID
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGuid                      ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FGuid UInventoryItemEntryViewModel::GetInventoryID() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryItemEntryViewModel", "GetInventoryID");

	Params::InventoryItemEntryViewModel_GetInventoryID Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ItemizationCoreUI.InventoryItemEntryViewModel.GetItemAmount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int64                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int64 UInventoryItemEntryViewModel::GetItemAmount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryItemEntryViewModel", "GetItemAmount");

	Params::InventoryItemEntryViewModel_GetItemAmount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ItemizationCoreUI.InventoryItemEntryViewModel.GetItemDefinition
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class UItemDefinitionBase*        ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UItemDefinitionBase* UInventoryItemEntryViewModel::GetItemDefinition() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryItemEntryViewModel", "GetItemDefinition");

	Params::InventoryItemEntryViewModel_GetItemDefinition Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ItemizationCoreUI.InventoryItemEntryViewModel.GetItemDescription
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UInventoryItemEntryViewModel::GetItemDescription() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryItemEntryViewModel", "GetItemDescription");

	Params::InventoryItemEntryViewModel_GetItemDescription Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ItemizationCoreUI.InventoryItemEntryViewModel.GetItemEntryID
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGuid                      ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FGuid UInventoryItemEntryViewModel::GetItemEntryID() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryItemEntryViewModel", "GetItemEntryID");

	Params::InventoryItemEntryViewModel_GetItemEntryID Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ItemizationCoreUI.InventoryItemEntryViewModel.GetItemIcon
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UTexture2D*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture2D* UInventoryItemEntryViewModel::GetItemIcon() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryItemEntryViewModel", "GetItemIcon");

	Params::InventoryItemEntryViewModel_GetItemIcon Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ItemizationCoreUI.InventoryItemEntryViewModel.GetItemIconDisplayTextType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EItemIconDisplayTextType                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EItemIconDisplayTextType UInventoryItemEntryViewModel::GetItemIconDisplayTextType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryItemEntryViewModel", "GetItemIconDisplayTextType");

	Params::InventoryItemEntryViewModel_GetItemIconDisplayTextType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ItemizationCoreUI.InventoryItemEntryViewModel.GetItemName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UInventoryItemEntryViewModel::GetItemName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryItemEntryViewModel", "GetItemName");

	Params::InventoryItemEntryViewModel_GetItemName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ItemizationCoreUI.InventoryItemEntryViewModel.GetItemPrimaryAmmoCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int64                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int64 UInventoryItemEntryViewModel::GetItemPrimaryAmmoCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryItemEntryViewModel", "GetItemPrimaryAmmoCount");

	Params::InventoryItemEntryViewModel_GetItemPrimaryAmmoCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ItemizationCoreUI.InventoryItemEntryViewModel.GetItemRarity
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class UItemRarity*                ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UItemRarity* UInventoryItemEntryViewModel::GetItemRarity() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryItemEntryViewModel", "GetItemRarity");

	Params::InventoryItemEntryViewModel_GetItemRarity Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ItemizationCoreUI.InventoryItemEntryViewModel.GetItemSlotNumber
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UInventoryItemEntryViewModel::GetItemSlotNumber() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryItemEntryViewModel", "GetItemSlotNumber");

	Params::InventoryItemEntryViewModel_GetItemSlotNumber Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ItemizationCoreUI.InventoryItemEntryViewModel.GetItemType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class UItemType*                  ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UItemType* UInventoryItemEntryViewModel::GetItemType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryItemEntryViewModel", "GetItemType");

	Params::InventoryItemEntryViewModel_GetItemType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ItemizationCoreUI.InventoryItemEntryViewModel.GetMaxItemAmount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int64                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int64 UInventoryItemEntryViewModel::GetMaxItemAmount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryItemEntryViewModel", "GetMaxItemAmount");

	Params::InventoryItemEntryViewModel_GetMaxItemAmount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ItemizationCoreUI.InventoryItemEntryViewModel.GetSoftItemIcon
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSoftObjectPtr<class UTexture2D>        ReturnValue                                            (Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSoftObjectPtr<class UTexture2D> UInventoryItemEntryViewModel::GetSoftItemIcon() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryItemEntryViewModel", "GetSoftItemIcon");

	Params::InventoryItemEntryViewModel_GetSoftItemIcon Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ItemizationCoreUI.InventoryItemEntryViewModel.IsEquipSlotInputBindingVisible
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInventoryItemEntryViewModel::IsEquipSlotInputBindingVisible() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryItemEntryViewModel", "IsEquipSlotInputBindingVisible");

	Params::InventoryItemEntryViewModel_IsEquipSlotInputBindingVisible Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ItemizationCoreUI.InventoryItemEntryViewModel.IsItemActive
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInventoryItemEntryViewModel::IsItemActive() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryItemEntryViewModel", "IsItemActive");

	Params::InventoryItemEntryViewModel_IsItemActive Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ItemizationCoreUI.InventoryItemEntryViewModel.IsItemIconLoading
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInventoryItemEntryViewModel::IsItemIconLoading() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryItemEntryViewModel", "IsItemIconLoading");

	Params::InventoryItemEntryViewModel_IsItemIconLoading Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ItemizationCoreUI.InventoryItemEntryViewModel.IsValidItem
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInventoryItemEntryViewModel::IsValidItem() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryItemEntryViewModel", "IsValidItem");

	Params::InventoryItemEntryViewModel_IsValidItem Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ItemizationCoreUI.InventoryItemStreamViewModel.AddItemEntries
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class UInventoryItemEntryViewModel*>ItemEntryViewModels                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UInventoryItemStreamViewModel::AddItemEntries(const TArray<class UInventoryItemEntryViewModel*>& ItemEntryViewModels)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryItemStreamViewModel", "AddItemEntries");

	Params::InventoryItemStreamViewModel_AddItemEntries Parms{};

	Parms.ItemEntryViewModels = std::move(ItemEntryViewModels);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ItemizationCoreUI.InventoryItemStreamViewModel.AddItemEntry
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UInventoryItemEntryViewModel*     ItemEntryViewModel                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInventoryItemStreamViewModel::AddItemEntry(class UInventoryItemEntryViewModel* ItemEntryViewModel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryItemStreamViewModel", "AddItemEntry");

	Params::InventoryItemStreamViewModel_AddItemEntry Parms{};

	Parms.ItemEntryViewModel = ItemEntryViewModel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ItemizationCoreUI.InventoryItemStreamViewModel.OnItemEntryAmountChanged
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UInventoryItemEntryViewModel*     ItemEntryViewModel                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInventoryItemStreamViewModel::OnItemEntryAmountChanged(class UInventoryItemEntryViewModel* ItemEntryViewModel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryItemStreamViewModel", "OnItemEntryAmountChanged");

	Params::InventoryItemStreamViewModel_OnItemEntryAmountChanged Parms{};

	Parms.ItemEntryViewModel = ItemEntryViewModel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ItemizationCoreUI.InventoryItemStreamViewModel.RemoveAllItemEntries
// (Final, Native, Public, BlueprintCallable)

void UInventoryItemStreamViewModel::RemoveAllItemEntries()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryItemStreamViewModel", "RemoveAllItemEntries");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function ItemizationCoreUI.InventoryItemStreamViewModel.RemoveItemEntry
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UInventoryItemEntryViewModel*     ItemEntryViewModel                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInventoryItemStreamViewModel::RemoveItemEntry(class UInventoryItemEntryViewModel* ItemEntryViewModel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryItemStreamViewModel", "RemoveItemEntry");

	Params::InventoryItemStreamViewModel_RemoveItemEntry Parms{};

	Parms.ItemEntryViewModel = ItemEntryViewModel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ItemizationCoreUI.InventoryViewModel.GetInventoryDescription
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UInventoryViewModel::GetInventoryDescription() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryViewModel", "GetInventoryDescription");

	Params::InventoryViewModel_GetInventoryDescription Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ItemizationCoreUI.InventoryViewModel.GetInventoryName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UInventoryViewModel::GetInventoryName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryViewModel", "GetInventoryName");

	Params::InventoryViewModel_GetInventoryName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ItemizationCoreUI.InventoryViewModel.GetTotalSlots
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UInventoryViewModel::GetTotalSlots() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryViewModel", "GetTotalSlots");

	Params::InventoryViewModel_GetTotalSlots Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ItemizationCoreUI.InventoryViewModelAllowedConversionFunctions.FindInventoryViewModel
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// TSubclassOf<class UObject>              InventoryClass                                         (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UInventoryViewModel*>      InventoryViewModels                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class UInventoryViewModel*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UInventoryViewModel* UInventoryViewModelAllowedConversionFunctions::FindInventoryViewModel(TSubclassOf<class UObject> InventoryClass, const TArray<class UInventoryViewModel*>& InventoryViewModels)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InventoryViewModelAllowedConversionFunctions", "FindInventoryViewModel");

	Params::InventoryViewModelAllowedConversionFunctions_FindInventoryViewModel Parms{};

	Parms.InventoryClass = InventoryClass;
	Parms.InventoryViewModels = std::move(InventoryViewModels);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ItemizationCoreUI.InventoryViewModelAllowedConversionFunctions.FindInventoryViewModelByName
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           InventoryName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UInventoryViewModel*>      InventoryViewModels                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class UInventoryViewModel*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UInventoryViewModel* UInventoryViewModelAllowedConversionFunctions::FindInventoryViewModelByName(const class FString& InventoryName, const TArray<class UInventoryViewModel*>& InventoryViewModels)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InventoryViewModelAllowedConversionFunctions", "FindInventoryViewModelByName");

	Params::InventoryViewModelAllowedConversionFunctions_FindInventoryViewModelByName Parms{};

	Parms.InventoryName = std::move(InventoryName);
	Parms.InventoryViewModels = std::move(InventoryViewModels);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ItemizationCoreUI.InventoryViewModelAllowedConversionFunctions.GetInventoryItemEntryViewModels
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<class UInventoryItemEntryViewModel*>InventoryItemEntryViewModels                           (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    bIncludeEmptySlots                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UInventoryItemEntryViewModel*>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UInventoryItemEntryViewModel*> UInventoryViewModelAllowedConversionFunctions::GetInventoryItemEntryViewModels(const TArray<class UInventoryItemEntryViewModel*>& InventoryItemEntryViewModels, const bool bIncludeEmptySlots)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InventoryViewModelAllowedConversionFunctions", "GetInventoryItemEntryViewModels");

	Params::InventoryViewModelAllowedConversionFunctions_GetInventoryItemEntryViewModels Parms{};

	Parms.InventoryItemEntryViewModels = std::move(InventoryItemEntryViewModels);
	Parms.bIncludeEmptySlots = bIncludeEmptySlots;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ItemizationCoreUI.InventoryViewModelAllowedConversionFunctions.GetAllowedInventoryClasses
// (Final, Native, Public, Const)
// Parameters:
// TArray<class UClass*>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UClass*> UInventoryViewModelAllowedConversionFunctions::GetAllowedInventoryClasses() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryViewModelAllowedConversionFunctions", "GetAllowedInventoryClasses");

	Params::InventoryViewModelAllowedConversionFunctions_GetAllowedInventoryClasses Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

