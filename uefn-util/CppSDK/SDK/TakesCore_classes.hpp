#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TakesCore

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "TakesCore_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class TakesCore.TakeMetaData
// 0x00E8 (0x0118 - 0x0030)
class UTakeMetaData final : public UObject
{
public:
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsLocked;                                         // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Slate;                                             // 0x0040(0x0010)(ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         TakeNumber;                                        // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              Timestamp;                                         // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FTimecode                              TimecodeIn;                                        // 0x0060(0x0014)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimecode                              TimecodeOut;                                       // 0x0078(0x0014)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFrameTime                             Duration;                                          // 0x0090(0x0008)(Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FFrameRate                             FrameRate;                                         // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 Description;                                       // 0x00A0(0x0010)(ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftObjectPtr<class UTakePreset>             PresetOrigin;                                      // 0x00B0(0x0030)(Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftObjectPtr<class ULevel>                  LevelOrigin;                                       // 0x00E0(0x0030)(EditorOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bFrameRateFromTimecode;                            // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_111[0x7];                                      // 0x0111(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	struct FFrameRate GetFrameRate();
	void Lock();
	void SetDescription(const class FString& InDescription);
	void SetDuration(const struct FFrameTime& InDuration);
	void SetFrameRate(const struct FFrameRate& InFrameRate);
	void SetFrameRateFromTimecode(bool InFromTimecode);
	void SetLevelOrigin(class ULevel* InLevelOrigin);
	void SetPresetOrigin(class UTakePreset* InPresetOrigin);
	void SetSlate(const class FString& InSlate, bool bEmitChanged);
	void SetTakeNumber(int32 InTakeNumber, bool bEmitChanged);
	void SetTimecodeIn(const struct FTimecode& InTimecodeIn);
	void SetTimecodeOut(const struct FTimecode& InTimecodeOut);
	void SetTimestamp(const struct FDateTime& InTimestamp);
	void Unlock();

	class FString GenerateAssetPath(const class FString& PathFormatString) const;
	class FString GetDescription() const;
	struct FFrameTime GetDuration() const;
	bool GetFrameRateFromTimecode() const;
	class ULevel* GetLevelOrigin() const;
	class FString GetLevelPath() const;
	class UTakePreset* GetPresetOrigin() const;
	class FString GetSlate() const;
	int32 GetTakeNumber() const;
	struct FTimecode GetTimecodeIn() const;
	struct FTimecode GetTimecodeOut() const;
	struct FDateTime GetTimestamp() const;
	bool IsLocked() const;
	bool Recorded() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TakeMetaData">();
	}
	static class UTakeMetaData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTakeMetaData>();
	}
};

// Class TakesCore.TakePreset
// 0x0020 (0x0050 - 0x0030)
class UTakePreset final : public UObject
{
public:
	class ULevelSequence*                         LevelSequence;                                     // 0x0030(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_38[0x18];                                      // 0x0038(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TakePreset">();
	}
	static class UTakePreset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTakePreset>();
	}
};

// Class TakesCore.TakeRecorderSource
// 0x0010 (0x0040 - 0x0030)
class UTakeRecorderSource : public UObject
{
public:
	bool                                          bEnabled;                                          // 0x0030(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TakeNumber;                                        // 0x0034(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 TrackTint;                                         // 0x0038(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TakeRecorderSource">();
	}
	static class UTakeRecorderSource* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTakeRecorderSource>();
	}
};

// Class TakesCore.ActorRecorderPropertyMap
// 0x0060 (0x0090 - 0x0030)
class UActorRecorderPropertyMap final : public UObject
{
public:
	TSoftObjectPtr<class UObject>                 RecordedObject;                                    // 0x0030(0x0030)(Edit, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FActorRecordedProperty>         Properties;                                        // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UActorRecorderPropertyMap*>      Children;                                          // 0x0070(0x0010)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                         Pad_80[0x10];                                      // 0x0080(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ActorRecorderPropertyMap">();
	}
	static class UActorRecorderPropertyMap* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActorRecorderPropertyMap>();
	}
};

// Class TakesCore.TakeRecorderAudioInputSettings
// 0x0018 (0x0048 - 0x0030)
class UTakeRecorderAudioInputSettings : public UObject
{
public:
	uint8                                         Pad_30[0x18];                                      // 0x0030(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TakeRecorderAudioInputSettings">();
	}
	static class UTakeRecorderAudioInputSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTakeRecorderAudioInputSettings>();
	}
};

// Class TakesCore.TakeRecorderSources
// 0x00E8 (0x0118 - 0x0030)
class UTakeRecorderSources final : public UObject
{
public:
	uint8                                         Pad_30[0x18];                                      // 0x0030(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UTakeRecorderSource*>            Sources;                                           // 0x0048(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	TMap<class UTakeRecorderSource*, class ULevelSequence*> SourceSubSequenceMap;                              // 0x0058(0x0050)(Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<class UMovieSceneSubSection*>          ActiveSubSections;                                 // 0x00A8(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_B8[0x60];                                      // 0x00B8(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UTakeRecorderSource* AddSource(TSubclassOf<class UTakeRecorderSource> InSourceType);
	void RemoveSource(class UTakeRecorderSource* InSource);
	void StartRecordingSource(const TArray<class UTakeRecorderSource*>& InSources, const struct FQualifiedFrameTime& CurrentFrameTime);

	TArray<class UTakeRecorderSource*> GetSourcesCopy() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TakeRecorderSources">();
	}
	static class UTakeRecorderSources* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTakeRecorderSources>();
	}
};

// Class TakesCore.TakesCoreBlueprintLibrary
// 0x0000 (0x0030 - 0x0030)
class UTakesCoreBlueprintLibrary final : public UBlueprintFunctionLibrary
{
public:
	static int32 ComputeNextTakeNumber(const class FString& Slate);
	static TArray<struct FAssetData> FindTakes(const class FString& Slate, int32 TakeNumber);
	static void SetOnTakeRecorderSlateChanged(TDelegate<void(const class FString& Slate)> OnTakeRecorderSlateChanged);
	static void SetOnTakeRecorderTakeNumberChanged(TDelegate<void(int32 TakeNumber)> OnTakeRecorderTakeNumberChanged);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TakesCoreBlueprintLibrary">();
	}
	static class UTakesCoreBlueprintLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTakesCoreBlueprintLibrary>();
	}
};

}

