#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MaterialEditor

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "MaterialEditor_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class MaterialEditor.MaterialEditorMenuContext
// 0x0010 (0x0040 - 0x0030)
class UMaterialEditorMenuContext final : public UObject
{
public:
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MaterialEditorMenuContext">();
	}
	static class UMaterialEditorMenuContext* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialEditorMenuContext>();
	}
};

// Class MaterialEditor.MaterialEditorSettings
// 0x0050 (0x0080 - 0x0030)
class UMaterialEditorSettings final : public UObject
{
public:
	struct FFilePath                              MaliOfflineCompilerPath;                           // 0x0030(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefaultPreviewWidth;                               // 0x0040(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         DefaultPreviewHeight;                              // 0x0044(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FPreviewBackgroundSettings             PreviewBackground;                                 // 0x0048(0x001C)(Edit, Config, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x1C];                                      // 0x0064(0x001C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MaterialEditorSettings">();
	}
	static class UMaterialEditorSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialEditorSettings>();
	}
};

// Class MaterialEditor.MaterialEditingLibrary
// 0x0000 (0x0030 - 0x0030)
class UMaterialEditingLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void ClearAllMaterialInstanceParameters(class UMaterialInstanceConstant* Instance);
	static bool ConnectMaterialExpressions(class UMaterialExpression* FromExpression, const class FString& FromOutputName, class UMaterialExpression* ToExpression, const class FString& ToInputName);
	static bool ConnectMaterialProperty(class UMaterialExpression* FromExpression, const class FString& FromOutputName, EMaterialProperty Property);
	static class UMaterialExpression* CreateMaterialExpression(class UMaterial* Material, TSubclassOf<class UMaterialExpression> ExpressionClass, int32 NodePosX, int32 NodePosY);
	static class UMaterialExpression* CreateMaterialExpressionInFunction(class UMaterialFunction* MaterialFunction, TSubclassOf<class UMaterialExpression> ExpressionClass, int32 NodePosX, int32 NodePosY);
	static void DeleteAllMaterialExpressions(class UMaterial* Material);
	static void DeleteAllMaterialExpressionsInFunction(class UMaterialFunction* MaterialFunction);
	static void DeleteMaterialExpression(class UMaterial* Material, class UMaterialExpression* Expression);
	static void DeleteMaterialExpressionInFunction(class UMaterialFunction* MaterialFunction, class UMaterialExpression* Expression);
	static class UMaterialExpression* DuplicateMaterialExpression(class UMaterial* Material, class UMaterialFunction* MaterialFunction, class UMaterialExpression* Expression);
	static void GetChildInstances(class UMaterialInterface* Parent, TArray<struct FAssetData>* ChildInstances);
	static bool GetInputNodeOutputNameForMaterialExpression(class UMaterialExpression* MaterialExpression, class UMaterialExpression* InputNode, class FString* OutputName);
	static TArray<class UMaterialExpression*> GetInputsForMaterialExpression(class UMaterial* Material, class UMaterialExpression* MaterialExpression);
	static float GetMaterialDefaultScalarParameterValue(class UMaterial* Material, class FName ParameterName);
	static bool GetMaterialDefaultStaticSwitchParameterValue(class UMaterial* Material, class FName ParameterName);
	static class UTexture* GetMaterialDefaultTextureParameterValue(class UMaterial* Material, class FName ParameterName);
	static struct FLinearColor GetMaterialDefaultVectorParameterValue(class UMaterial* Material, class FName ParameterName);
	static TArray<class FString> GetMaterialExpressionInputNames(class UMaterialExpression* MaterialExpression);
	static TArray<int32> GetMaterialExpressionInputTypes(class UMaterialExpression* MaterialExpression);
	static void GetMaterialExpressionNodePosition(class UMaterialExpression* MaterialExpression, int32* NodePosX, int32* NodePosY);
	static class URuntimeVirtualTexture* GetMaterialInstanceRuntimeVirtualTextureParameterValue(class UMaterialInstanceConstant* Instance, class FName ParameterName, EMaterialParameterAssociation Association);
	static float GetMaterialInstanceScalarParameterValue(class UMaterialInstanceConstant* Instance, class FName ParameterName, EMaterialParameterAssociation Association);
	static class USparseVolumeTexture* GetMaterialInstanceSparseVolumeTextureParameterValue(class UMaterialInstanceConstant* Instance, class FName ParameterName, EMaterialParameterAssociation Association);
	static bool GetMaterialInstanceStaticSwitchParameterValue(class UMaterialInstanceConstant* Instance, class FName ParameterName, EMaterialParameterAssociation Association);
	static class UTexture* GetMaterialInstanceTextureParameterValue(class UMaterialInstanceConstant* Instance, class FName ParameterName, EMaterialParameterAssociation Association);
	static struct FLinearColor GetMaterialInstanceVectorParameterValue(class UMaterialInstanceConstant* Instance, class FName ParameterName, EMaterialParameterAssociation Association);
	static class UMaterialExpression* GetMaterialPropertyInputNode(class UMaterial* Material, EMaterialProperty Property);
	static class FString GetMaterialPropertyInputNodeOutputName(class UMaterial* Material, EMaterialProperty Property);
	static TSet<class UObject*> GetMaterialSelectedNodes(class UMaterial* Material);
	static class UMaterialInterface* GetNaniteOverrideMaterial(class UMaterialInterface* Material);
	static int32 GetNumMaterialExpressions(const class UMaterial* Material);
	static int32 GetNumMaterialExpressionsInFunction(const class UMaterialFunction* MaterialFunction);
	static void GetScalarParameterNames(class UMaterialInterface* Material, TArray<class FName>* ParameterNames);
	static bool GetScalarParameterSource(class UMaterialInterface* Material, const class FName ParameterName, struct FSoftObjectPath* ParameterSource);
	static void GetStaticSwitchParameterNames(class UMaterialInterface* Material, TArray<class FName>* ParameterNames);
	static bool GetStaticSwitchParameterSource(class UMaterialInterface* Material, const class FName ParameterName, struct FSoftObjectPath* ParameterSource);
	static struct FMaterialStatistics GetStatistics(class UMaterialInterface* Material);
	static void GetTextureParameterNames(class UMaterialInterface* Material, TArray<class FName>* ParameterNames);
	static bool GetTextureParameterSource(class UMaterialInterface* Material, const class FName ParameterName, struct FSoftObjectPath* ParameterSource);
	static TArray<class UTexture*> GetUsedTextures(class UMaterial* Material);
	static void GetVectorParameterNames(class UMaterialInterface* Material, TArray<class FName>* ParameterNames);
	static bool GetVectorParameterSource(class UMaterialInterface* Material, const class FName ParameterName, struct FSoftObjectPath* ParameterSource);
	static bool HasMaterialUsage(class UMaterial* Material, EMaterialUsage Usage);
	static void LayoutMaterialExpressions(class UMaterial* Material);
	static void LayoutMaterialFunctionExpressions(class UMaterialFunction* MaterialFunction);
	static void RecompileMaterial(class UMaterial* Material);
	static void SetMaterialInstanceParent(class UMaterialInstanceConstant* Instance, class UMaterialInterface* NewParent);
	static bool SetMaterialInstanceRuntimeVirtualTextureParameterValue(class UMaterialInstanceConstant* Instance, class FName ParameterName, class URuntimeVirtualTexture* Value, EMaterialParameterAssociation Association);
	static bool SetMaterialInstanceScalarParameterValue(class UMaterialInstanceConstant* Instance, class FName ParameterName, float Value, EMaterialParameterAssociation Association);
	static bool SetMaterialInstanceSparseVolumeTextureParameterValue(class UMaterialInstanceConstant* Instance, class FName ParameterName, class USparseVolumeTexture* Value, EMaterialParameterAssociation Association);
	static bool SetMaterialInstanceStaticSwitchParameterValue(class UMaterialInstanceConstant* Instance, class FName ParameterName, bool Value, EMaterialParameterAssociation Association);
	static bool SetMaterialInstanceTextureParameterValue(class UMaterialInstanceConstant* Instance, class FName ParameterName, class UTexture* Value, EMaterialParameterAssociation Association);
	static bool SetMaterialInstanceVectorParameterValue(class UMaterialInstanceConstant* Instance, class FName ParameterName, const struct FLinearColor& Value, EMaterialParameterAssociation Association);
	static bool SetMaterialUsage(class UMaterial* Material, EMaterialUsage Usage, bool* bNeedsRecompile);
	static void UpdateMaterialFunction(class UMaterialFunctionInterface* MaterialFunction, class UMaterial* PreviewMaterial);
	static void UpdateMaterialInstance(class UMaterialInstanceConstant* Instance);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MaterialEditingLibrary">();
	}
	static class UMaterialEditingLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialEditingLibrary>();
	}
};

}

