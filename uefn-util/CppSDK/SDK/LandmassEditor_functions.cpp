#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LandmassEditor

#include "Basic.hpp"

#include "LandmassEditor_classes.hpp"
#include "LandmassEditor_parameters.hpp"


namespace SDK
{

// Function LandmassEditor.LandmassActor.ActorSelectionChanged
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bSelected                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ALandmassActor::ActorSelectionChanged(bool bSelected)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LandmassActor", "ActorSelectionChanged");

	Params::LandmassActor_ActorSelectionChanged Parms{};

	Parms.bSelected = bSelected;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LandmassEditor.LandmassActor.CustomTick
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ALandmassActor::CustomTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LandmassActor", "CustomTick");

	Params::LandmassActor_CustomTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LandmassEditor.LandmassActor.DrawBrushMaterial
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMaterialInterface*               Material                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ALandmassActor::DrawBrushMaterial(class UMaterialInterface* Material)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LandmassActor", "DrawBrushMaterial");

	Params::LandmassActor_DrawBrushMaterial Parms{};

	Parms.Material = Material;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LandmassEditor.LandmassActor.FastPreviewMode
// (Final, Native, Public, BlueprintCallable)

void ALandmassActor::FastPreviewMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LandmassActor", "FastPreviewMode");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LandmassEditor.LandmassActor.MoveBrushDown
// (Final, Native, Public, BlueprintCallable)

void ALandmassActor::MoveBrushDown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LandmassActor", "MoveBrushDown");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LandmassEditor.LandmassActor.MoveBrushUp
// (Final, Native, Public, BlueprintCallable)

void ALandmassActor::MoveBrushUp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LandmassActor", "MoveBrushUp");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LandmassEditor.LandmassActor.MoveToBottom
// (Final, Native, Public, BlueprintCallable)

void ALandmassActor::MoveToBottom()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LandmassActor", "MoveToBottom");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LandmassEditor.LandmassActor.MoveToTop
// (Final, Native, Public, BlueprintCallable)

void ALandmassActor::MoveToTop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LandmassActor", "MoveToTop");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LandmassEditor.LandmassActor.RenderLayer
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FLandscapeBrushParameters        InParameters                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ALandmassActor::RenderLayer(const struct FLandscapeBrushParameters& InParameters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LandmassActor", "RenderLayer");

	Params::LandmassActor_RenderLayer Parms{};

	Parms.InParameters = std::move(InParameters);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LandmassEditor.LandmassActor.RenderLayer_Native
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FLandscapeBrushParameters        InParameters                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ALandmassActor::RenderLayer_Native(const struct FLandscapeBrushParameters& InParameters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LandmassActor", "RenderLayer_Native");

	Params::LandmassActor_RenderLayer_Native Parms{};

	Parms.InParameters = std::move(InParameters);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LandmassEditor.LandmassActor.RestoreLandscapeEditing
// (Final, Native, Public, BlueprintCallable)

void ALandmassActor::RestoreLandscapeEditing()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LandmassActor", "RestoreLandscapeEditing");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LandmassEditor.LandmassActor.SetEditorTickEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ALandmassActor::SetEditorTickEnabled(bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LandmassActor", "SetEditorTickEnabled");

	Params::LandmassActor_SetEditorTickEnabled Parms{};

	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LandmassEditor.LandmassActor.SetMeshExentsMaterial
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMaterialInterface*               Material                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ALandmassActor::SetMeshExentsMaterial(class UMaterialInterface* Material)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LandmassActor", "SetMeshExentsMaterial");

	Params::LandmassActor_SetMeshExentsMaterial Parms{};

	Parms.Material = Material;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LandmassEditor.LandmassActor.UpdateBrushExtents
// (Final, Native, Public, BlueprintCallable)

void ALandmassActor::UpdateBrushExtents()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LandmassActor", "UpdateBrushExtents");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LandmassEditor.LandmassBlueprintFunctionLibrary.CombineWorldExtents
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector4                         ExtentsA                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector4                         ExtentsB                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector4                         CombinedExtents                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULandmassBlueprintFunctionLibrary::CombineWorldExtents(const struct FVector4& ExtentsA, const struct FVector4& ExtentsB, struct FVector4* CombinedExtents)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LandmassBlueprintFunctionLibrary", "CombineWorldExtents");

	Params::LandmassBlueprintFunctionLibrary_CombineWorldExtents Parms{};

	Parms.ExtentsA = std::move(ExtentsA);
	Parms.ExtentsB = std::move(ExtentsB);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (CombinedExtents != nullptr)
		*CombinedExtents = std::move(Parms.CombinedExtents);
}


// Function LandmassEditor.LandmassBlueprintFunctionLibrary.ForceUpdateTexture
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UTexture*                         InTexture                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULandmassBlueprintFunctionLibrary::ForceUpdateTexture(class UTexture* InTexture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LandmassBlueprintFunctionLibrary", "ForceUpdateTexture");

	Params::LandmassBlueprintFunctionLibrary_ForceUpdateTexture Parms{};

	Parms.InTexture = InTexture;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LandmassEditor.LandmassBlueprintFunctionLibrary.GetCursorWorldRay
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          CameraLocation                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          RayOrigin                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          RayDirection                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULandmassBlueprintFunctionLibrary::GetCursorWorldRay(struct FVector* CameraLocation, struct FVector* RayOrigin, struct FVector* RayDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LandmassBlueprintFunctionLibrary", "GetCursorWorldRay");

	Params::LandmassBlueprintFunctionLibrary_GetCursorWorldRay Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (CameraLocation != nullptr)
		*CameraLocation = std::move(Parms.CameraLocation);

	if (RayOrigin != nullptr)
		*RayOrigin = std::move(Parms.RayOrigin);

	if (RayDirection != nullptr)
		*RayDirection = std::move(Parms.RayDirection);

	return Parms.ReturnValue;
}


// Function LandmassEditor.LandmassBlueprintFunctionLibrary.WorldExtentsToCanvasCoordinates
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector4                         WorldExtents                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLandmassLandscapeInfo           LandscapeInfo                                          (Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector2D                        ScreenPosition                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ScreenSize                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        CoordinatePosition                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        CoordinateSize                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULandmassBlueprintFunctionLibrary::WorldExtentsToCanvasCoordinates(const struct FVector4& WorldExtents, const struct FLandmassLandscapeInfo& LandscapeInfo, struct FVector2D* ScreenPosition, struct FVector2D* ScreenSize, struct FVector2D* CoordinatePosition, struct FVector2D* CoordinateSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LandmassBlueprintFunctionLibrary", "WorldExtentsToCanvasCoordinates");

	Params::LandmassBlueprintFunctionLibrary_WorldExtentsToCanvasCoordinates Parms{};

	Parms.WorldExtents = std::move(WorldExtents);
	Parms.LandscapeInfo = std::move(LandscapeInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ScreenPosition != nullptr)
		*ScreenPosition = std::move(Parms.ScreenPosition);

	if (ScreenSize != nullptr)
		*ScreenSize = std::move(Parms.ScreenSize);

	if (CoordinatePosition != nullptr)
		*CoordinatePosition = std::move(Parms.CoordinatePosition);

	if (CoordinateSize != nullptr)
		*CoordinateSize = std::move(Parms.CoordinateSize);
}


// Function LandmassEditor.LandmassErosionBrushBase.ActorSelectionChanged
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bSelected                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ALandmassErosionBrushBase::ActorSelectionChanged(bool bSelected)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LandmassErosionBrushBase", "ActorSelectionChanged");

	Params::LandmassErosionBrushBase_ActorSelectionChanged Parms{};

	Parms.bSelected = bSelected;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LandmassEditor.LandmassErosionBrushBase.GetLandscape
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ALandscape*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ALandscape* ALandmassErosionBrushBase::GetLandscape()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LandmassErosionBrushBase", "GetLandscape");

	Params::LandmassErosionBrushBase_GetLandscape Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LandmassEditor.LandmassErosionBrushBase.SetTargetLandscape
// (Native, Public, BlueprintCallable)
// Parameters:
// class ALandscape*                       InOwningLandscape                                      (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ALandmassErosionBrushBase::SetTargetLandscape(class ALandscape* InOwningLandscape)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LandmassErosionBrushBase", "SetTargetLandscape");

	Params::LandmassErosionBrushBase_SetTargetLandscape Parms{};

	Parms.InOwningLandscape = InOwningLandscape;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LandmassEditor.LandmassManagerBase.ActorSelectionChanged
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bSelected                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ALandmassManagerBase::ActorSelectionChanged(bool bSelected)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LandmassManagerBase", "ActorSelectionChanged");

	Params::LandmassManagerBase_ActorSelectionChanged Parms{};

	Parms.bSelected = bSelected;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LandmassEditor.LandmassManagerBase.AddBrushToArray
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ALandmassActor*                   BrushToAdd                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ALandmassManagerBase::AddBrushToArray(class ALandmassActor* BrushToAdd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LandmassManagerBase", "AddBrushToArray");

	Params::LandmassManagerBase_AddBrushToArray Parms{};

	Parms.BrushToAdd = BrushToAdd;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LandmassEditor.LandmassManagerBase.AddBrushToTree
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class ALandmassActor*                   BrushToAdd                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector4                         InExtents                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    InMapToWholeLandscape                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector4                         ModifiedExtents                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class ALandmassActor*>           InvalidatedBrushes                                     (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<int32>                           ModifiedNodes                                          (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void ALandmassManagerBase::AddBrushToTree(class ALandmassActor* BrushToAdd, const struct FVector4& InExtents, bool InMapToWholeLandscape, struct FVector4* ModifiedExtents, TArray<class ALandmassActor*>* InvalidatedBrushes, TArray<int32>* ModifiedNodes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LandmassManagerBase", "AddBrushToTree");

	Params::LandmassManagerBase_AddBrushToTree Parms{};

	Parms.BrushToAdd = BrushToAdd;
	Parms.InExtents = std::move(InExtents);
	Parms.InMapToWholeLandscape = InMapToWholeLandscape;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ModifiedExtents != nullptr)
		*ModifiedExtents = std::move(Parms.ModifiedExtents);

	if (InvalidatedBrushes != nullptr)
		*InvalidatedBrushes = std::move(Parms.InvalidatedBrushes);

	if (ModifiedNodes != nullptr)
		*ModifiedNodes = std::move(Parms.ModifiedNodes);
}


// Function LandmassEditor.LandmassManagerBase.ConsolidateNodes
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<int32>                           NodesToConsolidate                                     (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void ALandmassManagerBase::ConsolidateNodes(TArray<int32>* NodesToConsolidate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LandmassManagerBase", "ConsolidateNodes");

	Params::LandmassManagerBase_ConsolidateNodes Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (NodesToConsolidate != nullptr)
		*NodesToConsolidate = std::move(Parms.NodesToConsolidate);
}


// Function LandmassEditor.LandmassManagerBase.DrawBrushMaterial
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ALandmassActor*                   Brush                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*               BrushMaterial                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ALandmassManagerBase::DrawBrushMaterial(class ALandmassActor* Brush, class UMaterialInterface* BrushMaterial)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LandmassManagerBase", "DrawBrushMaterial");

	Params::LandmassManagerBase_DrawBrushMaterial Parms{};

	Parms.Brush = Brush;
	Parms.BrushMaterial = BrushMaterial;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LandmassEditor.LandmassManagerBase.GetActorsWithinModifiedNodes
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<int32>                           InModifiedNodes                                        (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<class ALandmassActor*>           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class ALandmassActor*> ALandmassManagerBase::GetActorsWithinModifiedNodes(TArray<int32>* InModifiedNodes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LandmassManagerBase", "GetActorsWithinModifiedNodes");

	Params::LandmassManagerBase_GetActorsWithinModifiedNodes Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (InModifiedNodes != nullptr)
		*InModifiedNodes = std::move(Parms.InModifiedNodes);

	return Parms.ReturnValue;
}


// Function LandmassEditor.LandmassManagerBase.GetLandscape
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ALandscape*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ALandscape* ALandmassManagerBase::GetLandscape()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LandmassManagerBase", "GetLandscape");

	Params::LandmassManagerBase_GetLandscape Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LandmassEditor.LandmassManagerBase.GetNodesWithinExtents
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector4                         InExtents                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<int32>                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<int32> ALandmassManagerBase::GetNodesWithinExtents(struct FVector4* InExtents)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LandmassManagerBase", "GetNodesWithinExtents");

	Params::LandmassManagerBase_GetNodesWithinExtents Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (InExtents != nullptr)
		*InExtents = std::move(Parms.InExtents);

	return Parms.ReturnValue;
}


// Function LandmassEditor.LandmassManagerBase.LaunchLandmassEditor
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ALandmassActor*                   BrushRequestingEditor                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ALandmassManagerBase::LaunchLandmassEditor(class ALandmassActor* BrushRequestingEditor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LandmassManagerBase", "LaunchLandmassEditor");

	Params::LandmassManagerBase_LaunchLandmassEditor Parms{};

	Parms.BrushRequestingEditor = BrushRequestingEditor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LandmassEditor.LandmassManagerBase.PopulateNodeTree
// (Final, Native, Public, BlueprintCallable)

void ALandmassManagerBase::PopulateNodeTree()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LandmassManagerBase", "PopulateNodeTree");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LandmassEditor.LandmassManagerBase.RemoveBrushFromTree
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ALandmassActor*                   BrushToRemove                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<int32>                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<int32> ALandmassManagerBase::RemoveBrushFromTree(class ALandmassActor* BrushToRemove)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LandmassManagerBase", "RemoveBrushFromTree");

	Params::LandmassManagerBase_RemoveBrushFromTree Parms{};

	Parms.BrushToRemove = BrushToRemove;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LandmassEditor.LandmassManagerBase.RequestUpdateFromBrush
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ALandmassActor*                   BrushRequestingUpdate                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ALandmassManagerBase::RequestUpdateFromBrush(class ALandmassActor* BrushRequestingUpdate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LandmassManagerBase", "RequestUpdateFromBrush");

	Params::LandmassManagerBase_RequestUpdateFromBrush Parms{};

	Parms.BrushRequestingUpdate = BrushRequestingUpdate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LandmassEditor.LandmassManagerBase.SetCaptureBoundaryNormals
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInCaptureBoundaryNormals                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ALandmassManagerBase::SetCaptureBoundaryNormals(bool bInCaptureBoundaryNormals)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LandmassManagerBase", "SetCaptureBoundaryNormals");

	Params::LandmassManagerBase_SetCaptureBoundaryNormals Parms{};

	Parms.bInCaptureBoundaryNormals = bInCaptureBoundaryNormals;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LandmassEditor.LandmassManagerBase.SetTargetLandscape
// (Native, Public, BlueprintCallable)
// Parameters:
// class ALandscape*                       InOwningLandscape                                      (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ALandmassManagerBase::SetTargetLandscape(class ALandscape* InOwningLandscape)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LandmassManagerBase", "SetTargetLandscape");

	Params::LandmassManagerBase_SetTargetLandscape Parms{};

	Parms.InOwningLandscape = InOwningLandscape;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LandmassEditor.LandmassManagerBase.SortBrushes
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<class ALandmassActor*>           BrushArrayToMatch                                      (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<class ALandmassActor*>           ActorsToSort                                           (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<class ALandmassActor*>           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class ALandmassActor*> ALandmassManagerBase::SortBrushes(const TArray<class ALandmassActor*>& BrushArrayToMatch, const TArray<class ALandmassActor*>& ActorsToSort)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LandmassManagerBase", "SortBrushes");

	Params::LandmassManagerBase_SortBrushes Parms{};

	Parms.BrushArrayToMatch = std::move(BrushArrayToMatch);
	Parms.ActorsToSort = std::move(ActorsToSort);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LandmassEditor.LandmassManagerBase.TogglePreviewMode
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEnablePreviewMode                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ALandmassManagerBase::TogglePreviewMode(bool bEnablePreviewMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LandmassManagerBase", "TogglePreviewMode");

	Params::LandmassManagerBase_TogglePreviewMode Parms{};

	Parms.bEnablePreviewMode = bEnablePreviewMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LandmassEditor.LandmassManagerBase.UpdateChildDataCounts
// (Final, Native, Public, BlueprintCallable)

void ALandmassManagerBase::UpdateChildDataCounts()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LandmassManagerBase", "UpdateChildDataCounts");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}

}

