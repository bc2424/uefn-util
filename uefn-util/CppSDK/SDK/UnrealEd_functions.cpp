#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UnrealEd

#include "Basic.hpp"

#include "UnrealEd_classes.hpp"
#include "UnrealEd_parameters.hpp"


namespace SDK
{

// Function UnrealEd.Factory.ScriptFactoryCanImport
// (RequiredAPI, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFactory::ScriptFactoryCanImport(const class FString& Filename)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Factory", "ScriptFactoryCanImport");

	Params::Factory_ScriptFactoryCanImport Parms{};

	Parms.Filename = std::move(Filename);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function UnrealEd.Factory.ScriptFactoryCreateFile
// (RequiredAPI, Event, Public, BlueprintEvent)
// Parameters:
// class UAssetImportTask*                 InTask                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFactory::ScriptFactoryCreateFile(class UAssetImportTask* InTask)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Factory", "ScriptFactoryCreateFile");

	Params::Factory_ScriptFactoryCreateFile Parms{};

	Parms.InTask = InTask;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function UnrealEd.ActorGroupingUtils.Get
// (Final, RequiredAPI, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UActorGroupingUtils*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UActorGroupingUtils* UActorGroupingUtils::Get()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ActorGroupingUtils", "Get");

	Params::ActorGroupingUtils_Get Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.ActorGroupingUtils.IsGroupingActive
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UActorGroupingUtils::IsGroupingActive()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ActorGroupingUtils", "IsGroupingActive");

	Params::ActorGroupingUtils_IsGroupingActive Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.ActorGroupingUtils.SetGroupingActive
// (Final, RequiredAPI, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    bInGroupingActive                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActorGroupingUtils::SetGroupingActive(bool bInGroupingActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ActorGroupingUtils", "SetGroupingActive");

	Params::ActorGroupingUtils_SetGroupingActive Parms{};

	Parms.bInGroupingActive = bInGroupingActive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealEd.ActorGroupingUtils.AddSelectedToGroup
// (RequiredAPI, Native, Public, BlueprintCallable)

void UActorGroupingUtils::AddSelectedToGroup()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActorGroupingUtils", "AddSelectedToGroup");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealEd.ActorGroupingUtils.GroupActors
// (RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class AActor*>                   ActorsToGroup                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class AGroupActor*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGroupActor* UActorGroupingUtils::GroupActors(const TArray<class AActor*>& ActorsToGroup)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActorGroupingUtils", "GroupActors");

	Params::ActorGroupingUtils_GroupActors Parms{};

	Parms.ActorsToGroup = std::move(ActorsToGroup);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.ActorGroupingUtils.GroupSelected
// (RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// class AGroupActor*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGroupActor* UActorGroupingUtils::GroupSelected()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActorGroupingUtils", "GroupSelected");

	Params::ActorGroupingUtils_GroupSelected Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.ActorGroupingUtils.LockSelectedGroups
// (RequiredAPI, Native, Public, BlueprintCallable)

void UActorGroupingUtils::LockSelectedGroups()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActorGroupingUtils", "LockSelectedGroups");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealEd.ActorGroupingUtils.RemoveSelectedFromGroup
// (RequiredAPI, Native, Public, BlueprintCallable)

void UActorGroupingUtils::RemoveSelectedFromGroup()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActorGroupingUtils", "RemoveSelectedFromGroup");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealEd.ActorGroupingUtils.UngroupActors
// (RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class AActor*>                   ActorsToUngroup                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UActorGroupingUtils::UngroupActors(const TArray<class AActor*>& ActorsToUngroup)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActorGroupingUtils", "UngroupActors");

	Params::ActorGroupingUtils_UngroupActors Parms{};

	Parms.ActorsToUngroup = std::move(ActorsToUngroup);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealEd.ActorGroupingUtils.UngroupSelected
// (RequiredAPI, Native, Public, BlueprintCallable)

void UActorGroupingUtils::UngroupSelected()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActorGroupingUtils", "UngroupSelected");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealEd.ActorGroupingUtils.UnlockSelectedGroups
// (RequiredAPI, Native, Public, BlueprintCallable)

void UActorGroupingUtils::UnlockSelectedGroups()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActorGroupingUtils", "UnlockSelectedGroups");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealEd.ActorGroupingUtils.CanGroupActors
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class AActor*>                   ActorsToGroup                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UActorGroupingUtils::CanGroupActors(const TArray<class AActor*>& ActorsToGroup) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActorGroupingUtils", "CanGroupActors");

	Params::ActorGroupingUtils_CanGroupActors Parms{};

	Parms.ActorsToGroup = std::move(ActorsToGroup);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.ActorGroupingUtils.CanGroupSelectedActors
// (Final, RequiredAPI, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UActorGroupingUtils::CanGroupSelectedActors() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActorGroupingUtils", "CanGroupSelectedActors");

	Params::ActorGroupingUtils_CanGroupSelectedActors Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.EditorAssetSubsystem.AddOnExtractAssetFromFile
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(TArray<class FString>& Files, TArray<struct FAssetData>* AssetDataArray)>Delegate                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEditorAssetSubsystem::AddOnExtractAssetFromFile(TDelegate<void(TArray<class FString>& Files, TArray<struct FAssetData>* AssetDataArray)> Delegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditorAssetSubsystem", "AddOnExtractAssetFromFile");

	Params::EditorAssetSubsystem_AddOnExtractAssetFromFile Parms{};

	Parms.Delegate = Delegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealEd.EditorAssetSubsystem.CheckoutAsset
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           AssetToCheckout                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEditorAssetSubsystem::CheckoutAsset(const class FString& AssetToCheckout)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditorAssetSubsystem", "CheckoutAsset");

	Params::EditorAssetSubsystem_CheckoutAsset Parms{};

	Parms.AssetToCheckout = std::move(AssetToCheckout);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.EditorAssetSubsystem.CheckoutDirectory
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           DirectoryPath                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bRecursive                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEditorAssetSubsystem::CheckoutDirectory(const class FString& DirectoryPath, bool bRecursive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditorAssetSubsystem", "CheckoutDirectory");

	Params::EditorAssetSubsystem_CheckoutDirectory Parms{};

	Parms.DirectoryPath = std::move(DirectoryPath);
	Parms.bRecursive = bRecursive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.EditorAssetSubsystem.CheckoutLoadedAsset
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          AssetToCheckout                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEditorAssetSubsystem::CheckoutLoadedAsset(class UObject* AssetToCheckout)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditorAssetSubsystem", "CheckoutLoadedAsset");

	Params::EditorAssetSubsystem_CheckoutLoadedAsset Parms{};

	Parms.AssetToCheckout = AssetToCheckout;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.EditorAssetSubsystem.CheckoutLoadedAssets
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class UObject*>                  AssetsToCheckout                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEditorAssetSubsystem::CheckoutLoadedAssets(const TArray<class UObject*>& AssetsToCheckout)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditorAssetSubsystem", "CheckoutLoadedAssets");

	Params::EditorAssetSubsystem_CheckoutLoadedAssets Parms{};

	Parms.AssetsToCheckout = std::move(AssetsToCheckout);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.EditorAssetSubsystem.ConsolidateAssets
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          AssetToConsolidateTo                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UObject*>                  AssetsToConsolidate                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEditorAssetSubsystem::ConsolidateAssets(class UObject* AssetToConsolidateTo, const TArray<class UObject*>& AssetsToConsolidate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditorAssetSubsystem", "ConsolidateAssets");

	Params::EditorAssetSubsystem_ConsolidateAssets Parms{};

	Parms.AssetToConsolidateTo = AssetToConsolidateTo;
	Parms.AssetsToConsolidate = std::move(AssetsToConsolidate);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.EditorAssetSubsystem.DeleteAsset
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           AssetPathToDelete                                      (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEditorAssetSubsystem::DeleteAsset(const class FString& AssetPathToDelete)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditorAssetSubsystem", "DeleteAsset");

	Params::EditorAssetSubsystem_DeleteAsset Parms{};

	Parms.AssetPathToDelete = std::move(AssetPathToDelete);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.EditorAssetSubsystem.DeleteDirectory
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           DirectoryPath                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEditorAssetSubsystem::DeleteDirectory(const class FString& DirectoryPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditorAssetSubsystem", "DeleteDirectory");

	Params::EditorAssetSubsystem_DeleteDirectory Parms{};

	Parms.DirectoryPath = std::move(DirectoryPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.EditorAssetSubsystem.DeleteLoadedAsset
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          AssetToDelete                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEditorAssetSubsystem::DeleteLoadedAsset(class UObject* AssetToDelete)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditorAssetSubsystem", "DeleteLoadedAsset");

	Params::EditorAssetSubsystem_DeleteLoadedAsset Parms{};

	Parms.AssetToDelete = AssetToDelete;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.EditorAssetSubsystem.DeleteLoadedAssets
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class UObject*>                  AssetsToDelete                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEditorAssetSubsystem::DeleteLoadedAssets(const TArray<class UObject*>& AssetsToDelete)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditorAssetSubsystem", "DeleteLoadedAssets");

	Params::EditorAssetSubsystem_DeleteLoadedAssets Parms{};

	Parms.AssetsToDelete = std::move(AssetsToDelete);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.EditorAssetSubsystem.DoAssetsExist
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FString>                   AssetPaths                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEditorAssetSubsystem::DoAssetsExist(const TArray<class FString>& AssetPaths)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditorAssetSubsystem", "DoAssetsExist");

	Params::EditorAssetSubsystem_DoAssetsExist Parms{};

	Parms.AssetPaths = std::move(AssetPaths);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.EditorAssetSubsystem.DoesAssetExist
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           AssetPath                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEditorAssetSubsystem::DoesAssetExist(const class FString& AssetPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditorAssetSubsystem", "DoesAssetExist");

	Params::EditorAssetSubsystem_DoesAssetExist Parms{};

	Parms.AssetPath = std::move(AssetPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.EditorAssetSubsystem.DoesDirectoryContainAssets
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           DirectoryPath                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bRecursive                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEditorAssetSubsystem::DoesDirectoryContainAssets(const class FString& DirectoryPath, bool bRecursive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditorAssetSubsystem", "DoesDirectoryContainAssets");

	Params::EditorAssetSubsystem_DoesDirectoryContainAssets Parms{};

	Parms.DirectoryPath = std::move(DirectoryPath);
	Parms.bRecursive = bRecursive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.EditorAssetSubsystem.DoesDirectoryExist
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           DirectoryPath                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEditorAssetSubsystem::DoesDirectoryExist(const class FString& DirectoryPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditorAssetSubsystem", "DoesDirectoryExist");

	Params::EditorAssetSubsystem_DoesDirectoryExist Parms{};

	Parms.DirectoryPath = std::move(DirectoryPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.EditorAssetSubsystem.DuplicateAsset
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           SourceAssetPath                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           DestinationAssetPath                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UObject* UEditorAssetSubsystem::DuplicateAsset(const class FString& SourceAssetPath, const class FString& DestinationAssetPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditorAssetSubsystem", "DuplicateAsset");

	Params::EditorAssetSubsystem_DuplicateAsset Parms{};

	Parms.SourceAssetPath = std::move(SourceAssetPath);
	Parms.DestinationAssetPath = std::move(DestinationAssetPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.EditorAssetSubsystem.DuplicateDirectory
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           SourceDirectoryPath                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           DestinationDirectoryPath                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEditorAssetSubsystem::DuplicateDirectory(const class FString& SourceDirectoryPath, const class FString& DestinationDirectoryPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditorAssetSubsystem", "DuplicateDirectory");

	Params::EditorAssetSubsystem_DuplicateDirectory Parms{};

	Parms.SourceDirectoryPath = std::move(SourceDirectoryPath);
	Parms.DestinationDirectoryPath = std::move(DestinationDirectoryPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.EditorAssetSubsystem.DuplicateLoadedAsset
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          SourceAsset                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           DestinationAssetPath                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UObject* UEditorAssetSubsystem::DuplicateLoadedAsset(class UObject* SourceAsset, const class FString& DestinationAssetPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditorAssetSubsystem", "DuplicateLoadedAsset");

	Params::EditorAssetSubsystem_DuplicateLoadedAsset Parms{};

	Parms.SourceAsset = SourceAsset;
	Parms.DestinationAssetPath = std::move(DestinationAssetPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.EditorAssetSubsystem.FindAssetData
// (Final, RequiredAPI, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class FString                           AssetPath                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FAssetData                       ReturnValue                                            (Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FAssetData UEditorAssetSubsystem::FindAssetData(const class FString& AssetPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditorAssetSubsystem", "FindAssetData");

	Params::EditorAssetSubsystem_FindAssetData Parms{};

	Parms.AssetPath = std::move(AssetPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.EditorAssetSubsystem.FindPackageReferencersForAsset
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           AssetPath                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bLoadAssetsToConfirm                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> UEditorAssetSubsystem::FindPackageReferencersForAsset(const class FString& AssetPath, bool bLoadAssetsToConfirm)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditorAssetSubsystem", "FindPackageReferencersForAsset");

	Params::EditorAssetSubsystem_FindPackageReferencersForAsset Parms{};

	Parms.AssetPath = std::move(AssetPath);
	Parms.bLoadAssetsToConfirm = bLoadAssetsToConfirm;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.EditorAssetSubsystem.GetAssetFilenameLengthForCooking
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           AssetPath                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UEditorAssetSubsystem::GetAssetFilenameLengthForCooking(const class FString& AssetPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditorAssetSubsystem", "GetAssetFilenameLengthForCooking");

	Params::EditorAssetSubsystem_GetAssetFilenameLengthForCooking Parms{};

	Parms.AssetPath = std::move(AssetPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.EditorAssetSubsystem.GetLoadedAssetFilenameLengthForCooking
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Asset                                                  (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UEditorAssetSubsystem::GetLoadedAssetFilenameLengthForCooking(const class UObject* Asset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditorAssetSubsystem", "GetLoadedAssetFilenameLengthForCooking");

	Params::EditorAssetSubsystem_GetLoadedAssetFilenameLengthForCooking Parms{};

	Parms.Asset = Asset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.EditorAssetSubsystem.GetMetadataTag
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Tag                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UEditorAssetSubsystem::GetMetadataTag(class UObject* Object, class FName Tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditorAssetSubsystem", "GetMetadataTag");

	Params::EditorAssetSubsystem_GetMetadataTag Parms{};

	Parms.Object = Object;
	Parms.Tag = Tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.EditorAssetSubsystem.GetMetadataTagValues
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<class FName, class FString>        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

TMap<class FName, class FString> UEditorAssetSubsystem::GetMetadataTagValues(class UObject* Object)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditorAssetSubsystem", "GetMetadataTagValues");

	Params::EditorAssetSubsystem_GetMetadataTagValues Parms{};

	Parms.Object = Object;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.EditorAssetSubsystem.GetPathNameForLoadedAsset
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          LoadedAsset                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UEditorAssetSubsystem::GetPathNameForLoadedAsset(class UObject* LoadedAsset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditorAssetSubsystem", "GetPathNameForLoadedAsset");

	Params::EditorAssetSubsystem_GetPathNameForLoadedAsset Parms{};

	Parms.LoadedAsset = LoadedAsset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.EditorAssetSubsystem.GetTagValues
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           AssetPath                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<class FName, class FString>        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

TMap<class FName, class FString> UEditorAssetSubsystem::GetTagValues(const class FString& AssetPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditorAssetSubsystem", "GetTagValues");

	Params::EditorAssetSubsystem_GetTagValues Parms{};

	Parms.AssetPath = std::move(AssetPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.EditorAssetSubsystem.ListAssets
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           DirectoryPath                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bRecursive                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIncludeFolder                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> UEditorAssetSubsystem::ListAssets(const class FString& DirectoryPath, bool bRecursive, bool bIncludeFolder)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditorAssetSubsystem", "ListAssets");

	Params::EditorAssetSubsystem_ListAssets Parms{};

	Parms.DirectoryPath = std::move(DirectoryPath);
	Parms.bRecursive = bRecursive;
	Parms.bIncludeFolder = bIncludeFolder;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.EditorAssetSubsystem.ListAssetsByTagValue
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             TagName                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           TagValue                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> UEditorAssetSubsystem::ListAssetsByTagValue(class FName TagName, const class FString& TagValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditorAssetSubsystem", "ListAssetsByTagValue");

	Params::EditorAssetSubsystem_ListAssetsByTagValue Parms{};

	Parms.TagName = TagName;
	Parms.TagValue = std::move(TagValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.EditorAssetSubsystem.LoadAsset
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           AssetPath                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UObject* UEditorAssetSubsystem::LoadAsset(const class FString& AssetPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditorAssetSubsystem", "LoadAsset");

	Params::EditorAssetSubsystem_LoadAsset Parms{};

	Parms.AssetPath = std::move(AssetPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.EditorAssetSubsystem.LoadBlueprintClass
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           AssetPath                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UClass*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UClass* UEditorAssetSubsystem::LoadBlueprintClass(const class FString& AssetPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditorAssetSubsystem", "LoadBlueprintClass");

	Params::EditorAssetSubsystem_LoadBlueprintClass Parms{};

	Parms.AssetPath = std::move(AssetPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.EditorAssetSubsystem.MakeDirectory
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           DirectoryPath                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEditorAssetSubsystem::MakeDirectory(const class FString& DirectoryPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditorAssetSubsystem", "MakeDirectory");

	Params::EditorAssetSubsystem_MakeDirectory Parms{};

	Parms.DirectoryPath = std::move(DirectoryPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.EditorAssetSubsystem.RemoveMetadataTag
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Tag                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEditorAssetSubsystem::RemoveMetadataTag(class UObject* Object, class FName Tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditorAssetSubsystem", "RemoveMetadataTag");

	Params::EditorAssetSubsystem_RemoveMetadataTag Parms{};

	Parms.Object = Object;
	Parms.Tag = Tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealEd.EditorAssetSubsystem.RemoveOnExtractAssetFromFile
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(TArray<class FString>& Files, TArray<struct FAssetData>* AssetDataArray)>Delegate                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEditorAssetSubsystem::RemoveOnExtractAssetFromFile(TDelegate<void(TArray<class FString>& Files, TArray<struct FAssetData>* AssetDataArray)> Delegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditorAssetSubsystem", "RemoveOnExtractAssetFromFile");

	Params::EditorAssetSubsystem_RemoveOnExtractAssetFromFile Parms{};

	Parms.Delegate = Delegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealEd.EditorAssetSubsystem.RenameAsset
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           SourceAssetPath                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           DestinationAssetPath                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEditorAssetSubsystem::RenameAsset(const class FString& SourceAssetPath, const class FString& DestinationAssetPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditorAssetSubsystem", "RenameAsset");

	Params::EditorAssetSubsystem_RenameAsset Parms{};

	Parms.SourceAssetPath = std::move(SourceAssetPath);
	Parms.DestinationAssetPath = std::move(DestinationAssetPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.EditorAssetSubsystem.RenameDirectory
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           SourceDirectoryPath                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           DestinationDirectoryPath                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEditorAssetSubsystem::RenameDirectory(const class FString& SourceDirectoryPath, const class FString& DestinationDirectoryPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditorAssetSubsystem", "RenameDirectory");

	Params::EditorAssetSubsystem_RenameDirectory Parms{};

	Parms.SourceDirectoryPath = std::move(SourceDirectoryPath);
	Parms.DestinationDirectoryPath = std::move(DestinationDirectoryPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.EditorAssetSubsystem.RenameLoadedAsset
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          SourceAsset                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           DestinationAssetPath                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEditorAssetSubsystem::RenameLoadedAsset(class UObject* SourceAsset, const class FString& DestinationAssetPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditorAssetSubsystem", "RenameLoadedAsset");

	Params::EditorAssetSubsystem_RenameLoadedAsset Parms{};

	Parms.SourceAsset = SourceAsset;
	Parms.DestinationAssetPath = std::move(DestinationAssetPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.EditorAssetSubsystem.SaveAsset
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           AssetToSave                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bOnlyIfIsDirty                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEditorAssetSubsystem::SaveAsset(const class FString& AssetToSave, bool bOnlyIfIsDirty)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditorAssetSubsystem", "SaveAsset");

	Params::EditorAssetSubsystem_SaveAsset Parms{};

	Parms.AssetToSave = std::move(AssetToSave);
	Parms.bOnlyIfIsDirty = bOnlyIfIsDirty;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.EditorAssetSubsystem.SaveDirectory
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           DirectoryPath                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bOnlyIfIsDirty                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bRecursive                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEditorAssetSubsystem::SaveDirectory(const class FString& DirectoryPath, bool bOnlyIfIsDirty, bool bRecursive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditorAssetSubsystem", "SaveDirectory");

	Params::EditorAssetSubsystem_SaveDirectory Parms{};

	Parms.DirectoryPath = std::move(DirectoryPath);
	Parms.bOnlyIfIsDirty = bOnlyIfIsDirty;
	Parms.bRecursive = bRecursive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.EditorAssetSubsystem.SaveLoadedAsset
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          AssetToSave                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bOnlyIfIsDirty                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEditorAssetSubsystem::SaveLoadedAsset(class UObject* AssetToSave, bool bOnlyIfIsDirty)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditorAssetSubsystem", "SaveLoadedAsset");

	Params::EditorAssetSubsystem_SaveLoadedAsset Parms{};

	Parms.AssetToSave = AssetToSave;
	Parms.bOnlyIfIsDirty = bOnlyIfIsDirty;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.EditorAssetSubsystem.SaveLoadedAssets
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class UObject*>                  AssetsToSave                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bOnlyIfIsDirty                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEditorAssetSubsystem::SaveLoadedAssets(const TArray<class UObject*>& AssetsToSave, bool bOnlyIfIsDirty)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditorAssetSubsystem", "SaveLoadedAssets");

	Params::EditorAssetSubsystem_SaveLoadedAssets Parms{};

	Parms.AssetsToSave = std::move(AssetsToSave);
	Parms.bOnlyIfIsDirty = bOnlyIfIsDirty;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.EditorAssetSubsystem.SetMetadataTag
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Tag                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Value                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEditorAssetSubsystem::SetMetadataTag(class UObject* Object, class FName Tag, const class FString& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditorAssetSubsystem", "SetMetadataTag");

	Params::EditorAssetSubsystem_SetMetadataTag Parms{};

	Parms.Object = Object;
	Parms.Tag = Tag;
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealEd.AssetEditorSubsystem.CloseAllEditorsForAsset
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Asset                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UAssetEditorSubsystem::CloseAllEditorsForAsset(class UObject* Asset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AssetEditorSubsystem", "CloseAllEditorsForAsset");

	Params::AssetEditorSubsystem_CloseAllEditorsForAsset Parms{};

	Parms.Asset = Asset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.AssetEditorSubsystem.OpenEditorForAssets
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class UObject*>                  Assets                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// EAssetTypeActivationOpenedMethod        OpenedMethod                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAssetEditorSubsystem::OpenEditorForAssets(const TArray<class UObject*>& Assets, const EAssetTypeActivationOpenedMethod OpenedMethod)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AssetEditorSubsystem", "OpenEditorForAssets");

	Params::AssetEditorSubsystem_OpenEditorForAssets Parms{};

	Parms.Assets = std::move(Assets);
	Parms.OpenedMethod = OpenedMethod;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.AssetEditorToolkitMenuContext.GetEditingObjects
// (Final, RequiredAPI, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class UObject*>                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UObject*> UAssetEditorToolkitMenuContext::GetEditingObjects() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AssetEditorToolkitMenuContext", "GetEditingObjects");

	Params::AssetEditorToolkitMenuContext_GetEditingObjects Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.AssetImportTask.GetObjects
// (Final, RequiredAPI, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<class UObject*>            ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<class UObject*> UAssetImportTask::GetObjects() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AssetImportTask", "GetObjects");

	Params::AssetImportTask_GetObjects Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.AssetImportTask.IsAsyncImportComplete
// (Final, RequiredAPI, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAssetImportTask::IsAsyncImportComplete() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AssetImportTask", "IsAsyncImportComplete");

	Params::AssetImportTask_IsAsyncImportComplete Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.FbxImportUI.ResetToDefault
// (Final, Native, Public, BlueprintCallable)

void UFbxImportUI::ResetToDefault()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FbxImportUI", "ResetToDefault");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealEd.EditorLevelUtils.CreateNewStreamingLevel
// (Final, RequiredAPI, Native, Static, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class ULevelStreaming>      LevelStreamingClass                                    (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           NewLevelPath                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bMoveSelectedActorsIntoNewLevel                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULevelStreaming*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULevelStreaming* UEditorLevelUtils::CreateNewStreamingLevel(TSubclassOf<class ULevelStreaming> LevelStreamingClass, const class FString& NewLevelPath, bool bMoveSelectedActorsIntoNewLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorLevelUtils", "CreateNewStreamingLevel");

	Params::EditorLevelUtils_CreateNewStreamingLevel Parms{};

	Parms.LevelStreamingClass = LevelStreamingClass;
	Parms.NewLevelPath = std::move(NewLevelPath);
	Parms.bMoveSelectedActorsIntoNewLevel = bMoveSelectedActorsIntoNewLevel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.EditorLevelUtils.GetLevels
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UWorld*                           World                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class ULevel*>             ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

const TArray<class ULevel*> UEditorLevelUtils::GetLevels(class UWorld* World)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorLevelUtils", "GetLevels");

	Params::EditorLevelUtils_GetLevels Parms{};

	Parms.World = World;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.EditorLevelUtils.K2_AddLevelToWorld
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UWorld*                           World                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           LevelPackageName                                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class ULevelStreaming>      LevelStreamingClass                                    (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULevelStreaming*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULevelStreaming* UEditorLevelUtils::K2_AddLevelToWorld(class UWorld* World, const class FString& LevelPackageName, TSubclassOf<class ULevelStreaming> LevelStreamingClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorLevelUtils", "K2_AddLevelToWorld");

	Params::EditorLevelUtils_K2_AddLevelToWorld Parms{};

	Parms.World = World;
	Parms.LevelPackageName = std::move(LevelPackageName);
	Parms.LevelStreamingClass = LevelStreamingClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.EditorLevelUtils.K2_AddLevelToWorldWithTransform
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UWorld*                           World                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           LevelPackageName                                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class ULevelStreaming>      LevelStreamingClass                                    (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       LevelTransform                                         (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULevelStreaming*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULevelStreaming* UEditorLevelUtils::K2_AddLevelToWorldWithTransform(class UWorld* World, const class FString& LevelPackageName, TSubclassOf<class ULevelStreaming> LevelStreamingClass, const struct FTransform& LevelTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorLevelUtils", "K2_AddLevelToWorldWithTransform");

	Params::EditorLevelUtils_K2_AddLevelToWorldWithTransform Parms{};

	Parms.World = World;
	Parms.LevelPackageName = std::move(LevelPackageName);
	Parms.LevelStreamingClass = LevelStreamingClass;
	Parms.LevelTransform = std::move(LevelTransform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.EditorLevelUtils.K2_RemoveLevelFromWorld
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ULevel*                           InLevel                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bClearSelection                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bResetTransactionBuffer                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEditorLevelUtils::K2_RemoveLevelFromWorld(class ULevel* InLevel, bool bClearSelection, bool bResetTransactionBuffer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorLevelUtils", "K2_RemoveLevelFromWorld");

	Params::EditorLevelUtils_K2_RemoveLevelFromWorld Parms{};

	Parms.InLevel = InLevel;
	Parms.bClearSelection = bClearSelection;
	Parms.bResetTransactionBuffer = bResetTransactionBuffer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.EditorLevelUtils.MakeLevelCurrent
// (Final, RequiredAPI, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ULevelStreaming*                  InStreamingLevel                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEditorLevelUtils::MakeLevelCurrent(class ULevelStreaming* InStreamingLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorLevelUtils", "MakeLevelCurrent");

	Params::EditorLevelUtils_MakeLevelCurrent Parms{};

	Parms.InStreamingLevel = InStreamingLevel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealEd.EditorLevelUtils.MoveActorsToLevel
// (Final, RequiredAPI, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class AActor*>                   ActorsToMove                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class ULevelStreaming*                  DestStreamingLevel                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bWarnAboutReferences                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bWarnAboutRenaming                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UEditorLevelUtils::MoveActorsToLevel(const TArray<class AActor*>& ActorsToMove, class ULevelStreaming* DestStreamingLevel, bool bWarnAboutReferences, bool bWarnAboutRenaming)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorLevelUtils", "MoveActorsToLevel");

	Params::EditorLevelUtils_MoveActorsToLevel Parms{};

	Parms.ActorsToMove = std::move(ActorsToMove);
	Parms.DestStreamingLevel = DestStreamingLevel;
	Parms.bWarnAboutReferences = bWarnAboutReferences;
	Parms.bWarnAboutRenaming = bWarnAboutRenaming;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.EditorLevelUtils.MoveSelectedActorsToLevel
// (Final, RequiredAPI, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ULevelStreaming*                  DestLevel                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bWarnAboutReferences                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UEditorLevelUtils::MoveSelectedActorsToLevel(class ULevelStreaming* DestLevel, bool bWarnAboutReferences)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorLevelUtils", "MoveSelectedActorsToLevel");

	Params::EditorLevelUtils_MoveSelectedActorsToLevel Parms{};

	Parms.DestLevel = DestLevel;
	Parms.bWarnAboutReferences = bWarnAboutReferences;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.EditorLevelUtils.SetLevelsVisibility
// (Final, RequiredAPI, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class ULevel*>                   Levels                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<bool>                            bShouldBeVisible                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bForceLayersVisible                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELevelVisibilityDirtyMode               ModifyMode                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEditorLevelUtils::SetLevelsVisibility(const TArray<class ULevel*>& Levels, const TArray<bool>& bShouldBeVisible, const bool bForceLayersVisible, const ELevelVisibilityDirtyMode ModifyMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorLevelUtils", "SetLevelsVisibility");

	Params::EditorLevelUtils_SetLevelsVisibility Parms{};

	Parms.Levels = std::move(Levels);
	Parms.bShouldBeVisible = std::move(bShouldBeVisible);
	Parms.bForceLayersVisible = bForceLayersVisible;
	Parms.ModifyMode = ModifyMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealEd.EditorLevelUtils.SetLevelVisibility
// (Final, RequiredAPI, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ULevel*                           Level                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bShouldBeVisible                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bForceLayersVisible                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELevelVisibilityDirtyMode               ModifyMode                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEditorLevelUtils::SetLevelVisibility(class ULevel* Level, const bool bShouldBeVisible, const bool bForceLayersVisible, const ELevelVisibilityDirtyMode ModifyMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorLevelUtils", "SetLevelVisibility");

	Params::EditorLevelUtils_SetLevelVisibility Parms{};

	Parms.Level = Level;
	Parms.bShouldBeVisible = bShouldBeVisible;
	Parms.bForceLayersVisible = bForceLayersVisible;
	Parms.ModifyMode = ModifyMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealEd.EditorActorSubsystem.ClearActorSelectionSet
// (Final, RequiredAPI, Native, Public, BlueprintCallable)

void UEditorActorSubsystem::ClearActorSelectionSet()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditorActorSubsystem", "ClearActorSelectionSet");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealEd.EditorActorSubsystem.ConvertActors
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class AActor*>                   Actors                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TSubclassOf<class AActor>               ActorClass                                             (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           StaticMeshPackagePath                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class AActor*> UEditorActorSubsystem::ConvertActors(const TArray<class AActor*>& Actors, TSubclassOf<class AActor> ActorClass, const class FString& StaticMeshPackagePath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditorActorSubsystem", "ConvertActors");

	Params::EditorActorSubsystem_ConvertActors Parms{};

	Parms.Actors = std::move(Actors);
	Parms.ActorClass = ActorClass;
	Parms.StaticMeshPackagePath = std::move(StaticMeshPackagePath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.EditorActorSubsystem.DeleteSelectedActors
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// class UWorld*                           InWorld                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEditorActorSubsystem::DeleteSelectedActors(class UWorld* InWorld)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditorActorSubsystem", "DeleteSelectedActors");

	Params::EditorActorSubsystem_DeleteSelectedActors Parms{};

	Parms.InWorld = InWorld;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealEd.EditorActorSubsystem.DestroyActor
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           ActorToDestroy                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEditorActorSubsystem::DestroyActor(class AActor* ActorToDestroy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditorActorSubsystem", "DestroyActor");

	Params::EditorActorSubsystem_DestroyActor Parms{};

	Parms.ActorToDestroy = ActorToDestroy;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.EditorActorSubsystem.DestroyActors
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class AActor*>                   ActorsToDestroy                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEditorActorSubsystem::DestroyActors(const TArray<class AActor*>& ActorsToDestroy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditorActorSubsystem", "DestroyActors");

	Params::EditorActorSubsystem_DestroyActors Parms{};

	Parms.ActorsToDestroy = std::move(ActorsToDestroy);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.EditorActorSubsystem.DuplicateActor
// (Final, RequiredAPI, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class AActor*                           ActorToDuplicate                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWorld*                           ToWorld                                                (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Offset                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UEditorActorSubsystem::DuplicateActor(class AActor* ActorToDuplicate, class UWorld* ToWorld, const struct FVector& Offset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditorActorSubsystem", "DuplicateActor");

	Params::EditorActorSubsystem_DuplicateActor Parms{};

	Parms.ActorToDuplicate = ActorToDuplicate;
	Parms.ToWorld = ToWorld;
	Parms.Offset = std::move(Offset);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.EditorActorSubsystem.DuplicateActors
// (Final, RequiredAPI, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// TArray<class AActor*>                   ActorsToDuplicate                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class UWorld*                           ToWorld                                                (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Offset                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class AActor*> UEditorActorSubsystem::DuplicateActors(const TArray<class AActor*>& ActorsToDuplicate, class UWorld* ToWorld, const struct FVector& Offset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditorActorSubsystem", "DuplicateActors");

	Params::EditorActorSubsystem_DuplicateActors Parms{};

	Parms.ActorsToDuplicate = std::move(ActorsToDuplicate);
	Parms.ToWorld = ToWorld;
	Parms.Offset = std::move(Offset);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.EditorActorSubsystem.DuplicateSelectedActors
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// class UWorld*                           InWorld                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEditorActorSubsystem::DuplicateSelectedActors(class UWorld* InWorld)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditorActorSubsystem", "DuplicateSelectedActors");

	Params::EditorActorSubsystem_DuplicateSelectedActors Parms{};

	Parms.InWorld = InWorld;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealEd.EditorActorSubsystem.GetActorReference
// (Final, RequiredAPI, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           PathToActor                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UEditorActorSubsystem::GetActorReference(const class FString& PathToActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditorActorSubsystem", "GetActorReference");

	Params::EditorActorSubsystem_GetActorReference Parms{};

	Parms.PathToActor = std::move(PathToActor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.EditorActorSubsystem.GetAllLevelActors
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// TArray<class AActor*>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class AActor*> UEditorActorSubsystem::GetAllLevelActors()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditorActorSubsystem", "GetAllLevelActors");

	Params::EditorActorSubsystem_GetAllLevelActors Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.EditorActorSubsystem.GetAllLevelActorsComponents
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// TArray<class UActorComponent*>          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<class UActorComponent*> UEditorActorSubsystem::GetAllLevelActorsComponents()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditorActorSubsystem", "GetAllLevelActorsComponents");

	Params::EditorActorSubsystem_GetAllLevelActorsComponents Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.EditorActorSubsystem.GetSelectedLevelActors
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// TArray<class AActor*>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class AActor*> UEditorActorSubsystem::GetSelectedLevelActors()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditorActorSubsystem", "GetSelectedLevelActors");

	Params::EditorActorSubsystem_GetSelectedLevelActors Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.EditorActorSubsystem.InvertSelection
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// class UWorld*                           InWorld                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEditorActorSubsystem::InvertSelection(class UWorld* InWorld)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditorActorSubsystem", "InvertSelection");

	Params::EditorActorSubsystem_InvertSelection Parms{};

	Parms.InWorld = InWorld;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealEd.EditorActorSubsystem.SelectAll
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// class UWorld*                           InWorld                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEditorActorSubsystem::SelectAll(class UWorld* InWorld)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditorActorSubsystem", "SelectAll");

	Params::EditorActorSubsystem_SelectAll Parms{};

	Parms.InWorld = InWorld;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealEd.EditorActorSubsystem.SelectAllChildren
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bRecurseChildren                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEditorActorSubsystem::SelectAllChildren(bool bRecurseChildren)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditorActorSubsystem", "SelectAllChildren");

	Params::EditorActorSubsystem_SelectAllChildren Parms{};

	Parms.bRecurseChildren = bRecurseChildren;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealEd.EditorActorSubsystem.SelectNothing
// (Final, RequiredAPI, Native, Public, BlueprintCallable)

void UEditorActorSubsystem::SelectNothing()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditorActorSubsystem", "SelectNothing");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealEd.EditorActorSubsystem.SetActorSelectionState
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bShouldBeSelected                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEditorActorSubsystem::SetActorSelectionState(class AActor* Actor, bool bShouldBeSelected)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditorActorSubsystem", "SetActorSelectionState");

	Params::EditorActorSubsystem_SetActorSelectionState Parms{};

	Parms.Actor = Actor;
	Parms.bShouldBeSelected = bShouldBeSelected;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealEd.EditorActorSubsystem.SetActorTransform
// (Final, RequiredAPI, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class AActor*                           InActor                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       InWorldTransform                                       (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEditorActorSubsystem::SetActorTransform(class AActor* InActor, const struct FTransform& InWorldTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditorActorSubsystem", "SetActorTransform");

	Params::EditorActorSubsystem_SetActorTransform Parms{};

	Parms.InActor = InActor;
	Parms.InWorldTransform = std::move(InWorldTransform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.EditorActorSubsystem.SetComponentTransform
// (Final, RequiredAPI, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class USceneComponent*                  InSceneComponent                                       (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       InWorldTransform                                       (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEditorActorSubsystem::SetComponentTransform(class USceneComponent* InSceneComponent, const struct FTransform& InWorldTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditorActorSubsystem", "SetComponentTransform");

	Params::EditorActorSubsystem_SetComponentTransform Parms{};

	Parms.InSceneComponent = InSceneComponent;
	Parms.InWorldTransform = std::move(InWorldTransform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.EditorActorSubsystem.SetSelectedLevelActors
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class AActor*>                   ActorsToSelect                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UEditorActorSubsystem::SetSelectedLevelActors(const TArray<class AActor*>& ActorsToSelect)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditorActorSubsystem", "SetSelectedLevelActors");

	Params::EditorActorSubsystem_SetSelectedLevelActors Parms{};

	Parms.ActorsToSelect = std::move(ActorsToSelect);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealEd.EditorActorSubsystem.SpawnActorFromClass
// (Final, RequiredAPI, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// TSubclassOf<class AActor>               ActorClass                                             (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Location                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         Rotation                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bTransient                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UEditorActorSubsystem::SpawnActorFromClass(TSubclassOf<class AActor> ActorClass, const struct FVector& Location, const struct FRotator& Rotation, bool bTransient)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditorActorSubsystem", "SpawnActorFromClass");

	Params::EditorActorSubsystem_SpawnActorFromClass Parms{};

	Parms.ActorClass = ActorClass;
	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);
	Parms.bTransient = bTransient;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.EditorActorSubsystem.SpawnActorFromObject
// (Final, RequiredAPI, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          ObjectToUse                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Location                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         Rotation                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bTransient                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UEditorActorSubsystem::SpawnActorFromObject(class UObject* ObjectToUse, const struct FVector& Location, const struct FRotator& Rotation, bool bTransient)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditorActorSubsystem", "SpawnActorFromObject");

	Params::EditorActorSubsystem_SpawnActorFromObject Parms{};

	Parms.ObjectToUse = ObjectToUse;
	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);
	Parms.bTransient = bTransient;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.EditorSubsystemBlueprintLibrary.GetEditorSubsystem
// (Final, RequiredAPI, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TSubclassOf<class UEditorSubsystem>     Class_0                                                (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UEditorSubsystem*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UEditorSubsystem* UEditorSubsystemBlueprintLibrary::GetEditorSubsystem(TSubclassOf<class UEditorSubsystem> Class_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorSubsystemBlueprintLibrary", "GetEditorSubsystem");

	Params::EditorSubsystemBlueprintLibrary_GetEditorSubsystem Parms{};

	Parms.Class_0 = Class_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.EditorLoadingAndSavingUtils.ExportScene
// (Final, RequiredAPI, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    bExportSelectedActorsOnly                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEditorLoadingAndSavingUtils::ExportScene(bool bExportSelectedActorsOnly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorLoadingAndSavingUtils", "ExportScene");

	Params::EditorLoadingAndSavingUtils_ExportScene Parms{};

	Parms.bExportSelectedActorsOnly = bExportSelectedActorsOnly;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealEd.EditorLoadingAndSavingUtils.GetDirtyContentPackages
// (Final, RequiredAPI, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class UPackage*>                 OutDirtyPackages                                       (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UEditorLoadingAndSavingUtils::GetDirtyContentPackages(TArray<class UPackage*>* OutDirtyPackages)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorLoadingAndSavingUtils", "GetDirtyContentPackages");

	Params::EditorLoadingAndSavingUtils_GetDirtyContentPackages Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutDirtyPackages != nullptr)
		*OutDirtyPackages = std::move(Parms.OutDirtyPackages);
}


// Function UnrealEd.EditorLoadingAndSavingUtils.GetDirtyMapPackages
// (Final, RequiredAPI, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class UPackage*>                 OutDirtyPackages                                       (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UEditorLoadingAndSavingUtils::GetDirtyMapPackages(TArray<class UPackage*>* OutDirtyPackages)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorLoadingAndSavingUtils", "GetDirtyMapPackages");

	Params::EditorLoadingAndSavingUtils_GetDirtyMapPackages Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutDirtyPackages != nullptr)
		*OutDirtyPackages = std::move(Parms.OutDirtyPackages);
}


// Function UnrealEd.EditorLoadingAndSavingUtils.ImportScene
// (Final, RequiredAPI, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEditorLoadingAndSavingUtils::ImportScene(const class FString& Filename)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorLoadingAndSavingUtils", "ImportScene");

	Params::EditorLoadingAndSavingUtils_ImportScene Parms{};

	Parms.Filename = std::move(Filename);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealEd.EditorLoadingAndSavingUtils.LoadMap
// (Final, RequiredAPI, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWorld*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWorld* UEditorLoadingAndSavingUtils::LoadMap(const class FString& Filename)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorLoadingAndSavingUtils", "LoadMap");

	Params::EditorLoadingAndSavingUtils_LoadMap Parms{};

	Parms.Filename = std::move(Filename);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.EditorLoadingAndSavingUtils.LoadMapWithDialog
// (Final, RequiredAPI, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UWorld*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWorld* UEditorLoadingAndSavingUtils::LoadMapWithDialog()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorLoadingAndSavingUtils", "LoadMapWithDialog");

	Params::EditorLoadingAndSavingUtils_LoadMapWithDialog Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.EditorLoadingAndSavingUtils.NewBlankMap
// (Final, RequiredAPI, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    bSaveExistingMap                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWorld*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWorld* UEditorLoadingAndSavingUtils::NewBlankMap(bool bSaveExistingMap)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorLoadingAndSavingUtils", "NewBlankMap");

	Params::EditorLoadingAndSavingUtils_NewBlankMap Parms{};

	Parms.bSaveExistingMap = bSaveExistingMap;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.EditorLoadingAndSavingUtils.NewMapFromTemplate
// (Final, RequiredAPI, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           PathToTemplateLevel                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSaveExistingMap                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWorld*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWorld* UEditorLoadingAndSavingUtils::NewMapFromTemplate(const class FString& PathToTemplateLevel, bool bSaveExistingMap)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorLoadingAndSavingUtils", "NewMapFromTemplate");

	Params::EditorLoadingAndSavingUtils_NewMapFromTemplate Parms{};

	Parms.PathToTemplateLevel = std::move(PathToTemplateLevel);
	Parms.bSaveExistingMap = bSaveExistingMap;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.EditorLoadingAndSavingUtils.ReloadPackages
// (Final, RequiredAPI, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class UPackage*>                 PackagesToReload                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bOutAnyPackagesReloaded                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             OutErrorMessage                                        (Parm, OutParm, NativeAccessSpecifierPublic)
// EReloadPackagesInteractionMode          InteractionMode                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEditorLoadingAndSavingUtils::ReloadPackages(const TArray<class UPackage*>& PackagesToReload, bool* bOutAnyPackagesReloaded, class FText* OutErrorMessage, const EReloadPackagesInteractionMode InteractionMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorLoadingAndSavingUtils", "ReloadPackages");

	Params::EditorLoadingAndSavingUtils_ReloadPackages Parms{};

	Parms.PackagesToReload = std::move(PackagesToReload);
	Parms.InteractionMode = InteractionMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bOutAnyPackagesReloaded != nullptr)
		*bOutAnyPackagesReloaded = Parms.bOutAnyPackagesReloaded;

	if (OutErrorMessage != nullptr)
		*OutErrorMessage = std::move(Parms.OutErrorMessage);
}


// Function UnrealEd.EditorLoadingAndSavingUtils.SaveCurrentLevel
// (Final, RequiredAPI, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEditorLoadingAndSavingUtils::SaveCurrentLevel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorLoadingAndSavingUtils", "SaveCurrentLevel");

	Params::EditorLoadingAndSavingUtils_SaveCurrentLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.EditorLoadingAndSavingUtils.SaveDirtyPackages
// (Final, RequiredAPI, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    bSaveMapPackages                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSaveContentPackages                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEditorLoadingAndSavingUtils::SaveDirtyPackages(const bool bSaveMapPackages, const bool bSaveContentPackages)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorLoadingAndSavingUtils", "SaveDirtyPackages");

	Params::EditorLoadingAndSavingUtils_SaveDirtyPackages Parms{};

	Parms.bSaveMapPackages = bSaveMapPackages;
	Parms.bSaveContentPackages = bSaveContentPackages;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.EditorLoadingAndSavingUtils.SaveDirtyPackagesWithDialog
// (Final, RequiredAPI, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    bSaveMapPackages                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSaveContentPackages                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEditorLoadingAndSavingUtils::SaveDirtyPackagesWithDialog(const bool bSaveMapPackages, const bool bSaveContentPackages)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorLoadingAndSavingUtils", "SaveDirtyPackagesWithDialog");

	Params::EditorLoadingAndSavingUtils_SaveDirtyPackagesWithDialog Parms{};

	Parms.bSaveMapPackages = bSaveMapPackages;
	Parms.bSaveContentPackages = bSaveContentPackages;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.EditorLoadingAndSavingUtils.SaveMap
// (Final, RequiredAPI, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UWorld*                           World                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           AssetPath                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEditorLoadingAndSavingUtils::SaveMap(class UWorld* World, const class FString& AssetPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorLoadingAndSavingUtils", "SaveMap");

	Params::EditorLoadingAndSavingUtils_SaveMap Parms{};

	Parms.World = World;
	Parms.AssetPath = std::move(AssetPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.EditorLoadingAndSavingUtils.SavePackages
// (Final, RequiredAPI, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class UPackage*>                 PackagesToSave                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bOnlyDirty                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEditorLoadingAndSavingUtils::SavePackages(const TArray<class UPackage*>& PackagesToSave, bool bOnlyDirty)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorLoadingAndSavingUtils", "SavePackages");

	Params::EditorLoadingAndSavingUtils_SavePackages Parms{};

	Parms.PackagesToSave = std::move(PackagesToSave);
	Parms.bOnlyDirty = bOnlyDirty;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.EditorLoadingAndSavingUtils.SavePackagesWithDialog
// (Final, RequiredAPI, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class UPackage*>                 PackagesToSave                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bOnlyDirty                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEditorLoadingAndSavingUtils::SavePackagesWithDialog(const TArray<class UPackage*>& PackagesToSave, bool bOnlyDirty)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorLoadingAndSavingUtils", "SavePackagesWithDialog");

	Params::EditorLoadingAndSavingUtils_SavePackagesWithDialog Parms{};

	Parms.PackagesToSave = std::move(PackagesToSave);
	Parms.bOnlyDirty = bOnlyDirty;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.EditorLoadingAndSavingUtils.UnloadPackages
// (Final, RequiredAPI, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class UPackage*>                 PackagesToUnload                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bOutAnyPackagesUnloaded                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             OutErrorMessage                                        (Parm, OutParm, NativeAccessSpecifierPublic)

void UEditorLoadingAndSavingUtils::UnloadPackages(const TArray<class UPackage*>& PackagesToUnload, bool* bOutAnyPackagesUnloaded, class FText* OutErrorMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorLoadingAndSavingUtils", "UnloadPackages");

	Params::EditorLoadingAndSavingUtils_UnloadPackages Parms{};

	Parms.PackagesToUnload = std::move(PackagesToUnload);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bOutAnyPackagesUnloaded != nullptr)
		*bOutAnyPackagesUnloaded = Parms.bOutAnyPackagesUnloaded;

	if (OutErrorMessage != nullptr)
		*OutErrorMessage = std::move(Parms.OutErrorMessage);
}


// Function UnrealEd.LayersSubsystem.AddActorsToLayer
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class AActor*>                   Actors                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class FName                             LayerName                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULayersSubsystem::AddActorsToLayer(const TArray<class AActor*>& Actors, const class FName& LayerName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LayersSubsystem", "AddActorsToLayer");

	Params::LayersSubsystem_AddActorsToLayer Parms{};

	Parms.Actors = std::move(Actors);
	Parms.LayerName = LayerName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.LayersSubsystem.AddActorsToLayers
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class AActor*>                   Actors                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<class FName>                     LayerNames                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULayersSubsystem::AddActorsToLayers(const TArray<class AActor*>& Actors, const TArray<class FName>& LayerNames)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LayersSubsystem", "AddActorsToLayers");

	Params::LayersSubsystem_AddActorsToLayers Parms{};

	Parms.Actors = std::move(Actors);
	Parms.LayerNames = std::move(LayerNames);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.LayersSubsystem.AddActorToLayer
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             LayerName                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULayersSubsystem::AddActorToLayer(class AActor* Actor, const class FName& LayerName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LayersSubsystem", "AddActorToLayer");

	Params::LayersSubsystem_AddActorToLayer Parms{};

	Parms.Actor = Actor;
	Parms.LayerName = LayerName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.LayersSubsystem.AddActorToLayers
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FName>                     LayerNames                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULayersSubsystem::AddActorToLayers(class AActor* Actor, const TArray<class FName>& LayerNames)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LayersSubsystem", "AddActorToLayers");

	Params::LayersSubsystem_AddActorToLayers Parms{};

	Parms.Actor = Actor;
	Parms.LayerNames = std::move(LayerNames);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.LayersSubsystem.AddLevelLayerInformation
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// class ULevel*                           Level                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULayersSubsystem::AddLevelLayerInformation(class ULevel* Level)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LayersSubsystem", "AddLevelLayerInformation");

	Params::LayersSubsystem_AddLevelLayerInformation Parms{};

	Parms.Level = Level;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealEd.LayersSubsystem.AddSelectedActorsToLayer
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             LayerName                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULayersSubsystem::AddSelectedActorsToLayer(const class FName& LayerName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LayersSubsystem", "AddSelectedActorsToLayer");

	Params::LayersSubsystem_AddSelectedActorsToLayer Parms{};

	Parms.LayerName = LayerName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.LayersSubsystem.AddSelectedActorsToLayers
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FName>                     LayerNames                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULayersSubsystem::AddSelectedActorsToLayers(const TArray<class FName>& LayerNames)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LayersSubsystem", "AddSelectedActorsToLayers");

	Params::LayersSubsystem_AddSelectedActorsToLayers Parms{};

	Parms.LayerNames = std::move(LayerNames);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.LayersSubsystem.CreateLayer
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             LayerName                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULayer*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULayer* ULayersSubsystem::CreateLayer(const class FName& LayerName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LayersSubsystem", "CreateLayer");

	Params::LayersSubsystem_CreateLayer Parms{};

	Parms.LayerName = LayerName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.LayersSubsystem.DeleteLayer
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             LayerToDelete                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULayersSubsystem::DeleteLayer(const class FName& LayerToDelete)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LayersSubsystem", "DeleteLayer");

	Params::LayersSubsystem_DeleteLayer Parms{};

	Parms.LayerToDelete = LayerToDelete;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealEd.LayersSubsystem.DeleteLayers
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FName>                     LayersToDelete                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void ULayersSubsystem::DeleteLayers(const TArray<class FName>& LayersToDelete)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LayersSubsystem", "DeleteLayers");

	Params::LayersSubsystem_DeleteLayers Parms{};

	Parms.LayersToDelete = std::move(LayersToDelete);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealEd.LayersSubsystem.DisassociateActorFromLayers
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULayersSubsystem::DisassociateActorFromLayers(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LayersSubsystem", "DisassociateActorFromLayers");

	Params::LayersSubsystem_DisassociateActorFromLayers Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.LayersSubsystem.DisassociateActorsFromLayers
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class AActor*>                   Actors                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULayersSubsystem::DisassociateActorsFromLayers(const TArray<class AActor*>& Actors)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LayersSubsystem", "DisassociateActorsFromLayers");

	Params::LayersSubsystem_DisassociateActorsFromLayers Parms{};

	Parms.Actors = std::move(Actors);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.LayersSubsystem.EditorMapChange
// (Final, RequiredAPI, Native, Public, BlueprintCallable)

void ULayersSubsystem::EditorMapChange()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LayersSubsystem", "EditorMapChange");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealEd.LayersSubsystem.EditorRefreshLayerBrowser
// (Final, RequiredAPI, Native, Public, BlueprintCallable)

void ULayersSubsystem::EditorRefreshLayerBrowser()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LayersSubsystem", "EditorRefreshLayerBrowser");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealEd.LayersSubsystem.InitializeNewActorLayers
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULayersSubsystem::InitializeNewActorLayers(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LayersSubsystem", "InitializeNewActorLayers");

	Params::LayersSubsystem_InitializeNewActorLayers Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.LayersSubsystem.IsActorValidForLayer
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULayersSubsystem::IsActorValidForLayer(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LayersSubsystem", "IsActorValidForLayer");

	Params::LayersSubsystem_IsActorValidForLayer Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.LayersSubsystem.IsLayer
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             LayerName                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULayersSubsystem::IsLayer(const class FName& LayerName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LayersSubsystem", "IsLayer");

	Params::LayersSubsystem_IsLayer Parms{};

	Parms.LayerName = LayerName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.LayersSubsystem.MakeAllLayersVisible
// (Final, RequiredAPI, Native, Public, BlueprintCallable)

void ULayersSubsystem::MakeAllLayersVisible()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LayersSubsystem", "MakeAllLayersVisible");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealEd.LayersSubsystem.RemoveActorFromLayer
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             LayerToRemove                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUpdateStats                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULayersSubsystem::RemoveActorFromLayer(class AActor* Actor, const class FName& LayerToRemove, const bool bUpdateStats)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LayersSubsystem", "RemoveActorFromLayer");

	Params::LayersSubsystem_RemoveActorFromLayer Parms{};

	Parms.Actor = Actor;
	Parms.LayerToRemove = LayerToRemove;
	Parms.bUpdateStats = bUpdateStats;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.LayersSubsystem.RemoveActorFromLayers
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FName>                     LayerNames                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bUpdateStats                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULayersSubsystem::RemoveActorFromLayers(class AActor* Actor, const TArray<class FName>& LayerNames, const bool bUpdateStats)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LayersSubsystem", "RemoveActorFromLayers");

	Params::LayersSubsystem_RemoveActorFromLayers Parms{};

	Parms.Actor = Actor;
	Parms.LayerNames = std::move(LayerNames);
	Parms.bUpdateStats = bUpdateStats;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.LayersSubsystem.RemoveActorsFromLayer
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class AActor*>                   Actors                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class FName                             LayerName                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUpdateStats                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULayersSubsystem::RemoveActorsFromLayer(const TArray<class AActor*>& Actors, const class FName& LayerName, const bool bUpdateStats)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LayersSubsystem", "RemoveActorsFromLayer");

	Params::LayersSubsystem_RemoveActorsFromLayer Parms{};

	Parms.Actors = std::move(Actors);
	Parms.LayerName = LayerName;
	Parms.bUpdateStats = bUpdateStats;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.LayersSubsystem.RemoveActorsFromLayers
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class AActor*>                   Actors                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<class FName>                     LayerNames                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bUpdateStats                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULayersSubsystem::RemoveActorsFromLayers(const TArray<class AActor*>& Actors, const TArray<class FName>& LayerNames, const bool bUpdateStats)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LayersSubsystem", "RemoveActorsFromLayers");

	Params::LayersSubsystem_RemoveActorsFromLayers Parms{};

	Parms.Actors = std::move(Actors);
	Parms.LayerNames = std::move(LayerNames);
	Parms.bUpdateStats = bUpdateStats;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.LayersSubsystem.RemoveLevelLayerInformation
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// class ULevel*                           Level                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULayersSubsystem::RemoveLevelLayerInformation(class ULevel* Level)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LayersSubsystem", "RemoveLevelLayerInformation");

	Params::LayersSubsystem_RemoveLevelLayerInformation Parms{};

	Parms.Level = Level;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealEd.LayersSubsystem.RemoveSelectedActorsFromLayer
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             LayerName                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULayersSubsystem::RemoveSelectedActorsFromLayer(const class FName& LayerName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LayersSubsystem", "RemoveSelectedActorsFromLayer");

	Params::LayersSubsystem_RemoveSelectedActorsFromLayer Parms{};

	Parms.LayerName = LayerName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.LayersSubsystem.RemoveSelectedActorsFromLayers
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FName>                     LayerNames                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULayersSubsystem::RemoveSelectedActorsFromLayers(const TArray<class FName>& LayerNames)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LayersSubsystem", "RemoveSelectedActorsFromLayers");

	Params::LayersSubsystem_RemoveSelectedActorsFromLayers Parms{};

	Parms.LayerNames = std::move(LayerNames);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.LayersSubsystem.RenameLayer
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             OriginalLayerName                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             NewLayerName                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULayersSubsystem::RenameLayer(const class FName& OriginalLayerName, const class FName& NewLayerName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LayersSubsystem", "RenameLayer");

	Params::LayersSubsystem_RenameLayer Parms{};

	Parms.OriginalLayerName = OriginalLayerName;
	Parms.NewLayerName = NewLayerName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.LayersSubsystem.SelectActorsInLayer
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             LayerName                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSelect                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bNotify                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSelectEvenIfHidden                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULayersSubsystem::SelectActorsInLayer(const class FName& LayerName, const bool bSelect, const bool bNotify, const bool bSelectEvenIfHidden)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LayersSubsystem", "SelectActorsInLayer");

	Params::LayersSubsystem_SelectActorsInLayer Parms{};

	Parms.LayerName = LayerName;
	Parms.bSelect = bSelect;
	Parms.bNotify = bNotify;
	Parms.bSelectEvenIfHidden = bSelectEvenIfHidden;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.LayersSubsystem.SelectActorsInLayers
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FName>                     LayerNames                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bSelect                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bNotify                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSelectEvenIfHidden                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULayersSubsystem::SelectActorsInLayers(const TArray<class FName>& LayerNames, const bool bSelect, const bool bNotify, const bool bSelectEvenIfHidden)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LayersSubsystem", "SelectActorsInLayers");

	Params::LayersSubsystem_SelectActorsInLayers Parms{};

	Parms.LayerNames = std::move(LayerNames);
	Parms.bSelect = bSelect;
	Parms.bNotify = bNotify;
	Parms.bSelectEvenIfHidden = bSelectEvenIfHidden;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.LayersSubsystem.SetLayersVisibility
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FName>                     LayerNames                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bIsVisible                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULayersSubsystem::SetLayersVisibility(const TArray<class FName>& LayerNames, const bool bIsVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LayersSubsystem", "SetLayersVisibility");

	Params::LayersSubsystem_SetLayersVisibility Parms{};

	Parms.LayerNames = std::move(LayerNames);
	Parms.bIsVisible = bIsVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealEd.LayersSubsystem.SetLayerVisibility
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             LayerName                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsVisible                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULayersSubsystem::SetLayerVisibility(const class FName& LayerName, const bool bIsVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LayersSubsystem", "SetLayerVisibility");

	Params::LayersSubsystem_SetLayerVisibility Parms{};

	Parms.LayerName = LayerName;
	Parms.bIsVisible = bIsVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealEd.LayersSubsystem.ToggleLayersVisibility
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FName>                     LayerNames                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void ULayersSubsystem::ToggleLayersVisibility(const TArray<class FName>& LayerNames)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LayersSubsystem", "ToggleLayersVisibility");

	Params::LayersSubsystem_ToggleLayersVisibility Parms{};

	Parms.LayerNames = std::move(LayerNames);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealEd.LayersSubsystem.ToggleLayerVisibility
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             LayerName                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULayersSubsystem::ToggleLayerVisibility(const class FName& LayerName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LayersSubsystem", "ToggleLayerVisibility");

	Params::LayersSubsystem_ToggleLayerVisibility Parms{};

	Parms.LayerName = LayerName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealEd.LayersSubsystem.TryGetLayer
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             LayerName                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULayer*                           OutLayer                                               (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULayersSubsystem::TryGetLayer(const class FName& LayerName, class ULayer** OutLayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LayersSubsystem", "TryGetLayer");

	Params::LayersSubsystem_TryGetLayer Parms{};

	Parms.LayerName = LayerName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutLayer != nullptr)
		*OutLayer = Parms.OutLayer;

	return Parms.ReturnValue;
}


// Function UnrealEd.LayersSubsystem.UpdateActorAllViewsVisibility
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULayersSubsystem::UpdateActorAllViewsVisibility(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LayersSubsystem", "UpdateActorAllViewsVisibility");

	Params::LayersSubsystem_UpdateActorAllViewsVisibility Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealEd.LayersSubsystem.UpdateActorVisibility
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bOutSelectionChanged                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bOutActorModified                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bNotifySelectionChange                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bRedrawViewports                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULayersSubsystem::UpdateActorVisibility(class AActor* Actor, bool* bOutSelectionChanged, bool* bOutActorModified, const bool bNotifySelectionChange, const bool bRedrawViewports)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LayersSubsystem", "UpdateActorVisibility");

	Params::LayersSubsystem_UpdateActorVisibility Parms{};

	Parms.Actor = Actor;
	Parms.bNotifySelectionChange = bNotifySelectionChange;
	Parms.bRedrawViewports = bRedrawViewports;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bOutSelectionChanged != nullptr)
		*bOutSelectionChanged = Parms.bOutSelectionChanged;

	if (bOutActorModified != nullptr)
		*bOutActorModified = Parms.bOutActorModified;

	return Parms.ReturnValue;
}


// Function UnrealEd.LayersSubsystem.UpdateAllActorsVisibility
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNotifySelectionChange                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bRedrawViewports                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULayersSubsystem::UpdateAllActorsVisibility(const bool bNotifySelectionChange, const bool bRedrawViewports)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LayersSubsystem", "UpdateAllActorsVisibility");

	Params::LayersSubsystem_UpdateAllActorsVisibility Parms{};

	Parms.bNotifySelectionChange = bNotifySelectionChange;
	Parms.bRedrawViewports = bRedrawViewports;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.LayersSubsystem.UpdateAllViewVisibility
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             LayerThatChanged                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULayersSubsystem::UpdateAllViewVisibility(const class FName& LayerThatChanged)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LayersSubsystem", "UpdateAllViewVisibility");

	Params::LayersSubsystem_UpdateAllViewVisibility Parms{};

	Parms.LayerThatChanged = LayerThatChanged;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealEd.LayersSubsystem.AddAllLayerNamesTo
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class FName>                     OutLayerNames                                          (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void ULayersSubsystem::AddAllLayerNamesTo(TArray<class FName>* OutLayerNames) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LayersSubsystem", "AddAllLayerNamesTo");

	Params::LayersSubsystem_AddAllLayerNamesTo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutLayerNames != nullptr)
		*OutLayerNames = std::move(Parms.OutLayerNames);
}


// Function UnrealEd.LayersSubsystem.AddAllLayersTo
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class ULayer*>                   OutLayers                                              (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void ULayersSubsystem::AddAllLayersTo(TArray<class ULayer*>* OutLayers) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LayersSubsystem", "AddAllLayersTo");

	Params::LayersSubsystem_AddAllLayersTo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutLayers != nullptr)
		*OutLayers = std::move(Parms.OutLayers);
}


// Function UnrealEd.LayersSubsystem.AppendActorsFromLayer
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             LayerName                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>                   InOutActors                                            (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void ULayersSubsystem::AppendActorsFromLayer(const class FName& LayerName, TArray<class AActor*>* InOutActors) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LayersSubsystem", "AppendActorsFromLayer");

	Params::LayersSubsystem_AppendActorsFromLayer Parms{};

	Parms.LayerName = LayerName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (InOutActors != nullptr)
		*InOutActors = std::move(Parms.InOutActors);
}


// Function UnrealEd.LayersSubsystem.AppendActorsFromLayers
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class FName>                     LayerNames                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<class AActor*>                   InOutActors                                            (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void ULayersSubsystem::AppendActorsFromLayers(const TArray<class FName>& LayerNames, TArray<class AActor*>* InOutActors) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LayersSubsystem", "AppendActorsFromLayers");

	Params::LayersSubsystem_AppendActorsFromLayers Parms{};

	Parms.LayerNames = std::move(LayerNames);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (InOutActors != nullptr)
		*InOutActors = std::move(Parms.InOutActors);
}


// Function UnrealEd.LayersSubsystem.GetActorsFromLayer
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             LayerName                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class AActor*> ULayersSubsystem::GetActorsFromLayer(const class FName& LayerName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LayersSubsystem", "GetActorsFromLayer");

	Params::LayersSubsystem_GetActorsFromLayer Parms{};

	Parms.LayerName = LayerName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.LayersSubsystem.GetActorsFromLayers
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class FName>                     LayerNames                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<class AActor*>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class AActor*> ULayersSubsystem::GetActorsFromLayers(const TArray<class FName>& LayerNames) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LayersSubsystem", "GetActorsFromLayers");

	Params::LayersSubsystem_GetActorsFromLayers Parms{};

	Parms.LayerNames = std::move(LayerNames);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.LayersSubsystem.GetLayer
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             LayerName                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULayer*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULayer* ULayersSubsystem::GetLayer(const class FName& LayerName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LayersSubsystem", "GetLayer");

	Params::LayersSubsystem_GetLayer Parms{};

	Parms.LayerName = LayerName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.LayersSubsystem.GetSelectedActors
// (Final, RequiredAPI, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class AActor*>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class AActor*> ULayersSubsystem::GetSelectedActors() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LayersSubsystem", "GetSelectedActors");

	Params::LayersSubsystem_GetSelectedActors Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.LayersSubsystem.GetWorld
// (Final, RequiredAPI, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UWorld*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWorld* ULayersSubsystem::GetWorld() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LayersSubsystem", "GetWorld");

	Params::LayersSubsystem_GetWorld Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.MaterialImportHelpers.FindExistingMaterial
// (Final, RequiredAPI, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           BasePath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           MaterialFullName                                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bRecursivePaths                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             OutError                                               (Parm, OutParm, NativeAccessSpecifierPublic)
// class UMaterialInterface*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMaterialInterface* UMaterialImportHelpers::FindExistingMaterial(const class FString& BasePath, const class FString& MaterialFullName, const bool bRecursivePaths, class FText* OutError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MaterialImportHelpers", "FindExistingMaterial");

	Params::MaterialImportHelpers_FindExistingMaterial Parms{};

	Parms.BasePath = std::move(BasePath);
	Parms.MaterialFullName = std::move(MaterialFullName);
	Parms.bRecursivePaths = bRecursivePaths;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutError != nullptr)
		*OutError = std::move(Parms.OutError);

	return Parms.ReturnValue;
}


// Function UnrealEd.MaterialImportHelpers.FindExistingMaterialFromSearchLocation
// (Final, RequiredAPI, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           MaterialFullName                                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           BasePackagePath                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMaterialSearchLocation                 SearchLocation                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             OutError                                               (Parm, OutParm, NativeAccessSpecifierPublic)
// class UMaterialInterface*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMaterialInterface* UMaterialImportHelpers::FindExistingMaterialFromSearchLocation(const class FString& MaterialFullName, const class FString& BasePackagePath, EMaterialSearchLocation SearchLocation, class FText* OutError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MaterialImportHelpers", "FindExistingMaterialFromSearchLocation");

	Params::MaterialImportHelpers_FindExistingMaterialFromSearchLocation Parms{};

	Parms.MaterialFullName = std::move(MaterialFullName);
	Parms.BasePackagePath = std::move(BasePackagePath);
	Parms.SearchLocation = SearchLocation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutError != nullptr)
		*OutError = std::move(Parms.OutError);

	return Parms.ReturnValue;
}


// Function UnrealEd.PackageTools.FilenameToPackageName
// (Final, RequiredAPI, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UPackageTools::FilenameToPackageName(const class FString& Filename)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PackageTools", "FilenameToPackageName");

	Params::PackageTools_FilenameToPackageName Parms{};

	Parms.Filename = std::move(Filename);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.PackageTools.PackageNameToFilename
// (Final, RequiredAPI, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           PackageName                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Extension                                              (Parm, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UPackageTools::PackageNameToFilename(const class FString& PackageName, const class FString& Extension)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PackageTools", "PackageNameToFilename");

	Params::PackageTools_PackageNameToFilename Parms{};

	Parms.PackageName = std::move(PackageName);
	Parms.Extension = std::move(Extension);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.PackageTools.SanitizePackageName
// (Final, RequiredAPI, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           InPackageName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UPackageTools::SanitizePackageName(const class FString& InPackageName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PackageTools", "SanitizePackageName");

	Params::PackageTools_SanitizePackageName Parms{};

	Parms.InPackageName = std::move(InPackageName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.UnrealEditorSubsystem.GetEditorWorld
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// class UWorld*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWorld* UUnrealEditorSubsystem::GetEditorWorld()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UnrealEditorSubsystem", "GetEditorWorld");

	Params::UnrealEditorSubsystem_GetEditorWorld Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.UnrealEditorSubsystem.GetGameWorld
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// class UWorld*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWorld* UUnrealEditorSubsystem::GetGameWorld()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UnrealEditorSubsystem", "GetGameWorld");

	Params::UnrealEditorSubsystem_GetGameWorld Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.UnrealEditorSubsystem.GetLevelViewportCameraInfo
// (Final, RequiredAPI, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                          CameraLocation                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         CameraRotation                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUnrealEditorSubsystem::GetLevelViewportCameraInfo(struct FVector* CameraLocation, struct FRotator* CameraRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UnrealEditorSubsystem", "GetLevelViewportCameraInfo");

	Params::UnrealEditorSubsystem_GetLevelViewportCameraInfo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (CameraLocation != nullptr)
		*CameraLocation = std::move(Parms.CameraLocation);

	if (CameraRotation != nullptr)
		*CameraRotation = std::move(Parms.CameraRotation);

	return Parms.ReturnValue;
}


// Function UnrealEd.UnrealEditorSubsystem.SetLevelViewportCameraInfo
// (Final, RequiredAPI, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          CameraLocation                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         CameraRotation                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UUnrealEditorSubsystem::SetLevelViewportCameraInfo(const struct FVector& CameraLocation, const struct FRotator& CameraRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UnrealEditorSubsystem", "SetLevelViewportCameraInfo");

	Params::UnrealEditorSubsystem_SetLevelViewportCameraInfo Parms{};

	Parms.CameraLocation = std::move(CameraLocation);
	Parms.CameraRotation = std::move(CameraRotation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealEd.PropertyEditorTestActor.GetOptionsFunc
// (Final, Native, Private, Const)
// Parameters:
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> APropertyEditorTestActor::GetOptionsFunc() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PropertyEditorTestActor", "GetOptionsFunc");

	Params::PropertyEditorTestActor_GetOptionsFunc Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealEd.ReimportFbxSceneFactory.ScriptReimportHelper
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Obj                                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UReimportFbxSceneFactory::ScriptReimportHelper(class UObject* Obj)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ReimportFbxSceneFactory", "ScriptReimportHelper");

	Params::ReimportFbxSceneFactory_ScriptReimportHelper Parms{};

	Parms.Obj = Obj;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealEd.UDIMTextureFunctionLibrary.MakeUDIMVirtualTextureFromTexture2Ds
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           OutputPathName                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UTexture2D*>               SourceTextures                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<struct FIntPoint>                BlockCoords                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bKeepExistingSettings                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bCheckOutAndSave                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture2D*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture2D* UUDIMTextureFunctionLibrary::MakeUDIMVirtualTextureFromTexture2Ds(const class FString& OutputPathName, const TArray<class UTexture2D*>& SourceTextures, const TArray<struct FIntPoint>& BlockCoords, bool bKeepExistingSettings, bool bCheckOutAndSave)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UDIMTextureFunctionLibrary", "MakeUDIMVirtualTextureFromTexture2Ds");

	Params::UDIMTextureFunctionLibrary_MakeUDIMVirtualTextureFromTexture2Ds Parms{};

	Parms.OutputPathName = std::move(OutputPathName);
	Parms.SourceTextures = std::move(SourceTextures);
	Parms.BlockCoords = std::move(BlockCoords);
	Parms.bKeepExistingSettings = bKeepExistingSettings;
	Parms.bCheckOutAndSave = bCheckOutAndSave;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

