#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SkeletalMeshEditor

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"
#include "EditorSubsystem_classes.hpp"


namespace SDK
{

// Class SkeletalMeshEditor.SkeletalMeshEditorContextMenuContext
// 0x0008 (0x0038 - 0x0030)
class USkeletalMeshEditorContextMenuContext final : public UObject
{
public:
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SkeletalMeshEditorContextMenuContext">();
	}
	static class USkeletalMeshEditorContextMenuContext* GetDefaultObj()
	{
		return GetDefaultObjImpl<USkeletalMeshEditorContextMenuContext>();
	}
};

// Class SkeletalMeshEditor.SkeletalMeshEditorSubsystem
// 0x0000 (0x0038 - 0x0038)
class USkeletalMeshEditorSubsystem final : public UEditorSubsystem
{
public:
	static bool AssignPhysicsAsset(class USkeletalMesh* TargetMesh, class UPhysicsAsset* PhysicsAsset);
	static class UPhysicsAsset* CreatePhysicsAsset(class USkeletalMesh* SkeletalMesh);
	static void GetLodBuildSettings(const class USkeletalMesh* SkeletalMesh, const int32 LodIndex, struct FSkeletalMeshBuildSettings* OutBuildOptions);
	static int32 GetLODCount(class USkeletalMesh* SkeletalMesh);
	static int32 ImportLOD(class USkeletalMesh* BaseMesh, const int32 LODIndex, const class FString& SourceFilename);
	static bool IsPhysicsAssetCompatible(class USkeletalMesh* TargetMesh, class UPhysicsAsset* PhysicsAsset);
	static bool RegenerateLOD(class USkeletalMesh* SkeletalMesh, int32 NewLODCount, bool bRegenerateEvenIfImported, bool bGenerateBaseLOD);
	static bool ReimportAllCustomLODs(class USkeletalMesh* SkeletalMesh);
	static bool RenameSocket(class USkeletalMesh* SkeletalMesh, class FName OldName, class FName NewName);
	static void SetLodBuildSettings(class USkeletalMesh* SkeletalMesh, const int32 LodIndex, const struct FSkeletalMeshBuildSettings& BuildOptions);

	int32 GetLODMaterialSlot(class USkeletalMesh* SkeletalMesh, int32 LODIndex, int32 SectionIndex);
	int32 GetNumSections(class USkeletalMesh* SkeletalMesh, int32 LODIndex);
	int32 GetNumVerts(class USkeletalMesh* SkeletalMesh, int32 LODIndex);
	bool GetSectionCastShadow(const class USkeletalMesh* SkeletalMesh, const int32 LODIndex, const int32 SectionIndex, bool* bOutCastShadow);
	bool GetSectionRecomputeTangent(const class USkeletalMesh* SkeletalMesh, const int32 LODIndex, const int32 SectionIndex, bool* bOutRecomputeTangent);
	bool GetSectionRecomputeTangentsVertexMaskChannel(const class USkeletalMesh* SkeletalMesh, const int32 LODIndex, const int32 SectionIndex, uint8* OutRecomputeTangentsVertexMaskChannel);
	bool GetSectionVisibleInRayTracing(const class USkeletalMesh* SkeletalMesh, const int32 LODIndex, const int32 SectionIndex, bool* bOutVisibleInRayTracing);
	bool SetSectionCastShadow(class USkeletalMesh* SkeletalMesh, const int32 LODIndex, const int32 SectionIndex, const bool bCastShadow);
	bool SetSectionRecomputeTangent(class USkeletalMesh* SkeletalMesh, const int32 LODIndex, const int32 SectionIndex, const bool bRecomputeTangent);
	bool SetSectionRecomputeTangentsVertexMaskChannel(class USkeletalMesh* SkeletalMesh, const int32 LODIndex, const int32 SectionIndex, const uint8 RecomputeTangentsVertexMaskChannel);
	bool SetSectionVisibleInRayTracing(class USkeletalMesh* SkeletalMesh, const int32 LODIndex, const int32 SectionIndex, const bool bVisibleInRayTracing);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SkeletalMeshEditorSubsystem">();
	}
	static class USkeletalMeshEditorSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<USkeletalMeshEditorSubsystem>();
	}
};

}

