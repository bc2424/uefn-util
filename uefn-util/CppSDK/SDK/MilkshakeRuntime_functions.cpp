#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MilkshakeRuntime

#include "Basic.hpp"

#include "MilkshakeRuntime_classes.hpp"
#include "MilkshakeRuntime_parameters.hpp"


namespace SDK
{

// Function MilkshakeRuntime.MilkshakeControllerComponent.PlayForceFeedback
// (Final, Native, Private)

void UMilkshakeControllerComponent::PlayForceFeedback()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MilkshakeControllerComponent", "PlayForceFeedback");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MilkshakeRuntime.MilkshakeControllerComponent.RegisterEarthquake
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AMilkshakeEarthquakeActor*        Earthquake                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMilkshakeControllerComponent::RegisterEarthquake(class AMilkshakeEarthquakeActor* Earthquake)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MilkshakeControllerComponent", "RegisterEarthquake");

	Params::MilkshakeControllerComponent_RegisterEarthquake Parms{};

	Parms.Earthquake = Earthquake;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MilkshakeRuntime.MilkshakeControllerComponent.SpawnBuildingDamageFX
// (Final, Native, Private)

void UMilkshakeControllerComponent::SpawnBuildingDamageFX()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MilkshakeControllerComponent", "SpawnBuildingDamageFX");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MilkshakeRuntime.MilkshakeControllerComponent.UnregisterEarthquake
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AMilkshakeEarthquakeActor*        Earthquake                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMilkshakeControllerComponent::UnregisterEarthquake(class AMilkshakeEarthquakeActor* Earthquake)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MilkshakeControllerComponent", "UnregisterEarthquake");

	Params::MilkshakeControllerComponent_UnregisterEarthquake Parms{};

	Parms.Earthquake = Earthquake;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MilkshakeRuntime.MilkshakeControllerComponent.UpdateNearbyBuildingActors
// (Final, Native, Private)

void UMilkshakeControllerComponent::UpdateNearbyBuildingActors()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MilkshakeControllerComponent", "UpdateNearbyBuildingActors");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MilkshakeRuntime.MilkshakeEarthquakeActor.GetNormalizedMagnitudeAtLocation
// (Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AMilkshakeEarthquakeActor::GetNormalizedMagnitudeAtLocation(const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MilkshakeEarthquakeActor", "GetNormalizedMagnitudeAtLocation");

	Params::MilkshakeEarthquakeActor_GetNormalizedMagnitudeAtLocation Parms{};

	Parms.Location = std::move(Location);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function MilkshakeRuntime.MilkshakeEarthquakeActor.OnActorRemovedFromAsyncOverlappedActors
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AActor*                           RemovedActor                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMilkshakeEarthquakeActor::OnActorRemovedFromAsyncOverlappedActors(class AActor* RemovedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MilkshakeEarthquakeActor", "OnActorRemovedFromAsyncOverlappedActors");

	Params::MilkshakeEarthquakeActor_OnActorRemovedFromAsyncOverlappedActors Parms{};

	Parms.RemovedActor = RemovedActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MilkshakeRuntime.MilkshakeEarthquakeActor.RemoveAsyncOverlappedActorsOutsideRadius
// (Final, BlueprintAuthorityOnly, Native, Protected, BlueprintCallable)

void AMilkshakeEarthquakeActor::RemoveAsyncOverlappedActorsOutsideRadius()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MilkshakeEarthquakeActor", "RemoveAsyncOverlappedActorsOutsideRadius");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MilkshakeRuntime.MilkshakeEarthquakeActor.RemoveNullsFromAsyncOverlappedActors
// (Final, BlueprintAuthorityOnly, Native, Protected, BlueprintCallable)

void AMilkshakeEarthquakeActor::RemoveNullsFromAsyncOverlappedActors()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MilkshakeEarthquakeActor", "RemoveNullsFromAsyncOverlappedActors");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MilkshakeRuntime.MilkshakeEarthquakeActor.TickEarthquakePhysicsActorForces
// (Final, BlueprintAuthorityOnly, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   DeltaSeconds                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMilkshakeEarthquakeActor::TickEarthquakePhysicsActorForces(const float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MilkshakeEarthquakeActor", "TickEarthquakePhysicsActorForces");

	Params::MilkshakeEarthquakeActor_TickEarthquakePhysicsActorForces Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MilkshakeRuntime.MilkshakeEarthquakeActor.GetRadius
// (Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AMilkshakeEarthquakeActor::GetRadius() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MilkshakeEarthquakeActor", "GetRadius");

	Params::MilkshakeEarthquakeActor_GetRadius Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function MilkshakeRuntime.MilkshakeFieldSystemActor.SetStrength
// (Final, BlueprintCosmetic, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InStrength                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMilkshakeFieldSystemActor::SetStrength(const float InStrength)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MilkshakeFieldSystemActor", "SetStrength");

	Params::MilkshakeFieldSystemActor_SetStrength Parms{};

	Parms.InStrength = InStrength;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

