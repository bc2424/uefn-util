#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GameplayEventRouter

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "GameplayEventRouter_structs.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class GameplayEventRouter.AsyncAction_StartListeningToEvent
// 0x00A8 (0x00E0 - 0x0038)
class UAsyncAction_StartListeningToEvent final : public UBlueprintAsyncActionBase
{
public:
	TMulticastInlineDelegate<void(class UAsyncAction_StartListeningToEvent* ProxyObject)> OnEventReceived;                                   // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x98];                                      // 0x0048(0x0098)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UAsyncAction_StartListeningToEvent* StartListeningToEvent(class UObject* WorldContextObject, class UGameplayEventRouterComponent* Target, class UScriptStruct* EventType, class UObject* Context, EEventBubblingRule EventBubblingRule);
	static class UAsyncAction_StartListeningToEvent* StartListeningToEventBackwardCompatible(class UObject* WorldContextObject, const struct FEventMessageTag& Channel, class UGameplayEventRouterComponent* Target, class UScriptStruct* EventType, class UObject* Context, EEventBubblingRule EventBubblingRule);

	bool GetPayload(int32& OutPayload);
	void StopListeningToEvent();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AsyncAction_StartListeningToEvent">();
	}
	static class UAsyncAction_StartListeningToEvent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAsyncAction_StartListeningToEvent>();
	}
};

// Class GameplayEventRouter.AsyncAction_StartListeningToStatefulEvent
// 0x00C8 (0x0100 - 0x0038)
class UAsyncAction_StartListeningToStatefulEvent final : public UBlueprintAsyncActionBase
{
public:
	TMulticastInlineDelegate<void(class UAsyncAction_StartListeningToStatefulEvent* ProxyObject)> OnEventReceived;                                   // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UAsyncAction_StartListeningToStatefulEvent* ProxyObject)> OnSavedEventStateExists;                           // 0x0048(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UAsyncAction_StartListeningToStatefulEvent* ProxyObject)> OnEventStateCleared;                               // 0x0058(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_68[0x98];                                      // 0x0068(0x0098)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UAsyncAction_StartListeningToStatefulEvent* StartListeningToStatefulEvent(class UObject* WorldContextObject, class UGameplayEventRouterComponent* Target, class UScriptStruct* EventType, class UObject* Context, EEventBubblingRule EventBubblingRule);
	static class UAsyncAction_StartListeningToStatefulEvent* StartListeningToStatefulEventBackwardsCompatible(class UObject* WorldContextObject, const struct FEventMessageTag& Channel, class UGameplayEventRouterComponent* Target, class UScriptStruct* EventType, class UObject* Context, EEventBubblingRule EventBubblingRule);

	bool GetPayload(int32& OutPayload);
	void StopListeningToStatefulEvent();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AsyncAction_StartListeningToStatefulEvent">();
	}
	static class UAsyncAction_StartListeningToStatefulEvent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAsyncAction_StartListeningToStatefulEvent>();
	}
};

// Class GameplayEventRouter.GameplayEventRouterComponent
// 0x0238 (0x0310 - 0x00D8)
class UGameplayEventRouterComponent : public UActorComponent
{
public:
	uint8                                         Pad_D8[0x238];                                     // 0x00D8(0x0238)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClearEventState(const class UScriptStruct* EventType);
	void ClearEventStateByContext(const class UScriptStruct* EventType, const class UObject* Context);
	bool K2_BroadcastEvent(const int32& EventData, class UObject* EventContext);
	bool K2_BroadcastStatefulEvent(const int32& EventData, class UObject* EventContext);
	void StopListeningToEvent(struct FGameplayEventListenerHandle& HandleToRemove);

	bool HasValidEventState(const class UScriptStruct* EventType, const class UObject* Context) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameplayEventRouterComponent">();
	}
	static class UGameplayEventRouterComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameplayEventRouterComponent>();
	}
};

// Class GameplayEventRouter.GameplayEventRouterOwnerInterface
// 0x0000 (0x0030 - 0x0030)
class IGameplayEventRouterOwnerInterface final : public IInterface
{
public:
	TSubclassOf<class UGameplayEventRouterComponent> GetEventRouterClass() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameplayEventRouterOwnerInterface">();
	}
	static class IGameplayEventRouterOwnerInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IGameplayEventRouterOwnerInterface>();
	}
};

// Class GameplayEventRouter.GameplayEventRouterSubsystem
// 0x0168 (0x01A0 - 0x0038)
class UGameplayEventRouterSubsystem final : public UGameInstanceSubsystem
{
public:
	uint8                                         Pad_38[0x158];                                     // 0x0038(0x0158)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameplayEventGlobalRouterPendingListenerData> PendingGlobalRouterListenerDatas;                  // 0x0190(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	static void ClearEventStateBackwardCompatible(class UObject* WorldContextObject, const struct FEventMessageTag& Channel, class UGameplayEventRouterComponent* Target, const class UScriptStruct* EventType);
	static void ClearEventStateByContextBackwardCompatible(class UObject* WorldContextObject, const struct FEventMessageTag& Channel, class UGameplayEventRouterComponent* Target, const class UScriptStruct* EventType, const class UObject* Context);
	static class UGameplayEventRouterComponent* GetEventRouter(class UClass* Scope, class AActor* ContextActor);
	static class UGameplayEventRouterComponent* GetGlobalEventRouter(const class UObject* WorldContextObject);
	static bool K2_BroadcastEventBackwardCompatible(class UObject* WorldContextObject, class UGameplayEventRouterComponent* Target, const struct FEventMessageTag& Channel, const int32& EventData, class UObject* EventContext);
	static bool K2_BroadcastStatefulEventBackwardCompatible(class UObject* WorldContextObject, class UGameplayEventRouterComponent* Target, const struct FEventMessageTag& Channel, const int32& EventData, class UObject* EventContext);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameplayEventRouterSubsystem">();
	}
	static class UGameplayEventRouterSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameplayEventRouterSubsystem>();
	}
};

}

