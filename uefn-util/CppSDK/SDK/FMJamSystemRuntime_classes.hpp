#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FMJamSystemRuntime

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "CommonUI_classes.hpp"
#include "ModularGameplay_classes.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "GameplayEventRouter_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "PlayspaceSystem_classes.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class FMJamSystemRuntime.JamControllerComponent
// 0x0028 (0x0100 - 0x00D8)
class UJamControllerComponent final : public UControllerComponent
{
public:
	uint8                                         Pad_D8[0x8];                                       // 0x00D8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  AdditionalTags;                                    // 0x00E0(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static bool CanSuppressJamControls();

	class AController* GetControllerOfClass(TSubclassOf<class AController> ControllerType, bool bMatchChildTypes);
	void UpdateJamUI();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"JamControllerComponent">();
	}
	static class UJamControllerComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UJamControllerComponent>();
	}
};

// Class FMJamSystemRuntime.JamControllerComponent_LoopOptions
// 0x00A0 (0x0178 - 0x00D8)
class UJamControllerComponent_LoopOptions final : public UControllerComponent
{
public:
	class FName                                   CategoryNameLocker;                                // 0x00D8(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CategoryNameAll;                                   // 0x00E4(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   CategoryTitleLocker;                               // 0x00F0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   CategoryTitleAll;                                  // 0x0100(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTag                           CategoryTagLocker;                                 // 0x0110(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           CategoryTagAll;                                    // 0x011C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   EmoteWheelOverlay;                                 // 0x0128(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_158[0x10];                                     // 0x0158(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USparksSongItemDefinition*>      CachedDebugSongItemDefs;                           // 0x0168(0x0010)(ZeroConstructor, Transient, EditorOnly, NativeAccessSpecifierPrivate)

public:
	void AddJamCategories();
	void BeginSetup();
	void OnFinishedLoadingItemDefs();
	void OnFirstPawnSet(class APawn* OldPawn, class APawn* NewPawn);
	void OnJamBlockingTagAdded();
	void OnJamBlockingTagChanged(const struct FGameplayTag& UpdatedTag, int32 TagCount);
	void OnJamBlockingTagRemoved();
	void OnPawnSetAfterBlockingTag(class APawn* OldPawn, class APawn* NewPawn);
	void OnSparksLoadoutFilled();
	void RemoveJamCategories();

	bool ShouldAddJamCategoriesBeforeLocker() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"JamControllerComponent_LoopOptions">();
	}
	static class UJamControllerComponent_LoopOptions* GetDefaultObj()
	{
		return GetDefaultObjImpl<UJamControllerComponent_LoopOptions>();
	}
};

// Class FMJamSystemRuntime.JamControllerComponent_LoopPreloader
// 0x0058 (0x0130 - 0x00D8)
class UJamControllerComponent_LoopPreloader final : public UControllerComponent
{
public:
	bool                                          bHaveRegisteredForOnLoadoutFilled;                 // 0x00D8(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_D9[0x57];                                      // 0x00D9(0x0057)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnLoadoutFilled();
	void OnPawnSet(class APlayerState* Player, class APawn* NewPawn, class APawn* OldPawn);
	void OnSongCatalogRetrieved(bool bSuccess);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"JamControllerComponent_LoopPreloader">();
	}
	static class UJamControllerComponent_LoopPreloader* GetDefaultObj()
	{
		return GetDefaultObjImpl<UJamControllerComponent_LoopPreloader>();
	}
};

// Class FMJamSystemRuntime.JamGlobalControlsWidget
// 0x0008 (0x0580 - 0x0578)
class UJamGlobalControlsWidget final : public UCommonActivatableWidget
{
public:
	class UCommonButtonBase*                      Button_Close;                                      // 0x0578(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void Close();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"JamGlobalControlsWidget">();
	}
	static class UJamGlobalControlsWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UJamGlobalControlsWidget>();
	}
};

// Class FMJamSystemRuntime.JamOnOffSwitchComponent
// 0x0150 (0x0228 - 0x00D8)
class UJamOnOffSwitchComponent final : public UPlayerStateComponent
{
public:
	struct FScalableFloat                         bEnableJam;                                        // 0x00D8(0x0038)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	TSubclassOf<class UGameplayEffect>            JamBlockerEffect;                                  // 0x0110(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FActiveGameplayEffectHandle            JamBlockerEffectHandle;                            // 0x0118(0x0008)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FGameplayEventListenerHandle           GamePhaseUpdatedEventHandle;                       // 0x0120(0x001C)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FGameplayEventListenerHandle           GamePhaseStepUpdatedEventHandle;                   // 0x013C(0x001C)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FGlobalMemoryRequestHandle             GlobalMemoryRequestHandle;                         // 0x0158(0x0008)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_160[0xC8];                                     // 0x0160(0x00C8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static bool ShouldApplyJamOnSplitscreenLogic(class UObject* WorldContextObject, class APlayerController* ReferenceController);

	void OnMutatorUpdated();
	void OnPlayerStatePawnSet(class APlayerState* Player, class APawn* NewPawn, class APawn* OldPawn);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"JamOnOffSwitchComponent">();
	}
	static class UJamOnOffSwitchComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UJamOnOffSwitchComponent>();
	}
};

// Class FMJamSystemRuntime.JamPlayerPawnComponent
// 0x0028 (0x0100 - 0x00D8)
class UJamPlayerPawnComponent final : public UPawnComponent
{
public:
	uint8                                         Pad_D8[0x8];                                       // 0x00D8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  AdditionalTags;                                    // 0x00E0(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	class APawn* GetPawnOfClass(TSubclassOf<class APawn> PawnType, bool bMatchChildTypes);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"JamPlayerPawnComponent">();
	}
	static class UJamPlayerPawnComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UJamPlayerPawnComponent>();
	}
};

// Class FMJamSystemRuntime.JamQuestComponent
// 0x0048 (0x0120 - 0x00D8)
class UJamQuestComponent final : public UPlayspaceComponent
{
public:
	uint8                                         Pad_D8[0x48];                                      // 0x00D8(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"JamQuestComponent">();
	}
	static class UJamQuestComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UJamQuestComponent>();
	}
};

// Class FMJamSystemRuntime.JamSystemEmoteBPFL
// 0x0000 (0x0030 - 0x0030)
class UJamSystemEmoteBPFL final : public UBlueprintFunctionLibrary
{
public:
	static void GetEmoteActionBinding(const class FString& EmoteTemplateID, struct FEmoteActionBinding* OutCreatedEmote);
	static bool IsJamDebugDisplayEnabled();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"JamSystemEmoteBPFL">();
	}
	static class UJamSystemEmoteBPFL* GetDefaultObj()
	{
		return GetDefaultObjImpl<UJamSystemEmoteBPFL>();
	}
};

// Class FMJamSystemRuntime.JamVerbProcessor_Jam
// 0x0000 (0x00A0 - 0x00A0)
class UJamVerbProcessor_Jam final : public UObjectiveProcessor
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"JamVerbProcessor_Jam">();
	}
	static class UJamVerbProcessor_Jam* GetDefaultObj()
	{
		return GetDefaultObjImpl<UJamVerbProcessor_Jam>();
	}
};

}

