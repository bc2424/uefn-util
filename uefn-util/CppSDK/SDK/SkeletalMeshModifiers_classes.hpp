#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SkeletalMeshModifiers

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class SkeletalMeshModifiers.SkeletonModifier
// 0x0038 (0x0068 - 0x0030)
class USkeletonModifier final : public UObject
{
public:
	TWeakObjectPtr<class USkeletalMesh>           SkeletalMesh;                                      // 0x0030(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_38[0x30];                                      // 0x0038(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool AddBone(const class FName InBoneName, const class FName InParentName, const struct FTransform& InTransform);
	bool AddBones(const TArray<class FName>& InBonesName, const TArray<class FName>& InParentsName, const TArray<struct FTransform>& InTransforms);
	bool CommitSkeletonToSkeletalMesh();
	bool MirrorBone(const class FName InBoneName, const struct FMirrorOptions& InOptions);
	bool MirrorBones(const TArray<class FName>& InBonesName, const struct FMirrorOptions& InOptions);
	bool OrientBone(const class FName InBoneName, const struct FOrientOptions& InOptions);
	bool OrientBones(const TArray<class FName>& InBoneNames, const struct FOrientOptions& InOptions);
	bool ParentBone(const class FName InBoneName, const class FName InParentName);
	bool ParentBones(const TArray<class FName>& InBoneNames, const TArray<class FName>& InParentNames);
	bool RemoveBone(const class FName InBoneName, const bool bRemoveChildren);
	bool RemoveBones(const TArray<class FName>& InBoneNames, const bool bRemoveChildren);
	bool RenameBone(const class FName InOldBoneName, const class FName InNewBoneName);
	bool RenameBones(const TArray<class FName>& InOldBoneNames, const TArray<class FName>& InNewBoneNames);
	bool SetBonesTransforms(const TArray<class FName>& InBoneNames, const TArray<struct FTransform>& InNewTransforms, const bool bMoveChildren);
	bool SetBoneTransform(const class FName InBoneName, const struct FTransform& InNewTransform, const bool bMoveChildren);
	bool SetSkeletalMesh(class USkeletalMesh* InSkeletalMesh);

	TArray<class FName> GetAllBoneNames() const;
	struct FTransform GetBoneTransform(const class FName InBoneName, const bool bGlobal) const;
	TArray<class FName> GetChildrenNames(const class FName InBoneName, const bool bRecursive) const;
	class FName GetParentName(const class FName InBoneName) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SkeletonModifier">();
	}
	static class USkeletonModifier* GetDefaultObj()
	{
		return GetDefaultObjImpl<USkeletonModifier>();
	}
};

// Class SkeletalMeshModifiers.SkinWeightModifier
// 0x0020 (0x0050 - 0x0030)
class USkinWeightModifier final : public UObject
{
public:
	class USkeletalMesh*                          Mesh;                                              // 0x0030(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_38[0x18];                                      // 0x0038(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool CommitWeightsToSkeletalMesh();
	bool EnforceMaxInfluences(const int32 MaxInfluences);
	TArray<class FName> GetAllBoneNames();
	int32 GetNumVertices();
	class USkeletalMesh* GetSkeletalMesh();
	TMap<class FName, float> GetVertexWeights(const int32 VertexID);
	bool NormalizeAllWeights();
	bool NormalizeVertexWeights(const int32 VertexID);
	bool PruneAllWeights(const float WeightThreshold);
	bool PruneVertexWeights(const int32 VertexID, const float WeightThreshold);
	bool SetSkeletalMesh(class USkeletalMesh* InMesh);
	bool SetVertexWeights(const int32 VertexID, const TMap<class FName, float>& InWeights, const bool bReplaceAll);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SkinWeightModifier">();
	}
	static class USkinWeightModifier* GetDefaultObj()
	{
		return GetDefaultObjImpl<USkinWeightModifier>();
	}
};

}

