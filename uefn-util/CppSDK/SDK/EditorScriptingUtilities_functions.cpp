#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: EditorScriptingUtilities

#include "Basic.hpp"

#include "EditorScriptingUtilities_classes.hpp"
#include "EditorScriptingUtilities_parameters.hpp"


namespace SDK
{

// Function EditorScriptingUtilities.EditorAssetLibrary.CheckoutAsset
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           AssetToCheckout                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEditorAssetLibrary::CheckoutAsset(const class FString& AssetToCheckout)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorAssetLibrary", "CheckoutAsset");

	Params::EditorAssetLibrary_CheckoutAsset Parms{};

	Parms.AssetToCheckout = std::move(AssetToCheckout);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorAssetLibrary.CheckoutDirectory
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           DirectoryPath                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bRecursive                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEditorAssetLibrary::CheckoutDirectory(const class FString& DirectoryPath, bool bRecursive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorAssetLibrary", "CheckoutDirectory");

	Params::EditorAssetLibrary_CheckoutDirectory Parms{};

	Parms.DirectoryPath = std::move(DirectoryPath);
	Parms.bRecursive = bRecursive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorAssetLibrary.CheckoutLoadedAsset
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          AssetToCheckout                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEditorAssetLibrary::CheckoutLoadedAsset(class UObject* AssetToCheckout)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorAssetLibrary", "CheckoutLoadedAsset");

	Params::EditorAssetLibrary_CheckoutLoadedAsset Parms{};

	Parms.AssetToCheckout = AssetToCheckout;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorAssetLibrary.CheckoutLoadedAssets
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class UObject*>                  AssetsToCheckout                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEditorAssetLibrary::CheckoutLoadedAssets(const TArray<class UObject*>& AssetsToCheckout)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorAssetLibrary", "CheckoutLoadedAssets");

	Params::EditorAssetLibrary_CheckoutLoadedAssets Parms{};

	Parms.AssetsToCheckout = std::move(AssetsToCheckout);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorAssetLibrary.ConsolidateAssets
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          AssetToConsolidateTo                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UObject*>                  AssetsToConsolidate                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEditorAssetLibrary::ConsolidateAssets(class UObject* AssetToConsolidateTo, const TArray<class UObject*>& AssetsToConsolidate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorAssetLibrary", "ConsolidateAssets");

	Params::EditorAssetLibrary_ConsolidateAssets Parms{};

	Parms.AssetToConsolidateTo = AssetToConsolidateTo;
	Parms.AssetsToConsolidate = std::move(AssetsToConsolidate);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorAssetLibrary.DeleteAsset
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           AssetPathToDelete                                      (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEditorAssetLibrary::DeleteAsset(const class FString& AssetPathToDelete)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorAssetLibrary", "DeleteAsset");

	Params::EditorAssetLibrary_DeleteAsset Parms{};

	Parms.AssetPathToDelete = std::move(AssetPathToDelete);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorAssetLibrary.DeleteDirectory
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           DirectoryPath                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEditorAssetLibrary::DeleteDirectory(const class FString& DirectoryPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorAssetLibrary", "DeleteDirectory");

	Params::EditorAssetLibrary_DeleteDirectory Parms{};

	Parms.DirectoryPath = std::move(DirectoryPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorAssetLibrary.DeleteLoadedAsset
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          AssetToDelete                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEditorAssetLibrary::DeleteLoadedAsset(class UObject* AssetToDelete)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorAssetLibrary", "DeleteLoadedAsset");

	Params::EditorAssetLibrary_DeleteLoadedAsset Parms{};

	Parms.AssetToDelete = AssetToDelete;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorAssetLibrary.DeleteLoadedAssets
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class UObject*>                  AssetsToDelete                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEditorAssetLibrary::DeleteLoadedAssets(const TArray<class UObject*>& AssetsToDelete)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorAssetLibrary", "DeleteLoadedAssets");

	Params::EditorAssetLibrary_DeleteLoadedAssets Parms{};

	Parms.AssetsToDelete = std::move(AssetsToDelete);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorAssetLibrary.DoAssetsExist
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FString>                   AssetPaths                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEditorAssetLibrary::DoAssetsExist(const TArray<class FString>& AssetPaths)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorAssetLibrary", "DoAssetsExist");

	Params::EditorAssetLibrary_DoAssetsExist Parms{};

	Parms.AssetPaths = std::move(AssetPaths);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorAssetLibrary.DoesAssetExist
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           AssetPath                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEditorAssetLibrary::DoesAssetExist(const class FString& AssetPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorAssetLibrary", "DoesAssetExist");

	Params::EditorAssetLibrary_DoesAssetExist Parms{};

	Parms.AssetPath = std::move(AssetPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorAssetLibrary.DoesDirectoryExist
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           DirectoryPath                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEditorAssetLibrary::DoesDirectoryExist(const class FString& DirectoryPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorAssetLibrary", "DoesDirectoryExist");

	Params::EditorAssetLibrary_DoesDirectoryExist Parms{};

	Parms.DirectoryPath = std::move(DirectoryPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorAssetLibrary.DoesDirectoryHaveAssets
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           DirectoryPath                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bRecursive                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEditorAssetLibrary::DoesDirectoryHaveAssets(const class FString& DirectoryPath, bool bRecursive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorAssetLibrary", "DoesDirectoryHaveAssets");

	Params::EditorAssetLibrary_DoesDirectoryHaveAssets Parms{};

	Parms.DirectoryPath = std::move(DirectoryPath);
	Parms.bRecursive = bRecursive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorAssetLibrary.DuplicateAsset
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           SourceAssetPath                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           DestinationAssetPath                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UObject* UEditorAssetLibrary::DuplicateAsset(const class FString& SourceAssetPath, const class FString& DestinationAssetPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorAssetLibrary", "DuplicateAsset");

	Params::EditorAssetLibrary_DuplicateAsset Parms{};

	Parms.SourceAssetPath = std::move(SourceAssetPath);
	Parms.DestinationAssetPath = std::move(DestinationAssetPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorAssetLibrary.DuplicateDirectory
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           SourceDirectoryPath                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           DestinationDirectoryPath                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEditorAssetLibrary::DuplicateDirectory(const class FString& SourceDirectoryPath, const class FString& DestinationDirectoryPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorAssetLibrary", "DuplicateDirectory");

	Params::EditorAssetLibrary_DuplicateDirectory Parms{};

	Parms.SourceDirectoryPath = std::move(SourceDirectoryPath);
	Parms.DestinationDirectoryPath = std::move(DestinationDirectoryPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorAssetLibrary.DuplicateLoadedAsset
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          SourceAsset                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           DestinationAssetPath                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UObject* UEditorAssetLibrary::DuplicateLoadedAsset(class UObject* SourceAsset, const class FString& DestinationAssetPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorAssetLibrary", "DuplicateLoadedAsset");

	Params::EditorAssetLibrary_DuplicateLoadedAsset Parms{};

	Parms.SourceAsset = SourceAsset;
	Parms.DestinationAssetPath = std::move(DestinationAssetPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorAssetLibrary.FindAssetData
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class FString                           AssetPath                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FAssetData                       ReturnValue                                            (Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FAssetData UEditorAssetLibrary::FindAssetData(const class FString& AssetPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorAssetLibrary", "FindAssetData");

	Params::EditorAssetLibrary_FindAssetData Parms{};

	Parms.AssetPath = std::move(AssetPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorAssetLibrary.FindPackageReferencersForAsset
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           AssetPath                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bLoadAssetsToConfirm                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> UEditorAssetLibrary::FindPackageReferencersForAsset(const class FString& AssetPath, bool bLoadAssetsToConfirm)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorAssetLibrary", "FindPackageReferencersForAsset");

	Params::EditorAssetLibrary_FindPackageReferencersForAsset Parms{};

	Parms.AssetPath = std::move(AssetPath);
	Parms.bLoadAssetsToConfirm = bLoadAssetsToConfirm;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorAssetLibrary.GetMetadataTag
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Tag                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UEditorAssetLibrary::GetMetadataTag(class UObject* Object, class FName Tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorAssetLibrary", "GetMetadataTag");

	Params::EditorAssetLibrary_GetMetadataTag Parms{};

	Parms.Object = Object;
	Parms.Tag = Tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorAssetLibrary.GetMetadataTagValues
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<class FName, class FString>        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

TMap<class FName, class FString> UEditorAssetLibrary::GetMetadataTagValues(class UObject* Object)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorAssetLibrary", "GetMetadataTagValues");

	Params::EditorAssetLibrary_GetMetadataTagValues Parms{};

	Parms.Object = Object;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorAssetLibrary.GetPackageForObject
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPackage*                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UPackage* UEditorAssetLibrary::GetPackageForObject(class UObject* Object)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorAssetLibrary", "GetPackageForObject");

	Params::EditorAssetLibrary_GetPackageForObject Parms{};

	Parms.Object = Object;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorAssetLibrary.GetPathNameForLoadedAsset
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          LoadedAsset                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UEditorAssetLibrary::GetPathNameForLoadedAsset(class UObject* LoadedAsset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorAssetLibrary", "GetPathNameForLoadedAsset");

	Params::EditorAssetLibrary_GetPathNameForLoadedAsset Parms{};

	Parms.LoadedAsset = LoadedAsset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorAssetLibrary.GetProjectRootAssetDirectory
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UEditorAssetLibrary::GetProjectRootAssetDirectory()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorAssetLibrary", "GetProjectRootAssetDirectory");

	Params::EditorAssetLibrary_GetProjectRootAssetDirectory Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorAssetLibrary.GetTagValues
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           AssetPath                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<class FName, class FString>        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

TMap<class FName, class FString> UEditorAssetLibrary::GetTagValues(const class FString& AssetPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorAssetLibrary", "GetTagValues");

	Params::EditorAssetLibrary_GetTagValues Parms{};

	Parms.AssetPath = std::move(AssetPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorAssetLibrary.ListAssetByTagValue
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FName                             TagName                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           TagValue                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> UEditorAssetLibrary::ListAssetByTagValue(class FName TagName, const class FString& TagValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorAssetLibrary", "ListAssetByTagValue");

	Params::EditorAssetLibrary_ListAssetByTagValue Parms{};

	Parms.TagName = TagName;
	Parms.TagValue = std::move(TagValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorAssetLibrary.ListAssets
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           DirectoryPath                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bRecursive                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIncludeFolder                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> UEditorAssetLibrary::ListAssets(const class FString& DirectoryPath, bool bRecursive, bool bIncludeFolder)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorAssetLibrary", "ListAssets");

	Params::EditorAssetLibrary_ListAssets Parms{};

	Parms.DirectoryPath = std::move(DirectoryPath);
	Parms.bRecursive = bRecursive;
	Parms.bIncludeFolder = bIncludeFolder;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorAssetLibrary.LoadAsset
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           AssetPath                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UObject* UEditorAssetLibrary::LoadAsset(const class FString& AssetPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorAssetLibrary", "LoadAsset");

	Params::EditorAssetLibrary_LoadAsset Parms{};

	Parms.AssetPath = std::move(AssetPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorAssetLibrary.LoadBlueprintClass
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           AssetPath                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UClass*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UClass* UEditorAssetLibrary::LoadBlueprintClass(const class FString& AssetPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorAssetLibrary", "LoadBlueprintClass");

	Params::EditorAssetLibrary_LoadBlueprintClass Parms{};

	Parms.AssetPath = std::move(AssetPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorAssetLibrary.MakeDirectory
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           DirectoryPath                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEditorAssetLibrary::MakeDirectory(const class FString& DirectoryPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorAssetLibrary", "MakeDirectory");

	Params::EditorAssetLibrary_MakeDirectory Parms{};

	Parms.DirectoryPath = std::move(DirectoryPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorAssetLibrary.RemoveMetadataTag
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Tag                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEditorAssetLibrary::RemoveMetadataTag(class UObject* Object, class FName Tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorAssetLibrary", "RemoveMetadataTag");

	Params::EditorAssetLibrary_RemoveMetadataTag Parms{};

	Parms.Object = Object;
	Parms.Tag = Tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function EditorScriptingUtilities.EditorAssetLibrary.RenameAsset
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           SourceAssetPath                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           DestinationAssetPath                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEditorAssetLibrary::RenameAsset(const class FString& SourceAssetPath, const class FString& DestinationAssetPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorAssetLibrary", "RenameAsset");

	Params::EditorAssetLibrary_RenameAsset Parms{};

	Parms.SourceAssetPath = std::move(SourceAssetPath);
	Parms.DestinationAssetPath = std::move(DestinationAssetPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorAssetLibrary.RenameDirectory
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           SourceDirectoryPath                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           DestinationDirectoryPath                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEditorAssetLibrary::RenameDirectory(const class FString& SourceDirectoryPath, const class FString& DestinationDirectoryPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorAssetLibrary", "RenameDirectory");

	Params::EditorAssetLibrary_RenameDirectory Parms{};

	Parms.SourceDirectoryPath = std::move(SourceDirectoryPath);
	Parms.DestinationDirectoryPath = std::move(DestinationDirectoryPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorAssetLibrary.RenameLoadedAsset
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          SourceAsset                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           DestinationAssetPath                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEditorAssetLibrary::RenameLoadedAsset(class UObject* SourceAsset, const class FString& DestinationAssetPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorAssetLibrary", "RenameLoadedAsset");

	Params::EditorAssetLibrary_RenameLoadedAsset Parms{};

	Parms.SourceAsset = SourceAsset;
	Parms.DestinationAssetPath = std::move(DestinationAssetPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorAssetLibrary.SaveAsset
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           AssetToSave                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bOnlyIfIsDirty                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEditorAssetLibrary::SaveAsset(const class FString& AssetToSave, bool bOnlyIfIsDirty)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorAssetLibrary", "SaveAsset");

	Params::EditorAssetLibrary_SaveAsset Parms{};

	Parms.AssetToSave = std::move(AssetToSave);
	Parms.bOnlyIfIsDirty = bOnlyIfIsDirty;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorAssetLibrary.SaveDirectory
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           DirectoryPath                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bOnlyIfIsDirty                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bRecursive                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEditorAssetLibrary::SaveDirectory(const class FString& DirectoryPath, bool bOnlyIfIsDirty, bool bRecursive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorAssetLibrary", "SaveDirectory");

	Params::EditorAssetLibrary_SaveDirectory Parms{};

	Parms.DirectoryPath = std::move(DirectoryPath);
	Parms.bOnlyIfIsDirty = bOnlyIfIsDirty;
	Parms.bRecursive = bRecursive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorAssetLibrary.SaveLoadedAsset
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          AssetToSave                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bOnlyIfIsDirty                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEditorAssetLibrary::SaveLoadedAsset(class UObject* AssetToSave, bool bOnlyIfIsDirty)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorAssetLibrary", "SaveLoadedAsset");

	Params::EditorAssetLibrary_SaveLoadedAsset Parms{};

	Parms.AssetToSave = AssetToSave;
	Parms.bOnlyIfIsDirty = bOnlyIfIsDirty;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorAssetLibrary.SaveLoadedAssets
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class UObject*>                  AssetsToSave                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bOnlyIfIsDirty                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEditorAssetLibrary::SaveLoadedAssets(const TArray<class UObject*>& AssetsToSave, bool bOnlyIfIsDirty)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorAssetLibrary", "SaveLoadedAssets");

	Params::EditorAssetLibrary_SaveLoadedAssets Parms{};

	Parms.AssetsToSave = std::move(AssetsToSave);
	Parms.bOnlyIfIsDirty = bOnlyIfIsDirty;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorAssetLibrary.SetMetadataTag
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Tag                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Value                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEditorAssetLibrary::SetMetadataTag(class UObject* Object, class FName Tag, const class FString& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorAssetLibrary", "SetMetadataTag");

	Params::EditorAssetLibrary_SetMetadataTag Parms{};

	Parms.Object = Object;
	Parms.Tag = Tag;
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function EditorScriptingUtilities.EditorAssetLibrary.SyncBrowserToObjects
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FString>                   AssetPaths                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UEditorAssetLibrary::SyncBrowserToObjects(const TArray<class FString>& AssetPaths)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorAssetLibrary", "SyncBrowserToObjects");

	Params::EditorAssetLibrary_SyncBrowserToObjects Parms{};

	Parms.AssetPaths = std::move(AssetPaths);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function EditorScriptingUtilities.EditorDialogLibrary.ShowMessage
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FText                             Title                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FText                             Message                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// EAppMsgType                             MessageType                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAppReturnType                          DefaultValue                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAppMsgCategory                         MessageCategory                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAppReturnType                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EAppReturnType UEditorDialogLibrary::ShowMessage(const class FText& Title, const class FText& Message, EAppMsgType MessageType, EAppReturnType DefaultValue, EAppMsgCategory MessageCategory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorDialogLibrary", "ShowMessage");

	Params::EditorDialogLibrary_ShowMessage Parms{};

	Parms.Title = std::move(Title);
	Parms.Message = std::move(Message);
	Parms.MessageType = MessageType;
	Parms.DefaultValue = DefaultValue;
	Parms.MessageCategory = MessageCategory;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorDialogLibrary.ShowObjectDetailsView
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FText                             Title                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UObject*                          InOutObject                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FEditorDialogLibraryObjectDetailsViewOptionsOptions                                                (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEditorDialogLibrary::ShowObjectDetailsView(const class FText& Title, class UObject* InOutObject, const struct FEditorDialogLibraryObjectDetailsViewOptions& Options)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorDialogLibrary", "ShowObjectDetailsView");

	Params::EditorDialogLibrary_ShowObjectDetailsView Parms{};

	Parms.Title = std::move(Title);
	Parms.InOutObject = InOutObject;
	Parms.Options = std::move(Options);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorDialogLibrary.ShowObjectsDetailsView
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FText                             Title                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<class UObject*>                  InOutObjects                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FEditorDialogLibraryObjectDetailsViewOptionsOptions                                                (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEditorDialogLibrary::ShowObjectsDetailsView(const class FText& Title, const TArray<class UObject*>& InOutObjects, const struct FEditorDialogLibraryObjectDetailsViewOptions& Options)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorDialogLibrary", "ShowObjectsDetailsView");

	Params::EditorDialogLibrary_ShowObjectsDetailsView Parms{};

	Parms.Title = std::move(Title);
	Parms.InOutObjects = std::move(InOutObjects);
	Parms.Options = std::move(Options);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorDialogLibrary.ShowSuppressableWarningDialog
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FText                             Title                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FText                             Message                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           InIniSettingName                                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           InIniSettingFileNameOverride                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bDefaultValue                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEditorDialogLibrary::ShowSuppressableWarningDialog(const class FText& Title, const class FText& Message, const class FString& InIniSettingName, const class FString& InIniSettingFileNameOverride, bool bDefaultValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorDialogLibrary", "ShowSuppressableWarningDialog");

	Params::EditorDialogLibrary_ShowSuppressableWarningDialog Parms{};

	Parms.Title = std::move(Title);
	Parms.Message = std::move(Message);
	Parms.InIniSettingName = std::move(InIniSettingName);
	Parms.InIniSettingFileNameOverride = std::move(InIniSettingFileNameOverride);
	Parms.bDefaultValue = bDefaultValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorFilterLibrary.ByActorLabel
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class AActor*>                   TargetArray                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           NameSubString                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EEditorScriptingStringMatchType         StringMatch                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EEditorScriptingFilterType              FilterType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIgnoreCase                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class AActor*> UEditorFilterLibrary::ByActorLabel(const TArray<class AActor*>& TargetArray, const class FString& NameSubString, EEditorScriptingStringMatchType StringMatch, EEditorScriptingFilterType FilterType, bool bIgnoreCase)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorFilterLibrary", "ByActorLabel");

	Params::EditorFilterLibrary_ByActorLabel Parms{};

	Parms.TargetArray = std::move(TargetArray);
	Parms.NameSubString = std::move(NameSubString);
	Parms.StringMatch = StringMatch;
	Parms.FilterType = FilterType;
	Parms.bIgnoreCase = bIgnoreCase;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorFilterLibrary.ByActorTag
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class AActor*>                   TargetArray                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class FName                             Tag                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EEditorScriptingFilterType              FilterType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class AActor*> UEditorFilterLibrary::ByActorTag(const TArray<class AActor*>& TargetArray, class FName Tag, EEditorScriptingFilterType FilterType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorFilterLibrary", "ByActorTag");

	Params::EditorFilterLibrary_ByActorTag Parms{};

	Parms.TargetArray = std::move(TargetArray);
	Parms.Tag = Tag;
	Parms.FilterType = FilterType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorFilterLibrary.ByClass
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class UObject*>                  TargetArray                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TSubclassOf<class UObject>              ObjectClass                                            (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EEditorScriptingFilterType              FilterType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UObject*>                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UObject*> UEditorFilterLibrary::ByClass(const TArray<class UObject*>& TargetArray, TSubclassOf<class UObject> ObjectClass, EEditorScriptingFilterType FilterType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorFilterLibrary", "ByClass");

	Params::EditorFilterLibrary_ByClass Parms{};

	Parms.TargetArray = std::move(TargetArray);
	Parms.ObjectClass = ObjectClass;
	Parms.FilterType = FilterType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorFilterLibrary.ByIDName
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class UObject*>                  TargetArray                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           NameSubString                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EEditorScriptingStringMatchType         StringMatch                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EEditorScriptingFilterType              FilterType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UObject*>                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UObject*> UEditorFilterLibrary::ByIDName(const TArray<class UObject*>& TargetArray, const class FString& NameSubString, EEditorScriptingStringMatchType StringMatch, EEditorScriptingFilterType FilterType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorFilterLibrary", "ByIDName");

	Params::EditorFilterLibrary_ByIDName Parms{};

	Parms.TargetArray = std::move(TargetArray);
	Parms.NameSubString = std::move(NameSubString);
	Parms.StringMatch = StringMatch;
	Parms.FilterType = FilterType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorFilterLibrary.ByLayer
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class AActor*>                   TargetArray                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class FName                             LayerName                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EEditorScriptingFilterType              FilterType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class AActor*> UEditorFilterLibrary::ByLayer(const TArray<class AActor*>& TargetArray, class FName LayerName, EEditorScriptingFilterType FilterType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorFilterLibrary", "ByLayer");

	Params::EditorFilterLibrary_ByLayer Parms{};

	Parms.TargetArray = std::move(TargetArray);
	Parms.LayerName = LayerName;
	Parms.FilterType = FilterType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorFilterLibrary.ByLevelName
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class AActor*>                   TargetArray                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class FName                             LevelName                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EEditorScriptingFilterType              FilterType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class AActor*> UEditorFilterLibrary::ByLevelName(const TArray<class AActor*>& TargetArray, class FName LevelName, EEditorScriptingFilterType FilterType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorFilterLibrary", "ByLevelName");

	Params::EditorFilterLibrary_ByLevelName Parms{};

	Parms.TargetArray = std::move(TargetArray);
	Parms.LevelName = LevelName;
	Parms.FilterType = FilterType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorFilterLibrary.BySelection
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class AActor*>                   TargetArray                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// EEditorScriptingFilterType              FilterType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class AActor*> UEditorFilterLibrary::BySelection(const TArray<class AActor*>& TargetArray, EEditorScriptingFilterType FilterType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorFilterLibrary", "BySelection");

	Params::EditorFilterLibrary_BySelection Parms{};

	Parms.TargetArray = std::move(TargetArray);
	Parms.FilterType = FilterType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorLevelLibrary.ClearActorSelectionSet
// (Final, Native, Static, Public, BlueprintCallable)

void UEditorLevelLibrary::ClearActorSelectionSet()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorLevelLibrary", "ClearActorSelectionSet");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function EditorScriptingUtilities.EditorLevelLibrary.ConvertActors
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class AActor*>                   Actors                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TSubclassOf<class AActor>               ActorClass                                             (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           StaticMeshPackagePath                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class AActor*> UEditorLevelLibrary::ConvertActors(const TArray<class AActor*>& Actors, TSubclassOf<class AActor> ActorClass, const class FString& StaticMeshPackagePath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorLevelLibrary", "ConvertActors");

	Params::EditorLevelLibrary_ConvertActors Parms{};

	Parms.Actors = std::move(Actors);
	Parms.ActorClass = ActorClass;
	Parms.StaticMeshPackagePath = std::move(StaticMeshPackagePath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorLevelLibrary.CreateProxyMeshActor
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class AStaticMeshActor*>         ActorsToMerge                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FCreateProxyMeshActorOptions     MergeOptions                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class AStaticMeshActor*                 OutMergedActor                                         (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEditorLevelLibrary::CreateProxyMeshActor(const TArray<class AStaticMeshActor*>& ActorsToMerge, const struct FCreateProxyMeshActorOptions& MergeOptions, class AStaticMeshActor** OutMergedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorLevelLibrary", "CreateProxyMeshActor");

	Params::EditorLevelLibrary_CreateProxyMeshActor Parms{};

	Parms.ActorsToMerge = std::move(ActorsToMerge);
	Parms.MergeOptions = std::move(MergeOptions);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutMergedActor != nullptr)
		*OutMergedActor = Parms.OutMergedActor;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorLevelLibrary.DestroyActor
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           ActorToDestroy                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEditorLevelLibrary::DestroyActor(class AActor* ActorToDestroy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorLevelLibrary", "DestroyActor");

	Params::EditorLevelLibrary_DestroyActor Parms{};

	Parms.ActorToDestroy = ActorToDestroy;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorLevelLibrary.EditorEndPlay
// (Final, Native, Static, Public, BlueprintCallable, EditorOnly)

void UEditorLevelLibrary::EditorEndPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorLevelLibrary", "EditorEndPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function EditorScriptingUtilities.EditorLevelLibrary.EditorInvalidateViewports
// (Final, Native, Static, Public, BlueprintCallable, EditorOnly)

void UEditorLevelLibrary::EditorInvalidateViewports()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorLevelLibrary", "EditorInvalidateViewports");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function EditorScriptingUtilities.EditorLevelLibrary.EditorPlaySimulate
// (Final, Native, Static, Public, BlueprintCallable, EditorOnly)

void UEditorLevelLibrary::EditorPlaySimulate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorLevelLibrary", "EditorPlaySimulate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function EditorScriptingUtilities.EditorLevelLibrary.EditorSetGameView
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    bGameView                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEditorLevelLibrary::EditorSetGameView(bool bGameView)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorLevelLibrary", "EditorSetGameView");

	Params::EditorLevelLibrary_EditorSetGameView Parms{};

	Parms.bGameView = bGameView;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function EditorScriptingUtilities.EditorLevelLibrary.EjectPilotLevelActor
// (Final, Native, Static, Public, BlueprintCallable)

void UEditorLevelLibrary::EjectPilotLevelActor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorLevelLibrary", "EjectPilotLevelActor");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function EditorScriptingUtilities.EditorLevelLibrary.GetActorReference
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           PathToActor                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UEditorLevelLibrary::GetActorReference(const class FString& PathToActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorLevelLibrary", "GetActorReference");

	Params::EditorLevelLibrary_GetActorReference Parms{};

	Parms.PathToActor = std::move(PathToActor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorLevelLibrary.GetAllLevelActors
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TArray<class AActor*>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class AActor*> UEditorLevelLibrary::GetAllLevelActors()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorLevelLibrary", "GetAllLevelActors");

	Params::EditorLevelLibrary_GetAllLevelActors Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorLevelLibrary.GetAllLevelActorsComponents
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TArray<class UActorComponent*>          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<class UActorComponent*> UEditorLevelLibrary::GetAllLevelActorsComponents()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorLevelLibrary", "GetAllLevelActorsComponents");

	Params::EditorLevelLibrary_GetAllLevelActorsComponents Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorLevelLibrary.GetEditorWorld
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UWorld*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWorld* UEditorLevelLibrary::GetEditorWorld()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorLevelLibrary", "GetEditorWorld");

	Params::EditorLevelLibrary_GetEditorWorld Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorLevelLibrary.GetGameWorld
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UWorld*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWorld* UEditorLevelLibrary::GetGameWorld()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorLevelLibrary", "GetGameWorld");

	Params::EditorLevelLibrary_GetGameWorld Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorLevelLibrary.GetLevelViewportCameraInfo
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                          CameraLocation                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         CameraRotation                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEditorLevelLibrary::GetLevelViewportCameraInfo(struct FVector* CameraLocation, struct FRotator* CameraRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorLevelLibrary", "GetLevelViewportCameraInfo");

	Params::EditorLevelLibrary_GetLevelViewportCameraInfo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (CameraLocation != nullptr)
		*CameraLocation = std::move(Parms.CameraLocation);

	if (CameraRotation != nullptr)
		*CameraRotation = std::move(Parms.CameraRotation);

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorLevelLibrary.GetPIEWorlds
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    bIncludeDedicatedServer                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UWorld*>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UWorld*> UEditorLevelLibrary::GetPIEWorlds(bool bIncludeDedicatedServer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorLevelLibrary", "GetPIEWorlds");

	Params::EditorLevelLibrary_GetPIEWorlds Parms{};

	Parms.bIncludeDedicatedServer = bIncludeDedicatedServer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorLevelLibrary.GetSelectedLevelActors
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TArray<class AActor*>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class AActor*> UEditorLevelLibrary::GetSelectedLevelActors()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorLevelLibrary", "GetSelectedLevelActors");

	Params::EditorLevelLibrary_GetSelectedLevelActors Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorLevelLibrary.JoinStaticMeshActors
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class AStaticMeshActor*>         ActorsToJoin                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FJoinStaticMeshActorsOptions     JoinOptions                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UEditorLevelLibrary::JoinStaticMeshActors(const TArray<class AStaticMeshActor*>& ActorsToJoin, const struct FJoinStaticMeshActorsOptions& JoinOptions)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorLevelLibrary", "JoinStaticMeshActors");

	Params::EditorLevelLibrary_JoinStaticMeshActors Parms{};

	Parms.ActorsToJoin = std::move(ActorsToJoin);
	Parms.JoinOptions = std::move(JoinOptions);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorLevelLibrary.LoadLevel
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           AssetPath                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEditorLevelLibrary::LoadLevel(const class FString& AssetPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorLevelLibrary", "LoadLevel");

	Params::EditorLevelLibrary_LoadLevel Parms{};

	Parms.AssetPath = std::move(AssetPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorLevelLibrary.MergeStaticMeshActors
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class AStaticMeshActor*>         ActorsToMerge                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FMergeStaticMeshActorsOptions    MergeOptions                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class AStaticMeshActor*                 OutMergedActor                                         (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEditorLevelLibrary::MergeStaticMeshActors(const TArray<class AStaticMeshActor*>& ActorsToMerge, const struct FMergeStaticMeshActorsOptions& MergeOptions, class AStaticMeshActor** OutMergedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorLevelLibrary", "MergeStaticMeshActors");

	Params::EditorLevelLibrary_MergeStaticMeshActors Parms{};

	Parms.ActorsToMerge = std::move(ActorsToMerge);
	Parms.MergeOptions = std::move(MergeOptions);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutMergedActor != nullptr)
		*OutMergedActor = Parms.OutMergedActor;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorLevelLibrary.NewLevel
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           AssetPath                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEditorLevelLibrary::NewLevel(const class FString& AssetPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorLevelLibrary", "NewLevel");

	Params::EditorLevelLibrary_NewLevel Parms{};

	Parms.AssetPath = std::move(AssetPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorLevelLibrary.NewLevelFromTemplate
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           AssetPath                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           TemplateAssetPath                                      (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEditorLevelLibrary::NewLevelFromTemplate(const class FString& AssetPath, const class FString& TemplateAssetPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorLevelLibrary", "NewLevelFromTemplate");

	Params::EditorLevelLibrary_NewLevelFromTemplate Parms{};

	Parms.AssetPath = std::move(AssetPath);
	Parms.TemplateAssetPath = std::move(TemplateAssetPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorLevelLibrary.PilotLevelActor
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           ActorToPilot                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEditorLevelLibrary::PilotLevelActor(class AActor* ActorToPilot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorLevelLibrary", "PilotLevelActor");

	Params::EditorLevelLibrary_PilotLevelActor Parms{};

	Parms.ActorToPilot = ActorToPilot;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function EditorScriptingUtilities.EditorLevelLibrary.ReplaceMeshComponentsMaterials
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class UMeshComponent*>           MeshComponents                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class UMaterialInterface*               MaterialToBeReplaced                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*               NewMaterial                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEditorLevelLibrary::ReplaceMeshComponentsMaterials(const TArray<class UMeshComponent*>& MeshComponents, class UMaterialInterface* MaterialToBeReplaced, class UMaterialInterface* NewMaterial)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorLevelLibrary", "ReplaceMeshComponentsMaterials");

	Params::EditorLevelLibrary_ReplaceMeshComponentsMaterials Parms{};

	Parms.MeshComponents = std::move(MeshComponents);
	Parms.MaterialToBeReplaced = MaterialToBeReplaced;
	Parms.NewMaterial = NewMaterial;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function EditorScriptingUtilities.EditorLevelLibrary.ReplaceMeshComponentsMaterialsOnActors
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class AActor*>                   Actors                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class UMaterialInterface*               MaterialToBeReplaced                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*               NewMaterial                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEditorLevelLibrary::ReplaceMeshComponentsMaterialsOnActors(const TArray<class AActor*>& Actors, class UMaterialInterface* MaterialToBeReplaced, class UMaterialInterface* NewMaterial)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorLevelLibrary", "ReplaceMeshComponentsMaterialsOnActors");

	Params::EditorLevelLibrary_ReplaceMeshComponentsMaterialsOnActors Parms{};

	Parms.Actors = std::move(Actors);
	Parms.MaterialToBeReplaced = MaterialToBeReplaced;
	Parms.NewMaterial = NewMaterial;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function EditorScriptingUtilities.EditorLevelLibrary.ReplaceMeshComponentsMeshes
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class UStaticMeshComponent*>     MeshComponents                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class UStaticMesh*                      MeshToBeReplaced                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UStaticMesh*                      NewMesh                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEditorLevelLibrary::ReplaceMeshComponentsMeshes(const TArray<class UStaticMeshComponent*>& MeshComponents, class UStaticMesh* MeshToBeReplaced, class UStaticMesh* NewMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorLevelLibrary", "ReplaceMeshComponentsMeshes");

	Params::EditorLevelLibrary_ReplaceMeshComponentsMeshes Parms{};

	Parms.MeshComponents = std::move(MeshComponents);
	Parms.MeshToBeReplaced = MeshToBeReplaced;
	Parms.NewMesh = NewMesh;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function EditorScriptingUtilities.EditorLevelLibrary.ReplaceMeshComponentsMeshesOnActors
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class AActor*>                   Actors                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class UStaticMesh*                      MeshToBeReplaced                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UStaticMesh*                      NewMesh                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEditorLevelLibrary::ReplaceMeshComponentsMeshesOnActors(const TArray<class AActor*>& Actors, class UStaticMesh* MeshToBeReplaced, class UStaticMesh* NewMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorLevelLibrary", "ReplaceMeshComponentsMeshesOnActors");

	Params::EditorLevelLibrary_ReplaceMeshComponentsMeshesOnActors Parms{};

	Parms.Actors = std::move(Actors);
	Parms.MeshToBeReplaced = MeshToBeReplaced;
	Parms.NewMesh = NewMesh;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function EditorScriptingUtilities.EditorLevelLibrary.ReplaceSelectedActors
// (Final, Native, Static, Public, BlueprintCallable, EditorOnly)
// Parameters:
// class FString                           InAssetPath                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEditorLevelLibrary::ReplaceSelectedActors(const class FString& InAssetPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorLevelLibrary", "ReplaceSelectedActors");

	Params::EditorLevelLibrary_ReplaceSelectedActors Parms{};

	Parms.InAssetPath = std::move(InAssetPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function EditorScriptingUtilities.EditorLevelLibrary.SaveAllDirtyLevels
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEditorLevelLibrary::SaveAllDirtyLevels()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorLevelLibrary", "SaveAllDirtyLevels");

	Params::EditorLevelLibrary_SaveAllDirtyLevels Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorLevelLibrary.SaveCurrentLevel
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEditorLevelLibrary::SaveCurrentLevel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorLevelLibrary", "SaveCurrentLevel");

	Params::EditorLevelLibrary_SaveCurrentLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorLevelLibrary.SelectNothing
// (Final, Native, Static, Public, BlueprintCallable)

void UEditorLevelLibrary::SelectNothing()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorLevelLibrary", "SelectNothing");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function EditorScriptingUtilities.EditorLevelLibrary.SetActorSelectionState
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bShouldBeSelected                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEditorLevelLibrary::SetActorSelectionState(class AActor* Actor, bool bShouldBeSelected)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorLevelLibrary", "SetActorSelectionState");

	Params::EditorLevelLibrary_SetActorSelectionState Parms{};

	Parms.Actor = Actor;
	Parms.bShouldBeSelected = bShouldBeSelected;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function EditorScriptingUtilities.EditorLevelLibrary.SetCurrentLevelByName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FName                             LevelName                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEditorLevelLibrary::SetCurrentLevelByName(class FName LevelName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorLevelLibrary", "SetCurrentLevelByName");

	Params::EditorLevelLibrary_SetCurrentLevelByName Parms{};

	Parms.LevelName = LevelName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorLevelLibrary.SetLevelViewportCameraInfo
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          CameraLocation                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         CameraRotation                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UEditorLevelLibrary::SetLevelViewportCameraInfo(const struct FVector& CameraLocation, const struct FRotator& CameraRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorLevelLibrary", "SetLevelViewportCameraInfo");

	Params::EditorLevelLibrary_SetLevelViewportCameraInfo Parms{};

	Parms.CameraLocation = std::move(CameraLocation);
	Parms.CameraRotation = std::move(CameraRotation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function EditorScriptingUtilities.EditorLevelLibrary.SetSelectedLevelActors
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class AActor*>                   ActorsToSelect                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UEditorLevelLibrary::SetSelectedLevelActors(const TArray<class AActor*>& ActorsToSelect)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorLevelLibrary", "SetSelectedLevelActors");

	Params::EditorLevelLibrary_SetSelectedLevelActors Parms{};

	Parms.ActorsToSelect = std::move(ActorsToSelect);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function EditorScriptingUtilities.EditorLevelLibrary.SpawnActorFromClass
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// TSubclassOf<class AActor>               ActorClass                                             (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Location                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         Rotation                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bTransient                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UEditorLevelLibrary::SpawnActorFromClass(TSubclassOf<class AActor> ActorClass, const struct FVector& Location, const struct FRotator& Rotation, bool bTransient)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorLevelLibrary", "SpawnActorFromClass");

	Params::EditorLevelLibrary_SpawnActorFromClass Parms{};

	Parms.ActorClass = ActorClass;
	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);
	Parms.bTransient = bTransient;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorLevelLibrary.SpawnActorFromObject
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          ObjectToUse                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Location                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         Rotation                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bTransient                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UEditorLevelLibrary::SpawnActorFromObject(class UObject* ObjectToUse, const struct FVector& Location, const struct FRotator& Rotation, bool bTransient)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorLevelLibrary", "SpawnActorFromObject");

	Params::EditorLevelLibrary_SpawnActorFromObject Parms{};

	Parms.ObjectToUse = ObjectToUse;
	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);
	Parms.bTransient = bTransient;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorPythonScriptingLibrary.GetKeepPythonScriptAlive
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEditorPythonScriptingLibrary::GetKeepPythonScriptAlive()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorPythonScriptingLibrary", "GetKeepPythonScriptAlive");

	Params::EditorPythonScriptingLibrary_GetKeepPythonScriptAlive Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorPythonScriptingLibrary.SetKeepPythonScriptAlive
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewKeepAlive                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEditorPythonScriptingLibrary::SetKeepPythonScriptAlive(const bool bNewKeepAlive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorPythonScriptingLibrary", "SetKeepPythonScriptAlive");

	Params::EditorPythonScriptingLibrary_SetKeepPythonScriptAlive Parms{};

	Parms.bNewKeepAlive = bNewKeepAlive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function EditorScriptingUtilities.EditorSkeletalMeshLibrary.CreatePhysicsAsset
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USkeletalMesh*                    SkeletalMesh                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPhysicsAsset*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UPhysicsAsset* UEditorSkeletalMeshLibrary::CreatePhysicsAsset(class USkeletalMesh* SkeletalMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorSkeletalMeshLibrary", "CreatePhysicsAsset");

	Params::EditorSkeletalMeshLibrary_CreatePhysicsAsset Parms{};

	Parms.SkeletalMesh = SkeletalMesh;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorSkeletalMeshLibrary.GetLodBuildSettings
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class USkeletalMesh*                    SkeletalMesh                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LodIndex                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSkeletalMeshBuildSettings       OutBuildOptions                                        (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)

void UEditorSkeletalMeshLibrary::GetLodBuildSettings(const class USkeletalMesh* SkeletalMesh, const int32 LodIndex, struct FSkeletalMeshBuildSettings* OutBuildOptions)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorSkeletalMeshLibrary", "GetLodBuildSettings");

	Params::EditorSkeletalMeshLibrary_GetLodBuildSettings Parms{};

	Parms.SkeletalMesh = SkeletalMesh;
	Parms.LodIndex = LodIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutBuildOptions != nullptr)
		*OutBuildOptions = std::move(Parms.OutBuildOptions);
}


// Function EditorScriptingUtilities.EditorSkeletalMeshLibrary.GetLODCount
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USkeletalMesh*                    SkeletalMesh                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UEditorSkeletalMeshLibrary::GetLODCount(class USkeletalMesh* SkeletalMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorSkeletalMeshLibrary", "GetLODCount");

	Params::EditorSkeletalMeshLibrary_GetLODCount Parms{};

	Parms.SkeletalMesh = SkeletalMesh;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorSkeletalMeshLibrary.GetNumVerts
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class USkeletalMesh*                    SkeletalMesh                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LODIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UEditorSkeletalMeshLibrary::GetNumVerts(class USkeletalMesh* SkeletalMesh, int32 LODIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorSkeletalMeshLibrary", "GetNumVerts");

	Params::EditorSkeletalMeshLibrary_GetNumVerts Parms{};

	Parms.SkeletalMesh = SkeletalMesh;
	Parms.LODIndex = LODIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorSkeletalMeshLibrary.ImportLOD
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USkeletalMesh*                    BaseMesh                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LODIndex                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           SourceFilename                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UEditorSkeletalMeshLibrary::ImportLOD(class USkeletalMesh* BaseMesh, const int32 LODIndex, const class FString& SourceFilename)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorSkeletalMeshLibrary", "ImportLOD");

	Params::EditorSkeletalMeshLibrary_ImportLOD Parms{};

	Parms.BaseMesh = BaseMesh;
	Parms.LODIndex = LODIndex;
	Parms.SourceFilename = std::move(SourceFilename);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorSkeletalMeshLibrary.RegenerateLOD
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USkeletalMesh*                    SkeletalMesh                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NewLODCount                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bRegenerateEvenIfImported                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bGenerateBaseLOD                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEditorSkeletalMeshLibrary::RegenerateLOD(class USkeletalMesh* SkeletalMesh, int32 NewLODCount, bool bRegenerateEvenIfImported, bool bGenerateBaseLOD)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorSkeletalMeshLibrary", "RegenerateLOD");

	Params::EditorSkeletalMeshLibrary_RegenerateLOD Parms{};

	Parms.SkeletalMesh = SkeletalMesh;
	Parms.NewLODCount = NewLODCount;
	Parms.bRegenerateEvenIfImported = bRegenerateEvenIfImported;
	Parms.bGenerateBaseLOD = bGenerateBaseLOD;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorSkeletalMeshLibrary.ReimportAllCustomLODs
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USkeletalMesh*                    SkeletalMesh                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEditorSkeletalMeshLibrary::ReimportAllCustomLODs(class USkeletalMesh* SkeletalMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorSkeletalMeshLibrary", "ReimportAllCustomLODs");

	Params::EditorSkeletalMeshLibrary_ReimportAllCustomLODs Parms{};

	Parms.SkeletalMesh = SkeletalMesh;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorSkeletalMeshLibrary.RemoveLODs
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USkeletalMesh*                    SkeletalMesh                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<int32>                           ToRemoveLODs                                           (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEditorSkeletalMeshLibrary::RemoveLODs(class USkeletalMesh* SkeletalMesh, const TArray<int32>& ToRemoveLODs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorSkeletalMeshLibrary", "RemoveLODs");

	Params::EditorSkeletalMeshLibrary_RemoveLODs Parms{};

	Parms.SkeletalMesh = SkeletalMesh;
	Parms.ToRemoveLODs = std::move(ToRemoveLODs);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorSkeletalMeshLibrary.RenameSocket
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USkeletalMesh*                    SkeletalMesh                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             OldName                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             NewName                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEditorSkeletalMeshLibrary::RenameSocket(class USkeletalMesh* SkeletalMesh, class FName OldName, class FName NewName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorSkeletalMeshLibrary", "RenameSocket");

	Params::EditorSkeletalMeshLibrary_RenameSocket Parms{};

	Parms.SkeletalMesh = SkeletalMesh;
	Parms.OldName = OldName;
	Parms.NewName = NewName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorSkeletalMeshLibrary.SetLodBuildSettings
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class USkeletalMesh*                    SkeletalMesh                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LodIndex                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSkeletalMeshBuildSettings       BuildOptions                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UEditorSkeletalMeshLibrary::SetLodBuildSettings(class USkeletalMesh* SkeletalMesh, const int32 LodIndex, const struct FSkeletalMeshBuildSettings& BuildOptions)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorSkeletalMeshLibrary", "SetLodBuildSettings");

	Params::EditorSkeletalMeshLibrary_SetLodBuildSettings Parms{};

	Parms.SkeletalMesh = SkeletalMesh;
	Parms.LodIndex = LodIndex;
	Parms.BuildOptions = std::move(BuildOptions);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function EditorScriptingUtilities.EditorSkeletalMeshLibrary.StripLODGeometry
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USkeletalMesh*                    SkeletalMesh                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LODIndex                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture2D*                       TextureMask                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Threshold                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEditorSkeletalMeshLibrary::StripLODGeometry(class USkeletalMesh* SkeletalMesh, const int32 LODIndex, class UTexture2D* TextureMask, const float Threshold)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorSkeletalMeshLibrary", "StripLODGeometry");

	Params::EditorSkeletalMeshLibrary_StripLODGeometry Parms{};

	Parms.SkeletalMesh = SkeletalMesh;
	Parms.LODIndex = LODIndex;
	Parms.TextureMask = TextureMask;
	Parms.Threshold = Threshold;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorStaticMeshLibrary.AddSimpleCollisions
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UStaticMesh*                      StaticMesh                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EScriptCollisionShapeType               ShapeType                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UEditorStaticMeshLibrary::AddSimpleCollisions(class UStaticMesh* StaticMesh, const EScriptCollisionShapeType ShapeType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorStaticMeshLibrary", "AddSimpleCollisions");

	Params::EditorStaticMeshLibrary_AddSimpleCollisions Parms{};

	Parms.StaticMesh = StaticMesh;
	Parms.ShapeType = ShapeType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorStaticMeshLibrary.AddSimpleCollisionsWithNotification
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UStaticMesh*                      StaticMesh                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EScriptCollisionShapeType               ShapeType                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bApplyChanges                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UEditorStaticMeshLibrary::AddSimpleCollisionsWithNotification(class UStaticMesh* StaticMesh, const EScriptCollisionShapeType ShapeType, bool bApplyChanges)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorStaticMeshLibrary", "AddSimpleCollisionsWithNotification");

	Params::EditorStaticMeshLibrary_AddSimpleCollisionsWithNotification Parms{};

	Parms.StaticMesh = StaticMesh;
	Parms.ShapeType = ShapeType;
	Parms.bApplyChanges = bApplyChanges;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorStaticMeshLibrary.AddUVChannel
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UStaticMesh*                      StaticMesh                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LODIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEditorStaticMeshLibrary::AddUVChannel(class UStaticMesh* StaticMesh, int32 LODIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorStaticMeshLibrary", "AddUVChannel");

	Params::EditorStaticMeshLibrary_AddUVChannel Parms{};

	Parms.StaticMesh = StaticMesh;
	Parms.LODIndex = LODIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorStaticMeshLibrary.BulkSetConvexDecompositionCollisions
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class UStaticMesh*>              StaticMeshes                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   HullCount                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaxHullVerts                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   HullPrecision                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEditorStaticMeshLibrary::BulkSetConvexDecompositionCollisions(const TArray<class UStaticMesh*>& StaticMeshes, int32 HullCount, int32 MaxHullVerts, int32 HullPrecision)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorStaticMeshLibrary", "BulkSetConvexDecompositionCollisions");

	Params::EditorStaticMeshLibrary_BulkSetConvexDecompositionCollisions Parms{};

	Parms.StaticMeshes = std::move(StaticMeshes);
	Parms.HullCount = HullCount;
	Parms.MaxHullVerts = MaxHullVerts;
	Parms.HullPrecision = HullPrecision;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorStaticMeshLibrary.BulkSetConvexDecompositionCollisionsWithNotification
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class UStaticMesh*>              StaticMeshes                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   HullCount                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaxHullVerts                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   HullPrecision                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bApplyChanges                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEditorStaticMeshLibrary::BulkSetConvexDecompositionCollisionsWithNotification(const TArray<class UStaticMesh*>& StaticMeshes, int32 HullCount, int32 MaxHullVerts, int32 HullPrecision, bool bApplyChanges)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorStaticMeshLibrary", "BulkSetConvexDecompositionCollisionsWithNotification");

	Params::EditorStaticMeshLibrary_BulkSetConvexDecompositionCollisionsWithNotification Parms{};

	Parms.StaticMeshes = std::move(StaticMeshes);
	Parms.HullCount = HullCount;
	Parms.MaxHullVerts = MaxHullVerts;
	Parms.HullPrecision = HullPrecision;
	Parms.bApplyChanges = bApplyChanges;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorStaticMeshLibrary.EnableSectionCastShadow
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UStaticMesh*                      StaticMesh                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bCastShadow                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LODIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SectionIndex                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEditorStaticMeshLibrary::EnableSectionCastShadow(class UStaticMesh* StaticMesh, bool bCastShadow, int32 LODIndex, int32 SectionIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorStaticMeshLibrary", "EnableSectionCastShadow");

	Params::EditorStaticMeshLibrary_EnableSectionCastShadow Parms{};

	Parms.StaticMesh = StaticMesh;
	Parms.bCastShadow = bCastShadow;
	Parms.LODIndex = LODIndex;
	Parms.SectionIndex = SectionIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function EditorScriptingUtilities.EditorStaticMeshLibrary.EnableSectionCollision
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UStaticMesh*                      StaticMesh                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bCollisionEnabled                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LODIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SectionIndex                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEditorStaticMeshLibrary::EnableSectionCollision(class UStaticMesh* StaticMesh, bool bCollisionEnabled, int32 LODIndex, int32 SectionIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorStaticMeshLibrary", "EnableSectionCollision");

	Params::EditorStaticMeshLibrary_EnableSectionCollision Parms{};

	Parms.StaticMesh = StaticMesh;
	Parms.bCollisionEnabled = bCollisionEnabled;
	Parms.LODIndex = LODIndex;
	Parms.SectionIndex = SectionIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function EditorScriptingUtilities.EditorStaticMeshLibrary.GenerateBoxUVChannel
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UStaticMesh*                      StaticMesh                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LODIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   UVChannelIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Position                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         Orientation                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                          Size                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEditorStaticMeshLibrary::GenerateBoxUVChannel(class UStaticMesh* StaticMesh, int32 LODIndex, int32 UVChannelIndex, const struct FVector& Position, const struct FRotator& Orientation, const struct FVector& Size)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorStaticMeshLibrary", "GenerateBoxUVChannel");

	Params::EditorStaticMeshLibrary_GenerateBoxUVChannel Parms{};

	Parms.StaticMesh = StaticMesh;
	Parms.LODIndex = LODIndex;
	Parms.UVChannelIndex = UVChannelIndex;
	Parms.Position = std::move(Position);
	Parms.Orientation = std::move(Orientation);
	Parms.Size = std::move(Size);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorStaticMeshLibrary.GenerateCylindricalUVChannel
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UStaticMesh*                      StaticMesh                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LODIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   UVChannelIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Position                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         Orientation                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector2D                        Tiling                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEditorStaticMeshLibrary::GenerateCylindricalUVChannel(class UStaticMesh* StaticMesh, int32 LODIndex, int32 UVChannelIndex, const struct FVector& Position, const struct FRotator& Orientation, const struct FVector2D& Tiling)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorStaticMeshLibrary", "GenerateCylindricalUVChannel");

	Params::EditorStaticMeshLibrary_GenerateCylindricalUVChannel Parms{};

	Parms.StaticMesh = StaticMesh;
	Parms.LODIndex = LODIndex;
	Parms.UVChannelIndex = UVChannelIndex;
	Parms.Position = std::move(Position);
	Parms.Orientation = std::move(Orientation);
	Parms.Tiling = std::move(Tiling);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorStaticMeshLibrary.GeneratePlanarUVChannel
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UStaticMesh*                      StaticMesh                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LODIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   UVChannelIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Position                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         Orientation                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector2D                        Tiling                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEditorStaticMeshLibrary::GeneratePlanarUVChannel(class UStaticMesh* StaticMesh, int32 LODIndex, int32 UVChannelIndex, const struct FVector& Position, const struct FRotator& Orientation, const struct FVector2D& Tiling)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorStaticMeshLibrary", "GeneratePlanarUVChannel");

	Params::EditorStaticMeshLibrary_GeneratePlanarUVChannel Parms{};

	Parms.StaticMesh = StaticMesh;
	Parms.LODIndex = LODIndex;
	Parms.UVChannelIndex = UVChannelIndex;
	Parms.Position = std::move(Position);
	Parms.Orientation = std::move(Orientation);
	Parms.Tiling = std::move(Tiling);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorStaticMeshLibrary.GetCollisionComplexity
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UStaticMesh*                      StaticMesh                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECollisionTraceFlag                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ECollisionTraceFlag UEditorStaticMeshLibrary::GetCollisionComplexity(class UStaticMesh* StaticMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorStaticMeshLibrary", "GetCollisionComplexity");

	Params::EditorStaticMeshLibrary_GetCollisionComplexity Parms{};

	Parms.StaticMesh = StaticMesh;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorStaticMeshLibrary.GetConvexCollisionCount
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UStaticMesh*                      StaticMesh                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UEditorStaticMeshLibrary::GetConvexCollisionCount(class UStaticMesh* StaticMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorStaticMeshLibrary", "GetConvexCollisionCount");

	Params::EditorStaticMeshLibrary_GetConvexCollisionCount Parms{};

	Parms.StaticMesh = StaticMesh;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorStaticMeshLibrary.GetLodBuildSettings
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UStaticMesh*                      StaticMesh                                             (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LodIndex                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMeshBuildSettings               OutBuildOptions                                        (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)

void UEditorStaticMeshLibrary::GetLodBuildSettings(const class UStaticMesh* StaticMesh, const int32 LodIndex, struct FMeshBuildSettings* OutBuildOptions)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorStaticMeshLibrary", "GetLodBuildSettings");

	Params::EditorStaticMeshLibrary_GetLodBuildSettings Parms{};

	Parms.StaticMesh = StaticMesh;
	Parms.LodIndex = LodIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutBuildOptions != nullptr)
		*OutBuildOptions = std::move(Parms.OutBuildOptions);
}


// Function EditorScriptingUtilities.EditorStaticMeshLibrary.GetLodCount
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UStaticMesh*                      StaticMesh                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UEditorStaticMeshLibrary::GetLodCount(class UStaticMesh* StaticMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorStaticMeshLibrary", "GetLodCount");

	Params::EditorStaticMeshLibrary_GetLodCount Parms{};

	Parms.StaticMesh = StaticMesh;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorStaticMeshLibrary.GetLodReductionSettings
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UStaticMesh*                      StaticMesh                                             (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LodIndex                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMeshReductionSettings           OutReductionOptions                                    (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)

void UEditorStaticMeshLibrary::GetLodReductionSettings(const class UStaticMesh* StaticMesh, const int32 LodIndex, struct FMeshReductionSettings* OutReductionOptions)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorStaticMeshLibrary", "GetLodReductionSettings");

	Params::EditorStaticMeshLibrary_GetLodReductionSettings Parms{};

	Parms.StaticMesh = StaticMesh;
	Parms.LodIndex = LodIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutReductionOptions != nullptr)
		*OutReductionOptions = std::move(Parms.OutReductionOptions);
}


// Function EditorScriptingUtilities.EditorStaticMeshLibrary.GetLodScreenSizes
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UStaticMesh*                      StaticMesh                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<float>                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<float> UEditorStaticMeshLibrary::GetLodScreenSizes(class UStaticMesh* StaticMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorStaticMeshLibrary", "GetLodScreenSizes");

	Params::EditorStaticMeshLibrary_GetLodScreenSizes Parms{};

	Parms.StaticMesh = StaticMesh;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorStaticMeshLibrary.GetNumberMaterials
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UStaticMesh*                      StaticMesh                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UEditorStaticMeshLibrary::GetNumberMaterials(class UStaticMesh* StaticMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorStaticMeshLibrary", "GetNumberMaterials");

	Params::EditorStaticMeshLibrary_GetNumberMaterials Parms{};

	Parms.StaticMesh = StaticMesh;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorStaticMeshLibrary.GetNumberVerts
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UStaticMesh*                      StaticMesh                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LODIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UEditorStaticMeshLibrary::GetNumberVerts(class UStaticMesh* StaticMesh, int32 LODIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorStaticMeshLibrary", "GetNumberVerts");

	Params::EditorStaticMeshLibrary_GetNumberVerts Parms{};

	Parms.StaticMesh = StaticMesh;
	Parms.LODIndex = LODIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorStaticMeshLibrary.GetNumUVChannels
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UStaticMesh*                      StaticMesh                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LODIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UEditorStaticMeshLibrary::GetNumUVChannels(class UStaticMesh* StaticMesh, int32 LODIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorStaticMeshLibrary", "GetNumUVChannels");

	Params::EditorStaticMeshLibrary_GetNumUVChannels Parms{};

	Parms.StaticMesh = StaticMesh;
	Parms.LODIndex = LODIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorStaticMeshLibrary.GetSimpleCollisionCount
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UStaticMesh*                      StaticMesh                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UEditorStaticMeshLibrary::GetSimpleCollisionCount(class UStaticMesh* StaticMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorStaticMeshLibrary", "GetSimpleCollisionCount");

	Params::EditorStaticMeshLibrary_GetSimpleCollisionCount Parms{};

	Parms.StaticMesh = StaticMesh;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorStaticMeshLibrary.HasInstanceVertexColors
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UStaticMeshComponent*             StaticMeshComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEditorStaticMeshLibrary::HasInstanceVertexColors(class UStaticMeshComponent* StaticMeshComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorStaticMeshLibrary", "HasInstanceVertexColors");

	Params::EditorStaticMeshLibrary_HasInstanceVertexColors Parms{};

	Parms.StaticMeshComponent = StaticMeshComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorStaticMeshLibrary.HasVertexColors
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UStaticMesh*                      StaticMesh                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEditorStaticMeshLibrary::HasVertexColors(class UStaticMesh* StaticMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorStaticMeshLibrary", "HasVertexColors");

	Params::EditorStaticMeshLibrary_HasVertexColors Parms{};

	Parms.StaticMesh = StaticMesh;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorStaticMeshLibrary.ImportLOD
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UStaticMesh*                      BaseStaticMesh                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LODIndex                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           SourceFilename                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UEditorStaticMeshLibrary::ImportLOD(class UStaticMesh* BaseStaticMesh, const int32 LODIndex, const class FString& SourceFilename)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorStaticMeshLibrary", "ImportLOD");

	Params::EditorStaticMeshLibrary_ImportLOD Parms{};

	Parms.BaseStaticMesh = BaseStaticMesh;
	Parms.LODIndex = LODIndex;
	Parms.SourceFilename = std::move(SourceFilename);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorStaticMeshLibrary.InsertUVChannel
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UStaticMesh*                      StaticMesh                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LODIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   UVChannelIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEditorStaticMeshLibrary::InsertUVChannel(class UStaticMesh* StaticMesh, int32 LODIndex, int32 UVChannelIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorStaticMeshLibrary", "InsertUVChannel");

	Params::EditorStaticMeshLibrary_InsertUVChannel Parms{};

	Parms.StaticMesh = StaticMesh;
	Parms.LODIndex = LODIndex;
	Parms.UVChannelIndex = UVChannelIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorStaticMeshLibrary.IsSectionCollisionEnabled
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UStaticMesh*                      StaticMesh                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LODIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SectionIndex                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEditorStaticMeshLibrary::IsSectionCollisionEnabled(class UStaticMesh* StaticMesh, int32 LODIndex, int32 SectionIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorStaticMeshLibrary", "IsSectionCollisionEnabled");

	Params::EditorStaticMeshLibrary_IsSectionCollisionEnabled Parms{};

	Parms.StaticMesh = StaticMesh;
	Parms.LODIndex = LODIndex;
	Parms.SectionIndex = SectionIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorStaticMeshLibrary.ReimportAllCustomLODs
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UStaticMesh*                      StaticMesh                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEditorStaticMeshLibrary::ReimportAllCustomLODs(class UStaticMesh* StaticMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorStaticMeshLibrary", "ReimportAllCustomLODs");

	Params::EditorStaticMeshLibrary_ReimportAllCustomLODs Parms{};

	Parms.StaticMesh = StaticMesh;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorStaticMeshLibrary.RemoveCollisions
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UStaticMesh*                      StaticMesh                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEditorStaticMeshLibrary::RemoveCollisions(class UStaticMesh* StaticMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorStaticMeshLibrary", "RemoveCollisions");

	Params::EditorStaticMeshLibrary_RemoveCollisions Parms{};

	Parms.StaticMesh = StaticMesh;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorStaticMeshLibrary.RemoveCollisionsWithNotification
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UStaticMesh*                      StaticMesh                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bApplyChanges                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEditorStaticMeshLibrary::RemoveCollisionsWithNotification(class UStaticMesh* StaticMesh, bool bApplyChanges)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorStaticMeshLibrary", "RemoveCollisionsWithNotification");

	Params::EditorStaticMeshLibrary_RemoveCollisionsWithNotification Parms{};

	Parms.StaticMesh = StaticMesh;
	Parms.bApplyChanges = bApplyChanges;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorStaticMeshLibrary.RemoveLods
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UStaticMesh*                      StaticMesh                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEditorStaticMeshLibrary::RemoveLods(class UStaticMesh* StaticMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorStaticMeshLibrary", "RemoveLods");

	Params::EditorStaticMeshLibrary_RemoveLods Parms{};

	Parms.StaticMesh = StaticMesh;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorStaticMeshLibrary.RemoveUVChannel
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UStaticMesh*                      StaticMesh                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LODIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   UVChannelIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEditorStaticMeshLibrary::RemoveUVChannel(class UStaticMesh* StaticMesh, int32 LODIndex, int32 UVChannelIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorStaticMeshLibrary", "RemoveUVChannel");

	Params::EditorStaticMeshLibrary_RemoveUVChannel Parms{};

	Parms.StaticMesh = StaticMesh;
	Parms.LODIndex = LODIndex;
	Parms.UVChannelIndex = UVChannelIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorStaticMeshLibrary.SetAllowCPUAccess
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UStaticMesh*                      StaticMesh                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAllowCPUAccess                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEditorStaticMeshLibrary::SetAllowCPUAccess(class UStaticMesh* StaticMesh, bool bAllowCPUAccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorStaticMeshLibrary", "SetAllowCPUAccess");

	Params::EditorStaticMeshLibrary_SetAllowCPUAccess Parms{};

	Parms.StaticMesh = StaticMesh;
	Parms.bAllowCPUAccess = bAllowCPUAccess;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function EditorScriptingUtilities.EditorStaticMeshLibrary.SetConvexDecompositionCollisions
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UStaticMesh*                      StaticMesh                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   HullCount                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaxHullVerts                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   HullPrecision                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEditorStaticMeshLibrary::SetConvexDecompositionCollisions(class UStaticMesh* StaticMesh, int32 HullCount, int32 MaxHullVerts, int32 HullPrecision)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorStaticMeshLibrary", "SetConvexDecompositionCollisions");

	Params::EditorStaticMeshLibrary_SetConvexDecompositionCollisions Parms{};

	Parms.StaticMesh = StaticMesh;
	Parms.HullCount = HullCount;
	Parms.MaxHullVerts = MaxHullVerts;
	Parms.HullPrecision = HullPrecision;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorStaticMeshLibrary.SetConvexDecompositionCollisionsWithNotification
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UStaticMesh*                      StaticMesh                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   HullCount                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaxHullVerts                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   HullPrecision                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bApplyChanges                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEditorStaticMeshLibrary::SetConvexDecompositionCollisionsWithNotification(class UStaticMesh* StaticMesh, int32 HullCount, int32 MaxHullVerts, int32 HullPrecision, bool bApplyChanges)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorStaticMeshLibrary", "SetConvexDecompositionCollisionsWithNotification");

	Params::EditorStaticMeshLibrary_SetConvexDecompositionCollisionsWithNotification Parms{};

	Parms.StaticMesh = StaticMesh;
	Parms.HullCount = HullCount;
	Parms.MaxHullVerts = MaxHullVerts;
	Parms.HullPrecision = HullPrecision;
	Parms.bApplyChanges = bApplyChanges;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorStaticMeshLibrary.SetGenerateLightmapUVs
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UStaticMesh*                      StaticMesh                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bGenerateLightmapUVs                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEditorStaticMeshLibrary::SetGenerateLightmapUVs(class UStaticMesh* StaticMesh, bool bGenerateLightmapUVs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorStaticMeshLibrary", "SetGenerateLightmapUVs");

	Params::EditorStaticMeshLibrary_SetGenerateLightmapUVs Parms{};

	Parms.StaticMesh = StaticMesh;
	Parms.bGenerateLightmapUVs = bGenerateLightmapUVs;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorStaticMeshLibrary.SetLodBuildSettings
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UStaticMesh*                      StaticMesh                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LodIndex                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMeshBuildSettings               BuildOptions                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UEditorStaticMeshLibrary::SetLodBuildSettings(class UStaticMesh* StaticMesh, const int32 LodIndex, const struct FMeshBuildSettings& BuildOptions)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorStaticMeshLibrary", "SetLodBuildSettings");

	Params::EditorStaticMeshLibrary_SetLodBuildSettings Parms{};

	Parms.StaticMesh = StaticMesh;
	Parms.LodIndex = LodIndex;
	Parms.BuildOptions = std::move(BuildOptions);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function EditorScriptingUtilities.EditorStaticMeshLibrary.SetLodFromStaticMesh
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UStaticMesh*                      DestinationStaticMesh                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   DestinationLodIndex                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UStaticMesh*                      SourceStaticMesh                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SourceLodIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bReuseExistingMaterialSlots                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UEditorStaticMeshLibrary::SetLodFromStaticMesh(class UStaticMesh* DestinationStaticMesh, int32 DestinationLodIndex, class UStaticMesh* SourceStaticMesh, int32 SourceLodIndex, bool bReuseExistingMaterialSlots)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorStaticMeshLibrary", "SetLodFromStaticMesh");

	Params::EditorStaticMeshLibrary_SetLodFromStaticMesh Parms{};

	Parms.DestinationStaticMesh = DestinationStaticMesh;
	Parms.DestinationLodIndex = DestinationLodIndex;
	Parms.SourceStaticMesh = SourceStaticMesh;
	Parms.SourceLodIndex = SourceLodIndex;
	Parms.bReuseExistingMaterialSlots = bReuseExistingMaterialSlots;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorStaticMeshLibrary.SetLodReductionSettings
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UStaticMesh*                      StaticMesh                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LodIndex                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMeshReductionSettings           ReductionOptions                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UEditorStaticMeshLibrary::SetLodReductionSettings(class UStaticMesh* StaticMesh, const int32 LodIndex, const struct FMeshReductionSettings& ReductionOptions)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorStaticMeshLibrary", "SetLodReductionSettings");

	Params::EditorStaticMeshLibrary_SetLodReductionSettings Parms{};

	Parms.StaticMesh = StaticMesh;
	Parms.LodIndex = LodIndex;
	Parms.ReductionOptions = std::move(ReductionOptions);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function EditorScriptingUtilities.EditorStaticMeshLibrary.SetLods
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UStaticMesh*                      StaticMesh                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FStaticMeshReductionOptions      ReductionOptions                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UEditorStaticMeshLibrary::SetLods(class UStaticMesh* StaticMesh, const struct FStaticMeshReductionOptions& ReductionOptions)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorStaticMeshLibrary", "SetLods");

	Params::EditorStaticMeshLibrary_SetLods Parms{};

	Parms.StaticMesh = StaticMesh;
	Parms.ReductionOptions = std::move(ReductionOptions);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EditorScriptingUtilities.EditorStaticMeshLibrary.SetLodsWithNotification
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UStaticMesh*                      StaticMesh                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FStaticMeshReductionOptions      ReductionOptions                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bApplyChanges                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UEditorStaticMeshLibrary::SetLodsWithNotification(class UStaticMesh* StaticMesh, const struct FStaticMeshReductionOptions& ReductionOptions, bool bApplyChanges)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorStaticMeshLibrary", "SetLodsWithNotification");

	Params::EditorStaticMeshLibrary_SetLodsWithNotification Parms{};

	Parms.StaticMesh = StaticMesh;
	Parms.ReductionOptions = std::move(ReductionOptions);
	Parms.bApplyChanges = bApplyChanges;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

