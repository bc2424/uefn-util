#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TakeRecorderSources

#include "Basic.hpp"

#include "TakeRecorderSources_classes.hpp"
#include "TakeRecorderSources_parameters.hpp"


namespace SDK
{

// Function TakeRecorderSources.TakeRecorderActorSource.AddSourceForActor
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           InActor                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTakeRecorderSources*             InSources                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTakeRecorderSource*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTakeRecorderSource* UTakeRecorderActorSource::AddSourceForActor(class AActor* InActor, class UTakeRecorderSources* InSources)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TakeRecorderActorSource", "AddSourceForActor");

	Params::TakeRecorderActorSource_AddSourceForActor Parms{};

	Parms.InActor = InActor;
	Parms.InSources = InSources;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TakeRecorderSources.TakeRecorderActorSource.RemoveActorFromSources
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           InActor                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTakeRecorderSources*             InSources                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTakeRecorderActorSource::RemoveActorFromSources(class AActor* InActor, class UTakeRecorderSources* InSources)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TakeRecorderActorSource", "RemoveActorFromSources");

	Params::TakeRecorderActorSource_RemoveActorFromSources Parms{};

	Parms.InActor = InActor;
	Parms.InSources = InSources;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TakeRecorderSources.TakeRecorderActorSource.SetSourceActor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSoftObjectPtr<class AActor>            InTarget                                               (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTakeRecorderActorSource::SetSourceActor(TSoftObjectPtr<class AActor> InTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TakeRecorderActorSource", "SetSourceActor");

	Params::TakeRecorderActorSource_SetSourceActor Parms{};

	Parms.InTarget = InTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TakeRecorderSources.TakeRecorderActorSource.GetSourceActor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSoftObjectPtr<class AActor>            ReturnValue                                            (Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSoftObjectPtr<class AActor> UTakeRecorderActorSource::GetSourceActor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TakeRecorderActorSource", "GetSourceActor");

	Params::TakeRecorderActorSource_GetSourceActor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

