#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MurkyVoleRuntime

#include "Basic.hpp"

#include "MurkyVoleRuntime_classes.hpp"
#include "MurkyVoleRuntime_parameters.hpp"


namespace SDK
{

// Function MurkyVoleRuntime.FortGameplayAbility_MurkyVoleMissileManager.CanFireMissile
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FMurkyVoleMissileSpawnInfo       SpawnInfo                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortGameplayAbility_MurkyVoleMissileManager::CanFireMissile(const struct FMurkyVoleMissileSpawnInfo& SpawnInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortGameplayAbility_MurkyVoleMissileManager", "CanFireMissile");

	Params::FortGameplayAbility_MurkyVoleMissileManager_CanFireMissile Parms{};

	Parms.SpawnInfo = std::move(SpawnInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MurkyVoleRuntime.FortGameplayAbility_MurkyVoleMissileManager.HandleMissileSpawned
// (Event, Public, BlueprintEvent)
// Parameters:
// class AFortProjectileBase*              SpawnedProjectile                                      (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortGameplayAbility_MurkyVoleMissileManager::HandleMissileSpawned(class AFortProjectileBase* SpawnedProjectile)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortGameplayAbility_MurkyVoleMissileManager", "HandleMissileSpawned");

	Params::FortGameplayAbility_MurkyVoleMissileManager_HandleMissileSpawned Parms{};

	Parms.SpawnedProjectile = SpawnedProjectile;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MurkyVoleRuntime.FortGameplayAbility_MurkyVoleMissileManager.ServerSpawnProjectile
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// struct FMurkyVoleMissileSpawnInfo       SpawnInfo                                              (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FPredictionKey                   PredictionKey                                          (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortGameplayAbility_MurkyVoleMissileManager::ServerSpawnProjectile(const struct FMurkyVoleMissileSpawnInfo& SpawnInfo, const struct FPredictionKey& PredictionKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortGameplayAbility_MurkyVoleMissileManager", "ServerSpawnProjectile");

	Params::FortGameplayAbility_MurkyVoleMissileManager_ServerSpawnProjectile Parms{};

	Parms.SpawnInfo = std::move(SpawnInfo);
	Parms.PredictionKey = std::move(PredictionKey);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MurkyVoleRuntime.FortGameplayAbility_MurkyVoleMissileManager.SpawnPredictiveMissileProjectile
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FMurkyVoleMissileSpawnInfo       SpawnInfo                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UFortGameplayAbility_MurkyVoleMissileManager::SpawnPredictiveMissileProjectile(const struct FMurkyVoleMissileSpawnInfo& SpawnInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortGameplayAbility_MurkyVoleMissileManager", "SpawnPredictiveMissileProjectile");

	Params::FortGameplayAbility_MurkyVoleMissileManager_SpawnPredictiveMissileProjectile Parms{};

	Parms.SpawnInfo = std::move(SpawnInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MurkyVoleRuntime.FortProjectileAthena_MurkyVole.TryToExplode
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    bAllowOnServer                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortProjectileAthena_MurkyVole::TryToExplode(const bool bAllowOnServer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortProjectileAthena_MurkyVole", "TryToExplode");

	Params::FortProjectileAthena_MurkyVole_TryToExplode Parms{};

	Parms.bAllowOnServer = bAllowOnServer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MurkyVoleRuntime.FortProjectileMoveComp_DrunkMurkyVole.SetNewDrunkConfig
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FMurkyVoleDrunkProjectileConfig  NewConfig                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UFortProjectileMoveComp_DrunkMurkyVole::SetNewDrunkConfig(const struct FMurkyVoleDrunkProjectileConfig& NewConfig)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortProjectileMoveComp_DrunkMurkyVole", "SetNewDrunkConfig");

	Params::FortProjectileMoveComp_DrunkMurkyVole_SetNewDrunkConfig Parms{};

	Parms.NewConfig = std::move(NewConfig);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MurkyVoleRuntime.FortProjectileMoveComp_DrunkMurkyVole.GetDrunkConfig
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FMurkyVoleDrunkProjectileConfigReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FMurkyVoleDrunkProjectileConfig UFortProjectileMoveComp_DrunkMurkyVole::GetDrunkConfig() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortProjectileMoveComp_DrunkMurkyVole", "GetDrunkConfig");

	Params::FortProjectileMoveComp_DrunkMurkyVole_GetDrunkConfig Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MurkyVoleRuntime.FortWeaponRangedDual_MurkyVole.OnRep_MissileNumber
// (Final, Native, Protected)
// Parameters:
// int32                                   OldMissileNumber                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortWeaponRangedDual_MurkyVole::OnRep_MissileNumber(const int32 OldMissileNumber)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortWeaponRangedDual_MurkyVole", "OnRep_MissileNumber");

	Params::FortWeaponRangedDual_MurkyVole_OnRep_MissileNumber Parms{};

	Parms.OldMissileNumber = OldMissileNumber;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MurkyVoleRuntime.FortWeaponRangedDual_MurkyVole.BPGetMuzzleBlockedLocation
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    bMuzzleIsBlocked                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          MuzzleBlockedLocation                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortWeaponRangedDual_MurkyVole::BPGetMuzzleBlockedLocation(bool* bMuzzleIsBlocked, struct FVector* MuzzleBlockedLocation) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortWeaponRangedDual_MurkyVole", "BPGetMuzzleBlockedLocation");

	Params::FortWeaponRangedDual_MurkyVole_BPGetMuzzleBlockedLocation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bMuzzleIsBlocked != nullptr)
		*bMuzzleIsBlocked = Parms.bMuzzleIsBlocked;

	if (MuzzleBlockedLocation != nullptr)
		*MuzzleBlockedLocation = std::move(Parms.MuzzleBlockedLocation);
}


// Function MurkyVoleRuntime.MurkyVoleTurretAttachment.GetCheckBackpackCharacterPartValidity
// (Event, Public, BlueprintEvent)

void AMurkyVoleTurretAttachment::GetCheckBackpackCharacterPartValidity()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MurkyVoleTurretAttachment", "GetCheckBackpackCharacterPartValidity");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MurkyVoleRuntime.MurkyVoleTurretAttachment.GetMuzzleSocketLocationAndRotation
// (Event, Protected, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// struct FVector                          SocketLocation                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         SocketRotation                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void AMurkyVoleTurretAttachment::GetMuzzleSocketLocationAndRotation(struct FVector* SocketLocation, struct FRotator* SocketRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MurkyVoleTurretAttachment", "GetMuzzleSocketLocationAndRotation");

	Params::MurkyVoleTurretAttachment_GetMuzzleSocketLocationAndRotation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SocketLocation != nullptr)
		*SocketLocation = std::move(Parms.SocketLocation);

	if (SocketRotation != nullptr)
		*SocketRotation = std::move(Parms.SocketRotation);
}


// Function MurkyVoleRuntime.MurkyVoleTurretAttachment.GetTurretBlueprintData
// (Event, Public, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// class AActor*                           CurrentOwner                                           (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UStaticMeshComponent*             ScannerRays                                            (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UStaticMeshComponent*             IdleLaser                                              (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMurkyVoleTurretState                   CurrentState                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          BackpackMuzzleSocketLocation                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMurkyVoleTurretAttachment::GetTurretBlueprintData(class AActor** CurrentOwner, class UStaticMeshComponent** ScannerRays, class UStaticMeshComponent** IdleLaser, EMurkyVoleTurretState* CurrentState, struct FVector* BackpackMuzzleSocketLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MurkyVoleTurretAttachment", "GetTurretBlueprintData");

	Params::MurkyVoleTurretAttachment_GetTurretBlueprintData Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CurrentOwner != nullptr)
		*CurrentOwner = Parms.CurrentOwner;

	if (ScannerRays != nullptr)
		*ScannerRays = Parms.ScannerRays;

	if (IdleLaser != nullptr)
		*IdleLaser = Parms.IdleLaser;

	if (CurrentState != nullptr)
		*CurrentState = Parms.CurrentState;

	if (BackpackMuzzleSocketLocation != nullptr)
		*BackpackMuzzleSocketLocation = std::move(Parms.BackpackMuzzleSocketLocation);
}


// Function MurkyVoleRuntime.MurkyVoleTurretAttachment.NativeForceLaserOnWhileAttacking
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           CurrentOwner                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMurkyVoleTurretState                   CurrentState                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UStaticMeshComponent*             ScannerRays                                            (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UStaticMeshComponent*             IdleLaser                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMurkyVoleTurretAttachment::NativeForceLaserOnWhileAttacking(const class AActor* CurrentOwner, const EMurkyVoleTurretState CurrentState, class UStaticMeshComponent* ScannerRays, class UStaticMeshComponent* IdleLaser)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MurkyVoleTurretAttachment", "NativeForceLaserOnWhileAttacking");

	Params::MurkyVoleTurretAttachment_NativeForceLaserOnWhileAttacking Parms{};

	Parms.CurrentOwner = CurrentOwner;
	Parms.CurrentState = CurrentState;
	Parms.ScannerRays = ScannerRays;
	Parms.IdleLaser = IdleLaser;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MurkyVoleRuntime.MurkyVoleTurretAttachment.NativeGetAimSourceLocationForServer
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class AActor*                           CurrentOwner                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          AimSourceLocationOffset                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          AimSourceLocationOffsetCrouch                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          AimSourceLocation                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMurkyVoleTurretAttachment::NativeGetAimSourceLocationForServer(const class AActor* CurrentOwner, const struct FVector& AimSourceLocationOffset, const struct FVector& AimSourceLocationOffsetCrouch, struct FVector* AimSourceLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MurkyVoleTurretAttachment", "NativeGetAimSourceLocationForServer");

	Params::MurkyVoleTurretAttachment_NativeGetAimSourceLocationForServer Parms{};

	Parms.CurrentOwner = CurrentOwner;
	Parms.AimSourceLocationOffset = std::move(AimSourceLocationOffset);
	Parms.AimSourceLocationOffsetCrouch = std::move(AimSourceLocationOffsetCrouch);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (AimSourceLocation != nullptr)
		*AimSourceLocation = std::move(Parms.AimSourceLocation);
}


// Function MurkyVoleRuntime.MurkyVoleTurretAttachment.NativeGetLaserAimSourceLocationAndRotation
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class AActor*                           CurrentOwner                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AFortPlayerController*            LocalPlayerController                                  (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         CalculatedAimRotation                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                          AimSourceLocation                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         AimSourceRotation                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void AMurkyVoleTurretAttachment::NativeGetLaserAimSourceLocationAndRotation(const class AActor* CurrentOwner, const class AFortPlayerController* LocalPlayerController, const struct FRotator& CalculatedAimRotation, struct FVector* AimSourceLocation, struct FRotator* AimSourceRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MurkyVoleTurretAttachment", "NativeGetLaserAimSourceLocationAndRotation");

	Params::MurkyVoleTurretAttachment_NativeGetLaserAimSourceLocationAndRotation Parms{};

	Parms.CurrentOwner = CurrentOwner;
	Parms.LocalPlayerController = LocalPlayerController;
	Parms.CalculatedAimRotation = std::move(CalculatedAimRotation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (AimSourceLocation != nullptr)
		*AimSourceLocation = std::move(Parms.AimSourceLocation);

	if (AimSourceRotation != nullptr)
		*AimSourceRotation = std::move(Parms.AimSourceRotation);
}


// Function MurkyVoleRuntime.MurkyVoleTurretAttachment.NativeUpdateLaserLocationAndRotation
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class AActor*                           CurrentOwner                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AFortPlayerController*            LocalPlayerController                                  (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         CalculatedAimRotation                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// class UStaticMeshComponent*             Laser                                                  (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMurkyVoleTurretAttachment::NativeUpdateLaserLocationAndRotation(const class AActor* CurrentOwner, const class AFortPlayerController* LocalPlayerController, const struct FRotator& CalculatedAimRotation, class UStaticMeshComponent* Laser)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MurkyVoleTurretAttachment", "NativeUpdateLaserLocationAndRotation");

	Params::MurkyVoleTurretAttachment_NativeUpdateLaserLocationAndRotation Parms{};

	Parms.CurrentOwner = CurrentOwner;
	Parms.LocalPlayerController = LocalPlayerController;
	Parms.CalculatedAimRotation = std::move(CalculatedAimRotation);
	Parms.Laser = Laser;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MurkyVoleRuntime.MurkyVoleTurretAttachment.NativeUpdateLaserVisuals
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FMurkyVoleTurretAttachment_UpdateLaserVisualsParamsUpdateParams                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class AActor*                           CurrentOwner                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UStaticMeshComponent*             ScannerRays                                            (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UStaticMeshComponent*             IdleLaser                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMurkyVoleTurretAttachment::NativeUpdateLaserVisuals(const struct FMurkyVoleTurretAttachment_UpdateLaserVisualsParams& UpdateParams, const class AActor* CurrentOwner, class UStaticMeshComponent* ScannerRays, class UStaticMeshComponent* IdleLaser)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MurkyVoleTurretAttachment", "NativeUpdateLaserVisuals");

	Params::MurkyVoleTurretAttachment_NativeUpdateLaserVisuals Parms{};

	Parms.UpdateParams = std::move(UpdateParams);
	Parms.CurrentOwner = CurrentOwner;
	Parms.ScannerRays = ScannerRays;
	Parms.IdleLaser = IdleLaser;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MurkyVoleRuntime.MurkyVoleTurretAttachment.NativeUpdateRotation
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class AActor*                           CurrentOwner                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         ServerAimRotation                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FRotator                         ClientAimRotation                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                          AimLocation                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          AimSourceLocation                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInTargetingState                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         NewServerAimRotation                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FRotator                         NewClientAimRotation                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void AMurkyVoleTurretAttachment::NativeUpdateRotation(const class AActor* CurrentOwner, const struct FRotator& ServerAimRotation, const struct FRotator& ClientAimRotation, const struct FVector& AimLocation, const struct FVector& AimSourceLocation, const bool bInTargetingState, struct FRotator* NewServerAimRotation, struct FRotator* NewClientAimRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MurkyVoleTurretAttachment", "NativeUpdateRotation");

	Params::MurkyVoleTurretAttachment_NativeUpdateRotation Parms{};

	Parms.CurrentOwner = CurrentOwner;
	Parms.ServerAimRotation = std::move(ServerAimRotation);
	Parms.ClientAimRotation = std::move(ClientAimRotation);
	Parms.AimLocation = std::move(AimLocation);
	Parms.AimSourceLocation = std::move(AimSourceLocation);
	Parms.bInTargetingState = bInTargetingState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (NewServerAimRotation != nullptr)
		*NewServerAimRotation = std::move(Parms.NewServerAimRotation);

	if (NewClientAimRotation != nullptr)
		*NewClientAimRotation = std::move(Parms.NewClientAimRotation);
}


// Function MurkyVoleRuntime.MurkyVoleTurretAttachment.NativeUpdateTargetingLaserScale
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           CurrentOwner                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSetMeshScale                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bCalculateNow                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UStaticMeshComponent*             ScannerRays                                            (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMurkyVoleTurretAttachment::NativeUpdateTargetingLaserScale(const class AActor* CurrentOwner, const bool bSetMeshScale, const bool bCalculateNow, class UStaticMeshComponent* ScannerRays)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MurkyVoleTurretAttachment", "NativeUpdateTargetingLaserScale");

	Params::MurkyVoleTurretAttachment_NativeUpdateTargetingLaserScale Parms{};

	Parms.CurrentOwner = CurrentOwner;
	Parms.bSetMeshScale = bSetMeshScale;
	Parms.bCalculateNow = bCalculateNow;
	Parms.ScannerRays = ScannerRays;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MurkyVoleRuntime.MurkyVoleTurretAttachment.NativeUpdateTurret
// (Final, Native, Public, BlueprintCallable)

void AMurkyVoleTurretAttachment::NativeUpdateTurret()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MurkyVoleTurretAttachment", "NativeUpdateTurret");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MurkyVoleRuntime.MurkyVoleTurretAttachment.OnRep_AimRotation_Server
// (Final, Native, Private)

void AMurkyVoleTurretAttachment::OnRep_AimRotation_Server()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MurkyVoleTurretAttachment", "OnRep_AimRotation_Server");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MurkyVoleRuntime.MurkyVoleTurretAttachmentActorInterface.GetMurkyVoleTurretAttachmentData
// (Native, Event, Public, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// bool                                    bIsInWindUpState                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsInWindDownState                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsInManualControlState                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         AimRotationClient                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void IMurkyVoleTurretAttachmentActorInterface::GetMurkyVoleTurretAttachmentData(bool* bIsInWindUpState, bool* bIsInWindDownState, bool* bIsInManualControlState, struct FRotator* AimRotationClient)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MurkyVoleTurretAttachmentActorInterface", "GetMurkyVoleTurretAttachmentData");

	Params::MurkyVoleTurretAttachmentActorInterface_GetMurkyVoleTurretAttachmentData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bIsInWindUpState != nullptr)
		*bIsInWindUpState = Parms.bIsInWindUpState;

	if (bIsInWindDownState != nullptr)
		*bIsInWindDownState = Parms.bIsInWindDownState;

	if (bIsInManualControlState != nullptr)
		*bIsInManualControlState = Parms.bIsInManualControlState;

	if (AimRotationClient != nullptr)
		*AimRotationClient = std::move(Parms.AimRotationClient);
}

}

