#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: StaticMeshEditor

#include "Basic.hpp"

#include "EditorFramework_classes.hpp"
#include "StaticMeshEditor_structs.hpp"
#include "EditorSubsystem_classes.hpp"
#include "PhysicsCore_structs.hpp"


namespace SDK
{

// Class StaticMeshEditor.StaticMeshEditorUISubsystem
// 0x0000 (0x0038 - 0x0038)
class UStaticMeshEditorUISubsystem final : public UAssetEditorUISubsystem
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StaticMeshEditorUISubsystem">();
	}
	static class UStaticMeshEditorUISubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStaticMeshEditorUISubsystem>();
	}
};

// Class StaticMeshEditor.StaticMeshEditorSubsystem
// 0x0000 (0x0038 - 0x0038)
class UStaticMeshEditorSubsystem final : public UEditorSubsystem
{
public:
	int32 AddSimpleCollisions(class UStaticMesh* StaticMesh, const EScriptCollisionShapeType ShapeType);
	int32 AddSimpleCollisionsWithNotification(class UStaticMesh* StaticMesh, const EScriptCollisionShapeType ShapeType, bool bApplyChanges);
	bool AddUVChannel(class UStaticMesh* StaticMesh, int32 LODIndex);
	bool BulkSetConvexDecompositionCollisions(const TArray<class UStaticMesh*>& StaticMeshes, int32 HullCount, int32 MaxHullVerts, int32 HullPrecision);
	bool BulkSetConvexDecompositionCollisionsWithNotification(const TArray<class UStaticMesh*>& StaticMeshes, int32 HullCount, int32 MaxHullVerts, int32 HullPrecision, bool bApplyChanges);
	bool CreateProxyMeshActor(const TArray<class AStaticMeshActor*>& ActorsToMerge, const struct FCreateProxyMeshActorOptions& MergeOptions, class AStaticMeshActor** OutMergedActor);
	void EnableSectionCastShadow(class UStaticMesh* StaticMesh, bool bCastShadow, int32 LODIndex, int32 SectionIndex);
	void EnableSectionCollision(class UStaticMesh* StaticMesh, bool bCollisionEnabled, int32 LODIndex, int32 SectionIndex);
	bool GenerateBoxUVChannel(class UStaticMesh* StaticMesh, int32 LODIndex, int32 UVChannelIndex, const struct FVector& Position, const struct FRotator& Orientation, const struct FVector& Size);
	bool GenerateCylindricalUVChannel(class UStaticMesh* StaticMesh, int32 LODIndex, int32 UVChannelIndex, const struct FVector& Position, const struct FRotator& Orientation, const struct FVector2D& Tiling);
	bool GeneratePlanarUVChannel(class UStaticMesh* StaticMesh, int32 LODIndex, int32 UVChannelIndex, const struct FVector& Position, const struct FRotator& Orientation, const struct FVector2D& Tiling);
	ECollisionTraceFlag GetCollisionComplexity(class UStaticMesh* StaticMesh);
	int32 GetConvexCollisionCount(class UStaticMesh* StaticMesh);
	void GetLodBuildSettings(const class UStaticMesh* StaticMesh, const int32 LodIndex, struct FMeshBuildSettings* OutBuildOptions);
	int32 GetLodCount(class UStaticMesh* StaticMesh);
	class FName GetLODGroup(class UStaticMesh* StaticMesh);
	int32 GetLODMaterialSlot(class UStaticMesh* StaticMesh, int32 LODIndex, int32 SectionIndex);
	void GetLodReductionSettings(const class UStaticMesh* StaticMesh, const int32 LodIndex, struct FMeshReductionSettings* OutReductionOptions);
	TArray<float> GetLodScreenSizes(class UStaticMesh* StaticMesh);
	struct FMeshNaniteSettings GetNaniteSettings(class UStaticMesh* StaticMesh);
	int32 GetNumberMaterials(class UStaticMesh* StaticMesh);
	int32 GetNumberVerts(class UStaticMesh* StaticMesh, int32 LODIndex);
	int32 GetNumUVChannels(class UStaticMesh* StaticMesh, int32 LODIndex);
	int32 GetSimpleCollisionCount(class UStaticMesh* StaticMesh);
	bool HasInstanceVertexColors(class UStaticMeshComponent* StaticMeshComponent);
	bool HasVertexColors(class UStaticMesh* StaticMesh);
	int32 ImportLOD(class UStaticMesh* BaseStaticMesh, const int32 LODIndex, const class FString& SourceFilename);
	bool InsertUVChannel(class UStaticMesh* StaticMesh, int32 LODIndex, int32 UVChannelIndex);
	bool IsSectionCollisionEnabled(class UStaticMesh* StaticMesh, int32 LODIndex, int32 SectionIndex);
	class AActor* JoinStaticMeshActors(const TArray<class AStaticMeshActor*>& ActorsToJoin, const struct FJoinStaticMeshActorsOptions& JoinOptions);
	bool MergeStaticMeshActors(const TArray<class AStaticMeshActor*>& ActorsToMerge, const struct FMergeStaticMeshActorsOptions& MergeOptions, class AStaticMeshActor** OutMergedActor);
	bool ReimportAllCustomLODs(class UStaticMesh* StaticMesh);
	bool RemoveCollisions(class UStaticMesh* StaticMesh);
	bool RemoveCollisionsWithNotification(class UStaticMesh* StaticMesh, bool bApplyChanges);
	bool RemoveLods(class UStaticMesh* StaticMesh);
	bool RemoveUVChannel(class UStaticMesh* StaticMesh, int32 LODIndex, int32 UVChannelIndex);
	void ReplaceMeshComponentsMaterials(const TArray<class UMeshComponent*>& MeshComponents, class UMaterialInterface* MaterialToBeReplaced, class UMaterialInterface* NewMaterial);
	void ReplaceMeshComponentsMaterialsOnActors(const TArray<class AActor*>& Actors, class UMaterialInterface* MaterialToBeReplaced, class UMaterialInterface* NewMaterial);
	void ReplaceMeshComponentsMeshes(const TArray<class UStaticMeshComponent*>& MeshComponents, class UStaticMesh* MeshToBeReplaced, class UStaticMesh* NewMesh);
	void ReplaceMeshComponentsMeshesOnActors(const TArray<class AActor*>& Actors, class UStaticMesh* MeshToBeReplaced, class UStaticMesh* NewMesh);
	void SetAllowCPUAccess(class UStaticMesh* StaticMesh, bool bAllowCPUAccess);
	bool SetConvexDecompositionCollisions(class UStaticMesh* StaticMesh, int32 HullCount, int32 MaxHullVerts, int32 HullPrecision);
	bool SetConvexDecompositionCollisionsWithNotification(class UStaticMesh* StaticMesh, int32 HullCount, int32 MaxHullVerts, int32 HullPrecision, bool bApplyChanges);
	bool SetGenerateLightmapUVs(class UStaticMesh* StaticMesh, bool bGenerateLightmapUVs);
	void SetLodBuildSettings(class UStaticMesh* StaticMesh, const int32 LodIndex, const struct FMeshBuildSettings& BuildOptions);
	int32 SetLodFromStaticMesh(class UStaticMesh* DestinationStaticMesh, int32 DestinationLodIndex, class UStaticMesh* SourceStaticMesh, int32 SourceLodIndex, bool bReuseExistingMaterialSlots);
	bool SetLODGroup(class UStaticMesh* StaticMesh, class FName LODGroup, bool bRebuildImmediately);
	void SetLODMaterialSlot(class UStaticMesh* StaticMesh, int32 MaterialSlotIndex, int32 LODIndex, int32 SectionIndex);
	void SetLodReductionSettings(class UStaticMesh* StaticMesh, const int32 LodIndex, const struct FMeshReductionSettings& ReductionOptions);
	int32 SetLods(class UStaticMesh* StaticMesh, const struct FStaticMeshReductionOptions& ReductionOptions);
	bool SetLodScreenSizes(class UStaticMesh* StaticMesh, const TArray<float>& ScreenSizes);
	int32 SetLodsWithNotification(class UStaticMesh* StaticMesh, const struct FStaticMeshReductionOptions& ReductionOptions, bool bApplyChanges);
	void SetNaniteSettings(class UStaticMesh* StaticMesh, const struct FMeshNaniteSettings& NaniteSettings, bool bApplyChanges);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StaticMeshEditorSubsystem">();
	}
	static class UStaticMeshEditorSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStaticMeshEditorSubsystem>();
	}
};

}

