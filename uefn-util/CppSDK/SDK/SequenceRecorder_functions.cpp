#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SequenceRecorder

#include "Basic.hpp"

#include "SequenceRecorder_classes.hpp"
#include "SequenceRecorder_parameters.hpp"


namespace SDK
{

// Function SequenceRecorder.SequenceRecorderBlueprintLibrary.IsRecordingSequence
// (Final, Native, Static, Private, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USequenceRecorderBlueprintLibrary::IsRecordingSequence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SequenceRecorderBlueprintLibrary", "IsRecordingSequence");

	Params::SequenceRecorderBlueprintLibrary_IsRecordingSequence Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SequenceRecorder.SequenceRecorderBlueprintLibrary.StartRecordingSequence
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class AActor*>                   ActorsToRecord                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void USequenceRecorderBlueprintLibrary::StartRecordingSequence(const TArray<class AActor*>& ActorsToRecord)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SequenceRecorderBlueprintLibrary", "StartRecordingSequence");

	Params::SequenceRecorderBlueprintLibrary_StartRecordingSequence Parms{};

	Parms.ActorsToRecord = std::move(ActorsToRecord);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SequenceRecorder.SequenceRecorderBlueprintLibrary.StopRecordingSequence
// (Final, Native, Static, Private, BlueprintCallable)

void USequenceRecorderBlueprintLibrary::StopRecordingSequence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SequenceRecorderBlueprintLibrary", "StopRecordingSequence");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}

}

