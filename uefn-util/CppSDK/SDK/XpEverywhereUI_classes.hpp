#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: XpEverywhereUI

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "FortniteUI_structs.hpp"
#include "FortniteUI_classes.hpp"
#include "FortniteGame_structs.hpp"
#include "CommonUI_classes.hpp"
#include "AccoladesRuntime_structs.hpp"
#include "XpEverywhereUI_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK
{

// Class XpEverywhereUI.XpEverywhereAccoladesWidget
// 0x0088 (0x0510 - 0x0488)
class UXpEverywhereAccoladesWidget final : public UFortHUDElementWidget
{
public:
	uint8                                         Pad_488[0x78];                                     // 0x0488(0x0078)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortPrioritizedWidgetData             PrioritizationData;                                // 0x0500(0x0002)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_502[0xE];                                      // 0x0502(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AccoladeTriggered(const int32 XpValue, const class FText& SimulatedName, const class FText& SimulatedText, const TSoftObjectPtr<class UTexture2D>& PreviewImage, const EFortSimulatedXPSize SimulatedXPSize, const EFortAccoladeType AccoladeType, const TSoftObjectPtr<class USoundCue>& SoundCue, const EFortAccoladeTierType AccoladeTier);
	void CloseWidget();
	void OnEventAdded();
	void OnStompedByOtherWidget();
	void OpenWidget(const class UFortAccoladeItemDefinition* AccoladeDef, const int32 XpValue, const class FText& DisplayName, const TSoftObjectPtr<class UTexture2D>& AccoladeLargePreviewImageOverride, const class FText& SimulatedName, const class FText& SimulatedText, const EFortSimulatedXPSize SimulatedXPSize);

	bool HasMoreXPEvents() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"XpEverywhereAccoladesWidget">();
	}
	static class UXpEverywhereAccoladesWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UXpEverywhereAccoladesWidget>();
	}
};

// Class XpEverywhereUI.XpEverywhereBar
// 0x0058 (0x0498 - 0x0440)
class UXpEverywhereBar final : public UCommonUserWidget
{
public:
	bool                                          bXpBarAlwaysActive;                                // 0x0440(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_441[0x7];                                      // 0x0441(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortSocialAvatarIcon*                  SocialAvatarIcon;                                  // 0x0448(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_450[0x48];                                     // 0x0450(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DoneUpdatingXpBar();
	void OnXpBarInitialized(int32 CurrentXP, int32 CurrentLevel, int32 CurrentRemainingRestXP);
	void OnXpBarUpdated(int32 ShownXP, int32 ShownLevel, int32 NewDesiredXP, int32 NewDesiredLevel, int32 NewRemainingRestXP);

	int32 GetTotalXpRequiredForLevel(const int32 InLevel) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"XpEverywhereBar">();
	}
	static class UXpEverywhereBar* GetDefaultObj()
	{
		return GetDefaultObjImpl<UXpEverywhereBar>();
	}
};

// Class XpEverywhereUI.XpEverywhereLevelUpWidget
// 0x0008 (0x0448 - 0x0440)
class UXpEverywhereLevelUpWidget final : public UCommonUserWidget
{
public:
	uint8                                         Pad_440[0x8];                                      // 0x0440(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DoneLevelingUp();
	void OnShowWidget(const int32 NewLevel);

	void DisplayLevelUpRewards() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"XpEverywhereLevelUpWidget">();
	}
	static class UXpEverywhereLevelUpWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UXpEverywhereLevelUpWidget>();
	}
};

// Class XpEverywhereUI.XpEverywhereReticleWidget
// 0x0018 (0x04A0 - 0x0488)
class UXpEverywhereReticleWidget final : public UFortHUDElementWidget
{
public:
	uint8                                         Pad_488[0x18];                                     // 0x0488(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ForwardEvents();
	void HandleProfileUpdated();
	void UpdateRestXP(int32 RestXpRemaining);
	void UpdateXPAmount(int32 NewAmount, class USoundCue* Cue, const EFortSimulatedXPSize SimulatedXpSize);
	void UpdateXPSource(const class FText& NewSourceText);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"XpEverywhereReticleWidget">();
	}
	static class UXpEverywhereReticleWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UXpEverywhereReticleWidget>();
	}
};

// Class XpEverywhereUI.XpEverywhereRewardWidget
// 0x0090 (0x0518 - 0x0488)
class UXpEverywhereRewardWidget final : public UFortHUDElementWidget
{
public:
	uint8                                         Pad_488[0x48];                                     // 0x0488(0x0048)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UFortNotificationEntry>     DefaultEntryClass;                                 // 0x04D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasPrioritizedWidgetFocus;                        // 0x04D8(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4D9[0x7];                                      // 0x04D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortNotificationEntry*                 ActiveWidget;                                      // 0x04E0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UFortNotificationEntry*>         WidgetQueue;                                       // 0x04E8(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	class UVerticalBox*                           NotificationUpdatesBox;                            // 0x04F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FXpEverywhereNotificationWidgetClass> NotificationClassPoolData;                         // 0x0500(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FFortPrioritizedWidgetData             PrioritizationData;                                // 0x0510(0x0002)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_512[0x6];                                      // 0x0512(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleNotificationUpdateFinished();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"XpEverywhereRewardWidget">();
	}
	static class UXpEverywhereRewardWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UXpEverywhereRewardWidget>();
	}
};

// Class XpEverywhereUI.XpEverywhereUIComponent
// 0x00D8 (0x01B0 - 0x00D8)
class UXpEverywhereUIComponent final : public UActorComponent
{
public:
	uint8                                         Pad_D8[0xA8];                                      // 0x00D8(0x00A8)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  XpEverywhereHiddenElementTags;                     // 0x0180(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1A0[0x10];                                     // 0x01A0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleControllerComponentAdded(class AFortPlayerController* OwnerController, class UFortControllerComponent* AttachedComponent);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"XpEverywhereUIComponent">();
	}
	static class UXpEverywhereUIComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UXpEverywhereUIComponent>();
	}
};

}

