#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SubobjectDataInterface

#include "Basic.hpp"

#include "SubobjectDataInterface_classes.hpp"
#include "SubobjectDataInterface_parameters.hpp"


namespace SDK
{

// Function SubobjectDataInterface.SubobjectDataBlueprintFunctionLibrary.CanCopy
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FSubobjectData                   Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USubobjectDataBlueprintFunctionLibrary::CanCopy(const struct FSubobjectData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SubobjectDataBlueprintFunctionLibrary", "CanCopy");

	Params::SubobjectDataBlueprintFunctionLibrary_CanCopy Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SubobjectDataInterface.SubobjectDataBlueprintFunctionLibrary.CanDelete
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FSubobjectData                   Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USubobjectDataBlueprintFunctionLibrary::CanDelete(const struct FSubobjectData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SubobjectDataBlueprintFunctionLibrary", "CanDelete");

	Params::SubobjectDataBlueprintFunctionLibrary_CanDelete Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SubobjectDataInterface.SubobjectDataBlueprintFunctionLibrary.CanDuplicate
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FSubobjectData                   Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USubobjectDataBlueprintFunctionLibrary::CanDuplicate(const struct FSubobjectData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SubobjectDataBlueprintFunctionLibrary", "CanDuplicate");

	Params::SubobjectDataBlueprintFunctionLibrary_CanDuplicate Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SubobjectDataInterface.SubobjectDataBlueprintFunctionLibrary.CanEdit
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FSubobjectData                   Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USubobjectDataBlueprintFunctionLibrary::CanEdit(const struct FSubobjectData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SubobjectDataBlueprintFunctionLibrary", "CanEdit");

	Params::SubobjectDataBlueprintFunctionLibrary_CanEdit Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SubobjectDataInterface.SubobjectDataBlueprintFunctionLibrary.CanRename
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FSubobjectData                   Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USubobjectDataBlueprintFunctionLibrary::CanRename(const struct FSubobjectData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SubobjectDataBlueprintFunctionLibrary", "CanRename");

	Params::SubobjectDataBlueprintFunctionLibrary_CanRename Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SubobjectDataInterface.SubobjectDataBlueprintFunctionLibrary.CanReparent
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FSubobjectData                   Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USubobjectDataBlueprintFunctionLibrary::CanReparent(const struct FSubobjectData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SubobjectDataBlueprintFunctionLibrary", "CanReparent");

	Params::SubobjectDataBlueprintFunctionLibrary_CanReparent Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SubobjectDataInterface.SubobjectDataBlueprintFunctionLibrary.GetBlueprint
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FSubobjectData                   Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UBlueprint*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBlueprint* USubobjectDataBlueprintFunctionLibrary::GetBlueprint(const struct FSubobjectData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SubobjectDataBlueprintFunctionLibrary", "GetBlueprint");

	Params::SubobjectDataBlueprintFunctionLibrary_GetBlueprint Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SubobjectDataInterface.SubobjectDataBlueprintFunctionLibrary.GetData
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FSubobjectDataHandle             DataHandle                                             (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSubobjectData                   OutData                                                (Parm, OutParm, NativeAccessSpecifierPublic)

void USubobjectDataBlueprintFunctionLibrary::GetData(const struct FSubobjectDataHandle& DataHandle, struct FSubobjectData* OutData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SubobjectDataBlueprintFunctionLibrary", "GetData");

	Params::SubobjectDataBlueprintFunctionLibrary_GetData Parms{};

	Parms.DataHandle = std::move(DataHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutData != nullptr)
		*OutData = std::move(Parms.OutData);
}


// Function SubobjectDataInterface.SubobjectDataBlueprintFunctionLibrary.GetDisplayName
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FSubobjectData                   Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText USubobjectDataBlueprintFunctionLibrary::GetDisplayName(const struct FSubobjectData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SubobjectDataBlueprintFunctionLibrary", "GetDisplayName");

	Params::SubobjectDataBlueprintFunctionLibrary_GetDisplayName Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SubobjectDataInterface.SubobjectDataBlueprintFunctionLibrary.GetHandle
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FSubobjectData                   Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FSubobjectDataHandle             OutHandle                                              (Parm, OutParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USubobjectDataBlueprintFunctionLibrary::GetHandle(const struct FSubobjectData& Data, struct FSubobjectDataHandle* OutHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SubobjectDataBlueprintFunctionLibrary", "GetHandle");

	Params::SubobjectDataBlueprintFunctionLibrary_GetHandle Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutHandle != nullptr)
		*OutHandle = std::move(Parms.OutHandle);
}


// Function SubobjectDataInterface.SubobjectDataBlueprintFunctionLibrary.GetObject
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FSubobjectData                   Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bEvenIfPendingKill                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UObject*                    ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UObject* USubobjectDataBlueprintFunctionLibrary::GetObject(const struct FSubobjectData& Data, bool bEvenIfPendingKill)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SubobjectDataBlueprintFunctionLibrary", "GetObject");

	Params::SubobjectDataBlueprintFunctionLibrary_GetObject Parms{};

	Parms.Data = std::move(Data);
	Parms.bEvenIfPendingKill = bEvenIfPendingKill;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SubobjectDataInterface.SubobjectDataBlueprintFunctionLibrary.GetObjectForBlueprint
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSubobjectData                   Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UBlueprint*                       Blueprint                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UObject*                    ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UObject* USubobjectDataBlueprintFunctionLibrary::GetObjectForBlueprint(const struct FSubobjectData& Data, class UBlueprint* Blueprint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SubobjectDataBlueprintFunctionLibrary", "GetObjectForBlueprint");

	Params::SubobjectDataBlueprintFunctionLibrary_GetObjectForBlueprint Parms{};

	Parms.Data = std::move(Data);
	Parms.Blueprint = Blueprint;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SubobjectDataInterface.SubobjectDataBlueprintFunctionLibrary.GetVariableName
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FSubobjectData                   Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName USubobjectDataBlueprintFunctionLibrary::GetVariableName(const struct FSubobjectData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SubobjectDataBlueprintFunctionLibrary", "GetVariableName");

	Params::SubobjectDataBlueprintFunctionLibrary_GetVariableName Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SubobjectDataInterface.SubobjectDataBlueprintFunctionLibrary.IsActor
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FSubobjectData                   Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USubobjectDataBlueprintFunctionLibrary::IsActor(const struct FSubobjectData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SubobjectDataBlueprintFunctionLibrary", "IsActor");

	Params::SubobjectDataBlueprintFunctionLibrary_IsActor Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SubobjectDataInterface.SubobjectDataBlueprintFunctionLibrary.IsAttachedTo
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FSubobjectData                   Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FSubobjectDataHandle             InHandle                                               (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USubobjectDataBlueprintFunctionLibrary::IsAttachedTo(const struct FSubobjectData& Data, const struct FSubobjectDataHandle& InHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SubobjectDataBlueprintFunctionLibrary", "IsAttachedTo");

	Params::SubobjectDataBlueprintFunctionLibrary_IsAttachedTo Parms{};

	Parms.Data = std::move(Data);
	Parms.InHandle = std::move(InHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SubobjectDataInterface.SubobjectDataBlueprintFunctionLibrary.IsChildActor
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FSubobjectData                   Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USubobjectDataBlueprintFunctionLibrary::IsChildActor(const struct FSubobjectData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SubobjectDataBlueprintFunctionLibrary", "IsChildActor");

	Params::SubobjectDataBlueprintFunctionLibrary_IsChildActor Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SubobjectDataInterface.SubobjectDataBlueprintFunctionLibrary.IsComponent
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FSubobjectData                   Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USubobjectDataBlueprintFunctionLibrary::IsComponent(const struct FSubobjectData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SubobjectDataBlueprintFunctionLibrary", "IsComponent");

	Params::SubobjectDataBlueprintFunctionLibrary_IsComponent Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SubobjectDataInterface.SubobjectDataBlueprintFunctionLibrary.IsDefaultSceneRoot
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FSubobjectData                   Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USubobjectDataBlueprintFunctionLibrary::IsDefaultSceneRoot(const struct FSubobjectData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SubobjectDataBlueprintFunctionLibrary", "IsDefaultSceneRoot");

	Params::SubobjectDataBlueprintFunctionLibrary_IsDefaultSceneRoot Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SubobjectDataInterface.SubobjectDataBlueprintFunctionLibrary.IsHandleValid
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FSubobjectDataHandle             DataHandle                                             (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USubobjectDataBlueprintFunctionLibrary::IsHandleValid(const struct FSubobjectDataHandle& DataHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SubobjectDataBlueprintFunctionLibrary", "IsHandleValid");

	Params::SubobjectDataBlueprintFunctionLibrary_IsHandleValid Parms{};

	Parms.DataHandle = std::move(DataHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SubobjectDataInterface.SubobjectDataBlueprintFunctionLibrary.IsInheritedComponent
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FSubobjectData                   Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USubobjectDataBlueprintFunctionLibrary::IsInheritedComponent(const struct FSubobjectData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SubobjectDataBlueprintFunctionLibrary", "IsInheritedComponent");

	Params::SubobjectDataBlueprintFunctionLibrary_IsInheritedComponent Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SubobjectDataInterface.SubobjectDataBlueprintFunctionLibrary.IsInstancedActor
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FSubobjectData                   Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USubobjectDataBlueprintFunctionLibrary::IsInstancedActor(const struct FSubobjectData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SubobjectDataBlueprintFunctionLibrary", "IsInstancedActor");

	Params::SubobjectDataBlueprintFunctionLibrary_IsInstancedActor Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SubobjectDataInterface.SubobjectDataBlueprintFunctionLibrary.IsInstancedComponent
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FSubobjectData                   Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USubobjectDataBlueprintFunctionLibrary::IsInstancedComponent(const struct FSubobjectData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SubobjectDataBlueprintFunctionLibrary", "IsInstancedComponent");

	Params::SubobjectDataBlueprintFunctionLibrary_IsInstancedComponent Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SubobjectDataInterface.SubobjectDataBlueprintFunctionLibrary.IsNativeComponent
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FSubobjectData                   Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USubobjectDataBlueprintFunctionLibrary::IsNativeComponent(const struct FSubobjectData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SubobjectDataBlueprintFunctionLibrary", "IsNativeComponent");

	Params::SubobjectDataBlueprintFunctionLibrary_IsNativeComponent Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SubobjectDataInterface.SubobjectDataBlueprintFunctionLibrary.IsRootActor
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FSubobjectData                   Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USubobjectDataBlueprintFunctionLibrary::IsRootActor(const struct FSubobjectData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SubobjectDataBlueprintFunctionLibrary", "IsRootActor");

	Params::SubobjectDataBlueprintFunctionLibrary_IsRootActor Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SubobjectDataInterface.SubobjectDataBlueprintFunctionLibrary.IsRootComponent
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FSubobjectData                   Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USubobjectDataBlueprintFunctionLibrary::IsRootComponent(const struct FSubobjectData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SubobjectDataBlueprintFunctionLibrary", "IsRootComponent");

	Params::SubobjectDataBlueprintFunctionLibrary_IsRootComponent Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SubobjectDataInterface.SubobjectDataBlueprintFunctionLibrary.IsSceneComponent
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FSubobjectData                   Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USubobjectDataBlueprintFunctionLibrary::IsSceneComponent(const struct FSubobjectData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SubobjectDataBlueprintFunctionLibrary", "IsSceneComponent");

	Params::SubobjectDataBlueprintFunctionLibrary_IsSceneComponent Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SubobjectDataInterface.SubobjectDataBlueprintFunctionLibrary.IsValid
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FSubobjectData                   Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USubobjectDataBlueprintFunctionLibrary::IsValid(const struct FSubobjectData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SubobjectDataBlueprintFunctionLibrary", "IsValid");

	Params::SubobjectDataBlueprintFunctionLibrary_IsValid Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SubobjectDataInterface.SubobjectDataSubsystem.CreateNewBPComponent
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UActorComponent>      ComponentClass                                         (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           NewClassPath                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           NewClassName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UClass*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UClass* USubobjectDataSubsystem::CreateNewBPComponent(TSubclassOf<class UActorComponent> ComponentClass, const class FString& NewClassPath, const class FString& NewClassName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SubobjectDataSubsystem", "CreateNewBPComponent");

	Params::SubobjectDataSubsystem_CreateNewBPComponent Parms{};

	Parms.ComponentClass = ComponentClass;
	Parms.NewClassPath = std::move(NewClassPath);
	Parms.NewClassName = std::move(NewClassName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SubobjectDataInterface.SubobjectDataSubsystem.CreateNewCPPComponent
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UActorComponent>      ComponentClass                                         (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           NewClassPath                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           NewClassName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UClass*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UClass* USubobjectDataSubsystem::CreateNewCPPComponent(TSubclassOf<class UActorComponent> ComponentClass, const class FString& NewClassPath, const class FString& NewClassName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SubobjectDataSubsystem", "CreateNewCPPComponent");

	Params::SubobjectDataSubsystem_CreateNewCPPComponent Parms{};

	Parms.ComponentClass = ComponentClass;
	Parms.NewClassPath = std::move(NewClassPath);
	Parms.NewClassName = std::move(NewClassName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SubobjectDataInterface.SubobjectDataSubsystem.RenameSubobjectMemberVariable
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UBlueprint*                       BPContext                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSubobjectDataHandle             InHandle                                               (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             NewName                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USubobjectDataSubsystem::RenameSubobjectMemberVariable(class UBlueprint* BPContext, const struct FSubobjectDataHandle& InHandle, const class FName NewName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SubobjectDataSubsystem", "RenameSubobjectMemberVariable");

	Params::SubobjectDataSubsystem_RenameSubobjectMemberVariable Parms{};

	Parms.BPContext = BPContext;
	Parms.InHandle = std::move(InHandle);
	Parms.NewName = NewName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SubobjectDataInterface.SubobjectDataSubsystem.AddNewSubobject
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FAddNewSubobjectParams           Params_0                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FText                             FailReason                                             (Parm, OutParm, NativeAccessSpecifierPublic)
// struct FSubobjectDataHandle             ReturnValue                                            (Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FSubobjectDataHandle USubobjectDataSubsystem::AddNewSubobject(const struct FAddNewSubobjectParams& Params_0, class FText* FailReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SubobjectDataSubsystem", "AddNewSubobject");

	Params::SubobjectDataSubsystem_AddNewSubobject Parms{};

	Parms.Params_0 = std::move(Params_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (FailReason != nullptr)
		*FailReason = std::move(Parms.FailReason);

	return Parms.ReturnValue;
}


// Function SubobjectDataInterface.SubobjectDataSubsystem.AttachSubobject
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSubobjectDataHandle             OwnerHandle                                            (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSubobjectDataHandle             ChildToAddHandle                                       (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USubobjectDataSubsystem::AttachSubobject(const struct FSubobjectDataHandle& OwnerHandle, const struct FSubobjectDataHandle& ChildToAddHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SubobjectDataSubsystem", "AttachSubobject");

	Params::SubobjectDataSubsystem_AttachSubobject Parms{};

	Parms.OwnerHandle = std::move(OwnerHandle);
	Parms.ChildToAddHandle = std::move(ChildToAddHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SubobjectDataInterface.SubobjectDataSubsystem.ChangeSubobjectClass
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSubobjectDataHandle             Handle                                                 (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UClass*                           NewClass                                               (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USubobjectDataSubsystem::ChangeSubobjectClass(const struct FSubobjectDataHandle& Handle, const class UClass* NewClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SubobjectDataSubsystem", "ChangeSubobjectClass");

	Params::SubobjectDataSubsystem_ChangeSubobjectClass Parms{};

	Parms.Handle = std::move(Handle);
	Parms.NewClass = NewClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SubobjectDataInterface.SubobjectDataSubsystem.CopySubobjects
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FSubobjectDataHandle>     Handles                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class UBlueprint*                       BpContext                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USubobjectDataSubsystem::CopySubobjects(const TArray<struct FSubobjectDataHandle>& Handles, class UBlueprint* BpContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SubobjectDataSubsystem", "CopySubobjects");

	Params::SubobjectDataSubsystem_CopySubobjects Parms{};

	Parms.Handles = std::move(Handles);
	Parms.BpContext = BpContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SubobjectDataInterface.SubobjectDataSubsystem.DeleteSubobject
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSubobjectDataHandle             ContextHandle                                          (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSubobjectDataHandle             SubobjectToDelete                                      (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBlueprint*                       BPContext                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USubobjectDataSubsystem::DeleteSubobject(const struct FSubobjectDataHandle& ContextHandle, const struct FSubobjectDataHandle& SubobjectToDelete, class UBlueprint* BPContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SubobjectDataSubsystem", "DeleteSubobject");

	Params::SubobjectDataSubsystem_DeleteSubobject Parms{};

	Parms.ContextHandle = std::move(ContextHandle);
	Parms.SubobjectToDelete = std::move(SubobjectToDelete);
	Parms.BPContext = BPContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SubobjectDataInterface.SubobjectDataSubsystem.DeleteSubobjects
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSubobjectDataHandle             ContextHandle                                          (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FSubobjectDataHandle>     SubobjectsToDelete                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class UBlueprint*                       BPContext                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USubobjectDataSubsystem::DeleteSubobjects(const struct FSubobjectDataHandle& ContextHandle, const TArray<struct FSubobjectDataHandle>& SubobjectsToDelete, class UBlueprint* BPContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SubobjectDataSubsystem", "DeleteSubobjects");

	Params::SubobjectDataSubsystem_DeleteSubobjects Parms{};

	Parms.ContextHandle = std::move(ContextHandle);
	Parms.SubobjectsToDelete = std::move(SubobjectsToDelete);
	Parms.BPContext = BPContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SubobjectDataInterface.SubobjectDataSubsystem.DetachSubobject
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSubobjectDataHandle             OwnerHandle                                            (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSubobjectDataHandle             ChildToRemove                                          (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USubobjectDataSubsystem::DetachSubobject(const struct FSubobjectDataHandle& OwnerHandle, const struct FSubobjectDataHandle& ChildToRemove)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SubobjectDataSubsystem", "DetachSubobject");

	Params::SubobjectDataSubsystem_DetachSubobject Parms{};

	Parms.OwnerHandle = std::move(OwnerHandle);
	Parms.ChildToRemove = std::move(ChildToRemove);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SubobjectDataInterface.SubobjectDataSubsystem.DuplicateSubobjects
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSubobjectDataHandle             Context                                                (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FSubobjectDataHandle>     SubobjectsToDup                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class UBlueprint*                       BpContext                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FSubobjectDataHandle>     OutNewSubobjects                                       (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void USubobjectDataSubsystem::DuplicateSubobjects(const struct FSubobjectDataHandle& Context, const TArray<struct FSubobjectDataHandle>& SubobjectsToDup, class UBlueprint* BpContext, TArray<struct FSubobjectDataHandle>* OutNewSubobjects)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SubobjectDataSubsystem", "DuplicateSubobjects");

	Params::SubobjectDataSubsystem_DuplicateSubobjects Parms{};

	Parms.Context = std::move(Context);
	Parms.SubobjectsToDup = std::move(SubobjectsToDup);
	Parms.BpContext = BpContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutNewSubobjects != nullptr)
		*OutNewSubobjects = std::move(Parms.OutNewSubobjects);
}


// Function SubobjectDataInterface.SubobjectDataSubsystem.K2_DeleteSubobjectFromInstance
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSubobjectDataHandle             ContextHandle                                          (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSubobjectDataHandle             SubobjectToDelete                                      (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USubobjectDataSubsystem::K2_DeleteSubobjectFromInstance(const struct FSubobjectDataHandle& ContextHandle, const struct FSubobjectDataHandle& SubobjectToDelete)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SubobjectDataSubsystem", "K2_DeleteSubobjectFromInstance");

	Params::SubobjectDataSubsystem_K2_DeleteSubobjectFromInstance Parms{};

	Parms.ContextHandle = std::move(ContextHandle);
	Parms.SubobjectToDelete = std::move(SubobjectToDelete);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SubobjectDataInterface.SubobjectDataSubsystem.K2_DeleteSubobjectsFromInstance
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSubobjectDataHandle             ContextHandle                                          (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FSubobjectDataHandle>     SubobjectsToDelete                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USubobjectDataSubsystem::K2_DeleteSubobjectsFromInstance(const struct FSubobjectDataHandle& ContextHandle, const TArray<struct FSubobjectDataHandle>& SubobjectsToDelete)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SubobjectDataSubsystem", "K2_DeleteSubobjectsFromInstance");

	Params::SubobjectDataSubsystem_K2_DeleteSubobjectsFromInstance Parms{};

	Parms.ContextHandle = std::move(ContextHandle);
	Parms.SubobjectsToDelete = std::move(SubobjectsToDelete);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SubobjectDataInterface.SubobjectDataSubsystem.K2_GatherSubobjectDataForBlueprint
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UBlueprint*                       Context                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FSubobjectDataHandle>     OutArray                                               (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void USubobjectDataSubsystem::K2_GatherSubobjectDataForBlueprint(class UBlueprint* Context, TArray<struct FSubobjectDataHandle>* OutArray)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SubobjectDataSubsystem", "K2_GatherSubobjectDataForBlueprint");

	Params::SubobjectDataSubsystem_K2_GatherSubobjectDataForBlueprint Parms{};

	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutArray != nullptr)
		*OutArray = std::move(Parms.OutArray);
}


// Function SubobjectDataInterface.SubobjectDataSubsystem.K2_GatherSubobjectDataForInstance
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                           Context                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FSubobjectDataHandle>     OutArray                                               (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void USubobjectDataSubsystem::K2_GatherSubobjectDataForInstance(class AActor* Context, TArray<struct FSubobjectDataHandle>* OutArray)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SubobjectDataSubsystem", "K2_GatherSubobjectDataForInstance");

	Params::SubobjectDataSubsystem_K2_GatherSubobjectDataForInstance Parms{};

	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutArray != nullptr)
		*OutArray = std::move(Parms.OutArray);
}


// Function SubobjectDataInterface.SubobjectDataSubsystem.MakeNewSceneRoot
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSubobjectDataHandle             Context                                                (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSubobjectDataHandle             NewSceneRoot                                           (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBlueprint*                       BPContext                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USubobjectDataSubsystem::MakeNewSceneRoot(const struct FSubobjectDataHandle& Context, const struct FSubobjectDataHandle& NewSceneRoot, class UBlueprint* BPContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SubobjectDataSubsystem", "MakeNewSceneRoot");

	Params::SubobjectDataSubsystem_MakeNewSceneRoot Parms{};

	Parms.Context = std::move(Context);
	Parms.NewSceneRoot = std::move(NewSceneRoot);
	Parms.BPContext = BPContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SubobjectDataInterface.SubobjectDataSubsystem.PasteSubobjects
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSubobjectDataHandle             PasteToContext                                         (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FSubobjectDataHandle>     NewParentHandles                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class UBlueprint*                       BpContext                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FSubobjectDataHandle>     OutPastedHandles                                       (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void USubobjectDataSubsystem::PasteSubobjects(const struct FSubobjectDataHandle& PasteToContext, const TArray<struct FSubobjectDataHandle>& NewParentHandles, class UBlueprint* BpContext, TArray<struct FSubobjectDataHandle>* OutPastedHandles)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SubobjectDataSubsystem", "PasteSubobjects");

	Params::SubobjectDataSubsystem_PasteSubobjects Parms{};

	Parms.PasteToContext = std::move(PasteToContext);
	Parms.NewParentHandles = std::move(NewParentHandles);
	Parms.BpContext = BpContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutPastedHandles != nullptr)
		*OutPastedHandles = std::move(Parms.OutPastedHandles);
}


// Function SubobjectDataInterface.SubobjectDataSubsystem.RenameSubobject
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSubobjectDataHandle             Handle                                                 (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             InNewName                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USubobjectDataSubsystem::RenameSubobject(const struct FSubobjectDataHandle& Handle, const class FText& InNewName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SubobjectDataSubsystem", "RenameSubobject");

	Params::SubobjectDataSubsystem_RenameSubobject Parms{};

	Parms.Handle = std::move(Handle);
	Parms.InNewName = std::move(InNewName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SubobjectDataInterface.SubobjectDataSubsystem.ReparentSubobject
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FReparentSubobjectParams         Params_0                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FSubobjectDataHandle             ToReparentHandle                                       (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USubobjectDataSubsystem::ReparentSubobject(const struct FReparentSubobjectParams& Params_0, const struct FSubobjectDataHandle& ToReparentHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SubobjectDataSubsystem", "ReparentSubobject");

	Params::SubobjectDataSubsystem_ReparentSubobject Parms{};

	Parms.Params_0 = std::move(Params_0);
	Parms.ToReparentHandle = std::move(ToReparentHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SubobjectDataInterface.SubobjectDataSubsystem.ReparentSubobjects
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FReparentSubobjectParams         Params_0                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<struct FSubobjectDataHandle>     HandlesToMove                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USubobjectDataSubsystem::ReparentSubobjects(const struct FReparentSubobjectParams& Params_0, const TArray<struct FSubobjectDataHandle>& HandlesToMove)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SubobjectDataSubsystem", "ReparentSubobjects");

	Params::SubobjectDataSubsystem_ReparentSubobjects Parms{};

	Parms.Params_0 = std::move(Params_0);
	Parms.HandlesToMove = std::move(HandlesToMove);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SubobjectDataInterface.SubobjectDataSubsystem.CanCopySubobjects
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FSubobjectDataHandle>     Handles                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USubobjectDataSubsystem::CanCopySubobjects(const TArray<struct FSubobjectDataHandle>& Handles) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SubobjectDataSubsystem", "CanCopySubobjects");

	Params::SubobjectDataSubsystem_CanCopySubobjects Parms{};

	Parms.Handles = std::move(Handles);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SubobjectDataInterface.SubobjectDataSubsystem.CanPasteSubobjects
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FSubobjectDataHandle             RootHandle                                             (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBlueprint*                       BPContext                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USubobjectDataSubsystem::CanPasteSubobjects(const struct FSubobjectDataHandle& RootHandle, class UBlueprint* BPContext) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SubobjectDataSubsystem", "CanPasteSubobjects");

	Params::SubobjectDataSubsystem_CanPasteSubobjects Parms{};

	Parms.RootHandle = std::move(RootHandle);
	Parms.BPContext = BPContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SubobjectDataInterface.SubobjectDataSubsystem.FindHandleForObject
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FSubobjectDataHandle             Context                                                (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ObjectToFind                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBlueprint*                       BPContext                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSubobjectDataHandle             ReturnValue                                            (Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FSubobjectDataHandle USubobjectDataSubsystem::FindHandleForObject(const struct FSubobjectDataHandle& Context, const class UObject* ObjectToFind, class UBlueprint* BPContext) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SubobjectDataSubsystem", "FindHandleForObject");

	Params::SubobjectDataSubsystem_FindHandleForObject Parms{};

	Parms.Context = std::move(Context);
	Parms.ObjectToFind = ObjectToFind;
	Parms.BPContext = BPContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SubobjectDataInterface.SubobjectDataSubsystem.IsValidRename
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FSubobjectDataHandle             Handle                                                 (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             InNewText                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FText                             OutErrorMessage                                        (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USubobjectDataSubsystem::IsValidRename(const struct FSubobjectDataHandle& Handle, const class FText& InNewText, class FText* OutErrorMessage) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SubobjectDataSubsystem", "IsValidRename");

	Params::SubobjectDataSubsystem_IsValidRename Parms{};

	Parms.Handle = std::move(Handle);
	Parms.InNewText = std::move(InNewText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutErrorMessage != nullptr)
		*OutErrorMessage = std::move(Parms.OutErrorMessage);

	return Parms.ReturnValue;
}


// Function SubobjectDataInterface.SubobjectDataSubsystem.K2_FindSubobjectDataFromHandle
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FSubobjectDataHandle             Handle                                                 (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSubobjectData                   OutData                                                (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USubobjectDataSubsystem::K2_FindSubobjectDataFromHandle(const struct FSubobjectDataHandle& Handle, struct FSubobjectData* OutData) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SubobjectDataSubsystem", "K2_FindSubobjectDataFromHandle");

	Params::SubobjectDataSubsystem_K2_FindSubobjectDataFromHandle Parms{};

	Parms.Handle = std::move(Handle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutData != nullptr)
		*OutData = std::move(Parms.OutData);

	return Parms.ReturnValue;
}

}

