#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AssetTools

#include "Basic.hpp"

#include "AssetTools_classes.hpp"
#include "AssetTools_parameters.hpp"


namespace SDK
{

// Function AssetTools.AssetTools.CreateAsset
// (Native, Public, BlueprintCallable)
// Parameters:
// class FString                           AssetName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           PackagePath                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UClass*                           AssetClass                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UFactory*                         Factory                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             CallingContext                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UObject* IAssetTools::CreateAsset(const class FString& AssetName, const class FString& PackagePath, class UClass* AssetClass, class UFactory* Factory, class FName CallingContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AssetTools", "CreateAsset");

	Params::AssetTools_CreateAsset Parms{};

	Parms.AssetName = std::move(AssetName);
	Parms.PackagePath = std::move(PackagePath);
	Parms.AssetClass = AssetClass;
	Parms.Factory = Factory;
	Parms.CallingContext = CallingContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AssetTools.AssetTools.CreateAssetWithDialog
// (Native, Public, BlueprintCallable)
// Parameters:
// class FString                           AssetName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           PackagePath                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UClass*                           AssetClass                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UFactory*                         Factory                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             CallingContext                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bCallConfigureProperties                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UObject* IAssetTools::CreateAssetWithDialog(const class FString& AssetName, const class FString& PackagePath, class UClass* AssetClass, class UFactory* Factory, class FName CallingContext, const bool bCallConfigureProperties)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AssetTools", "CreateAssetWithDialog");

	Params::AssetTools_CreateAssetWithDialog Parms{};

	Parms.AssetName = std::move(AssetName);
	Parms.PackagePath = std::move(PackagePath);
	Parms.AssetClass = AssetClass;
	Parms.Factory = Factory;
	Parms.CallingContext = CallingContext;
	Parms.bCallConfigureProperties = bCallConfigureProperties;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AssetTools.AssetTools.CreateUniqueAssetName
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           InBasePackageName                                      (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           InSuffix                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           OutPackageName                                         (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           OutAssetName                                           (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IAssetTools::CreateUniqueAssetName(const class FString& InBasePackageName, const class FString& InSuffix, class FString* OutPackageName, class FString* OutAssetName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AssetTools", "CreateUniqueAssetName");

	Params::AssetTools_CreateUniqueAssetName Parms{};

	Parms.InBasePackageName = std::move(InBasePackageName);
	Parms.InSuffix = std::move(InSuffix);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutPackageName != nullptr)
		*OutPackageName = std::move(Parms.OutPackageName);

	if (OutAssetName != nullptr)
		*OutAssetName = std::move(Parms.OutAssetName);
}


// Function AssetTools.AssetTools.DuplicateAsset
// (Native, Public, BlueprintCallable)
// Parameters:
// class FString                           AssetName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           PackagePath                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          OriginalObject                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UObject* IAssetTools::DuplicateAsset(const class FString& AssetName, const class FString& PackagePath, class UObject* OriginalObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AssetTools", "DuplicateAsset");

	Params::AssetTools_DuplicateAsset Parms{};

	Parms.AssetName = std::move(AssetName);
	Parms.PackagePath = std::move(PackagePath);
	Parms.OriginalObject = OriginalObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AssetTools.AssetTools.DuplicateAssetWithDialog
// (Native, Public, BlueprintCallable)
// Parameters:
// class FString                           AssetName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           PackagePath                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          OriginalObject                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UObject* IAssetTools::DuplicateAssetWithDialog(const class FString& AssetName, const class FString& PackagePath, class UObject* OriginalObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AssetTools", "DuplicateAssetWithDialog");

	Params::AssetTools_DuplicateAssetWithDialog Parms{};

	Parms.AssetName = std::move(AssetName);
	Parms.PackagePath = std::move(PackagePath);
	Parms.OriginalObject = OriginalObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AssetTools.AssetTools.DuplicateAssetWithDialogAndTitle
// (Native, Public, BlueprintCallable)
// Parameters:
// class FString                           AssetName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           PackagePath                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          OriginalObject                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             DialogTitle                                            (Parm, NativeAccessSpecifierPublic)
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UObject* IAssetTools::DuplicateAssetWithDialogAndTitle(const class FString& AssetName, const class FString& PackagePath, class UObject* OriginalObject, const class FText& DialogTitle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AssetTools", "DuplicateAssetWithDialogAndTitle");

	Params::AssetTools_DuplicateAssetWithDialogAndTitle Parms{};

	Parms.AssetName = std::move(AssetName);
	Parms.PackagePath = std::move(PackagePath);
	Parms.OriginalObject = OriginalObject;
	Parms.DialogTitle = std::move(DialogTitle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AssetTools.AssetTools.ExportAssets
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FString>                   AssetsToExport                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           ExportPath                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IAssetTools::ExportAssets(const TArray<class FString>& AssetsToExport, const class FString& ExportPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AssetTools", "ExportAssets");

	Params::AssetTools_ExportAssets Parms{};

	Parms.AssetsToExport = std::move(AssetsToExport);
	Parms.ExportPath = std::move(ExportPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AssetTools.AssetTools.ExportAssetsWithDialog
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FString>                   AssetsToExport                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bPromptForIndividualFilenames                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IAssetTools::ExportAssetsWithDialog(const TArray<class FString>& AssetsToExport, bool bPromptForIndividualFilenames)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AssetTools", "ExportAssetsWithDialog");

	Params::AssetTools_ExportAssetsWithDialog Parms{};

	Parms.AssetsToExport = std::move(AssetsToExport);
	Parms.bPromptForIndividualFilenames = bPromptForIndividualFilenames;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AssetTools.AssetTools.FindSoftReferencesToObject
// (Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FSoftObjectPath                  TargetObject                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UObject*>                  ReferencingObjects                                     (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void IAssetTools::FindSoftReferencesToObject(const struct FSoftObjectPath& TargetObject, TArray<class UObject*>* ReferencingObjects)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AssetTools", "FindSoftReferencesToObject");

	Params::AssetTools_FindSoftReferencesToObject Parms{};

	Parms.TargetObject = std::move(TargetObject);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ReferencingObjects != nullptr)
		*ReferencingObjects = std::move(Parms.ReferencingObjects);
}


// Function AssetTools.AssetTools.ImportAssetsAutomated
// (Native, Public, BlueprintCallable)
// Parameters:
// class UAutomatedAssetImportData*        ImportData                                             (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UObject*>                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UObject*> IAssetTools::ImportAssetsAutomated(const class UAutomatedAssetImportData* ImportData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AssetTools", "ImportAssetsAutomated");

	Params::AssetTools_ImportAssetsAutomated Parms{};

	Parms.ImportData = ImportData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AssetTools.AssetTools.ImportAssetsWithDialog
// (Native, Public, BlueprintCallable)
// Parameters:
// class FString                           DestinationPath                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UObject*>                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UObject*> IAssetTools::ImportAssetsWithDialog(const class FString& DestinationPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AssetTools", "ImportAssetsWithDialog");

	Params::AssetTools_ImportAssetsWithDialog Parms{};

	Parms.DestinationPath = std::move(DestinationPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AssetTools.AssetTools.ImportAssetTasks
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class UAssetImportTask*>         ImportTasks                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void IAssetTools::ImportAssetTasks(const TArray<class UAssetImportTask*>& ImportTasks)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AssetTools", "ImportAssetTasks");

	Params::AssetTools_ImportAssetTasks Parms{};

	Parms.ImportTasks = std::move(ImportTasks);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AssetTools.AssetTools.OpenEditorForAssets
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class UObject*>                  Assets                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void IAssetTools::OpenEditorForAssets(const TArray<class UObject*>& Assets)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AssetTools", "OpenEditorForAssets");

	Params::AssetTools_OpenEditorForAssets Parms{};

	Parms.Assets = std::move(Assets);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AssetTools.AssetTools.RenameAssets
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FAssetRenameData>         AssetsAndNames                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IAssetTools::RenameAssets(const TArray<struct FAssetRenameData>& AssetsAndNames)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AssetTools", "RenameAssets");

	Params::AssetTools_RenameAssets Parms{};

	Parms.AssetsAndNames = std::move(AssetsAndNames);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AssetTools.AssetTools.RenameAssetsWithDialog
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FAssetRenameData>         AssetsAndNames                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bAutoCheckout                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAssetRenameResult                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EAssetRenameResult IAssetTools::RenameAssetsWithDialog(const TArray<struct FAssetRenameData>& AssetsAndNames, bool bAutoCheckout)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AssetTools", "RenameAssetsWithDialog");

	Params::AssetTools_RenameAssetsWithDialog Parms{};

	Parms.AssetsAndNames = std::move(AssetsAndNames);
	Parms.bAutoCheckout = bAutoCheckout;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AssetTools.AssetTools.RenameReferencingSoftObjectPaths
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class UPackage*>                 PackagesToCheck                                        (ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// TMap<struct FSoftObjectPath, struct FSoftObjectPath>AssetRedirectorMap                                     (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IAssetTools::RenameReferencingSoftObjectPaths(const TArray<class UPackage*>& PackagesToCheck, const TMap<struct FSoftObjectPath, struct FSoftObjectPath>& AssetRedirectorMap)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AssetTools", "RenameReferencingSoftObjectPaths");

	Params::AssetTools_RenameReferencingSoftObjectPaths Parms{};

	Parms.PackagesToCheck = std::move(PackagesToCheck);
	Parms.AssetRedirectorMap = std::move(AssetRedirectorMap);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AssetTools.AssetTools.BeginAdvancedCopyPackages
// (Native, Public, HasOutParams, BlueprintCallable, Const)
// Parameters:
// TArray<class FName>                     InputNamesToCopy                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           TargetPath                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(bool bSuccess, TArray<struct FAssetRenameData>& AllCopiedAssets)>OnCopyComplete                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IAssetTools::BeginAdvancedCopyPackages(const TArray<class FName>& InputNamesToCopy, const class FString& TargetPath, const TDelegate<void(bool bSuccess, TArray<struct FAssetRenameData>& AllCopiedAssets)>& OnCopyComplete) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AssetTools", "BeginAdvancedCopyPackages");

	Params::AssetTools_BeginAdvancedCopyPackages Parms{};

	Parms.InputNamesToCopy = std::move(InputNamesToCopy);
	Parms.TargetPath = std::move(TargetPath);
	Parms.OnCopyComplete = OnCopyComplete;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AssetTools.AssetTools.DiffAgainstDepot
// (Native, Public, BlueprintCallable, Const)
// Parameters:
// class UObject*                          InObject                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           InPackagePath                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           InPackageName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IAssetTools::DiffAgainstDepot(class UObject* InObject, const class FString& InPackagePath, const class FString& InPackageName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AssetTools", "DiffAgainstDepot");

	Params::AssetTools_DiffAgainstDepot Parms{};

	Parms.InObject = InObject;
	Parms.InPackagePath = std::move(InPackagePath);
	Parms.InPackageName = std::move(InPackageName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AssetTools.AssetTools.DiffAssets
// (Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UObject*                          OldAsset                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          NewAsset                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRevisionInfo                    OldRevision                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FRevisionInfo                    NewRevision                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IAssetTools::DiffAssets(class UObject* OldAsset, class UObject* NewAsset, const struct FRevisionInfo& OldRevision, const struct FRevisionInfo& NewRevision) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AssetTools", "DiffAssets");

	Params::AssetTools_DiffAssets Parms{};

	Parms.OldAsset = OldAsset;
	Parms.NewAsset = NewAsset;
	Parms.OldRevision = std::move(OldRevision);
	Parms.NewRevision = std::move(NewRevision);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AssetTools.AssetTools.MigratePackages
// (Native, Public, HasOutParams, BlueprintCallable, Const)
// Parameters:
// TArray<class FName>                     PackageNamesToMigrate                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           DestinationPath                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMigrationOptions                Options                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IAssetTools::MigratePackages(const TArray<class FName>& PackageNamesToMigrate, const class FString& DestinationPath, const struct FMigrationOptions& Options) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AssetTools", "MigratePackages");

	Params::AssetTools_MigratePackages Parms{};

	Parms.PackageNamesToMigrate = std::move(PackageNamesToMigrate);
	Parms.DestinationPath = std::move(DestinationPath);
	Parms.Options = std::move(Options);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AssetTools.AssetToolsHelpers.GetAssetTools
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TScriptInterface<class IAssetTools>     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TScriptInterface<class IAssetTools> UAssetToolsHelpers::GetAssetTools()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AssetToolsHelpers", "GetAssetTools");

	Params::AssetToolsHelpers_GetAssetTools Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

