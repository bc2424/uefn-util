#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AudioMotorSim

#include "Basic.hpp"

#include "AudioMotorSim_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class AudioMotorSim.AudioMotorModelComponent
// 0x0060 (0x0138 - 0x00D8)
class UAudioMotorModelComponent final : public UActorComponent
{
public:
	TArray<struct FMotorSimEntry>                 SimComponents;                                     // 0x00D8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<TScriptInterface<class IAudioMotorSimOutput>> AudioComponents;                                   // 0x00E8(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                         Pad_F8[0x40];                                      // 0x00F8(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddMotorAudioComponent(TScriptInterface<class IAudioMotorSimOutput> InComponent);
	void AddMotorSimComponent(TScriptInterface<class IAudioMotorSim> InComponent, const int32 SortOrder);
	void RemoveMotorAudioComponent(TScriptInterface<class IAudioMotorSimOutput> InComponent);
	void RemoveMotorSimComponent(TScriptInterface<class IAudioMotorSim> InComponent);
	void Reset();
	void StartOutput();
	void StopOutput();
	void Update(const struct FAudioMotorSimInputContext& Input);

	const struct FAudioMotorSimInputContext GetCachedInputData() const;
	int32 GetGear() const;
	float GetRpm() const;
	struct FAudioMotorSimRuntimeContext GetRuntimeInfo() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AudioMotorModelComponent">();
	}
	static class UAudioMotorModelComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAudioMotorModelComponent>();
	}
};

// Class AudioMotorSim.AudioMotorSim
// 0x0000 (0x0030 - 0x0030)
class IAudioMotorSim final : public IInterface
{
public:
	bool GetEnabled();
	void Reset();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AudioMotorSim">();
	}
	static class IAudioMotorSim* GetDefaultObj()
	{
		return GetDefaultObjImpl<IAudioMotorSim>();
	}
};

// Class AudioMotorSim.AudioMotorSimComponent
// 0x0050 (0x0128 - 0x00D8)
class UAudioMotorSimComponent : public UActorComponent
{
public:
	uint8                                         Pad_D8[0x8];                                       // 0x00D8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAudioMotorSimInputContext             CachedInput;                                       // 0x00E0(0x002C)(BlueprintVisible, BlueprintReadOnly, EditorOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FAudioMotorSimRuntimeContext           CachedRuntimeInfo;                                 // 0x010C(0x0014)(BlueprintVisible, BlueprintReadOnly, EditorOnly, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0120(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_121[0x7];                                      // 0x0121(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_Reset();
	bool BP_Update(struct FAudioMotorSimInputContext& Input, struct FAudioMotorSimRuntimeContext& RuntimeInfo);
	void SetEnabled(bool bNewEnabled);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AudioMotorSimComponent">();
	}
	static class UAudioMotorSimComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAudioMotorSimComponent>();
	}
};

// Class AudioMotorSim.AudioMotorSimOutput
// 0x0000 (0x0030 - 0x0030)
class IAudioMotorSimOutput final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AudioMotorSimOutput">();
	}
	static class IAudioMotorSimOutput* GetDefaultObj()
	{
		return GetDefaultObjImpl<IAudioMotorSimOutput>();
	}
};

}

