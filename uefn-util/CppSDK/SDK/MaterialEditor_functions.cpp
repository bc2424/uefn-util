#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MaterialEditor

#include "Basic.hpp"

#include "MaterialEditor_classes.hpp"
#include "MaterialEditor_parameters.hpp"


namespace SDK
{

// Function MaterialEditor.MaterialEditingLibrary.ClearAllMaterialInstanceParameters
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UMaterialInstanceConstant*        Instance                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMaterialEditingLibrary::ClearAllMaterialInstanceParameters(class UMaterialInstanceConstant* Instance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MaterialEditingLibrary", "ClearAllMaterialInstanceParameters");

	Params::MaterialEditingLibrary_ClearAllMaterialInstanceParameters Parms{};

	Parms.Instance = Instance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MaterialEditor.MaterialEditingLibrary.ConnectMaterialExpressions
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UMaterialExpression*              FromExpression                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           FromOutputName                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialExpression*              ToExpression                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ToInputName                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMaterialEditingLibrary::ConnectMaterialExpressions(class UMaterialExpression* FromExpression, const class FString& FromOutputName, class UMaterialExpression* ToExpression, const class FString& ToInputName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MaterialEditingLibrary", "ConnectMaterialExpressions");

	Params::MaterialEditingLibrary_ConnectMaterialExpressions Parms{};

	Parms.FromExpression = FromExpression;
	Parms.FromOutputName = std::move(FromOutputName);
	Parms.ToExpression = ToExpression;
	Parms.ToInputName = std::move(ToInputName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MaterialEditor.MaterialEditingLibrary.ConnectMaterialProperty
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UMaterialExpression*              FromExpression                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           FromOutputName                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMaterialProperty                       Property                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMaterialEditingLibrary::ConnectMaterialProperty(class UMaterialExpression* FromExpression, const class FString& FromOutputName, EMaterialProperty Property)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MaterialEditingLibrary", "ConnectMaterialProperty");

	Params::MaterialEditingLibrary_ConnectMaterialProperty Parms{};

	Parms.FromExpression = FromExpression;
	Parms.FromOutputName = std::move(FromOutputName);
	Parms.Property = Property;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MaterialEditor.MaterialEditingLibrary.CreateMaterialExpression
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UMaterial*                        Material                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UMaterialExpression>  ExpressionClass                                        (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NodePosX                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NodePosY                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialExpression*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMaterialExpression* UMaterialEditingLibrary::CreateMaterialExpression(class UMaterial* Material, TSubclassOf<class UMaterialExpression> ExpressionClass, int32 NodePosX, int32 NodePosY)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MaterialEditingLibrary", "CreateMaterialExpression");

	Params::MaterialEditingLibrary_CreateMaterialExpression Parms{};

	Parms.Material = Material;
	Parms.ExpressionClass = ExpressionClass;
	Parms.NodePosX = NodePosX;
	Parms.NodePosY = NodePosY;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MaterialEditor.MaterialEditingLibrary.CreateMaterialExpressionInFunction
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UMaterialFunction*                MaterialFunction                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UMaterialExpression>  ExpressionClass                                        (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NodePosX                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NodePosY                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialExpression*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMaterialExpression* UMaterialEditingLibrary::CreateMaterialExpressionInFunction(class UMaterialFunction* MaterialFunction, TSubclassOf<class UMaterialExpression> ExpressionClass, int32 NodePosX, int32 NodePosY)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MaterialEditingLibrary", "CreateMaterialExpressionInFunction");

	Params::MaterialEditingLibrary_CreateMaterialExpressionInFunction Parms{};

	Parms.MaterialFunction = MaterialFunction;
	Parms.ExpressionClass = ExpressionClass;
	Parms.NodePosX = NodePosX;
	Parms.NodePosY = NodePosY;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MaterialEditor.MaterialEditingLibrary.DeleteAllMaterialExpressions
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UMaterial*                        Material                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMaterialEditingLibrary::DeleteAllMaterialExpressions(class UMaterial* Material)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MaterialEditingLibrary", "DeleteAllMaterialExpressions");

	Params::MaterialEditingLibrary_DeleteAllMaterialExpressions Parms{};

	Parms.Material = Material;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MaterialEditor.MaterialEditingLibrary.DeleteAllMaterialExpressionsInFunction
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UMaterialFunction*                MaterialFunction                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMaterialEditingLibrary::DeleteAllMaterialExpressionsInFunction(class UMaterialFunction* MaterialFunction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MaterialEditingLibrary", "DeleteAllMaterialExpressionsInFunction");

	Params::MaterialEditingLibrary_DeleteAllMaterialExpressionsInFunction Parms{};

	Parms.MaterialFunction = MaterialFunction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MaterialEditor.MaterialEditingLibrary.DeleteMaterialExpression
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UMaterial*                        Material                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialExpression*              Expression                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMaterialEditingLibrary::DeleteMaterialExpression(class UMaterial* Material, class UMaterialExpression* Expression)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MaterialEditingLibrary", "DeleteMaterialExpression");

	Params::MaterialEditingLibrary_DeleteMaterialExpression Parms{};

	Parms.Material = Material;
	Parms.Expression = Expression;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MaterialEditor.MaterialEditingLibrary.DeleteMaterialExpressionInFunction
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UMaterialFunction*                MaterialFunction                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialExpression*              Expression                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMaterialEditingLibrary::DeleteMaterialExpressionInFunction(class UMaterialFunction* MaterialFunction, class UMaterialExpression* Expression)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MaterialEditingLibrary", "DeleteMaterialExpressionInFunction");

	Params::MaterialEditingLibrary_DeleteMaterialExpressionInFunction Parms{};

	Parms.MaterialFunction = MaterialFunction;
	Parms.Expression = Expression;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MaterialEditor.MaterialEditingLibrary.DuplicateMaterialExpression
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UMaterial*                        Material                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialFunction*                MaterialFunction                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialExpression*              Expression                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialExpression*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMaterialExpression* UMaterialEditingLibrary::DuplicateMaterialExpression(class UMaterial* Material, class UMaterialFunction* MaterialFunction, class UMaterialExpression* Expression)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MaterialEditingLibrary", "DuplicateMaterialExpression");

	Params::MaterialEditingLibrary_DuplicateMaterialExpression Parms{};

	Parms.Material = Material;
	Parms.MaterialFunction = MaterialFunction;
	Parms.Expression = Expression;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MaterialEditor.MaterialEditingLibrary.GetChildInstances
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UMaterialInterface*               Parent                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FAssetData>               ChildInstances                                         (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UMaterialEditingLibrary::GetChildInstances(class UMaterialInterface* Parent, TArray<struct FAssetData>* ChildInstances)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MaterialEditingLibrary", "GetChildInstances");

	Params::MaterialEditingLibrary_GetChildInstances Parms{};

	Parms.Parent = Parent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ChildInstances != nullptr)
		*ChildInstances = std::move(Parms.ChildInstances);
}


// Function MaterialEditor.MaterialEditingLibrary.GetInputNodeOutputNameForMaterialExpression
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UMaterialExpression*              MaterialExpression                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialExpression*              InputNode                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           OutputName                                             (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMaterialEditingLibrary::GetInputNodeOutputNameForMaterialExpression(class UMaterialExpression* MaterialExpression, class UMaterialExpression* InputNode, class FString* OutputName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MaterialEditingLibrary", "GetInputNodeOutputNameForMaterialExpression");

	Params::MaterialEditingLibrary_GetInputNodeOutputNameForMaterialExpression Parms{};

	Parms.MaterialExpression = MaterialExpression;
	Parms.InputNode = InputNode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutputName != nullptr)
		*OutputName = std::move(Parms.OutputName);

	return Parms.ReturnValue;
}


// Function MaterialEditor.MaterialEditingLibrary.GetInputsForMaterialExpression
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UMaterial*                        Material                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialExpression*              MaterialExpression                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UMaterialExpression*>      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UMaterialExpression*> UMaterialEditingLibrary::GetInputsForMaterialExpression(class UMaterial* Material, class UMaterialExpression* MaterialExpression)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MaterialEditingLibrary", "GetInputsForMaterialExpression");

	Params::MaterialEditingLibrary_GetInputsForMaterialExpression Parms{};

	Parms.Material = Material;
	Parms.MaterialExpression = MaterialExpression;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MaterialEditor.MaterialEditingLibrary.GetMaterialDefaultScalarParameterValue
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UMaterial*                        Material                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ParameterName                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMaterialEditingLibrary::GetMaterialDefaultScalarParameterValue(class UMaterial* Material, class FName ParameterName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MaterialEditingLibrary", "GetMaterialDefaultScalarParameterValue");

	Params::MaterialEditingLibrary_GetMaterialDefaultScalarParameterValue Parms{};

	Parms.Material = Material;
	Parms.ParameterName = ParameterName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MaterialEditor.MaterialEditingLibrary.GetMaterialDefaultStaticSwitchParameterValue
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UMaterial*                        Material                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ParameterName                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMaterialEditingLibrary::GetMaterialDefaultStaticSwitchParameterValue(class UMaterial* Material, class FName ParameterName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MaterialEditingLibrary", "GetMaterialDefaultStaticSwitchParameterValue");

	Params::MaterialEditingLibrary_GetMaterialDefaultStaticSwitchParameterValue Parms{};

	Parms.Material = Material;
	Parms.ParameterName = ParameterName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MaterialEditor.MaterialEditingLibrary.GetMaterialDefaultTextureParameterValue
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UMaterial*                        Material                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ParameterName                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture*                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture* UMaterialEditingLibrary::GetMaterialDefaultTextureParameterValue(class UMaterial* Material, class FName ParameterName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MaterialEditingLibrary", "GetMaterialDefaultTextureParameterValue");

	Params::MaterialEditingLibrary_GetMaterialDefaultTextureParameterValue Parms{};

	Parms.Material = Material;
	Parms.ParameterName = ParameterName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MaterialEditor.MaterialEditingLibrary.GetMaterialDefaultVectorParameterValue
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class UMaterial*                        Material                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ParameterName                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLinearColor UMaterialEditingLibrary::GetMaterialDefaultVectorParameterValue(class UMaterial* Material, class FName ParameterName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MaterialEditingLibrary", "GetMaterialDefaultVectorParameterValue");

	Params::MaterialEditingLibrary_GetMaterialDefaultVectorParameterValue Parms{};

	Parms.Material = Material;
	Parms.ParameterName = ParameterName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MaterialEditor.MaterialEditingLibrary.GetMaterialExpressionInputNames
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UMaterialExpression*              MaterialExpression                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> UMaterialEditingLibrary::GetMaterialExpressionInputNames(class UMaterialExpression* MaterialExpression)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MaterialEditingLibrary", "GetMaterialExpressionInputNames");

	Params::MaterialEditingLibrary_GetMaterialExpressionInputNames Parms{};

	Parms.MaterialExpression = MaterialExpression;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MaterialEditor.MaterialEditingLibrary.GetMaterialExpressionInputTypes
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UMaterialExpression*              MaterialExpression                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<int32>                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<int32> UMaterialEditingLibrary::GetMaterialExpressionInputTypes(class UMaterialExpression* MaterialExpression)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MaterialEditingLibrary", "GetMaterialExpressionInputTypes");

	Params::MaterialEditingLibrary_GetMaterialExpressionInputTypes Parms{};

	Parms.MaterialExpression = MaterialExpression;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MaterialEditor.MaterialEditingLibrary.GetMaterialExpressionNodePosition
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UMaterialExpression*              MaterialExpression                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NodePosX                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NodePosY                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMaterialEditingLibrary::GetMaterialExpressionNodePosition(class UMaterialExpression* MaterialExpression, int32* NodePosX, int32* NodePosY)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MaterialEditingLibrary", "GetMaterialExpressionNodePosition");

	Params::MaterialEditingLibrary_GetMaterialExpressionNodePosition Parms{};

	Parms.MaterialExpression = MaterialExpression;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (NodePosX != nullptr)
		*NodePosX = Parms.NodePosX;

	if (NodePosY != nullptr)
		*NodePosY = Parms.NodePosY;
}


// Function MaterialEditor.MaterialEditingLibrary.GetMaterialInstanceRuntimeVirtualTextureParameterValue
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UMaterialInstanceConstant*        Instance                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ParameterName                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMaterialParameterAssociation           Association                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class URuntimeVirtualTexture*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class URuntimeVirtualTexture* UMaterialEditingLibrary::GetMaterialInstanceRuntimeVirtualTextureParameterValue(class UMaterialInstanceConstant* Instance, class FName ParameterName, EMaterialParameterAssociation Association)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MaterialEditingLibrary", "GetMaterialInstanceRuntimeVirtualTextureParameterValue");

	Params::MaterialEditingLibrary_GetMaterialInstanceRuntimeVirtualTextureParameterValue Parms{};

	Parms.Instance = Instance;
	Parms.ParameterName = ParameterName;
	Parms.Association = Association;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MaterialEditor.MaterialEditingLibrary.GetMaterialInstanceScalarParameterValue
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UMaterialInstanceConstant*        Instance                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ParameterName                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMaterialParameterAssociation           Association                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMaterialEditingLibrary::GetMaterialInstanceScalarParameterValue(class UMaterialInstanceConstant* Instance, class FName ParameterName, EMaterialParameterAssociation Association)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MaterialEditingLibrary", "GetMaterialInstanceScalarParameterValue");

	Params::MaterialEditingLibrary_GetMaterialInstanceScalarParameterValue Parms{};

	Parms.Instance = Instance;
	Parms.ParameterName = ParameterName;
	Parms.Association = Association;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MaterialEditor.MaterialEditingLibrary.GetMaterialInstanceSparseVolumeTextureParameterValue
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UMaterialInstanceConstant*        Instance                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ParameterName                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMaterialParameterAssociation           Association                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USparseVolumeTexture*             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USparseVolumeTexture* UMaterialEditingLibrary::GetMaterialInstanceSparseVolumeTextureParameterValue(class UMaterialInstanceConstant* Instance, class FName ParameterName, EMaterialParameterAssociation Association)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MaterialEditingLibrary", "GetMaterialInstanceSparseVolumeTextureParameterValue");

	Params::MaterialEditingLibrary_GetMaterialInstanceSparseVolumeTextureParameterValue Parms{};

	Parms.Instance = Instance;
	Parms.ParameterName = ParameterName;
	Parms.Association = Association;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MaterialEditor.MaterialEditingLibrary.GetMaterialInstanceStaticSwitchParameterValue
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UMaterialInstanceConstant*        Instance                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ParameterName                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMaterialParameterAssociation           Association                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMaterialEditingLibrary::GetMaterialInstanceStaticSwitchParameterValue(class UMaterialInstanceConstant* Instance, class FName ParameterName, EMaterialParameterAssociation Association)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MaterialEditingLibrary", "GetMaterialInstanceStaticSwitchParameterValue");

	Params::MaterialEditingLibrary_GetMaterialInstanceStaticSwitchParameterValue Parms{};

	Parms.Instance = Instance;
	Parms.ParameterName = ParameterName;
	Parms.Association = Association;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MaterialEditor.MaterialEditingLibrary.GetMaterialInstanceTextureParameterValue
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UMaterialInstanceConstant*        Instance                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ParameterName                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMaterialParameterAssociation           Association                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture*                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture* UMaterialEditingLibrary::GetMaterialInstanceTextureParameterValue(class UMaterialInstanceConstant* Instance, class FName ParameterName, EMaterialParameterAssociation Association)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MaterialEditingLibrary", "GetMaterialInstanceTextureParameterValue");

	Params::MaterialEditingLibrary_GetMaterialInstanceTextureParameterValue Parms{};

	Parms.Instance = Instance;
	Parms.ParameterName = ParameterName;
	Parms.Association = Association;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MaterialEditor.MaterialEditingLibrary.GetMaterialInstanceVectorParameterValue
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class UMaterialInstanceConstant*        Instance                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ParameterName                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMaterialParameterAssociation           Association                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLinearColor UMaterialEditingLibrary::GetMaterialInstanceVectorParameterValue(class UMaterialInstanceConstant* Instance, class FName ParameterName, EMaterialParameterAssociation Association)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MaterialEditingLibrary", "GetMaterialInstanceVectorParameterValue");

	Params::MaterialEditingLibrary_GetMaterialInstanceVectorParameterValue Parms{};

	Parms.Instance = Instance;
	Parms.ParameterName = ParameterName;
	Parms.Association = Association;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MaterialEditor.MaterialEditingLibrary.GetMaterialPropertyInputNode
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UMaterial*                        Material                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMaterialProperty                       Property                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialExpression*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMaterialExpression* UMaterialEditingLibrary::GetMaterialPropertyInputNode(class UMaterial* Material, EMaterialProperty Property)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MaterialEditingLibrary", "GetMaterialPropertyInputNode");

	Params::MaterialEditingLibrary_GetMaterialPropertyInputNode Parms{};

	Parms.Material = Material;
	Parms.Property = Property;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MaterialEditor.MaterialEditingLibrary.GetMaterialPropertyInputNodeOutputName
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UMaterial*                        Material                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMaterialProperty                       Property                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UMaterialEditingLibrary::GetMaterialPropertyInputNodeOutputName(class UMaterial* Material, EMaterialProperty Property)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MaterialEditingLibrary", "GetMaterialPropertyInputNodeOutputName");

	Params::MaterialEditingLibrary_GetMaterialPropertyInputNodeOutputName Parms{};

	Parms.Material = Material;
	Parms.Property = Property;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MaterialEditor.MaterialEditingLibrary.GetMaterialSelectedNodes
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UMaterial*                        Material                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSet<class UObject*>                    ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

TSet<class UObject*> UMaterialEditingLibrary::GetMaterialSelectedNodes(class UMaterial* Material)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MaterialEditingLibrary", "GetMaterialSelectedNodes");

	Params::MaterialEditingLibrary_GetMaterialSelectedNodes Parms{};

	Parms.Material = Material;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MaterialEditor.MaterialEditingLibrary.GetNaniteOverrideMaterial
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UMaterialInterface*               Material                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMaterialInterface* UMaterialEditingLibrary::GetNaniteOverrideMaterial(class UMaterialInterface* Material)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MaterialEditingLibrary", "GetNaniteOverrideMaterial");

	Params::MaterialEditingLibrary_GetNaniteOverrideMaterial Parms{};

	Parms.Material = Material;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MaterialEditor.MaterialEditingLibrary.GetNumMaterialExpressions
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UMaterial*                        Material                                               (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMaterialEditingLibrary::GetNumMaterialExpressions(const class UMaterial* Material)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MaterialEditingLibrary", "GetNumMaterialExpressions");

	Params::MaterialEditingLibrary_GetNumMaterialExpressions Parms{};

	Parms.Material = Material;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MaterialEditor.MaterialEditingLibrary.GetNumMaterialExpressionsInFunction
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UMaterialFunction*                MaterialFunction                                       (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMaterialEditingLibrary::GetNumMaterialExpressionsInFunction(const class UMaterialFunction* MaterialFunction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MaterialEditingLibrary", "GetNumMaterialExpressionsInFunction");

	Params::MaterialEditingLibrary_GetNumMaterialExpressionsInFunction Parms{};

	Parms.MaterialFunction = MaterialFunction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MaterialEditor.MaterialEditingLibrary.GetScalarParameterNames
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UMaterialInterface*               Material                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FName>                     ParameterNames                                         (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UMaterialEditingLibrary::GetScalarParameterNames(class UMaterialInterface* Material, TArray<class FName>* ParameterNames)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MaterialEditingLibrary", "GetScalarParameterNames");

	Params::MaterialEditingLibrary_GetScalarParameterNames Parms{};

	Parms.Material = Material;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ParameterNames != nullptr)
		*ParameterNames = std::move(Parms.ParameterNames);
}


// Function MaterialEditor.MaterialEditingLibrary.GetScalarParameterSource
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UMaterialInterface*               Material                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ParameterName                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSoftObjectPath                  ParameterSource                                        (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMaterialEditingLibrary::GetScalarParameterSource(class UMaterialInterface* Material, const class FName ParameterName, struct FSoftObjectPath* ParameterSource)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MaterialEditingLibrary", "GetScalarParameterSource");

	Params::MaterialEditingLibrary_GetScalarParameterSource Parms{};

	Parms.Material = Material;
	Parms.ParameterName = ParameterName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ParameterSource != nullptr)
		*ParameterSource = std::move(Parms.ParameterSource);

	return Parms.ReturnValue;
}


// Function MaterialEditor.MaterialEditingLibrary.GetStaticSwitchParameterNames
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UMaterialInterface*               Material                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FName>                     ParameterNames                                         (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UMaterialEditingLibrary::GetStaticSwitchParameterNames(class UMaterialInterface* Material, TArray<class FName>* ParameterNames)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MaterialEditingLibrary", "GetStaticSwitchParameterNames");

	Params::MaterialEditingLibrary_GetStaticSwitchParameterNames Parms{};

	Parms.Material = Material;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ParameterNames != nullptr)
		*ParameterNames = std::move(Parms.ParameterNames);
}


// Function MaterialEditor.MaterialEditingLibrary.GetStaticSwitchParameterSource
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UMaterialInterface*               Material                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ParameterName                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSoftObjectPath                  ParameterSource                                        (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMaterialEditingLibrary::GetStaticSwitchParameterSource(class UMaterialInterface* Material, const class FName ParameterName, struct FSoftObjectPath* ParameterSource)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MaterialEditingLibrary", "GetStaticSwitchParameterSource");

	Params::MaterialEditingLibrary_GetStaticSwitchParameterSource Parms{};

	Parms.Material = Material;
	Parms.ParameterName = ParameterName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ParameterSource != nullptr)
		*ParameterSource = std::move(Parms.ParameterSource);

	return Parms.ReturnValue;
}


// Function MaterialEditor.MaterialEditingLibrary.GetStatistics
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UMaterialInterface*               Material                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMaterialStatistics              ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FMaterialStatistics UMaterialEditingLibrary::GetStatistics(class UMaterialInterface* Material)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MaterialEditingLibrary", "GetStatistics");

	Params::MaterialEditingLibrary_GetStatistics Parms{};

	Parms.Material = Material;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MaterialEditor.MaterialEditingLibrary.GetTextureParameterNames
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UMaterialInterface*               Material                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FName>                     ParameterNames                                         (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UMaterialEditingLibrary::GetTextureParameterNames(class UMaterialInterface* Material, TArray<class FName>* ParameterNames)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MaterialEditingLibrary", "GetTextureParameterNames");

	Params::MaterialEditingLibrary_GetTextureParameterNames Parms{};

	Parms.Material = Material;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ParameterNames != nullptr)
		*ParameterNames = std::move(Parms.ParameterNames);
}


// Function MaterialEditor.MaterialEditingLibrary.GetTextureParameterSource
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UMaterialInterface*               Material                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ParameterName                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSoftObjectPath                  ParameterSource                                        (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMaterialEditingLibrary::GetTextureParameterSource(class UMaterialInterface* Material, const class FName ParameterName, struct FSoftObjectPath* ParameterSource)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MaterialEditingLibrary", "GetTextureParameterSource");

	Params::MaterialEditingLibrary_GetTextureParameterSource Parms{};

	Parms.Material = Material;
	Parms.ParameterName = ParameterName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ParameterSource != nullptr)
		*ParameterSource = std::move(Parms.ParameterSource);

	return Parms.ReturnValue;
}


// Function MaterialEditor.MaterialEditingLibrary.GetUsedTextures
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UMaterial*                        Material                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UTexture*>                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UTexture*> UMaterialEditingLibrary::GetUsedTextures(class UMaterial* Material)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MaterialEditingLibrary", "GetUsedTextures");

	Params::MaterialEditingLibrary_GetUsedTextures Parms{};

	Parms.Material = Material;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MaterialEditor.MaterialEditingLibrary.GetVectorParameterNames
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UMaterialInterface*               Material                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FName>                     ParameterNames                                         (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UMaterialEditingLibrary::GetVectorParameterNames(class UMaterialInterface* Material, TArray<class FName>* ParameterNames)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MaterialEditingLibrary", "GetVectorParameterNames");

	Params::MaterialEditingLibrary_GetVectorParameterNames Parms{};

	Parms.Material = Material;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ParameterNames != nullptr)
		*ParameterNames = std::move(Parms.ParameterNames);
}


// Function MaterialEditor.MaterialEditingLibrary.GetVectorParameterSource
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UMaterialInterface*               Material                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ParameterName                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSoftObjectPath                  ParameterSource                                        (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMaterialEditingLibrary::GetVectorParameterSource(class UMaterialInterface* Material, const class FName ParameterName, struct FSoftObjectPath* ParameterSource)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MaterialEditingLibrary", "GetVectorParameterSource");

	Params::MaterialEditingLibrary_GetVectorParameterSource Parms{};

	Parms.Material = Material;
	Parms.ParameterName = ParameterName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ParameterSource != nullptr)
		*ParameterSource = std::move(Parms.ParameterSource);

	return Parms.ReturnValue;
}


// Function MaterialEditor.MaterialEditingLibrary.HasMaterialUsage
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UMaterial*                        Material                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMaterialUsage                          Usage                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMaterialEditingLibrary::HasMaterialUsage(class UMaterial* Material, EMaterialUsage Usage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MaterialEditingLibrary", "HasMaterialUsage");

	Params::MaterialEditingLibrary_HasMaterialUsage Parms{};

	Parms.Material = Material;
	Parms.Usage = Usage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MaterialEditor.MaterialEditingLibrary.LayoutMaterialExpressions
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UMaterial*                        Material                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMaterialEditingLibrary::LayoutMaterialExpressions(class UMaterial* Material)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MaterialEditingLibrary", "LayoutMaterialExpressions");

	Params::MaterialEditingLibrary_LayoutMaterialExpressions Parms{};

	Parms.Material = Material;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MaterialEditor.MaterialEditingLibrary.LayoutMaterialFunctionExpressions
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UMaterialFunction*                MaterialFunction                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMaterialEditingLibrary::LayoutMaterialFunctionExpressions(class UMaterialFunction* MaterialFunction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MaterialEditingLibrary", "LayoutMaterialFunctionExpressions");

	Params::MaterialEditingLibrary_LayoutMaterialFunctionExpressions Parms{};

	Parms.MaterialFunction = MaterialFunction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MaterialEditor.MaterialEditingLibrary.RecompileMaterial
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UMaterial*                        Material                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMaterialEditingLibrary::RecompileMaterial(class UMaterial* Material)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MaterialEditingLibrary", "RecompileMaterial");

	Params::MaterialEditingLibrary_RecompileMaterial Parms{};

	Parms.Material = Material;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MaterialEditor.MaterialEditingLibrary.SetMaterialInstanceParent
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UMaterialInstanceConstant*        Instance                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*               NewParent                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMaterialEditingLibrary::SetMaterialInstanceParent(class UMaterialInstanceConstant* Instance, class UMaterialInterface* NewParent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MaterialEditingLibrary", "SetMaterialInstanceParent");

	Params::MaterialEditingLibrary_SetMaterialInstanceParent Parms{};

	Parms.Instance = Instance;
	Parms.NewParent = NewParent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MaterialEditor.MaterialEditingLibrary.SetMaterialInstanceRuntimeVirtualTextureParameterValue
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UMaterialInstanceConstant*        Instance                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ParameterName                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class URuntimeVirtualTexture*           Value                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMaterialParameterAssociation           Association                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMaterialEditingLibrary::SetMaterialInstanceRuntimeVirtualTextureParameterValue(class UMaterialInstanceConstant* Instance, class FName ParameterName, class URuntimeVirtualTexture* Value, EMaterialParameterAssociation Association)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MaterialEditingLibrary", "SetMaterialInstanceRuntimeVirtualTextureParameterValue");

	Params::MaterialEditingLibrary_SetMaterialInstanceRuntimeVirtualTextureParameterValue Parms{};

	Parms.Instance = Instance;
	Parms.ParameterName = ParameterName;
	Parms.Value = Value;
	Parms.Association = Association;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MaterialEditor.MaterialEditingLibrary.SetMaterialInstanceScalarParameterValue
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UMaterialInstanceConstant*        Instance                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ParameterName                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMaterialParameterAssociation           Association                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMaterialEditingLibrary::SetMaterialInstanceScalarParameterValue(class UMaterialInstanceConstant* Instance, class FName ParameterName, float Value, EMaterialParameterAssociation Association)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MaterialEditingLibrary", "SetMaterialInstanceScalarParameterValue");

	Params::MaterialEditingLibrary_SetMaterialInstanceScalarParameterValue Parms{};

	Parms.Instance = Instance;
	Parms.ParameterName = ParameterName;
	Parms.Value = Value;
	Parms.Association = Association;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MaterialEditor.MaterialEditingLibrary.SetMaterialInstanceSparseVolumeTextureParameterValue
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UMaterialInstanceConstant*        Instance                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ParameterName                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USparseVolumeTexture*             Value                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMaterialParameterAssociation           Association                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMaterialEditingLibrary::SetMaterialInstanceSparseVolumeTextureParameterValue(class UMaterialInstanceConstant* Instance, class FName ParameterName, class USparseVolumeTexture* Value, EMaterialParameterAssociation Association)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MaterialEditingLibrary", "SetMaterialInstanceSparseVolumeTextureParameterValue");

	Params::MaterialEditingLibrary_SetMaterialInstanceSparseVolumeTextureParameterValue Parms{};

	Parms.Instance = Instance;
	Parms.ParameterName = ParameterName;
	Parms.Value = Value;
	Parms.Association = Association;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MaterialEditor.MaterialEditingLibrary.SetMaterialInstanceStaticSwitchParameterValue
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UMaterialInstanceConstant*        Instance                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ParameterName                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMaterialParameterAssociation           Association                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMaterialEditingLibrary::SetMaterialInstanceStaticSwitchParameterValue(class UMaterialInstanceConstant* Instance, class FName ParameterName, bool Value, EMaterialParameterAssociation Association)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MaterialEditingLibrary", "SetMaterialInstanceStaticSwitchParameterValue");

	Params::MaterialEditingLibrary_SetMaterialInstanceStaticSwitchParameterValue Parms{};

	Parms.Instance = Instance;
	Parms.ParameterName = ParameterName;
	Parms.Value = Value;
	Parms.Association = Association;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MaterialEditor.MaterialEditingLibrary.SetMaterialInstanceTextureParameterValue
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UMaterialInstanceConstant*        Instance                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ParameterName                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture*                         Value                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMaterialParameterAssociation           Association                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMaterialEditingLibrary::SetMaterialInstanceTextureParameterValue(class UMaterialInstanceConstant* Instance, class FName ParameterName, class UTexture* Value, EMaterialParameterAssociation Association)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MaterialEditingLibrary", "SetMaterialInstanceTextureParameterValue");

	Params::MaterialEditingLibrary_SetMaterialInstanceTextureParameterValue Parms{};

	Parms.Instance = Instance;
	Parms.ParameterName = ParameterName;
	Parms.Value = Value;
	Parms.Association = Association;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MaterialEditor.MaterialEditingLibrary.SetMaterialInstanceVectorParameterValue
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UMaterialInstanceConstant*        Instance                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ParameterName                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMaterialParameterAssociation           Association                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMaterialEditingLibrary::SetMaterialInstanceVectorParameterValue(class UMaterialInstanceConstant* Instance, class FName ParameterName, const struct FLinearColor& Value, EMaterialParameterAssociation Association)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MaterialEditingLibrary", "SetMaterialInstanceVectorParameterValue");

	Params::MaterialEditingLibrary_SetMaterialInstanceVectorParameterValue Parms{};

	Parms.Instance = Instance;
	Parms.ParameterName = ParameterName;
	Parms.Value = std::move(Value);
	Parms.Association = Association;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MaterialEditor.MaterialEditingLibrary.SetMaterialUsage
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UMaterial*                        Material                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMaterialUsage                          Usage                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bNeedsRecompile                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMaterialEditingLibrary::SetMaterialUsage(class UMaterial* Material, EMaterialUsage Usage, bool* bNeedsRecompile)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MaterialEditingLibrary", "SetMaterialUsage");

	Params::MaterialEditingLibrary_SetMaterialUsage Parms{};

	Parms.Material = Material;
	Parms.Usage = Usage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bNeedsRecompile != nullptr)
		*bNeedsRecompile = Parms.bNeedsRecompile;

	return Parms.ReturnValue;
}


// Function MaterialEditor.MaterialEditingLibrary.UpdateMaterialFunction
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UMaterialFunctionInterface*       MaterialFunction                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterial*                        PreviewMaterial                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMaterialEditingLibrary::UpdateMaterialFunction(class UMaterialFunctionInterface* MaterialFunction, class UMaterial* PreviewMaterial)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MaterialEditingLibrary", "UpdateMaterialFunction");

	Params::MaterialEditingLibrary_UpdateMaterialFunction Parms{};

	Parms.MaterialFunction = MaterialFunction;
	Parms.PreviewMaterial = PreviewMaterial;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MaterialEditor.MaterialEditingLibrary.UpdateMaterialInstance
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UMaterialInstanceConstant*        Instance                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMaterialEditingLibrary::UpdateMaterialInstance(class UMaterialInstanceConstant* Instance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MaterialEditingLibrary", "UpdateMaterialInstance");

	Params::MaterialEditingLibrary_UpdateMaterialInstance Parms{};

	Parms.Instance = Instance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

