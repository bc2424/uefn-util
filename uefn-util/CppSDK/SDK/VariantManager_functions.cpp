#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VariantManager

#include "Basic.hpp"

#include "VariantManager_classes.hpp"
#include "VariantManager_parameters.hpp"


namespace SDK
{

// Function VariantManager.VariantManagerBlueprintLibrary.AddActorBinding
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UVariant*                         Variant                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVariantManagerBlueprintLibrary::AddActorBinding(class UVariant* Variant, class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VariantManagerBlueprintLibrary", "AddActorBinding");

	Params::VariantManagerBlueprintLibrary_AddActorBinding Parms{};

	Parms.Variant = Variant;
	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VariantManager.VariantManagerBlueprintLibrary.AddDependency
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UVariant*                         Variant                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVariantDependency               Dependency                                             (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UVariantManagerBlueprintLibrary::AddDependency(class UVariant* Variant, struct FVariantDependency& Dependency)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VariantManagerBlueprintLibrary", "AddDependency");

	Params::VariantManagerBlueprintLibrary_AddDependency Parms{};

	Parms.Variant = Variant;
	Parms.Dependency = std::move(Dependency);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Dependency = std::move(Parms.Dependency);

	return Parms.ReturnValue;
}


// Function VariantManager.VariantManagerBlueprintLibrary.AddVariant
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UVariantSet*                      VariantSet                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UVariant*                         Variant                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVariantManagerBlueprintLibrary::AddVariant(class UVariantSet* VariantSet, class UVariant* Variant)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VariantManagerBlueprintLibrary", "AddVariant");

	Params::VariantManagerBlueprintLibrary_AddVariant Parms{};

	Parms.VariantSet = VariantSet;
	Parms.Variant = Variant;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VariantManager.VariantManagerBlueprintLibrary.AddVariantSet
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ULevelVariantSets*                LevelVariantSets                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UVariantSet*                      VariantSet                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVariantManagerBlueprintLibrary::AddVariantSet(class ULevelVariantSets* LevelVariantSets, class UVariantSet* VariantSet)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VariantManagerBlueprintLibrary", "AddVariantSet");

	Params::VariantManagerBlueprintLibrary_AddVariantSet Parms{};

	Parms.LevelVariantSets = LevelVariantSets;
	Parms.VariantSet = VariantSet;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VariantManager.VariantManagerBlueprintLibrary.Apply
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UPropertyValue*                   PropVal                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVariantManagerBlueprintLibrary::Apply(class UPropertyValue* PropVal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VariantManagerBlueprintLibrary", "Apply");

	Params::VariantManagerBlueprintLibrary_Apply Parms{};

	Parms.PropVal = PropVal;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VariantManager.VariantManagerBlueprintLibrary.CaptureProperty
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UVariant*                         Variant                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           PropertyPath                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPropertyValue*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UPropertyValue* UVariantManagerBlueprintLibrary::CaptureProperty(class UVariant* Variant, class AActor* Actor, const class FString& PropertyPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VariantManagerBlueprintLibrary", "CaptureProperty");

	Params::VariantManagerBlueprintLibrary_CaptureProperty Parms{};

	Parms.Variant = Variant;
	Parms.Actor = Actor;
	Parms.PropertyPath = std::move(PropertyPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VariantManager.VariantManagerBlueprintLibrary.CreateLevelVariantSetsActor
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ULevelVariantSets*                LevelVariantSetsAsset                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ALevelVariantSetsActor*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ALevelVariantSetsActor* UVariantManagerBlueprintLibrary::CreateLevelVariantSetsActor(class ULevelVariantSets* LevelVariantSetsAsset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VariantManagerBlueprintLibrary", "CreateLevelVariantSetsActor");

	Params::VariantManagerBlueprintLibrary_CreateLevelVariantSetsActor Parms{};

	Parms.LevelVariantSetsAsset = LevelVariantSetsAsset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VariantManager.VariantManagerBlueprintLibrary.CreateLevelVariantSetsAsset
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           AssetName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           AssetPath                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULevelVariantSets*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULevelVariantSets* UVariantManagerBlueprintLibrary::CreateLevelVariantSetsAsset(const class FString& AssetName, const class FString& AssetPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VariantManagerBlueprintLibrary", "CreateLevelVariantSetsAsset");

	Params::VariantManagerBlueprintLibrary_CreateLevelVariantSetsAsset Parms{};

	Parms.AssetName = std::move(AssetName);
	Parms.AssetPath = std::move(AssetPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VariantManager.VariantManagerBlueprintLibrary.DeleteDependency
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UVariant*                         Variant                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVariantManagerBlueprintLibrary::DeleteDependency(class UVariant* Variant, int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VariantManagerBlueprintLibrary", "DeleteDependency");

	Params::VariantManagerBlueprintLibrary_DeleteDependency Parms{};

	Parms.Variant = Variant;
	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VariantManager.VariantManagerBlueprintLibrary.GetCapturableProperties
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          ActorOrClass                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> UVariantManagerBlueprintLibrary::GetCapturableProperties(class UObject* ActorOrClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VariantManagerBlueprintLibrary", "GetCapturableProperties");

	Params::VariantManagerBlueprintLibrary_GetCapturableProperties Parms{};

	Parms.ActorOrClass = ActorOrClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VariantManager.VariantManagerBlueprintLibrary.GetCapturedProperties
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UVariant*                         Variant                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UPropertyValue*>           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UPropertyValue*> UVariantManagerBlueprintLibrary::GetCapturedProperties(class UVariant* Variant, class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VariantManagerBlueprintLibrary", "GetCapturedProperties");

	Params::VariantManagerBlueprintLibrary_GetCapturedProperties Parms{};

	Parms.Variant = Variant;
	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VariantManager.VariantManagerBlueprintLibrary.GetPropertyTypeString
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UPropertyValue*                   PropVal                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UVariantManagerBlueprintLibrary::GetPropertyTypeString(class UPropertyValue* PropVal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VariantManagerBlueprintLibrary", "GetPropertyTypeString");

	Params::VariantManagerBlueprintLibrary_GetPropertyTypeString Parms{};

	Parms.PropVal = PropVal;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VariantManager.VariantManagerBlueprintLibrary.GetValueBool
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UPropertyValue*                   Property                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVariantManagerBlueprintLibrary::GetValueBool(class UPropertyValue* Property)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VariantManagerBlueprintLibrary", "GetValueBool");

	Params::VariantManagerBlueprintLibrary_GetValueBool Parms{};

	Parms.Property = Property;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VariantManager.VariantManagerBlueprintLibrary.GetValueColor
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UPropertyValue*                   Property                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FColor UVariantManagerBlueprintLibrary::GetValueColor(class UPropertyValue* Property)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VariantManagerBlueprintLibrary", "GetValueColor");

	Params::VariantManagerBlueprintLibrary_GetValueColor Parms{};

	Parms.Property = Property;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VariantManager.VariantManagerBlueprintLibrary.GetValueFloat
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UPropertyValue*                   Property                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVariantManagerBlueprintLibrary::GetValueFloat(class UPropertyValue* Property)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VariantManagerBlueprintLibrary", "GetValueFloat");

	Params::VariantManagerBlueprintLibrary_GetValueFloat Parms{};

	Parms.Property = Property;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VariantManager.VariantManagerBlueprintLibrary.GetValueInt
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UPropertyValue*                   Property                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UVariantManagerBlueprintLibrary::GetValueInt(class UPropertyValue* Property)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VariantManagerBlueprintLibrary", "GetValueInt");

	Params::VariantManagerBlueprintLibrary_GetValueInt Parms{};

	Parms.Property = Property;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VariantManager.VariantManagerBlueprintLibrary.GetValueIntPoint
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UPropertyValue*                   Property                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FIntPoint                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FIntPoint UVariantManagerBlueprintLibrary::GetValueIntPoint(class UPropertyValue* Property)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VariantManagerBlueprintLibrary", "GetValueIntPoint");

	Params::VariantManagerBlueprintLibrary_GetValueIntPoint Parms{};

	Parms.Property = Property;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VariantManager.VariantManagerBlueprintLibrary.GetValueLinearColor
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UPropertyValue*                   Property                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLinearColor UVariantManagerBlueprintLibrary::GetValueLinearColor(class UPropertyValue* Property)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VariantManagerBlueprintLibrary", "GetValueLinearColor");

	Params::VariantManagerBlueprintLibrary_GetValueLinearColor Parms{};

	Parms.Property = Property;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VariantManager.VariantManagerBlueprintLibrary.GetValueObject
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UPropertyValue*                   Property                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UObject* UVariantManagerBlueprintLibrary::GetValueObject(class UPropertyValue* Property)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VariantManagerBlueprintLibrary", "GetValueObject");

	Params::VariantManagerBlueprintLibrary_GetValueObject Parms{};

	Parms.Property = Property;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VariantManager.VariantManagerBlueprintLibrary.GetValueQuat
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UPropertyValue*                   Property                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FQuat                            ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FQuat UVariantManagerBlueprintLibrary::GetValueQuat(class UPropertyValue* Property)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VariantManagerBlueprintLibrary", "GetValueQuat");

	Params::VariantManagerBlueprintLibrary_GetValueQuat Parms{};

	Parms.Property = Property;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VariantManager.VariantManagerBlueprintLibrary.GetValueRotator
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UPropertyValue*                   Property                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator UVariantManagerBlueprintLibrary::GetValueRotator(class UPropertyValue* Property)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VariantManagerBlueprintLibrary", "GetValueRotator");

	Params::VariantManagerBlueprintLibrary_GetValueRotator Parms{};

	Parms.Property = Property;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VariantManager.VariantManagerBlueprintLibrary.GetValueString
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UPropertyValue*                   Property                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UVariantManagerBlueprintLibrary::GetValueString(class UPropertyValue* Property)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VariantManagerBlueprintLibrary", "GetValueString");

	Params::VariantManagerBlueprintLibrary_GetValueString Parms{};

	Parms.Property = Property;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VariantManager.VariantManagerBlueprintLibrary.GetValueVector
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UPropertyValue*                   Property                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UVariantManagerBlueprintLibrary::GetValueVector(class UPropertyValue* Property)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VariantManagerBlueprintLibrary", "GetValueVector");

	Params::VariantManagerBlueprintLibrary_GetValueVector Parms{};

	Parms.Property = Property;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VariantManager.VariantManagerBlueprintLibrary.GetValueVector2D
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UPropertyValue*                   Property                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UVariantManagerBlueprintLibrary::GetValueVector2D(class UPropertyValue* Property)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VariantManagerBlueprintLibrary", "GetValueVector2D");

	Params::VariantManagerBlueprintLibrary_GetValueVector2D Parms{};

	Parms.Property = Property;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VariantManager.VariantManagerBlueprintLibrary.GetValueVector4
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UPropertyValue*                   Property                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector4                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector4 UVariantManagerBlueprintLibrary::GetValueVector4(class UPropertyValue* Property)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VariantManagerBlueprintLibrary", "GetValueVector4");

	Params::VariantManagerBlueprintLibrary_GetValueVector4 Parms{};

	Parms.Property = Property;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VariantManager.VariantManagerBlueprintLibrary.Record
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UPropertyValue*                   PropVal                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVariantManagerBlueprintLibrary::Record(class UPropertyValue* PropVal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VariantManagerBlueprintLibrary", "Record");

	Params::VariantManagerBlueprintLibrary_Record Parms{};

	Parms.PropVal = PropVal;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VariantManager.VariantManagerBlueprintLibrary.RemoveActorBinding
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UVariant*                         Variant                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVariantManagerBlueprintLibrary::RemoveActorBinding(class UVariant* Variant, class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VariantManagerBlueprintLibrary", "RemoveActorBinding");

	Params::VariantManagerBlueprintLibrary_RemoveActorBinding Parms{};

	Parms.Variant = Variant;
	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VariantManager.VariantManagerBlueprintLibrary.RemoveActorBindingByName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UVariant*                         Variant                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ActorName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVariantManagerBlueprintLibrary::RemoveActorBindingByName(class UVariant* Variant, const class FString& ActorName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VariantManagerBlueprintLibrary", "RemoveActorBindingByName");

	Params::VariantManagerBlueprintLibrary_RemoveActorBindingByName Parms{};

	Parms.Variant = Variant;
	Parms.ActorName = std::move(ActorName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VariantManager.VariantManagerBlueprintLibrary.RemoveCapturedProperty
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UVariant*                         Variant                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPropertyValue*                   Property                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVariantManagerBlueprintLibrary::RemoveCapturedProperty(class UVariant* Variant, class AActor* Actor, class UPropertyValue* Property)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VariantManagerBlueprintLibrary", "RemoveCapturedProperty");

	Params::VariantManagerBlueprintLibrary_RemoveCapturedProperty Parms{};

	Parms.Variant = Variant;
	Parms.Actor = Actor;
	Parms.Property = Property;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VariantManager.VariantManagerBlueprintLibrary.RemoveCapturedPropertyByName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UVariant*                         Variant                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           PropertyPath                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVariantManagerBlueprintLibrary::RemoveCapturedPropertyByName(class UVariant* Variant, class AActor* Actor, const class FString& PropertyPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VariantManagerBlueprintLibrary", "RemoveCapturedPropertyByName");

	Params::VariantManagerBlueprintLibrary_RemoveCapturedPropertyByName Parms{};

	Parms.Variant = Variant;
	Parms.Actor = Actor;
	Parms.PropertyPath = std::move(PropertyPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VariantManager.VariantManagerBlueprintLibrary.RemoveVariant
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UVariantSet*                      VariantSet                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UVariant*                         Variant                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVariantManagerBlueprintLibrary::RemoveVariant(class UVariantSet* VariantSet, class UVariant* Variant)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VariantManagerBlueprintLibrary", "RemoveVariant");

	Params::VariantManagerBlueprintLibrary_RemoveVariant Parms{};

	Parms.VariantSet = VariantSet;
	Parms.Variant = Variant;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VariantManager.VariantManagerBlueprintLibrary.RemoveVariantByName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UVariantSet*                      VariantSet                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           VariantName                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVariantManagerBlueprintLibrary::RemoveVariantByName(class UVariantSet* VariantSet, const class FString& VariantName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VariantManagerBlueprintLibrary", "RemoveVariantByName");

	Params::VariantManagerBlueprintLibrary_RemoveVariantByName Parms{};

	Parms.VariantSet = VariantSet;
	Parms.VariantName = std::move(VariantName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VariantManager.VariantManagerBlueprintLibrary.RemoveVariantSet
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ULevelVariantSets*                LevelVariantSets                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UVariantSet*                      VariantSet                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVariantManagerBlueprintLibrary::RemoveVariantSet(class ULevelVariantSets* LevelVariantSets, class UVariantSet* VariantSet)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VariantManagerBlueprintLibrary", "RemoveVariantSet");

	Params::VariantManagerBlueprintLibrary_RemoveVariantSet Parms{};

	Parms.LevelVariantSets = LevelVariantSets;
	Parms.VariantSet = VariantSet;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VariantManager.VariantManagerBlueprintLibrary.RemoveVariantSetByName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ULevelVariantSets*                LevelVariantSets                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           VariantSetName                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVariantManagerBlueprintLibrary::RemoveVariantSetByName(class ULevelVariantSets* LevelVariantSets, const class FString& VariantSetName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VariantManagerBlueprintLibrary", "RemoveVariantSetByName");

	Params::VariantManagerBlueprintLibrary_RemoveVariantSetByName Parms{};

	Parms.LevelVariantSets = LevelVariantSets;
	Parms.VariantSetName = std::move(VariantSetName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VariantManager.VariantManagerBlueprintLibrary.SetDependency
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UVariant*                         Variant                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVariantDependency               Dependency                                             (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVariantManagerBlueprintLibrary::SetDependency(class UVariant* Variant, int32 Index_0, struct FVariantDependency& Dependency)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VariantManagerBlueprintLibrary", "SetDependency");

	Params::VariantManagerBlueprintLibrary_SetDependency Parms{};

	Parms.Variant = Variant;
	Parms.Index_0 = Index_0;
	Parms.Dependency = std::move(Dependency);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Dependency = std::move(Parms.Dependency);
}


// Function VariantManager.VariantManagerBlueprintLibrary.SetValueBool
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UPropertyValue*                   Property                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    InValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVariantManagerBlueprintLibrary::SetValueBool(class UPropertyValue* Property, bool InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VariantManagerBlueprintLibrary", "SetValueBool");

	Params::VariantManagerBlueprintLibrary_SetValueBool Parms{};

	Parms.Property = Property;
	Parms.InValue = InValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VariantManager.VariantManagerBlueprintLibrary.SetValueColor
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UPropertyValue*                   Property                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           InValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVariantManagerBlueprintLibrary::SetValueColor(class UPropertyValue* Property, const struct FColor& InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VariantManagerBlueprintLibrary", "SetValueColor");

	Params::VariantManagerBlueprintLibrary_SetValueColor Parms{};

	Parms.Property = Property;
	Parms.InValue = std::move(InValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VariantManager.VariantManagerBlueprintLibrary.SetValueFloat
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UPropertyValue*                   Property                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVariantManagerBlueprintLibrary::SetValueFloat(class UPropertyValue* Property, float InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VariantManagerBlueprintLibrary", "SetValueFloat");

	Params::VariantManagerBlueprintLibrary_SetValueFloat Parms{};

	Parms.Property = Property;
	Parms.InValue = InValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VariantManager.VariantManagerBlueprintLibrary.SetValueInt
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UPropertyValue*                   Property                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVariantManagerBlueprintLibrary::SetValueInt(class UPropertyValue* Property, int32 InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VariantManagerBlueprintLibrary", "SetValueInt");

	Params::VariantManagerBlueprintLibrary_SetValueInt Parms{};

	Parms.Property = Property;
	Parms.InValue = InValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VariantManager.VariantManagerBlueprintLibrary.SetValueIntPoint
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UPropertyValue*                   Property                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FIntPoint                        InValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVariantManagerBlueprintLibrary::SetValueIntPoint(class UPropertyValue* Property, const struct FIntPoint& InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VariantManagerBlueprintLibrary", "SetValueIntPoint");

	Params::VariantManagerBlueprintLibrary_SetValueIntPoint Parms{};

	Parms.Property = Property;
	Parms.InValue = std::move(InValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VariantManager.VariantManagerBlueprintLibrary.SetValueLinearColor
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UPropertyValue*                   Property                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     InValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVariantManagerBlueprintLibrary::SetValueLinearColor(class UPropertyValue* Property, const struct FLinearColor& InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VariantManagerBlueprintLibrary", "SetValueLinearColor");

	Params::VariantManagerBlueprintLibrary_SetValueLinearColor Parms{};

	Parms.Property = Property;
	Parms.InValue = std::move(InValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VariantManager.VariantManagerBlueprintLibrary.SetValueObject
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UPropertyValue*                   Property                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          InValue                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVariantManagerBlueprintLibrary::SetValueObject(class UPropertyValue* Property, class UObject* InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VariantManagerBlueprintLibrary", "SetValueObject");

	Params::VariantManagerBlueprintLibrary_SetValueObject Parms{};

	Parms.Property = Property;
	Parms.InValue = InValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VariantManager.VariantManagerBlueprintLibrary.SetValueQuat
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UPropertyValue*                   Property                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FQuat                            InValue                                                (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVariantManagerBlueprintLibrary::SetValueQuat(class UPropertyValue* Property, const struct FQuat& InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VariantManagerBlueprintLibrary", "SetValueQuat");

	Params::VariantManagerBlueprintLibrary_SetValueQuat Parms{};

	Parms.Property = Property;
	Parms.InValue = std::move(InValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VariantManager.VariantManagerBlueprintLibrary.SetValueRotator
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UPropertyValue*                   Property                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         InValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UVariantManagerBlueprintLibrary::SetValueRotator(class UPropertyValue* Property, const struct FRotator& InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VariantManagerBlueprintLibrary", "SetValueRotator");

	Params::VariantManagerBlueprintLibrary_SetValueRotator Parms{};

	Parms.Property = Property;
	Parms.InValue = std::move(InValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VariantManager.VariantManagerBlueprintLibrary.SetValueString
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UPropertyValue*                   Property                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           InValue                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVariantManagerBlueprintLibrary::SetValueString(class UPropertyValue* Property, const class FString& InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VariantManagerBlueprintLibrary", "SetValueString");

	Params::VariantManagerBlueprintLibrary_SetValueString Parms{};

	Parms.Property = Property;
	Parms.InValue = std::move(InValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VariantManager.VariantManagerBlueprintLibrary.SetValueVector
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UPropertyValue*                   Property                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          InValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVariantManagerBlueprintLibrary::SetValueVector(class UPropertyValue* Property, const struct FVector& InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VariantManagerBlueprintLibrary", "SetValueVector");

	Params::VariantManagerBlueprintLibrary_SetValueVector Parms{};

	Parms.Property = Property;
	Parms.InValue = std::move(InValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VariantManager.VariantManagerBlueprintLibrary.SetValueVector2D
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UPropertyValue*                   Property                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        InValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVariantManagerBlueprintLibrary::SetValueVector2D(class UPropertyValue* Property, const struct FVector2D& InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VariantManagerBlueprintLibrary", "SetValueVector2D");

	Params::VariantManagerBlueprintLibrary_SetValueVector2D Parms{};

	Parms.Property = Property;
	Parms.InValue = std::move(InValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VariantManager.VariantManagerBlueprintLibrary.SetValueVector4
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UPropertyValue*                   Property                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector4                         InValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVariantManagerBlueprintLibrary::SetValueVector4(class UPropertyValue* Property, const struct FVector4& InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VariantManagerBlueprintLibrary", "SetValueVector4");

	Params::VariantManagerBlueprintLibrary_SetValueVector4 Parms{};

	Parms.Property = Property;
	Parms.InValue = std::move(InValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

