#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MovieRenderPipelineEditor

#include "Basic.hpp"

#include "MovieRenderPipelineEditor_classes.hpp"
#include "MovieRenderPipelineEditor_parameters.hpp"


namespace SDK
{

// Function MovieRenderPipelineEditor.MoviePipelineEditorBlueprintLibrary.ConvertManifestFileToString
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           InManifestFilePath                                     (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UMoviePipelineEditorBlueprintLibrary::ConvertManifestFileToString(const class FString& InManifestFilePath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MoviePipelineEditorBlueprintLibrary", "ConvertManifestFileToString");

	Params::MoviePipelineEditorBlueprintLibrary_ConvertManifestFileToString Parms{};

	Parms.InManifestFilePath = std::move(InManifestFilePath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MovieRenderPipelineEditor.MoviePipelineEditorBlueprintLibrary.CreateJobFromSequence
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UMoviePipelineQueue*              InPipelineQueue                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULevelSequence*                   InSequence                                             (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMoviePipelineExecutorJob*        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMoviePipelineExecutorJob* UMoviePipelineEditorBlueprintLibrary::CreateJobFromSequence(class UMoviePipelineQueue* InPipelineQueue, const class ULevelSequence* InSequence)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MoviePipelineEditorBlueprintLibrary", "CreateJobFromSequence");

	Params::MoviePipelineEditorBlueprintLibrary_CreateJobFromSequence Parms{};

	Parms.InPipelineQueue = InPipelineQueue;
	Parms.InSequence = InSequence;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MovieRenderPipelineEditor.MoviePipelineEditorBlueprintLibrary.EnsureJobHasDefaultSettings
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UMoviePipelineExecutorJob*        InJob                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMoviePipelineEditorBlueprintLibrary::EnsureJobHasDefaultSettings(class UMoviePipelineExecutorJob* InJob)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MoviePipelineEditorBlueprintLibrary", "EnsureJobHasDefaultSettings");

	Params::MoviePipelineEditorBlueprintLibrary_EnsureJobHasDefaultSettings Parms{};

	Parms.InJob = InJob;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MovieRenderPipelineEditor.MoviePipelineEditorBlueprintLibrary.ExportConfigToAsset
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UMoviePipelinePrimaryConfig*      InConfig                                               (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           InPackagePath                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           InFileName                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInSaveAsset                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMoviePipelinePrimaryConfig*      OutAsset                                               (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             OutErrorReason                                         (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMoviePipelineEditorBlueprintLibrary::ExportConfigToAsset(const class UMoviePipelinePrimaryConfig* InConfig, const class FString& InPackagePath, const class FString& InFileName, const bool bInSaveAsset, class UMoviePipelinePrimaryConfig** OutAsset, class FText* OutErrorReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MoviePipelineEditorBlueprintLibrary", "ExportConfigToAsset");

	Params::MoviePipelineEditorBlueprintLibrary_ExportConfigToAsset Parms{};

	Parms.InConfig = InConfig;
	Parms.InPackagePath = std::move(InPackagePath);
	Parms.InFileName = std::move(InFileName);
	Parms.bInSaveAsset = bInSaveAsset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutAsset != nullptr)
		*OutAsset = Parms.OutAsset;

	if (OutErrorReason != nullptr)
		*OutErrorReason = std::move(Parms.OutErrorReason);

	return Parms.ReturnValue;
}


// Function MovieRenderPipelineEditor.MoviePipelineEditorBlueprintLibrary.GetDisplayOutputPathFromJob
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UMoviePipelineExecutorJob*        InJob                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           OutOutputPath                                          (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMoviePipelineEditorBlueprintLibrary::GetDisplayOutputPathFromJob(class UMoviePipelineExecutorJob* InJob, class FString* OutOutputPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MoviePipelineEditorBlueprintLibrary", "GetDisplayOutputPathFromJob");

	Params::MoviePipelineEditorBlueprintLibrary_GetDisplayOutputPathFromJob Parms{};

	Parms.InJob = InJob;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutOutputPath != nullptr)
		*OutOutputPath = std::move(Parms.OutOutputPath);

	return Parms.ReturnValue;
}


// Function MovieRenderPipelineEditor.MoviePipelineEditorBlueprintLibrary.IsMapValidForRemoteRender
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<class UMoviePipelineExecutorJob*>InJobs                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMoviePipelineEditorBlueprintLibrary::IsMapValidForRemoteRender(const TArray<class UMoviePipelineExecutorJob*>& InJobs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MoviePipelineEditorBlueprintLibrary", "IsMapValidForRemoteRender");

	Params::MoviePipelineEditorBlueprintLibrary_IsMapValidForRemoteRender Parms{};

	Parms.InJobs = std::move(InJobs);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MovieRenderPipelineEditor.MoviePipelineEditorBlueprintLibrary.ResolveOutputDirectoryFromJob
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UMoviePipelineExecutorJob*        InJob                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UMoviePipelineEditorBlueprintLibrary::ResolveOutputDirectoryFromJob(class UMoviePipelineExecutorJob* InJob)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MoviePipelineEditorBlueprintLibrary", "ResolveOutputDirectoryFromJob");

	Params::MoviePipelineEditorBlueprintLibrary_ResolveOutputDirectoryFromJob Parms{};

	Parms.InJob = InJob;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MovieRenderPipelineEditor.MoviePipelineEditorBlueprintLibrary.SaveQueueToManifestFile
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UMoviePipelineQueue*              InPipelineQueue                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           OutManifestFilePath                                    (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMoviePipelineQueue*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMoviePipelineQueue* UMoviePipelineEditorBlueprintLibrary::SaveQueueToManifestFile(class UMoviePipelineQueue* InPipelineQueue, class FString* OutManifestFilePath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MoviePipelineEditorBlueprintLibrary", "SaveQueueToManifestFile");

	Params::MoviePipelineEditorBlueprintLibrary_SaveQueueToManifestFile Parms{};

	Parms.InPipelineQueue = InPipelineQueue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutManifestFilePath != nullptr)
		*OutManifestFilePath = std::move(Parms.OutManifestFilePath);

	return Parms.ReturnValue;
}


// Function MovieRenderPipelineEditor.MoviePipelineEditorBlueprintLibrary.WarnUserOfUnsavedMap
// (Final, Native, Static, Public, BlueprintCallable)

void UMoviePipelineEditorBlueprintLibrary::WarnUserOfUnsavedMap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MoviePipelineEditorBlueprintLibrary", "WarnUserOfUnsavedMap");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MovieRenderPipelineEditor.MoviePipelinePIEExecutor.SetInitializationTime
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FDateTime                        InInitializationTime                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMoviePipelinePIEExecutor::SetInitializationTime(const struct FDateTime& InInitializationTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoviePipelinePIEExecutor", "SetInitializationTime");

	Params::MoviePipelinePIEExecutor_SetInitializationTime Parms{};

	Parms.InInitializationTime = std::move(InInitializationTime);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MovieRenderPipelineEditor.MoviePipelinePIEExecutor.SetIsRenderingOffscreen
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInRenderOffscreen                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMoviePipelinePIEExecutor::SetIsRenderingOffscreen(const bool bInRenderOffscreen)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoviePipelinePIEExecutor", "SetIsRenderingOffscreen");

	Params::MoviePipelinePIEExecutor_SetIsRenderingOffscreen Parms{};

	Parms.bInRenderOffscreen = bInRenderOffscreen;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MovieRenderPipelineEditor.MoviePipelinePIEExecutor.IsRenderingOffscreen
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMoviePipelinePIEExecutor::IsRenderingOffscreen() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoviePipelinePIEExecutor", "IsRenderingOffscreen");

	Params::MoviePipelinePIEExecutor_IsRenderingOffscreen Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MovieRenderPipelineEditor.MoviePipelineQueueSubsystem.LoadQueue
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UMoviePipelineQueue*              QueueToLoad                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bPromptOnReplacingDirtyQueue                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMoviePipelineQueueSubsystem::LoadQueue(class UMoviePipelineQueue* QueueToLoad, const bool bPromptOnReplacingDirtyQueue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoviePipelineQueueSubsystem", "LoadQueue");

	Params::MoviePipelineQueueSubsystem_LoadQueue Parms{};

	Parms.QueueToLoad = QueueToLoad;
	Parms.bPromptOnReplacingDirtyQueue = bPromptOnReplacingDirtyQueue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MovieRenderPipelineEditor.MoviePipelineQueueSubsystem.RenderQueueWithExecutor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UMoviePipelineExecutorBase>InExecutorType                                         (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMoviePipelineExecutorBase*       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMoviePipelineExecutorBase* UMoviePipelineQueueSubsystem::RenderQueueWithExecutor(TSubclassOf<class UMoviePipelineExecutorBase> InExecutorType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoviePipelineQueueSubsystem", "RenderQueueWithExecutor");

	Params::MoviePipelineQueueSubsystem_RenderQueueWithExecutor Parms{};

	Parms.InExecutorType = InExecutorType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MovieRenderPipelineEditor.MoviePipelineQueueSubsystem.RenderQueueWithExecutorInstance
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMoviePipelineExecutorBase*       InExecutor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMoviePipelineQueueSubsystem::RenderQueueWithExecutorInstance(class UMoviePipelineExecutorBase* InExecutor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoviePipelineQueueSubsystem", "RenderQueueWithExecutorInstance");

	Params::MoviePipelineQueueSubsystem_RenderQueueWithExecutorInstance Parms{};

	Parms.InExecutor = InExecutor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MovieRenderPipelineEditor.MoviePipelineQueueSubsystem.GetActiveExecutor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMoviePipelineExecutorBase*       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMoviePipelineExecutorBase* UMoviePipelineQueueSubsystem::GetActiveExecutor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoviePipelineQueueSubsystem", "GetActiveExecutor");

	Params::MoviePipelineQueueSubsystem_GetActiveExecutor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MovieRenderPipelineEditor.MoviePipelineQueueSubsystem.GetQueue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMoviePipelineQueue*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMoviePipelineQueue* UMoviePipelineQueueSubsystem::GetQueue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoviePipelineQueueSubsystem", "GetQueue");

	Params::MoviePipelineQueueSubsystem_GetQueue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MovieRenderPipelineEditor.MoviePipelineQueueSubsystem.IsQueueDirty
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMoviePipelineQueueSubsystem::IsQueueDirty() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoviePipelineQueueSubsystem", "IsQueueDirty");

	Params::MoviePipelineQueueSubsystem_IsQueueDirty Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MovieRenderPipelineEditor.MoviePipelineQueueSubsystem.IsRendering
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMoviePipelineQueueSubsystem::IsRendering() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoviePipelineQueueSubsystem", "IsRendering");

	Params::MoviePipelineQueueSubsystem_IsRendering Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

