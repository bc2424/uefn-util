#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CilantroUI

#include "Basic.hpp"

#include "CilantroUI_classes.hpp"
#include "CilantroUI_parameters.hpp"


namespace SDK
{

// Function CilantroUI.FortPlaytimeBlock.DisplayLegalModal
// (Final, Native, Public, BlueprintCallable)

void UFortPlaytimeBlock::DisplayLegalModal()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortPlaytimeBlock", "DisplayLegalModal");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CilantroUI.FortPlaytimeBlock.DisplayReporting
// (Final, Native, Public, BlueprintCallable)

void UFortPlaytimeBlock::DisplayReporting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortPlaytimeBlock", "DisplayReporting");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CilantroUI.FortPlaytimeBlock.DisplayVoiceReporting
// (Final, Native, Public, BlueprintCallable)

void UFortPlaytimeBlock::DisplayVoiceReporting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortPlaytimeBlock", "DisplayVoiceReporting");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CilantroUI.FortPlaytimeBlock.LaunchSupportURL
// (Final, Native, Public, BlueprintCallable)

void UFortPlaytimeBlock::LaunchSupportURL()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortPlaytimeBlock", "LaunchSupportURL");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CilantroUI.FortPlaytimeBlock.OnReturnFocusFromTakeover
// (Event, Protected, BlueprintEvent)

void UFortPlaytimeBlock::OnReturnFocusFromTakeover()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortPlaytimeBlock", "OnReturnFocusFromTakeover");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CilantroUI.FortPlaytimeBlock.OpenParentalControls
// (Final, Native, Public, BlueprintCallable)

void UFortPlaytimeBlock::OpenParentalControls()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortPlaytimeBlock", "OpenParentalControls");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CilantroUI.FortPlaytimeBlock.OpenReturnPanel
// (Final, Native, Public, BlueprintCallable)

void UFortPlaytimeBlock::OpenReturnPanel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortPlaytimeBlock", "OpenReturnPanel");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CilantroUI.FortPlaytimeBlock.TryClose
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bForceClose                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortPlaytimeBlock::TryClose(const bool bForceClose)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortPlaytimeBlock", "TryClose");

	Params::FortPlaytimeBlock_TryClose Parms{};

	Parms.bForceClose = bForceClose;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CilantroUI.FortPlaytimeManagementScreen.ExitScreen
// (Final, Native, Public, BlueprintCallable)

void UFortPlaytimeManagementScreen::ExitScreen()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortPlaytimeManagementScreen", "ExitScreen");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CilantroUI.FortPlaytimeManagementScreen.OnPlaytimeScheduleRequested
// (Event, Public, BlueprintEvent)

void UFortPlaytimeManagementScreen::OnPlaytimeScheduleRequested()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortPlaytimeManagementScreen", "OnPlaytimeScheduleRequested");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CilantroUI.FortPlaytimeManagementScreen.RefreshPlaytimeScheduleSettings
// (Final, Native, Public, BlueprintCallable)

void UFortPlaytimeManagementScreen::RefreshPlaytimeScheduleSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortPlaytimeManagementScreen", "RefreshPlaytimeScheduleSettings");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CilantroUI.FortPlaytimeManagementScreen.RefreshPlaytimeSettings
// (Final, Native, Public, BlueprintCallable)

void UFortPlaytimeManagementScreen::RefreshPlaytimeSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortPlaytimeManagementScreen", "RefreshPlaytimeSettings");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CilantroUI.FortPlaytimeManagementScreen.GetTimezoneText
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UFortPlaytimeManagementScreen::GetTimezoneText() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortPlaytimeManagementScreen", "GetTimezoneText");

	Params::FortPlaytimeManagementScreen_GetTimezoneText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CilantroUI.FortPlaytimeScheduleWidget.OnScheduleTextsUpdated
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// TArray<struct FPlaytimeScheduleEntryData>UpdatedScheduleEntries                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UFortPlaytimeScheduleWidget::OnScheduleTextsUpdated(const TArray<struct FPlaytimeScheduleEntryData>& UpdatedScheduleEntries)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortPlaytimeScheduleWidget", "OnScheduleTextsUpdated");

	Params::FortPlaytimeScheduleWidget_OnScheduleTextsUpdated Parms{};

	Parms.UpdatedScheduleEntries = std::move(UpdatedScheduleEntries);

	UObject::ProcessEvent(Func, &Parms);
}


// Function CilantroUI.FortViewTimeLimitPanel.OnSidebarVisibilityChanged
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bIsVisible                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortViewTimeLimitPanel::OnSidebarVisibilityChanged(bool bIsVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortViewTimeLimitPanel", "OnSidebarVisibilityChanged");

	Params::FortViewTimeLimitPanel_OnSidebarVisibilityChanged Parms{};

	Parms.bIsVisible = bIsVisible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CilantroUI.PlayerPlaytimeVM.CloseGame
// (Final, Native, Public, BlueprintCallable)

void UPlayerPlaytimeVM::CloseGame()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerPlaytimeVM", "CloseGame");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CilantroUI.PlayerPlaytimeVM.GrantAdditionalPlaytime
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           UserPin                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SecondsToGrant                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPlayerPlaytimeVM::GrantAdditionalPlaytime(const class FString& UserPin, const int32 SecondsToGrant)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerPlaytimeVM", "GrantAdditionalPlaytime");

	Params::PlayerPlaytimeVM_GrantAdditionalPlaytime Parms{};

	Parms.UserPin = std::move(UserPin);
	Parms.SecondsToGrant = SecondsToGrant;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CilantroUI.PlayerPlaytimeVM.HandlePlaytimeStateChanged
// (Final, Native, Private)
// Parameters:
// EPlaytimeState                          NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPlayerPlaytimeVM::HandlePlaytimeStateChanged(EPlaytimeState NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerPlaytimeVM", "HandlePlaytimeStateChanged");

	Params::PlayerPlaytimeVM_HandlePlaytimeStateChanged Parms{};

	Parms.NewState = NewState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CilantroUI.PlayerPlaytimeVM.Init
// (Final, Native, Public, BlueprintCallable)

void UPlayerPlaytimeVM::Init()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerPlaytimeVM", "Init");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CilantroUI.PlayerPlaytimeVM.OpenParentalControlsSchedule
// (Final, Native, Public, BlueprintCallable)

void UPlayerPlaytimeVM::OpenParentalControlsSchedule()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerPlaytimeVM", "OpenParentalControlsSchedule");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CilantroUI.PlayerPlaytimeVM.OpenPinTimeGrant
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UUserWidget*                      Context                                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPlayerPlaytimeVM::OpenPinTimeGrant(class UUserWidget* Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerPlaytimeVM", "OpenPinTimeGrant");

	Params::PlayerPlaytimeVM_OpenPinTimeGrant Parms{};

	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CilantroUI.PlayerPlaytimeVM.RequestAdditionalPlaytime
// (Final, Native, Public, BlueprintCallable)

void UPlayerPlaytimeVM::RequestAdditionalPlaytime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerPlaytimeVM", "RequestAdditionalPlaytime");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CilantroUI.PlayerPlaytimeVM.SetListenToRefresh
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bListenToRefresh                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPlayerPlaytimeVM::SetListenToRefresh(const bool bListenToRefresh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerPlaytimeVM", "SetListenToRefresh");

	Params::PlayerPlaytimeVM_SetListenToRefresh Parms{};

	Parms.bListenToRefresh = bListenToRefresh;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CilantroUI.PlayerPlaytimeVM.ConvertServiceTimeToLocalTimeText
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FDateTime                        ServiceTime                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UPlayerPlaytimeVM::ConvertServiceTimeToLocalTimeText(const struct FDateTime& ServiceTime) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerPlaytimeVM", "ConvertServiceTimeToLocalTimeText");

	Params::PlayerPlaytimeVM_ConvertServiceTimeToLocalTimeText Parms{};

	Parms.ServiceTime = std::move(ServiceTime);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CilantroUI.PlayerPlaytimeVM.GetGrantPlaytimeDurations
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<int32>                     ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

const TArray<int32> UPlayerPlaytimeVM::GetGrantPlaytimeDurations() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerPlaytimeVM", "GetGrantPlaytimeDurations");

	Params::PlayerPlaytimeVM_GetGrantPlaytimeDurations Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CilantroUI.PlayerPlaytimeVM.GetNextPlayPeriodText
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UPlayerPlaytimeVM::GetNextPlayPeriodText() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerPlaytimeVM", "GetNextPlayPeriodText");

	Params::PlayerPlaytimeVM_GetNextPlayPeriodText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CilantroUI.PlayerPlaytimeVM.GetNextWindowBounds
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FPlaytimeWindow                  ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FPlaytimeWindow UPlayerPlaytimeVM::GetNextWindowBounds() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerPlaytimeVM", "GetNextWindowBounds");

	Params::PlayerPlaytimeVM_GetNextWindowBounds Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CilantroUI.PlayerPlaytimeVM.GetPlaytimeAddResultText
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FTimespan                        AddedTime                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UPlayerPlaytimeVM::GetPlaytimeAddResultText(const struct FTimespan& AddedTime) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerPlaytimeVM", "GetPlaytimeAddResultText");

	Params::PlayerPlaytimeVM_GetPlaytimeAddResultText Parms{};

	Parms.AddedTime = std::move(AddedTime);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CilantroUI.PlayerPlaytimeVM.GetPlaytimeScheduling
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EPlaytimeActiveScheduling               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EPlaytimeActiveScheduling UPlayerPlaytimeVM::GetPlaytimeScheduling() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerPlaytimeVM", "GetPlaytimeScheduling");

	Params::PlayerPlaytimeVM_GetPlaytimeScheduling Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CilantroUI.PlayerPlaytimeVM.GetPlaytimeSummaryText
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UPlayerPlaytimeVM::GetPlaytimeSummaryText() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerPlaytimeVM", "GetPlaytimeSummaryText");

	Params::PlayerPlaytimeVM_GetPlaytimeSummaryText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CilantroUI.PlayerPlaytimeVM.GetRemainingPlaytime
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FTimespan                  ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FTimespan UPlayerPlaytimeVM::GetRemainingPlaytime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerPlaytimeVM", "GetRemainingPlaytime");

	Params::PlayerPlaytimeVM_GetRemainingPlaytime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CilantroUI.PlayerPlaytimeVM.GetTimePlayed
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FTimespan                  ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FTimespan UPlayerPlaytimeVM::GetTimePlayed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerPlaytimeVM", "GetTimePlayed");

	Params::PlayerPlaytimeVM_GetTimePlayed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CilantroUI.PlayerPlaytimeVM.GetWindowBounds
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FPlaytimeWindow                  ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FPlaytimeWindow UPlayerPlaytimeVM::GetWindowBounds() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerPlaytimeVM", "GetWindowBounds");

	Params::PlayerPlaytimeVM_GetWindowBounds Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CilantroUI.PlayerPlaytimeVM.HasNextWindowBounds
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPlayerPlaytimeVM::HasNextWindowBounds() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerPlaytimeVM", "HasNextWindowBounds");

	Params::PlayerPlaytimeVM_HasNextWindowBounds Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CilantroUI.PlayerPlaytimeVM.HasWindowBounds
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPlayerPlaytimeVM::HasWindowBounds() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerPlaytimeVM", "HasWindowBounds");

	Params::PlayerPlaytimeVM_HasWindowBounds Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CilantroUI.PlayerPlaytimeVM.IsAskForMoreTimeBlocked
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPlayerPlaytimeVM::IsAskForMoreTimeBlocked() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerPlaytimeVM", "IsAskForMoreTimeBlocked");

	Params::PlayerPlaytimeVM_IsAskForMoreTimeBlocked Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CilantroUI.PlayerPlaytimeVM.IsAskForMoreTimeEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPlayerPlaytimeVM::IsAskForMoreTimeEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerPlaytimeVM", "IsAskForMoreTimeEnabled");

	Params::PlayerPlaytimeVM_IsAskForMoreTimeEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CilantroUI.PlayerPlaytimeVM.IsPlaytimeLimitsEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPlayerPlaytimeVM::IsPlaytimeLimitsEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerPlaytimeVM", "IsPlaytimeLimitsEnabled");

	Params::PlayerPlaytimeVM_IsPlaytimeLimitsEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CilantroUI.PlayerPlaytimeVM.IsReportingPlaytime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPlayerPlaytimeVM::IsReportingPlaytime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerPlaytimeVM", "IsReportingPlaytime");

	Params::PlayerPlaytimeVM_IsReportingPlaytime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CilantroUI.TimeReportsManagementScreen.ExitScreen
// (Final, Native, Public, BlueprintCallable)

void UTimeReportsManagementScreen::ExitScreen()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeReportsManagementScreen", "ExitScreen");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CilantroUI.FortPlaytimePinActivatableWidget.OnUserPinProvided
// (Event, Public, BlueprintEvent)
// Parameters:
// class FString                           UserPin                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortPlaytimePinActivatableWidget::OnUserPinProvided(const class FString& UserPin)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortPlaytimePinActivatableWidget", "OnUserPinProvided");

	Params::FortPlaytimePinActivatableWidget_OnUserPinProvided Parms{};

	Parms.UserPin = std::move(UserPin);

	UObject::ProcessEvent(Func, &Parms);
}

}

