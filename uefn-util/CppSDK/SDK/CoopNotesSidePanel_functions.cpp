#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CoopNotesSidePanel

#include "Basic.hpp"

#include "CoopNotesSidePanel_classes.hpp"
#include "CoopNotesSidePanel_parameters.hpp"


namespace SDK
{

// Function CoopNotesSidePanel.CoopNotesSidePanelHooks.error
// (Final, Native, Private)
// Parameters:
// class FString                           guid                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           result                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoopNotesSidePanelHooks::error(const class FString& guid, const class FString& result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoopNotesSidePanelHooks", "error");

	Params::CoopNotesSidePanelHooks_error Parms{};

	Parms.guid = std::move(guid);
	Parms.result = std::move(result);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CoopNotesSidePanel.CoopNotesSidePanelHooks.success
// (Final, Native, Private)
// Parameters:
// class FString                           guid                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           result                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoopNotesSidePanelHooks::success(const class FString& guid, const class FString& result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoopNotesSidePanelHooks", "success");

	Params::CoopNotesSidePanelHooks_success Parms{};

	Parms.guid = std::move(guid);
	Parms.result = std::move(result);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CoopNotesSidePanel.CoopNotesSidePanelHooksUcs.feature_flags
// (Final, Native, Private)
// Parameters:
// class FString                           flags                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoopNotesSidePanelHooksUcs::feature_flags(const class FString& flags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoopNotesSidePanelHooksUcs", "feature_flags");

	Params::CoopNotesSidePanelHooksUcs_feature_flags Parms{};

	Parms.flags = std::move(flags);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CoopNotesSidePanel.CoopNotesSidePanelHooksUcs.format_date
// (Final, Native, Private, HasOutParams)
// Parameters:
// class FString                           dateIso8601                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FWebJSResponse                   Response                                               (Parm, OutParm, NativeAccessSpecifierPublic)

void UCoopNotesSidePanelHooksUcs::format_date(const class FString& dateIso8601, struct FWebJSResponse* Response)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoopNotesSidePanelHooksUcs", "format_date");

	Params::CoopNotesSidePanelHooksUcs_format_date Parms{};

	Parms.dateIso8601 = std::move(dateIso8601);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Response != nullptr)
		*Response = std::move(Parms.Response);
}


// Function CoopNotesSidePanel.CoopNotesSidePanelHooksUcs.get_initialization_params
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FWebJSResponse                   Response                                               (Parm, OutParm, NativeAccessSpecifierPublic)

void UCoopNotesSidePanelHooksUcs::get_initialization_params(struct FWebJSResponse* Response)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoopNotesSidePanelHooksUcs", "get_initialization_params");

	Params::CoopNotesSidePanelHooksUcs_get_initialization_params Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Response != nullptr)
		*Response = std::move(Parms.Response);
}


// Function CoopNotesSidePanel.CoopNotesSidePanelHooksUcs.note_created
// (Final, Native, Private)
// Parameters:
// class FString                           note                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoopNotesSidePanelHooksUcs::note_created(const class FString& note)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoopNotesSidePanelHooksUcs", "note_created");

	Params::CoopNotesSidePanelHooksUcs_note_created Parms{};

	Parms.note = std::move(note);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CoopNotesSidePanel.CoopNotesSidePanelHooksUcs.note_deleted
// (Final, Native, Private)
// Parameters:
// class FString                           noteId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoopNotesSidePanelHooksUcs::note_deleted(const class FString& noteId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoopNotesSidePanelHooksUcs", "note_deleted");

	Params::CoopNotesSidePanelHooksUcs_note_deleted Parms{};

	Parms.noteId = std::move(noteId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CoopNotesSidePanel.CoopNotesSidePanelHooksUcs.note_selected
// (Final, Native, Private)
// Parameters:
// class FString                           noteId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoopNotesSidePanelHooksUcs::note_selected(const class FString& noteId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoopNotesSidePanelHooksUcs", "note_selected");

	Params::CoopNotesSidePanelHooksUcs_note_selected Parms{};

	Parms.noteId = std::move(noteId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CoopNotesSidePanel.CoopNotesSidePanelHooksUcs.note_updated
// (Final, Native, Private)
// Parameters:
// class FString                           note                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoopNotesSidePanelHooksUcs::note_updated(const class FString& note)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoopNotesSidePanelHooksUcs", "note_updated");

	Params::CoopNotesSidePanelHooksUcs_note_updated Parms{};

	Parms.note = std::move(note);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CoopNotesSidePanel.CoopNotesSidePanelHooksUcs.notes_connected
// (Final, Native, Private)

void UCoopNotesSidePanelHooksUcs::notes_connected()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoopNotesSidePanelHooksUcs", "notes_connected");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CoopNotesSidePanel.CoopNotesSidePanelHooksUcs.notes_disconnected
// (Final, Native, Private)

void UCoopNotesSidePanelHooksUcs::notes_disconnected()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoopNotesSidePanelHooksUcs", "notes_disconnected");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CoopNotesSidePanel.CoopNotesSidePanelHooksUcs.notes_fetched
// (Final, Native, Private, HasOutParams)
// Parameters:
// TArray<class FString>                   notes                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UCoopNotesSidePanelHooksUcs::notes_fetched(const TArray<class FString>& notes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoopNotesSidePanelHooksUcs", "notes_fetched");

	Params::CoopNotesSidePanelHooksUcs_notes_fetched Parms{};

	Parms.notes = std::move(notes);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CoopNotesSidePanel.CoopNotesSidePanelHooksUcs.notes_filtered
// (Final, Native, Private, HasOutParams)
// Parameters:
// TArray<class FString>                   noteIds                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UCoopNotesSidePanelHooksUcs::notes_filtered(const TArray<class FString>& noteIds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoopNotesSidePanelHooksUcs", "notes_filtered");

	Params::CoopNotesSidePanelHooksUcs_notes_filtered Parms{};

	Parms.noteIds = std::move(noteIds);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CoopNotesSidePanel.CoopNotesSidePanelHooksUcs.notify_media_upload
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FNotifyMediaUploadDescriptor     mediaUploadData                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoopNotesSidePanelHooksUcs::notify_media_upload(const struct FNotifyMediaUploadDescriptor& mediaUploadData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoopNotesSidePanelHooksUcs", "notify_media_upload");

	Params::CoopNotesSidePanelHooksUcs_notify_media_upload Parms{};

	Parms.mediaUploadData = std::move(mediaUploadData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CoopNotesSidePanel.CoopNotesSidePanelHooksUcs.open_fullsize_image
// (Final, Native, Private)
// Parameters:
// class FString                           noteId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           imageName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           imageDataBase64                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoopNotesSidePanelHooksUcs::open_fullsize_image(const class FString& noteId, const class FString& imageName, const class FString& imageDataBase64)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoopNotesSidePanelHooksUcs", "open_fullsize_image");

	Params::CoopNotesSidePanelHooksUcs_open_fullsize_image Parms{};

	Parms.noteId = std::move(noteId);
	Parms.imageName = std::move(imageName);
	Parms.imageDataBase64 = std::move(imageDataBase64);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CoopNotesSidePanel.CoopNotesSidePanelHooksUcs.open_message_dialog
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FMessageDialogDescriptor         dialogData                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FWebJSResponse                   Response                                               (Parm, OutParm, NativeAccessSpecifierPublic)

void UCoopNotesSidePanelHooksUcs::open_message_dialog(const struct FMessageDialogDescriptor& dialogData, struct FWebJSResponse* Response)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoopNotesSidePanelHooksUcs", "open_message_dialog");

	Params::CoopNotesSidePanelHooksUcs_open_message_dialog Parms{};

	Parms.dialogData = std::move(dialogData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Response != nullptr)
		*Response = std::move(Parms.Response);
}


// Function CoopNotesSidePanel.CoopNotesSidePanelHooksUcs.start_note_editing
// (Final, Native, Private)
// Parameters:
// class FString                           noteId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoopNotesSidePanelHooksUcs::start_note_editing(const class FString& noteId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoopNotesSidePanelHooksUcs", "start_note_editing");

	Params::CoopNotesSidePanelHooksUcs_start_note_editing Parms{};

	Parms.noteId = std::move(noteId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CoopNotesSidePanel.CoopNotesSidePanelHooksUcs.teammate_usernames
// (Final, Native, Private, HasOutParams)
// Parameters:
// TArray<class FString>                   usernames                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UCoopNotesSidePanelHooksUcs::teammate_usernames(const TArray<class FString>& usernames)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoopNotesSidePanelHooksUcs", "teammate_usernames");

	Params::CoopNotesSidePanelHooksUcs_teammate_usernames Parms{};

	Parms.usernames = std::move(usernames);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

