#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TakeRecorder

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "MovieScene_structs.hpp"
#include "UnrealEd_classes.hpp"
#include "TakeRecorder_structs.hpp"
#include "UMG_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class TakeRecorder.AssetDefinition_TakePreset
// 0x0000 (0x0048 - 0x0048)
class UAssetDefinition_TakePreset final : public UAssetDefinitionDefault
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AssetDefinition_TakePreset">();
	}
	static class UAssetDefinition_TakePreset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAssetDefinition_TakePreset>();
	}
};

// Class TakeRecorder.TakeRecorderSubsystem
// 0x0060 (0x0098 - 0x0038)
class UTakeRecorderSubsystem final : public UEngineSubsystem
{
public:
	TMulticastInlineDelegate<void()>              TakeRecorderPreInitialize;                         // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              TakeRecorderStarted;                               // 0x0048(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              TakeRecorderStopped;                               // 0x0058(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class ULevelSequence* SequenceAsset)> TakeRecorderFinished;                              // 0x0068(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              TakeRecorderCancelled;                             // 0x0078(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(struct FMovieSceneMarkedFrame& MarkedFrame)> TakeRecorderMarkedFrameAdded;                      // 0x0088(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TakeRecorderSubsystem">();
	}
	static class UTakeRecorderSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTakeRecorderSubsystem>();
	}
};

// Class TakeRecorder.TakeRecorder
// 0x01E0 (0x0210 - 0x0030)
class UTakeRecorder final : public UObject
{
public:
	uint8                                         Pad_30[0x30];                                      // 0x0030(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevelSequence*                         SequenceAsset;                                     // 0x0060(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UTakeRecorderOverlayWidget*             OverlayWidget;                                     // 0x0068(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class UWorld>                  WeakWorld;                                         // 0x0070(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FTakeRecorderParameters                Parameters;                                        // 0x0078(0x0078)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_F0[0x120];                                     // 0x00F0(0x0120)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	float GetCountdownSeconds() const;
	class ULevelSequence* GetSequence() const;
	ETakeRecorderState GetState() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TakeRecorder">();
	}
	static class UTakeRecorder* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTakeRecorder>();
	}
};

// Class TakeRecorder.TakeRecorderBlueprintLibrary
// 0x0000 (0x0030 - 0x0030)
class UTakeRecorderBlueprintLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void CancelRecording();
	static class UTakeRecorder* GetActiveRecorder();
	static struct FTakeRecorderParameters GetDefaultParameters();
	static class UTakeRecorderPanel* GetTakeRecorderPanel();
	static bool IsRecording();
	static bool IsTakeRecorderEnabled();
	static class UTakeRecorderPanel* OpenTakeRecorderPanel();
	static void SetDefaultParameters(const struct FTakeRecorderParameters& DefaultParameters);
	static void SetOnTakeRecorderCancelled(TDelegate<void()> OnTakeRecorderCancelled);
	static void SetOnTakeRecorderFinished(TDelegate<void(class ULevelSequence* SequenceAsset)> OnTakeRecorderFinished);
	static void SetOnTakeRecorderMarkedFrameAdded(TDelegate<void(struct FMovieSceneMarkedFrame& MarkedFrame)> OnTakeRecorderMarkedFrameAdded);
	static void SetOnTakeRecorderPanelChanged(TDelegate<void()> OnTakeRecorderPanelChanged);
	static void SetOnTakeRecorderPreInitialize(TDelegate<void()> OnTakeRecorderPreInitialize);
	static void SetOnTakeRecorderStarted(TDelegate<void()> OnTakeRecorderStarted);
	static void SetOnTakeRecorderStopped(TDelegate<void()> OnTakeRecorderStopped);
	static class UTakeRecorder* StartRecording(class ULevelSequence* LevelSequence, class UTakeRecorderSources* Sources, class UTakeMetaData* MetaData, const struct FTakeRecorderParameters& Parameters);
	static void StopRecording();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TakeRecorderBlueprintLibrary">();
	}
	static class UTakeRecorderBlueprintLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTakeRecorderBlueprintLibrary>();
	}
};

// Class TakeRecorder.TakeRecorderPanel
// 0x0010 (0x0040 - 0x0030)
class UTakeRecorderPanel final : public UObject
{
public:
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClearPendingTake();
	void SetFrameRate(const struct FFrameRate& InFrameRate);
	void SetFrameRateFromTimecode(bool bInFromTimecode);
	void SetupForEditing(class UTakePreset* TakePreset);
	void SetupForRecording_LevelSequence(class ULevelSequence* LevelSequenceAsset);
	void SetupForRecording_TakePreset(class UTakePreset* TakePresetAsset);
	void SetupForRecordingInto_LevelSequence(class ULevelSequence* LevelSequenceAsset);
	void SetupForViewing(class ULevelSequence* LevelSequenceAsset);

	bool CanStartRecording(class FText* OutErrorText) const;
	struct FFrameRate GetFrameRate() const;
	class ULevelSequence* GetLastRecordedLevelSequence() const;
	class ULevelSequence* GetLevelSequence() const;
	ETakeRecorderPanelMode GetMode() const;
	class UTakeRecorderSources* GetSources() const;
	class UTakeMetaData* GetTakeMetaData() const;
	void StartRecording() const;
	void StopRecording() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TakeRecorderPanel">();
	}
	static class UTakeRecorderPanel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTakeRecorderPanel>();
	}
};

// Class TakeRecorder.TakeRecorderOverlayWidget
// 0x0008 (0x0420 - 0x0418)
class UTakeRecorderOverlayWidget final : public UUserWidget
{
public:
	class UTakeRecorder*                          Recorder;                                          // 0x0418(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TakeRecorderOverlayWidget">();
	}
	static class UTakeRecorderOverlayWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTakeRecorderOverlayWidget>();
	}
};

// Class TakeRecorder.TakeRecorderUserSettings
// 0x0060 (0x0090 - 0x0030)
class UTakeRecorderUserSettings final : public UObject
{
public:
	struct FTakeRecorderUserParameters            Settings;                                          // 0x0030(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Config, NoDestructor, NativeAccessSpecifierPublic)
	struct FDirectoryPath                         PresetSaveDir;                                     // 0x0048(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTakePreset>             LastOpenedPreset;                                  // 0x0058(0x0030)(Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSequenceOpen;                                   // 0x0088(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowUserSettingsOnUI;                             // 0x0089(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8A[0x6];                                       // 0x008A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TakeRecorderUserSettings">();
	}
	static class UTakeRecorderUserSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTakeRecorderUserSettings>();
	}
};

// Class TakeRecorder.TakeRecorderProjectSettings
// 0x0060 (0x0090 - 0x0030)
class UTakeRecorderProjectSettings final : public UObject
{
public:
	struct FTakeRecorderProjectParameters         Settings;                                          // 0x0030(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, Config, NativeAccessSpecifierPublic)
	uint8                                         Pad_80[0x10];                                      // 0x0080(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TakeRecorderProjectSettings">();
	}
	static class UTakeRecorderProjectSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTakeRecorderProjectSettings>();
	}
};

}

