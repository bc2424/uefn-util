#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: InterchangeTests

#include "Basic.hpp"

#include "InterchangeTests_classes.hpp"
#include "InterchangeTests_parameters.hpp"


namespace SDK
{

// Function InterchangeTests.ActorImportTestFunctions.CheckActorClass
// (Final, Exec, Native, Static, Public)
// Parameters:
// class AActor*                           Actor                                                  (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class AActor>               ExpectedClass                                          (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInterchangeTestFunctionResult   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInterchangeTestFunctionResult UActorImportTestFunctions::CheckActorClass(const class AActor* Actor, TSubclassOf<class AActor> ExpectedClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ActorImportTestFunctions", "CheckActorClass");

	Params::ActorImportTestFunctions_CheckActorClass Parms{};

	Parms.Actor = Actor;
	Parms.ExpectedClass = ExpectedClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeTests.ActorImportTestFunctions.CheckActorClassCount
// (Final, Exec, Native, Static, Public, HasOutParams)
// Parameters:
// TArray<class AActor*>                   Actors                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TSubclassOf<class AActor>               Class_0                                                (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ExpectedNumberOfActors                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInterchangeTestFunctionResult   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInterchangeTestFunctionResult UActorImportTestFunctions::CheckActorClassCount(const TArray<class AActor*>& Actors, TSubclassOf<class AActor> Class_0, int32 ExpectedNumberOfActors)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ActorImportTestFunctions", "CheckActorClassCount");

	Params::ActorImportTestFunctions_CheckActorClassCount Parms{};

	Parms.Actors = std::move(Actors);
	Parms.Class_0 = Class_0;
	Parms.ExpectedNumberOfActors = ExpectedNumberOfActors;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeTests.ActorImportTestFunctions.CheckActorPropertyValue
// (Final, Exec, Native, Static, Public)
// Parameters:
// class AActor*                           Actor                                                  (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUseRegexToMatchValue                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ExpectedValue                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInterchangeTestFunctionResult   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInterchangeTestFunctionResult UActorImportTestFunctions::CheckActorPropertyValue(const class AActor* Actor, const class FString& PropertyName, bool bUseRegexToMatchValue, const class FString& ExpectedValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ActorImportTestFunctions", "CheckActorPropertyValue");

	Params::ActorImportTestFunctions_CheckActorPropertyValue Parms{};

	Parms.Actor = Actor;
	Parms.PropertyName = std::move(PropertyName);
	Parms.bUseRegexToMatchValue = bUseRegexToMatchValue;
	Parms.ExpectedValue = std::move(ExpectedValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeTests.ActorImportTestFunctions.CheckComponentPropertyValue
// (Final, Exec, Native, Static, Public)
// Parameters:
// class AActor*                           Actor                                                  (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ComponentName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUseRegexToMatchValue                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ExpectedValue                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInterchangeTestFunctionResult   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInterchangeTestFunctionResult UActorImportTestFunctions::CheckComponentPropertyValue(const class AActor* Actor, const class FString& ComponentName, const class FString& PropertyName, bool bUseRegexToMatchValue, const class FString& ExpectedValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ActorImportTestFunctions", "CheckComponentPropertyValue");

	Params::ActorImportTestFunctions_CheckComponentPropertyValue Parms{};

	Parms.Actor = Actor;
	Parms.ComponentName = std::move(ComponentName);
	Parms.PropertyName = std::move(PropertyName);
	Parms.bUseRegexToMatchValue = bUseRegexToMatchValue;
	Parms.ExpectedValue = std::move(ExpectedValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeTests.ActorImportTestFunctions.CheckImportedActorCount
// (Final, Exec, Native, Static, Public, HasOutParams)
// Parameters:
// TArray<class AActor*>                   Actors                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   ExpectedNumberOfImportedActors                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInterchangeTestFunctionResult   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInterchangeTestFunctionResult UActorImportTestFunctions::CheckImportedActorCount(const TArray<class AActor*>& Actors, int32 ExpectedNumberOfImportedActors)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ActorImportTestFunctions", "CheckImportedActorCount");

	Params::ActorImportTestFunctions_CheckImportedActorCount Parms{};

	Parms.Actors = std::move(Actors);
	Parms.ExpectedNumberOfImportedActors = ExpectedNumberOfImportedActors;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeTests.LightImportTestFunctions.CheckLightColor
// (Final, Exec, Native, Static, Public, HasOutParams, HasDefaults)
// Parameters:
// class ALight*                           Light                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     ExpectedLightColor                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInterchangeTestFunctionResult   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInterchangeTestFunctionResult ULightImportTestFunctions::CheckLightColor(class ALight* Light, const struct FLinearColor& ExpectedLightColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LightImportTestFunctions", "CheckLightColor");

	Params::LightImportTestFunctions_CheckLightColor Parms{};

	Parms.Light = Light;
	Parms.ExpectedLightColor = std::move(ExpectedLightColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeTests.LightImportTestFunctions.CheckLightDirection
// (Final, Exec, Native, Static, Public, HasOutParams, HasDefaults)
// Parameters:
// class ALight*                           Light                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ExpectedLightDirection                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInterchangeTestFunctionResult   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInterchangeTestFunctionResult ULightImportTestFunctions::CheckLightDirection(class ALight* Light, const struct FVector& ExpectedLightDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LightImportTestFunctions", "CheckLightDirection");

	Params::LightImportTestFunctions_CheckLightDirection Parms{};

	Parms.Light = Light;
	Parms.ExpectedLightDirection = std::move(ExpectedLightDirection);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeTests.LightImportTestFunctions.CheckLightIntensity
// (Final, Exec, Native, Static, Public)
// Parameters:
// class ALight*                           Light                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ExpectedLightIntensity                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInterchangeTestFunctionResult   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInterchangeTestFunctionResult ULightImportTestFunctions::CheckLightIntensity(class ALight* Light, float ExpectedLightIntensity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LightImportTestFunctions", "CheckLightIntensity");

	Params::LightImportTestFunctions_CheckLightIntensity Parms{};

	Parms.Light = Light;
	Parms.ExpectedLightIntensity = ExpectedLightIntensity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeTests.LightImportTestFunctions.CheckLightPosition
// (Final, Exec, Native, Static, Public, HasOutParams, HasDefaults)
// Parameters:
// class ALight*                           Light                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ExpectedLightPosition                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInterchangeTestFunctionResult   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInterchangeTestFunctionResult ULightImportTestFunctions::CheckLightPosition(class ALight* Light, const struct FVector& ExpectedLightPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LightImportTestFunctions", "CheckLightPosition");

	Params::LightImportTestFunctions_CheckLightPosition Parms{};

	Parms.Light = Light;
	Parms.ExpectedLightPosition = std::move(ExpectedLightPosition);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeTests.MaterialXTestFunctions.CheckConnectedInputCount
// (Final, Exec, Native, Static, Public)
// Parameters:
// class UMaterialInterface*               MaterialInterface                                      (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ExpectedNumber                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInterchangeTestFunctionResult   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInterchangeTestFunctionResult UMaterialXTestFunctions::CheckConnectedInputCount(const class UMaterialInterface* MaterialInterface, int32 ExpectedNumber)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MaterialXTestFunctions", "CheckConnectedInputCount");

	Params::MaterialXTestFunctions_CheckConnectedInputCount Parms{};

	Parms.MaterialInterface = MaterialInterface;
	Parms.ExpectedNumber = ExpectedNumber;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeTests.MaterialXTestFunctions.CheckInputConnected
// (Final, Exec, Native, Static, Public)
// Parameters:
// class UMaterialInterface*               MaterialInterface                                      (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           InputName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsConnected                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInterchangeTestFunctionResult   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInterchangeTestFunctionResult UMaterialXTestFunctions::CheckInputConnected(const class UMaterialInterface* MaterialInterface, const class FString& InputName, bool bIsConnected)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MaterialXTestFunctions", "CheckInputConnected");

	Params::MaterialXTestFunctions_CheckInputConnected Parms{};

	Parms.MaterialInterface = MaterialInterface;
	Parms.InputName = std::move(InputName);
	Parms.bIsConnected = bIsConnected;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeTests.PointLightImportTestFunctions.CheckLightFalloffExponent
// (Final, Exec, Native, Static, Public)
// Parameters:
// class APointLight*                      Light                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ExpectedLightFalloff                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInterchangeTestFunctionResult   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInterchangeTestFunctionResult UPointLightImportTestFunctions::CheckLightFalloffExponent(class APointLight* Light, float ExpectedLightFalloff)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PointLightImportTestFunctions", "CheckLightFalloffExponent");

	Params::PointLightImportTestFunctions_CheckLightFalloffExponent Parms{};

	Parms.Light = Light;
	Parms.ExpectedLightFalloff = ExpectedLightFalloff;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeTests.SpotLightImportTestFunctions.CheckLightInnerConeAngle
// (Final, Exec, Native, Static, Public)
// Parameters:
// class ASpotLight*                       Light                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ExpectedLightInnerConeAngle                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInterchangeTestFunctionResult   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInterchangeTestFunctionResult USpotLightImportTestFunctions::CheckLightInnerConeAngle(class ASpotLight* Light, float ExpectedLightInnerConeAngle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SpotLightImportTestFunctions", "CheckLightInnerConeAngle");

	Params::SpotLightImportTestFunctions_CheckLightInnerConeAngle Parms{};

	Parms.Light = Light;
	Parms.ExpectedLightInnerConeAngle = ExpectedLightInnerConeAngle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeTests.SpotLightImportTestFunctions.CheckLightOuterConeAngle
// (Final, Exec, Native, Static, Public)
// Parameters:
// class ASpotLight*                       Light                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ExpectedLightOuterConeAngle                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInterchangeTestFunctionResult   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInterchangeTestFunctionResult USpotLightImportTestFunctions::CheckLightOuterConeAngle(class ASpotLight* Light, float ExpectedLightOuterConeAngle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SpotLightImportTestFunctions", "CheckLightOuterConeAngle");

	Params::SpotLightImportTestFunctions_CheckLightOuterConeAngle Parms{};

	Parms.Light = Light;
	Parms.ExpectedLightOuterConeAngle = ExpectedLightOuterConeAngle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeTests.AnimationImportTestFunctions.CheckAnimationFrameNumber
// (Final, Exec, Native, Static, Public)
// Parameters:
// class UAnimSequence*                    AnimSequence                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ExpectedFrameNumber                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInterchangeTestFunctionResult   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInterchangeTestFunctionResult UAnimationImportTestFunctions::CheckAnimationFrameNumber(class UAnimSequence* AnimSequence, int32 ExpectedFrameNumber)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AnimationImportTestFunctions", "CheckAnimationFrameNumber");

	Params::AnimationImportTestFunctions_CheckAnimationFrameNumber Parms{};

	Parms.AnimSequence = AnimSequence;
	Parms.ExpectedFrameNumber = ExpectedFrameNumber;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeTests.AnimationImportTestFunctions.CheckAnimationLength
// (Final, Exec, Native, Static, Public)
// Parameters:
// class UAnimSequence*                    AnimSequence                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ExpectedAnimationLength                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInterchangeTestFunctionResult   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInterchangeTestFunctionResult UAnimationImportTestFunctions::CheckAnimationLength(class UAnimSequence* AnimSequence, float ExpectedAnimationLength)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AnimationImportTestFunctions", "CheckAnimationLength");

	Params::AnimationImportTestFunctions_CheckAnimationLength Parms{};

	Parms.AnimSequence = AnimSequence;
	Parms.ExpectedAnimationLength = ExpectedAnimationLength;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeTests.AnimationImportTestFunctions.CheckCurveKeyArriveTangent
// (Final, Exec, Native, Static, Public)
// Parameters:
// class UAnimSequence*                    AnimSequence                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           CurveName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   KeyIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ExpectedCurveKeyArriveTangent                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInterchangeTestFunctionResult   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInterchangeTestFunctionResult UAnimationImportTestFunctions::CheckCurveKeyArriveTangent(class UAnimSequence* AnimSequence, const class FString& CurveName, int32 KeyIndex, float ExpectedCurveKeyArriveTangent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AnimationImportTestFunctions", "CheckCurveKeyArriveTangent");

	Params::AnimationImportTestFunctions_CheckCurveKeyArriveTangent Parms{};

	Parms.AnimSequence = AnimSequence;
	Parms.CurveName = std::move(CurveName);
	Parms.KeyIndex = KeyIndex;
	Parms.ExpectedCurveKeyArriveTangent = ExpectedCurveKeyArriveTangent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeTests.AnimationImportTestFunctions.CheckCurveKeyArriveTangentWeight
// (Final, Exec, Native, Static, Public)
// Parameters:
// class UAnimSequence*                    AnimSequence                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           CurveName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   KeyIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ExpectedCurveKeyArriveTangentWeight                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInterchangeTestFunctionResult   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInterchangeTestFunctionResult UAnimationImportTestFunctions::CheckCurveKeyArriveTangentWeight(class UAnimSequence* AnimSequence, const class FString& CurveName, int32 KeyIndex, float ExpectedCurveKeyArriveTangentWeight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AnimationImportTestFunctions", "CheckCurveKeyArriveTangentWeight");

	Params::AnimationImportTestFunctions_CheckCurveKeyArriveTangentWeight Parms{};

	Parms.AnimSequence = AnimSequence;
	Parms.CurveName = std::move(CurveName);
	Parms.KeyIndex = KeyIndex;
	Parms.ExpectedCurveKeyArriveTangentWeight = ExpectedCurveKeyArriveTangentWeight;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeTests.AnimationImportTestFunctions.CheckCurveKeyLeaveTangent
// (Final, Exec, Native, Static, Public)
// Parameters:
// class UAnimSequence*                    AnimSequence                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           CurveName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   KeyIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ExpectedCurveKeyLeaveTangent                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInterchangeTestFunctionResult   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInterchangeTestFunctionResult UAnimationImportTestFunctions::CheckCurveKeyLeaveTangent(class UAnimSequence* AnimSequence, const class FString& CurveName, int32 KeyIndex, float ExpectedCurveKeyLeaveTangent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AnimationImportTestFunctions", "CheckCurveKeyLeaveTangent");

	Params::AnimationImportTestFunctions_CheckCurveKeyLeaveTangent Parms{};

	Parms.AnimSequence = AnimSequence;
	Parms.CurveName = std::move(CurveName);
	Parms.KeyIndex = KeyIndex;
	Parms.ExpectedCurveKeyLeaveTangent = ExpectedCurveKeyLeaveTangent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeTests.AnimationImportTestFunctions.CheckCurveKeyLeaveTangentWeight
// (Final, Exec, Native, Static, Public)
// Parameters:
// class UAnimSequence*                    AnimSequence                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           CurveName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   KeyIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ExpectedCurveKeyLeaveTangentWeight                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInterchangeTestFunctionResult   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInterchangeTestFunctionResult UAnimationImportTestFunctions::CheckCurveKeyLeaveTangentWeight(class UAnimSequence* AnimSequence, const class FString& CurveName, int32 KeyIndex, float ExpectedCurveKeyLeaveTangentWeight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AnimationImportTestFunctions", "CheckCurveKeyLeaveTangentWeight");

	Params::AnimationImportTestFunctions_CheckCurveKeyLeaveTangentWeight Parms{};

	Parms.AnimSequence = AnimSequence;
	Parms.CurveName = std::move(CurveName);
	Parms.KeyIndex = KeyIndex;
	Parms.ExpectedCurveKeyLeaveTangentWeight = ExpectedCurveKeyLeaveTangentWeight;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeTests.AnimationImportTestFunctions.CheckCurveKeyTime
// (Final, Exec, Native, Static, Public)
// Parameters:
// class UAnimSequence*                    AnimSequence                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           CurveName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   KeyIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ExpectedCurveKeyTime                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInterchangeTestFunctionResult   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInterchangeTestFunctionResult UAnimationImportTestFunctions::CheckCurveKeyTime(class UAnimSequence* AnimSequence, const class FString& CurveName, int32 KeyIndex, float ExpectedCurveKeyTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AnimationImportTestFunctions", "CheckCurveKeyTime");

	Params::AnimationImportTestFunctions_CheckCurveKeyTime Parms{};

	Parms.AnimSequence = AnimSequence;
	Parms.CurveName = std::move(CurveName);
	Parms.KeyIndex = KeyIndex;
	Parms.ExpectedCurveKeyTime = ExpectedCurveKeyTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeTests.AnimationImportTestFunctions.CheckCurveKeyValue
// (Final, Exec, Native, Static, Public)
// Parameters:
// class UAnimSequence*                    AnimSequence                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           CurveName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   KeyIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ExpectedCurveKeyValue                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInterchangeTestFunctionResult   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInterchangeTestFunctionResult UAnimationImportTestFunctions::CheckCurveKeyValue(class UAnimSequence* AnimSequence, const class FString& CurveName, int32 KeyIndex, float ExpectedCurveKeyValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AnimationImportTestFunctions", "CheckCurveKeyValue");

	Params::AnimationImportTestFunctions_CheckCurveKeyValue Parms{};

	Parms.AnimSequence = AnimSequence;
	Parms.CurveName = std::move(CurveName);
	Parms.KeyIndex = KeyIndex;
	Parms.ExpectedCurveKeyValue = ExpectedCurveKeyValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeTests.AnimationImportTestFunctions.CheckImportedAnimSequenceCount
// (Final, Exec, Native, Static, Public, HasOutParams)
// Parameters:
// TArray<class UAnimSequence*>            AnimSequences                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   ExpectedNumberOfImportedAnimSequences                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInterchangeTestFunctionResult   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInterchangeTestFunctionResult UAnimationImportTestFunctions::CheckImportedAnimSequenceCount(const TArray<class UAnimSequence*>& AnimSequences, int32 ExpectedNumberOfImportedAnimSequences)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AnimationImportTestFunctions", "CheckImportedAnimSequenceCount");

	Params::AnimationImportTestFunctions_CheckImportedAnimSequenceCount Parms{};

	Parms.AnimSequences = std::move(AnimSequences);
	Parms.ExpectedNumberOfImportedAnimSequences = ExpectedNumberOfImportedAnimSequences;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeTests.AssetImportTestFunctions.CheckImportedMetadataCount
// (Final, Exec, Native, Static, Public)
// Parameters:
// class UObject*                          Object                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ExpectedNumberOfMetadataForThisObject                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInterchangeTestFunctionResult   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInterchangeTestFunctionResult UAssetImportTestFunctions::CheckImportedMetadataCount(const class UObject* Object, const int32 ExpectedNumberOfMetadataForThisObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AssetImportTestFunctions", "CheckImportedMetadataCount");

	Params::AssetImportTestFunctions_CheckImportedMetadataCount Parms{};

	Parms.Object = Object;
	Parms.ExpectedNumberOfMetadataForThisObject = ExpectedNumberOfMetadataForThisObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeTests.AssetImportTestFunctions.CheckMetadataExist
// (Final, Exec, Native, Static, Public)
// Parameters:
// class UObject*                          Object                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ExpectedMetadataKey                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInterchangeTestFunctionResult   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInterchangeTestFunctionResult UAssetImportTestFunctions::CheckMetadataExist(const class UObject* Object, const class FString& ExpectedMetadataKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AssetImportTestFunctions", "CheckMetadataExist");

	Params::AssetImportTestFunctions_CheckMetadataExist Parms{};

	Parms.Object = Object;
	Parms.ExpectedMetadataKey = std::move(ExpectedMetadataKey);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeTests.AssetImportTestFunctions.CheckMetadataValue
// (Final, Exec, Native, Static, Public)
// Parameters:
// class UObject*                          Object                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ExpectedMetadataKey                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ExpectedMetadataValue                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInterchangeTestFunctionResult   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInterchangeTestFunctionResult UAssetImportTestFunctions::CheckMetadataValue(const class UObject* Object, const class FString& ExpectedMetadataKey, const class FString& ExpectedMetadataValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AssetImportTestFunctions", "CheckMetadataValue");

	Params::AssetImportTestFunctions_CheckMetadataValue Parms{};

	Parms.Object = Object;
	Parms.ExpectedMetadataKey = std::move(ExpectedMetadataKey);
	Parms.ExpectedMetadataValue = std::move(ExpectedMetadataValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeTests.InterchangeResultImportTestFunctions.CheckIfErrorOrWarningWasGenerated
// (Final, Exec, Native, Static, Public)
// Parameters:
// class UInterchangeResultsContainer*     ResultsContainer                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UInterchangeResult>   ErrorOrWarningClass                                    (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInterchangeTestFunctionResult   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInterchangeTestFunctionResult UInterchangeResultImportTestFunctions::CheckIfErrorOrWarningWasGenerated(class UInterchangeResultsContainer* ResultsContainer, TSubclassOf<class UInterchangeResult> ErrorOrWarningClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InterchangeResultImportTestFunctions", "CheckIfErrorOrWarningWasGenerated");

	Params::InterchangeResultImportTestFunctions_CheckIfErrorOrWarningWasGenerated Parms{};

	Parms.ResultsContainer = ResultsContainer;
	Parms.ErrorOrWarningClass = ErrorOrWarningClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeTests.LevelSequenceImportTestFunctions.CheckLevelSequenceCount
// (Final, Exec, Native, Static, Public, HasOutParams)
// Parameters:
// TArray<class ULevelSequence*>           LevelSequences                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   ExpectedNumberOfLevelSequences                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInterchangeTestFunctionResult   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInterchangeTestFunctionResult ULevelSequenceImportTestFunctions::CheckLevelSequenceCount(const TArray<class ULevelSequence*>& LevelSequences, int32 ExpectedNumberOfLevelSequences)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelSequenceImportTestFunctions", "CheckLevelSequenceCount");

	Params::LevelSequenceImportTestFunctions_CheckLevelSequenceCount Parms{};

	Parms.LevelSequences = std::move(LevelSequences);
	Parms.ExpectedNumberOfLevelSequences = ExpectedNumberOfLevelSequences;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeTests.LevelSequenceImportTestFunctions.CheckSectionCount
// (Final, Exec, Native, Static, Public)
// Parameters:
// class ULevelSequence*                   LevelSequence                                          (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ExpectedNumberOfSections                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInterchangeTestFunctionResult   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInterchangeTestFunctionResult ULevelSequenceImportTestFunctions::CheckSectionCount(const class ULevelSequence* LevelSequence, int32 ExpectedNumberOfSections)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelSequenceImportTestFunctions", "CheckSectionCount");

	Params::LevelSequenceImportTestFunctions_CheckSectionCount Parms{};

	Parms.LevelSequence = LevelSequence;
	Parms.ExpectedNumberOfSections = ExpectedNumberOfSections;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeTests.LevelSequenceImportTestFunctions.CheckSectionInterpolationMode
// (Final, Exec, Native, Static, Public)
// Parameters:
// class ULevelSequence*                   LevelSequence                                          (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SectionIndex                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ERichCurveInterpMode                    ExpectedInterpolationMode                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInterchangeTestFunctionResult   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInterchangeTestFunctionResult ULevelSequenceImportTestFunctions::CheckSectionInterpolationMode(const class ULevelSequence* LevelSequence, int32 SectionIndex, ERichCurveInterpMode ExpectedInterpolationMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelSequenceImportTestFunctions", "CheckSectionInterpolationMode");

	Params::LevelSequenceImportTestFunctions_CheckSectionInterpolationMode Parms{};

	Parms.LevelSequence = LevelSequence;
	Parms.SectionIndex = SectionIndex;
	Parms.ExpectedInterpolationMode = ExpectedInterpolationMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeTests.LevelSequenceImportTestFunctions.CheckSequenceLength
// (Final, Exec, Native, Static, Public)
// Parameters:
// class ULevelSequence*                   LevelSequence                                          (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ExpectedLevelSequenceLength                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInterchangeTestFunctionResult   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInterchangeTestFunctionResult ULevelSequenceImportTestFunctions::CheckSequenceLength(const class ULevelSequence* LevelSequence, float ExpectedLevelSequenceLength)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelSequenceImportTestFunctions", "CheckSequenceLength");

	Params::LevelSequenceImportTestFunctions_CheckSequenceLength Parms{};

	Parms.LevelSequence = LevelSequence;
	Parms.ExpectedLevelSequenceLength = ExpectedLevelSequenceLength;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeTests.LevelVariantSetsImportTestFunctions.CheckBindingsCount
// (Final, Exec, Native, Static, Public)
// Parameters:
// class ULevelVariantSets*                LevelVariantSets                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           VariantSetName                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           VariantName                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ExpectedNumberOfBindings                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInterchangeTestFunctionResult   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInterchangeTestFunctionResult ULevelVariantSetsImportTestFunctions::CheckBindingsCount(class ULevelVariantSets* LevelVariantSets, const class FString& VariantSetName, const class FString& VariantName, int32 ExpectedNumberOfBindings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelVariantSetsImportTestFunctions", "CheckBindingsCount");

	Params::LevelVariantSetsImportTestFunctions_CheckBindingsCount Parms{};

	Parms.LevelVariantSets = LevelVariantSets;
	Parms.VariantSetName = std::move(VariantSetName);
	Parms.VariantName = std::move(VariantName);
	Parms.ExpectedNumberOfBindings = ExpectedNumberOfBindings;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeTests.LevelVariantSetsImportTestFunctions.CheckLevelVariantSetsCount
// (Final, Exec, Native, Static, Public, HasOutParams)
// Parameters:
// TArray<class ULevelVariantSets*>        LevelVariantSetsAssets                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   ExpectedNumberOfLevelVariantSets                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInterchangeTestFunctionResult   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInterchangeTestFunctionResult ULevelVariantSetsImportTestFunctions::CheckLevelVariantSetsCount(const TArray<class ULevelVariantSets*>& LevelVariantSetsAssets, int32 ExpectedNumberOfLevelVariantSets)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelVariantSetsImportTestFunctions", "CheckLevelVariantSetsCount");

	Params::LevelVariantSetsImportTestFunctions_CheckLevelVariantSetsCount Parms{};

	Parms.LevelVariantSetsAssets = std::move(LevelVariantSetsAssets);
	Parms.ExpectedNumberOfLevelVariantSets = ExpectedNumberOfLevelVariantSets;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeTests.LevelVariantSetsImportTestFunctions.CheckVariantsCount
// (Final, Exec, Native, Static, Public)
// Parameters:
// class ULevelVariantSets*                LevelVariantSets                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           VariantSetName                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ExpectedNumberOfVariants                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInterchangeTestFunctionResult   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInterchangeTestFunctionResult ULevelVariantSetsImportTestFunctions::CheckVariantsCount(class ULevelVariantSets* LevelVariantSets, const class FString& VariantSetName, int32 ExpectedNumberOfVariants)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelVariantSetsImportTestFunctions", "CheckVariantsCount");

	Params::LevelVariantSetsImportTestFunctions_CheckVariantsCount Parms{};

	Parms.LevelVariantSets = LevelVariantSets;
	Parms.VariantSetName = std::move(VariantSetName);
	Parms.ExpectedNumberOfVariants = ExpectedNumberOfVariants;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeTests.LevelVariantSetsImportTestFunctions.CheckVariantSetsCount
// (Final, Exec, Native, Static, Public)
// Parameters:
// class ULevelVariantSets*                LevelVariantSets                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ExpectedNumberOfVariantSets                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInterchangeTestFunctionResult   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInterchangeTestFunctionResult ULevelVariantSetsImportTestFunctions::CheckVariantSetsCount(class ULevelVariantSets* LevelVariantSets, int32 ExpectedNumberOfVariantSets)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelVariantSetsImportTestFunctions", "CheckVariantSetsCount");

	Params::LevelVariantSetsImportTestFunctions_CheckVariantSetsCount Parms{};

	Parms.LevelVariantSets = LevelVariantSets;
	Parms.ExpectedNumberOfVariantSets = ExpectedNumberOfVariantSets;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeTests.MaterialImportTestFunctions.CheckBlendMode
// (Final, Exec, Native, Static, Public)
// Parameters:
// class UMaterialInterface*               MaterialInterface                                      (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBlendMode                              ExpectedBlendMode                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInterchangeTestFunctionResult   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInterchangeTestFunctionResult UMaterialImportTestFunctions::CheckBlendMode(const class UMaterialInterface* MaterialInterface, EBlendMode ExpectedBlendMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MaterialImportTestFunctions", "CheckBlendMode");

	Params::MaterialImportTestFunctions_CheckBlendMode Parms{};

	Parms.MaterialInterface = MaterialInterface;
	Parms.ExpectedBlendMode = ExpectedBlendMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeTests.MaterialImportTestFunctions.CheckImportedMaterialCount
// (Final, Exec, Native, Static, Public, HasOutParams)
// Parameters:
// TArray<class UMaterialInterface*>       MaterialInterfaces                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   ExpectedNumberOfImportedMaterials                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInterchangeTestFunctionResult   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInterchangeTestFunctionResult UMaterialImportTestFunctions::CheckImportedMaterialCount(const TArray<class UMaterialInterface*>& MaterialInterfaces, int32 ExpectedNumberOfImportedMaterials)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MaterialImportTestFunctions", "CheckImportedMaterialCount");

	Params::MaterialImportTestFunctions_CheckImportedMaterialCount Parms{};

	Parms.MaterialInterfaces = std::move(MaterialInterfaces);
	Parms.ExpectedNumberOfImportedMaterials = ExpectedNumberOfImportedMaterials;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeTests.MaterialImportTestFunctions.CheckImportedMaterialInstanceCount
// (Final, Exec, Native, Static, Public, HasOutParams)
// Parameters:
// TArray<class UMaterialInterface*>       MaterialInterfaces                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   ExpectedNumberOfImportedMaterialInstances              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInterchangeTestFunctionResult   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInterchangeTestFunctionResult UMaterialImportTestFunctions::CheckImportedMaterialInstanceCount(const TArray<class UMaterialInterface*>& MaterialInterfaces, int32 ExpectedNumberOfImportedMaterialInstances)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MaterialImportTestFunctions", "CheckImportedMaterialInstanceCount");

	Params::MaterialImportTestFunctions_CheckImportedMaterialInstanceCount Parms{};

	Parms.MaterialInterfaces = std::move(MaterialInterfaces);
	Parms.ExpectedNumberOfImportedMaterialInstances = ExpectedNumberOfImportedMaterialInstances;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeTests.MaterialImportTestFunctions.CheckIsTwoSided
// (Final, Exec, Native, Static, Public)
// Parameters:
// class UMaterialInterface*               MaterialInterface                                      (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ExpectedIsTwoSided                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInterchangeTestFunctionResult   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInterchangeTestFunctionResult UMaterialImportTestFunctions::CheckIsTwoSided(const class UMaterialInterface* MaterialInterface, bool ExpectedIsTwoSided)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MaterialImportTestFunctions", "CheckIsTwoSided");

	Params::MaterialImportTestFunctions_CheckIsTwoSided Parms{};

	Parms.MaterialInterface = MaterialInterface;
	Parms.ExpectedIsTwoSided = ExpectedIsTwoSided;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeTests.MaterialImportTestFunctions.CheckOpacityMaskClipValue
// (Final, Exec, Native, Static, Public)
// Parameters:
// class UMaterialInterface*               MaterialInterface                                      (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ExpectedOpacityMaskClipValue                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInterchangeTestFunctionResult   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInterchangeTestFunctionResult UMaterialImportTestFunctions::CheckOpacityMaskClipValue(const class UMaterialInterface* MaterialInterface, float ExpectedOpacityMaskClipValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MaterialImportTestFunctions", "CheckOpacityMaskClipValue");

	Params::MaterialImportTestFunctions_CheckOpacityMaskClipValue Parms{};

	Parms.MaterialInterface = MaterialInterface;
	Parms.ExpectedOpacityMaskClipValue = ExpectedOpacityMaskClipValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeTests.MaterialImportTestFunctions.CheckScalarParameter
// (Final, Exec, Native, Static, Public)
// Parameters:
// class UMaterialInterface*               MaterialInterface                                      (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ParameterName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ExpectedParameterValue                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInterchangeTestFunctionResult   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInterchangeTestFunctionResult UMaterialImportTestFunctions::CheckScalarParameter(const class UMaterialInterface* MaterialInterface, const class FString& ParameterName, float ExpectedParameterValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MaterialImportTestFunctions", "CheckScalarParameter");

	Params::MaterialImportTestFunctions_CheckScalarParameter Parms{};

	Parms.MaterialInterface = MaterialInterface;
	Parms.ParameterName = std::move(ParameterName);
	Parms.ExpectedParameterValue = ExpectedParameterValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeTests.MaterialImportTestFunctions.CheckShadingModel
// (Final, Exec, Native, Static, Public)
// Parameters:
// class UMaterialInterface*               MaterialInterface                                      (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMaterialShadingModel                   ExpectedShadingModel                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInterchangeTestFunctionResult   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInterchangeTestFunctionResult UMaterialImportTestFunctions::CheckShadingModel(const class UMaterialInterface* MaterialInterface, EMaterialShadingModel ExpectedShadingModel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MaterialImportTestFunctions", "CheckShadingModel");

	Params::MaterialImportTestFunctions_CheckShadingModel Parms{};

	Parms.MaterialInterface = MaterialInterface;
	Parms.ExpectedShadingModel = ExpectedShadingModel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeTests.MaterialImportTestFunctions.CheckVectorParameter
// (Final, Exec, Native, Static, Public, HasDefaults)
// Parameters:
// class UMaterialInterface*               MaterialInterface                                      (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ParameterName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     ExpectedParameterValue                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInterchangeTestFunctionResult   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInterchangeTestFunctionResult UMaterialImportTestFunctions::CheckVectorParameter(const class UMaterialInterface* MaterialInterface, const class FString& ParameterName, const struct FLinearColor& ExpectedParameterValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MaterialImportTestFunctions", "CheckVectorParameter");

	Params::MaterialImportTestFunctions_CheckVectorParameter Parms{};

	Parms.MaterialInterface = MaterialInterface;
	Parms.ParameterName = std::move(ParameterName);
	Parms.ExpectedParameterValue = std::move(ExpectedParameterValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeTests.SkeletalMeshImportTestFunctions.CheckBoneCount
// (Final, Exec, Native, Static, Public)
// Parameters:
// class USkeletalMesh*                    Mesh                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ExpectedNumberOfBones                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInterchangeTestFunctionResult   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInterchangeTestFunctionResult USkeletalMeshImportTestFunctions::CheckBoneCount(class USkeletalMesh* Mesh, int32 ExpectedNumberOfBones)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SkeletalMeshImportTestFunctions", "CheckBoneCount");

	Params::SkeletalMeshImportTestFunctions_CheckBoneCount Parms{};

	Parms.Mesh = Mesh;
	Parms.ExpectedNumberOfBones = ExpectedNumberOfBones;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeTests.SkeletalMeshImportTestFunctions.CheckBonePosition
// (Final, Exec, Native, Static, Public, HasOutParams, HasDefaults)
// Parameters:
// class USkeletalMesh*                    Mesh                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   BoneIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ExpectedBonePosition                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInterchangeTestFunctionResult   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInterchangeTestFunctionResult USkeletalMeshImportTestFunctions::CheckBonePosition(class USkeletalMesh* Mesh, int32 BoneIndex, const struct FVector& ExpectedBonePosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SkeletalMeshImportTestFunctions", "CheckBonePosition");

	Params::SkeletalMeshImportTestFunctions_CheckBonePosition Parms{};

	Parms.Mesh = Mesh;
	Parms.BoneIndex = BoneIndex;
	Parms.ExpectedBonePosition = std::move(ExpectedBonePosition);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeTests.SkeletalMeshImportTestFunctions.CheckImportedSkeletalMeshCount
// (Final, Exec, Native, Static, Public, HasOutParams)
// Parameters:
// TArray<class USkeletalMesh*>            Meshes                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   ExpectedNumberOfImportedSkeletalMeshes                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInterchangeTestFunctionResult   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInterchangeTestFunctionResult USkeletalMeshImportTestFunctions::CheckImportedSkeletalMeshCount(const TArray<class USkeletalMesh*>& Meshes, int32 ExpectedNumberOfImportedSkeletalMeshes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SkeletalMeshImportTestFunctions", "CheckImportedSkeletalMeshCount");

	Params::SkeletalMeshImportTestFunctions_CheckImportedSkeletalMeshCount Parms{};

	Parms.Meshes = std::move(Meshes);
	Parms.ExpectedNumberOfImportedSkeletalMeshes = ExpectedNumberOfImportedSkeletalMeshes;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeTests.SkeletalMeshImportTestFunctions.CheckLodCount
// (Final, Exec, Native, Static, Public)
// Parameters:
// class USkeletalMesh*                    Mesh                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ExpectedNumberOfLods                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInterchangeTestFunctionResult   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInterchangeTestFunctionResult USkeletalMeshImportTestFunctions::CheckLodCount(class USkeletalMesh* Mesh, int32 ExpectedNumberOfLods)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SkeletalMeshImportTestFunctions", "CheckLodCount");

	Params::SkeletalMeshImportTestFunctions_CheckLodCount Parms{};

	Parms.Mesh = Mesh;
	Parms.ExpectedNumberOfLods = ExpectedNumberOfLods;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeTests.SkeletalMeshImportTestFunctions.CheckMaterialSlotCount
// (Final, Exec, Native, Static, Public)
// Parameters:
// class USkeletalMesh*                    Mesh                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ExpectedNumberOfMaterialSlots                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInterchangeTestFunctionResult   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInterchangeTestFunctionResult USkeletalMeshImportTestFunctions::CheckMaterialSlotCount(class USkeletalMesh* Mesh, int32 ExpectedNumberOfMaterialSlots)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SkeletalMeshImportTestFunctions", "CheckMaterialSlotCount");

	Params::SkeletalMeshImportTestFunctions_CheckMaterialSlotCount Parms{};

	Parms.Mesh = Mesh;
	Parms.ExpectedNumberOfMaterialSlots = ExpectedNumberOfMaterialSlots;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeTests.SkeletalMeshImportTestFunctions.CheckRenderTriangleCount
// (Final, Exec, Native, Static, Public)
// Parameters:
// class USkeletalMesh*                    Mesh                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LodIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ExpectedNumberOfRenderTriangles                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInterchangeTestFunctionResult   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInterchangeTestFunctionResult USkeletalMeshImportTestFunctions::CheckRenderTriangleCount(class USkeletalMesh* Mesh, int32 LodIndex, int32 ExpectedNumberOfRenderTriangles)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SkeletalMeshImportTestFunctions", "CheckRenderTriangleCount");

	Params::SkeletalMeshImportTestFunctions_CheckRenderTriangleCount Parms{};

	Parms.Mesh = Mesh;
	Parms.LodIndex = LodIndex;
	Parms.ExpectedNumberOfRenderTriangles = ExpectedNumberOfRenderTriangles;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeTests.SkeletalMeshImportTestFunctions.CheckRenderVertexCount
// (Final, Exec, Native, Static, Public)
// Parameters:
// class USkeletalMesh*                    Mesh                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LodIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ExpectedNumberOfRenderVertices                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInterchangeTestFunctionResult   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInterchangeTestFunctionResult USkeletalMeshImportTestFunctions::CheckRenderVertexCount(class USkeletalMesh* Mesh, int32 LodIndex, int32 ExpectedNumberOfRenderVertices)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SkeletalMeshImportTestFunctions", "CheckRenderVertexCount");

	Params::SkeletalMeshImportTestFunctions_CheckRenderVertexCount Parms{};

	Parms.Mesh = Mesh;
	Parms.LodIndex = LodIndex;
	Parms.ExpectedNumberOfRenderVertices = ExpectedNumberOfRenderVertices;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeTests.SkeletalMeshImportTestFunctions.CheckSectionCount
// (Final, Exec, Native, Static, Public)
// Parameters:
// class USkeletalMesh*                    Mesh                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LodIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ExpectedNumberOfSections                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInterchangeTestFunctionResult   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInterchangeTestFunctionResult USkeletalMeshImportTestFunctions::CheckSectionCount(class USkeletalMesh* Mesh, int32 LodIndex, int32 ExpectedNumberOfSections)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SkeletalMeshImportTestFunctions", "CheckSectionCount");

	Params::SkeletalMeshImportTestFunctions_CheckSectionCount Parms{};

	Parms.Mesh = Mesh;
	Parms.LodIndex = LodIndex;
	Parms.ExpectedNumberOfSections = ExpectedNumberOfSections;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeTests.SkeletalMeshImportTestFunctions.CheckSectionImportedMaterialSlotName
// (Final, Exec, Native, Static, Public)
// Parameters:
// class USkeletalMesh*                    Mesh                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LodIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SectionIndex                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ExpectedImportedMaterialSlotName                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInterchangeTestFunctionResult   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInterchangeTestFunctionResult USkeletalMeshImportTestFunctions::CheckSectionImportedMaterialSlotName(class USkeletalMesh* Mesh, int32 LodIndex, int32 SectionIndex, const class FString& ExpectedImportedMaterialSlotName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SkeletalMeshImportTestFunctions", "CheckSectionImportedMaterialSlotName");

	Params::SkeletalMeshImportTestFunctions_CheckSectionImportedMaterialSlotName Parms{};

	Parms.Mesh = Mesh;
	Parms.LodIndex = LodIndex;
	Parms.SectionIndex = SectionIndex;
	Parms.ExpectedImportedMaterialSlotName = std::move(ExpectedImportedMaterialSlotName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeTests.SkeletalMeshImportTestFunctions.CheckSectionMaterialName
// (Final, Exec, Native, Static, Public)
// Parameters:
// class USkeletalMesh*                    Mesh                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LodIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SectionIndex                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ExpectedMaterialName                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInterchangeTestFunctionResult   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInterchangeTestFunctionResult USkeletalMeshImportTestFunctions::CheckSectionMaterialName(class USkeletalMesh* Mesh, int32 LodIndex, int32 SectionIndex, const class FString& ExpectedMaterialName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SkeletalMeshImportTestFunctions", "CheckSectionMaterialName");

	Params::SkeletalMeshImportTestFunctions_CheckSectionMaterialName Parms{};

	Parms.Mesh = Mesh;
	Parms.LodIndex = LodIndex;
	Parms.SectionIndex = SectionIndex;
	Parms.ExpectedMaterialName = std::move(ExpectedMaterialName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeTests.SkeletalMeshImportTestFunctions.CheckSkinnedVertexCountForBone
// (Final, Exec, Native, Static, Public)
// Parameters:
// class USkeletalMesh*                    Mesh                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           BoneName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bTestFirstAlternateProfile                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ExpectedSkinnedVertexCount                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInterchangeTestFunctionResult   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInterchangeTestFunctionResult USkeletalMeshImportTestFunctions::CheckSkinnedVertexCountForBone(class USkeletalMesh* Mesh, const class FString& BoneName, bool bTestFirstAlternateProfile, int32 ExpectedSkinnedVertexCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SkeletalMeshImportTestFunctions", "CheckSkinnedVertexCountForBone");

	Params::SkeletalMeshImportTestFunctions_CheckSkinnedVertexCountForBone Parms{};

	Parms.Mesh = Mesh;
	Parms.BoneName = std::move(BoneName);
	Parms.bTestFirstAlternateProfile = bTestFirstAlternateProfile;
	Parms.ExpectedSkinnedVertexCount = ExpectedSkinnedVertexCount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeTests.SkeletalMeshImportTestFunctions.CheckTriangleCountInSection
// (Final, Exec, Native, Static, Public)
// Parameters:
// class USkeletalMesh*                    Mesh                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LodIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SectionIndex                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ExpectedNumberOfTriangles                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInterchangeTestFunctionResult   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInterchangeTestFunctionResult USkeletalMeshImportTestFunctions::CheckTriangleCountInSection(class USkeletalMesh* Mesh, int32 LodIndex, int32 SectionIndex, int32 ExpectedNumberOfTriangles)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SkeletalMeshImportTestFunctions", "CheckTriangleCountInSection");

	Params::SkeletalMeshImportTestFunctions_CheckTriangleCountInSection Parms{};

	Parms.Mesh = Mesh;
	Parms.LodIndex = LodIndex;
	Parms.SectionIndex = SectionIndex;
	Parms.ExpectedNumberOfTriangles = ExpectedNumberOfTriangles;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeTests.SkeletalMeshImportTestFunctions.CheckUVChannelCount
// (Final, Exec, Native, Static, Public)
// Parameters:
// class USkeletalMesh*                    Mesh                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LodIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ExpectedNumberOfUVChannels                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInterchangeTestFunctionResult   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInterchangeTestFunctionResult USkeletalMeshImportTestFunctions::CheckUVChannelCount(class USkeletalMesh* Mesh, int32 LodIndex, int32 ExpectedNumberOfUVChannels)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SkeletalMeshImportTestFunctions", "CheckUVChannelCount");

	Params::SkeletalMeshImportTestFunctions_CheckUVChannelCount Parms{};

	Parms.Mesh = Mesh;
	Parms.LodIndex = LodIndex;
	Parms.ExpectedNumberOfUVChannels = ExpectedNumberOfUVChannels;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeTests.SkeletalMeshImportTestFunctions.CheckVertexIndexNormal
// (Final, Exec, Native, Static, Public, HasOutParams, HasDefaults)
// Parameters:
// class USkeletalMesh*                    Mesh                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LodIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   VertexIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ExpectedVertexNormal                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInterchangeTestFunctionResult   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInterchangeTestFunctionResult USkeletalMeshImportTestFunctions::CheckVertexIndexNormal(class USkeletalMesh* Mesh, int32 LodIndex, int32 VertexIndex, const struct FVector& ExpectedVertexNormal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SkeletalMeshImportTestFunctions", "CheckVertexIndexNormal");

	Params::SkeletalMeshImportTestFunctions_CheckVertexIndexNormal Parms{};

	Parms.Mesh = Mesh;
	Parms.LodIndex = LodIndex;
	Parms.VertexIndex = VertexIndex;
	Parms.ExpectedVertexNormal = std::move(ExpectedVertexNormal);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeTests.SkeletalMeshImportTestFunctions.CheckVertexIndexPosition
// (Final, Exec, Native, Static, Public, HasOutParams, HasDefaults)
// Parameters:
// class USkeletalMesh*                    Mesh                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LodIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   VertexIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ExpectedVertexPosition                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInterchangeTestFunctionResult   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInterchangeTestFunctionResult USkeletalMeshImportTestFunctions::CheckVertexIndexPosition(class USkeletalMesh* Mesh, int32 LodIndex, int32 VertexIndex, const struct FVector& ExpectedVertexPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SkeletalMeshImportTestFunctions", "CheckVertexIndexPosition");

	Params::SkeletalMeshImportTestFunctions_CheckVertexIndexPosition Parms{};

	Parms.Mesh = Mesh;
	Parms.LodIndex = LodIndex;
	Parms.VertexIndex = VertexIndex;
	Parms.ExpectedVertexPosition = std::move(ExpectedVertexPosition);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeTests.StaticMeshImportTestFunctions.CheckAgainstGroundTruth
// (Final, Exec, Native, Static, Public)
// Parameters:
// class UStaticMesh*                      Mesh                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSoftObjectPtr<class UStaticMesh>       MeshToCompare                                          (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bCheckVertexCountEqual                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bCheckTriangleCountEqual                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bCheckUVChannelCountEqual                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bCheckCollisionPrimitiveCountEqual                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bCheckVertexPositionsEqual                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bCheckNormalsEqual                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInterchangeTestFunctionResult   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInterchangeTestFunctionResult UStaticMeshImportTestFunctions::CheckAgainstGroundTruth(class UStaticMesh* Mesh, TSoftObjectPtr<class UStaticMesh> MeshToCompare, bool bCheckVertexCountEqual, bool bCheckTriangleCountEqual, bool bCheckUVChannelCountEqual, bool bCheckCollisionPrimitiveCountEqual, bool bCheckVertexPositionsEqual, bool bCheckNormalsEqual)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StaticMeshImportTestFunctions", "CheckAgainstGroundTruth");

	Params::StaticMeshImportTestFunctions_CheckAgainstGroundTruth Parms{};

	Parms.Mesh = Mesh;
	Parms.MeshToCompare = MeshToCompare;
	Parms.bCheckVertexCountEqual = bCheckVertexCountEqual;
	Parms.bCheckTriangleCountEqual = bCheckTriangleCountEqual;
	Parms.bCheckUVChannelCountEqual = bCheckUVChannelCountEqual;
	Parms.bCheckCollisionPrimitiveCountEqual = bCheckCollisionPrimitiveCountEqual;
	Parms.bCheckVertexPositionsEqual = bCheckVertexPositionsEqual;
	Parms.bCheckNormalsEqual = bCheckNormalsEqual;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeTests.StaticMeshImportTestFunctions.CheckBoundingBoxSize
// (Final, Exec, Native, Static, Public, HasDefaults)
// Parameters:
// class UStaticMesh*                      Mesh                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector3f                        ExpectedSize                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInterchangeTestFunctionResult   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInterchangeTestFunctionResult UStaticMeshImportTestFunctions::CheckBoundingBoxSize(class UStaticMesh* Mesh, const struct FVector3f& ExpectedSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StaticMeshImportTestFunctions", "CheckBoundingBoxSize");

	Params::StaticMeshImportTestFunctions_CheckBoundingBoxSize Parms{};

	Parms.Mesh = Mesh;
	Parms.ExpectedSize = std::move(ExpectedSize);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeTests.StaticMeshImportTestFunctions.CheckBoundingBoxSizeGreaterThan
// (Final, Exec, Native, Static, Public, HasDefaults)
// Parameters:
// class UStaticMesh*                      Mesh                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector3f                        GreaterThanSize                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInterchangeTestFunctionResult   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInterchangeTestFunctionResult UStaticMeshImportTestFunctions::CheckBoundingBoxSizeGreaterThan(class UStaticMesh* Mesh, const struct FVector3f& GreaterThanSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StaticMeshImportTestFunctions", "CheckBoundingBoxSizeGreaterThan");

	Params::StaticMeshImportTestFunctions_CheckBoundingBoxSizeGreaterThan Parms{};

	Parms.Mesh = Mesh;
	Parms.GreaterThanSize = std::move(GreaterThanSize);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeTests.StaticMeshImportTestFunctions.CheckBoundingBoxSizeLessThan
// (Final, Exec, Native, Static, Public, HasDefaults)
// Parameters:
// class UStaticMesh*                      Mesh                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector3f                        LessThanSize                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInterchangeTestFunctionResult   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInterchangeTestFunctionResult UStaticMeshImportTestFunctions::CheckBoundingBoxSizeLessThan(class UStaticMesh* Mesh, const struct FVector3f& LessThanSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StaticMeshImportTestFunctions", "CheckBoundingBoxSizeLessThan");

	Params::StaticMeshImportTestFunctions_CheckBoundingBoxSizeLessThan Parms{};

	Parms.Mesh = Mesh;
	Parms.LessThanSize = std::move(LessThanSize);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeTests.StaticMeshImportTestFunctions.CheckBuildSettings
// (Final, Exec, Native, Static, Public, HasOutParams)
// Parameters:
// class UStaticMesh*                      Mesh                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LodIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMeshBuildSettings               ExpectedBuildSettings                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FInterchangeTestFunctionResult   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInterchangeTestFunctionResult UStaticMeshImportTestFunctions::CheckBuildSettings(class UStaticMesh* Mesh, int32 LodIndex, const struct FMeshBuildSettings& ExpectedBuildSettings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StaticMeshImportTestFunctions", "CheckBuildSettings");

	Params::StaticMeshImportTestFunctions_CheckBuildSettings Parms{};

	Parms.Mesh = Mesh;
	Parms.LodIndex = LodIndex;
	Parms.ExpectedBuildSettings = std::move(ExpectedBuildSettings);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeTests.StaticMeshImportTestFunctions.CheckImportedMaterialSlotName
// (Final, Exec, Native, Static, Public)
// Parameters:
// class UStaticMesh*                      Mesh                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaterialIndex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ExpectedImportedMaterialSlotName                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInterchangeTestFunctionResult   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInterchangeTestFunctionResult UStaticMeshImportTestFunctions::CheckImportedMaterialSlotName(class UStaticMesh* Mesh, int32 MaterialIndex, const class FString& ExpectedImportedMaterialSlotName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StaticMeshImportTestFunctions", "CheckImportedMaterialSlotName");

	Params::StaticMeshImportTestFunctions_CheckImportedMaterialSlotName Parms{};

	Parms.Mesh = Mesh;
	Parms.MaterialIndex = MaterialIndex;
	Parms.ExpectedImportedMaterialSlotName = std::move(ExpectedImportedMaterialSlotName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeTests.StaticMeshImportTestFunctions.CheckImportedStaticMeshCount
// (Final, Exec, Native, Static, Public, HasOutParams)
// Parameters:
// TArray<class UStaticMesh*>              Meshes                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   ExpectedNumberOfImportedStaticMeshes                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInterchangeTestFunctionResult   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInterchangeTestFunctionResult UStaticMeshImportTestFunctions::CheckImportedStaticMeshCount(const TArray<class UStaticMesh*>& Meshes, int32 ExpectedNumberOfImportedStaticMeshes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StaticMeshImportTestFunctions", "CheckImportedStaticMeshCount");

	Params::StaticMeshImportTestFunctions_CheckImportedStaticMeshCount Parms{};

	Parms.Meshes = std::move(Meshes);
	Parms.ExpectedNumberOfImportedStaticMeshes = ExpectedNumberOfImportedStaticMeshes;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeTests.StaticMeshImportTestFunctions.CheckLodCount
// (Final, Exec, Native, Static, Public)
// Parameters:
// class UStaticMesh*                      Mesh                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ExpectedNumberOfLods                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInterchangeTestFunctionResult   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInterchangeTestFunctionResult UStaticMeshImportTestFunctions::CheckLodCount(class UStaticMesh* Mesh, int32 ExpectedNumberOfLods)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StaticMeshImportTestFunctions", "CheckLodCount");

	Params::StaticMeshImportTestFunctions_CheckLodCount Parms{};

	Parms.Mesh = Mesh;
	Parms.ExpectedNumberOfLods = ExpectedNumberOfLods;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeTests.StaticMeshImportTestFunctions.CheckMaterialSlotCount
// (Final, Exec, Native, Static, Public)
// Parameters:
// class UStaticMesh*                      Mesh                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ExpectedNumberOfMaterialSlots                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInterchangeTestFunctionResult   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInterchangeTestFunctionResult UStaticMeshImportTestFunctions::CheckMaterialSlotCount(class UStaticMesh* Mesh, int32 ExpectedNumberOfMaterialSlots)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StaticMeshImportTestFunctions", "CheckMaterialSlotCount");

	Params::StaticMeshImportTestFunctions_CheckMaterialSlotCount Parms{};

	Parms.Mesh = Mesh;
	Parms.ExpectedNumberOfMaterialSlots = ExpectedNumberOfMaterialSlots;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeTests.StaticMeshImportTestFunctions.CheckNaniteSettings
// (Final, Exec, Native, Static, Public, HasOutParams)
// Parameters:
// class UStaticMesh*                      Mesh                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMeshNaniteSettings              ExpectedNaniteSettings                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FInterchangeTestFunctionResult   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInterchangeTestFunctionResult UStaticMeshImportTestFunctions::CheckNaniteSettings(class UStaticMesh* Mesh, const struct FMeshNaniteSettings& ExpectedNaniteSettings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StaticMeshImportTestFunctions", "CheckNaniteSettings");

	Params::StaticMeshImportTestFunctions_CheckNaniteSettings Parms{};

	Parms.Mesh = Mesh;
	Parms.ExpectedNaniteSettings = std::move(ExpectedNaniteSettings);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeTests.StaticMeshImportTestFunctions.CheckPolygonCount
// (Final, Exec, Native, Static, Public)
// Parameters:
// class UStaticMesh*                      Mesh                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LodIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ExpectedNumberOfPolygons                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInterchangeTestFunctionResult   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInterchangeTestFunctionResult UStaticMeshImportTestFunctions::CheckPolygonCount(class UStaticMesh* Mesh, int32 LodIndex, int32 ExpectedNumberOfPolygons)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StaticMeshImportTestFunctions", "CheckPolygonCount");

	Params::StaticMeshImportTestFunctions_CheckPolygonCount Parms{};

	Parms.Mesh = Mesh;
	Parms.LodIndex = LodIndex;
	Parms.ExpectedNumberOfPolygons = ExpectedNumberOfPolygons;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeTests.StaticMeshImportTestFunctions.CheckPolygonCountInPolygonGroup
// (Final, Exec, Native, Static, Public)
// Parameters:
// class UStaticMesh*                      Mesh                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LodIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PolygonGroupIndex                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ExpectedNumberOfPolygons                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInterchangeTestFunctionResult   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInterchangeTestFunctionResult UStaticMeshImportTestFunctions::CheckPolygonCountInPolygonGroup(class UStaticMesh* Mesh, int32 LodIndex, int32 PolygonGroupIndex, int32 ExpectedNumberOfPolygons)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StaticMeshImportTestFunctions", "CheckPolygonCountInPolygonGroup");

	Params::StaticMeshImportTestFunctions_CheckPolygonCountInPolygonGroup Parms{};

	Parms.Mesh = Mesh;
	Parms.LodIndex = LodIndex;
	Parms.PolygonGroupIndex = PolygonGroupIndex;
	Parms.ExpectedNumberOfPolygons = ExpectedNumberOfPolygons;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeTests.StaticMeshImportTestFunctions.CheckPolygonGroupCount
// (Final, Exec, Native, Static, Public)
// Parameters:
// class UStaticMesh*                      Mesh                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LodIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ExpectedNumberOfPolygonGroups                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInterchangeTestFunctionResult   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInterchangeTestFunctionResult UStaticMeshImportTestFunctions::CheckPolygonGroupCount(class UStaticMesh* Mesh, int32 LodIndex, int32 ExpectedNumberOfPolygonGroups)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StaticMeshImportTestFunctions", "CheckPolygonGroupCount");

	Params::StaticMeshImportTestFunctions_CheckPolygonGroupCount Parms{};

	Parms.Mesh = Mesh;
	Parms.LodIndex = LodIndex;
	Parms.ExpectedNumberOfPolygonGroups = ExpectedNumberOfPolygonGroups;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeTests.StaticMeshImportTestFunctions.CheckPolygonGroupImportedMaterialSlotName
// (Final, Exec, Native, Static, Public)
// Parameters:
// class UStaticMesh*                      Mesh                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LodIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PolygonGroupIndex                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ExpectedImportedMaterialSlotName                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInterchangeTestFunctionResult   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInterchangeTestFunctionResult UStaticMeshImportTestFunctions::CheckPolygonGroupImportedMaterialSlotName(class UStaticMesh* Mesh, int32 LodIndex, int32 PolygonGroupIndex, const class FString& ExpectedImportedMaterialSlotName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StaticMeshImportTestFunctions", "CheckPolygonGroupImportedMaterialSlotName");

	Params::StaticMeshImportTestFunctions_CheckPolygonGroupImportedMaterialSlotName Parms{};

	Parms.Mesh = Mesh;
	Parms.LodIndex = LodIndex;
	Parms.PolygonGroupIndex = PolygonGroupIndex;
	Parms.ExpectedImportedMaterialSlotName = std::move(ExpectedImportedMaterialSlotName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeTests.StaticMeshImportTestFunctions.CheckRenderHasVertexColors
// (Final, Exec, Native, Static, Public)
// Parameters:
// class UStaticMesh*                      Mesh                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LodIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bExpectedHasVertexColors                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInterchangeTestFunctionResult   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInterchangeTestFunctionResult UStaticMeshImportTestFunctions::CheckRenderHasVertexColors(class UStaticMesh* Mesh, int32 LodIndex, bool bExpectedHasVertexColors)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StaticMeshImportTestFunctions", "CheckRenderHasVertexColors");

	Params::StaticMeshImportTestFunctions_CheckRenderHasVertexColors Parms{};

	Parms.Mesh = Mesh;
	Parms.LodIndex = LodIndex;
	Parms.bExpectedHasVertexColors = bExpectedHasVertexColors;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeTests.StaticMeshImportTestFunctions.CheckRenderTriangleCount
// (Final, Exec, Native, Static, Public)
// Parameters:
// class UStaticMesh*                      Mesh                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LodIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ExpectedTotalNumberOfTriangles                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInterchangeTestFunctionResult   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInterchangeTestFunctionResult UStaticMeshImportTestFunctions::CheckRenderTriangleCount(class UStaticMesh* Mesh, int32 LodIndex, int32 ExpectedTotalNumberOfTriangles)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StaticMeshImportTestFunctions", "CheckRenderTriangleCount");

	Params::StaticMeshImportTestFunctions_CheckRenderTriangleCount Parms{};

	Parms.Mesh = Mesh;
	Parms.LodIndex = LodIndex;
	Parms.ExpectedTotalNumberOfTriangles = ExpectedTotalNumberOfTriangles;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeTests.StaticMeshImportTestFunctions.CheckRenderUVChannelCount
// (Final, Exec, Native, Static, Public)
// Parameters:
// class UStaticMesh*                      Mesh                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LodIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ExpectedNumberOfUVChannels                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInterchangeTestFunctionResult   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInterchangeTestFunctionResult UStaticMeshImportTestFunctions::CheckRenderUVChannelCount(class UStaticMesh* Mesh, int32 LodIndex, int32 ExpectedNumberOfUVChannels)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StaticMeshImportTestFunctions", "CheckRenderUVChannelCount");

	Params::StaticMeshImportTestFunctions_CheckRenderUVChannelCount Parms{};

	Parms.Mesh = Mesh;
	Parms.LodIndex = LodIndex;
	Parms.ExpectedNumberOfUVChannels = ExpectedNumberOfUVChannels;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeTests.StaticMeshImportTestFunctions.CheckRenderVertexCount
// (Final, Exec, Native, Static, Public)
// Parameters:
// class UStaticMesh*                      Mesh                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LodIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ExpectedNumberOfRenderVertices                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInterchangeTestFunctionResult   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInterchangeTestFunctionResult UStaticMeshImportTestFunctions::CheckRenderVertexCount(class UStaticMesh* Mesh, int32 LodIndex, int32 ExpectedNumberOfRenderVertices)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StaticMeshImportTestFunctions", "CheckRenderVertexCount");

	Params::StaticMeshImportTestFunctions_CheckRenderVertexCount Parms{};

	Parms.Mesh = Mesh;
	Parms.LodIndex = LodIndex;
	Parms.ExpectedNumberOfRenderVertices = ExpectedNumberOfRenderVertices;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeTests.StaticMeshImportTestFunctions.CheckRenderVertexIndexColor
// (Final, Exec, Native, Static, Public, HasOutParams, HasDefaults)
// Parameters:
// class UStaticMesh*                      Mesh                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LodIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   VertexIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           ExpectedVertexColor                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInterchangeTestFunctionResult   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInterchangeTestFunctionResult UStaticMeshImportTestFunctions::CheckRenderVertexIndexColor(class UStaticMesh* Mesh, int32 LodIndex, int32 VertexIndex, const struct FColor& ExpectedVertexColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StaticMeshImportTestFunctions", "CheckRenderVertexIndexColor");

	Params::StaticMeshImportTestFunctions_CheckRenderVertexIndexColor Parms{};

	Parms.Mesh = Mesh;
	Parms.LodIndex = LodIndex;
	Parms.VertexIndex = VertexIndex;
	Parms.ExpectedVertexColor = std::move(ExpectedVertexColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeTests.StaticMeshImportTestFunctions.CheckRenderVertexIndexNormal
// (Final, Exec, Native, Static, Public, HasOutParams, HasDefaults)
// Parameters:
// class UStaticMesh*                      Mesh                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LodIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   VertexIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector4f                        ExpectedVertexNormal                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInterchangeTestFunctionResult   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInterchangeTestFunctionResult UStaticMeshImportTestFunctions::CheckRenderVertexIndexNormal(class UStaticMesh* Mesh, int32 LodIndex, int32 VertexIndex, const struct FVector4f& ExpectedVertexNormal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StaticMeshImportTestFunctions", "CheckRenderVertexIndexNormal");

	Params::StaticMeshImportTestFunctions_CheckRenderVertexIndexNormal Parms{};

	Parms.Mesh = Mesh;
	Parms.LodIndex = LodIndex;
	Parms.VertexIndex = VertexIndex;
	Parms.ExpectedVertexNormal = std::move(ExpectedVertexNormal);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeTests.StaticMeshImportTestFunctions.CheckSectionCount
// (Final, Exec, Native, Static, Public)
// Parameters:
// class UStaticMesh*                      Mesh                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LodIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ExpectedNumberOfSections                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInterchangeTestFunctionResult   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInterchangeTestFunctionResult UStaticMeshImportTestFunctions::CheckSectionCount(class UStaticMesh* Mesh, int32 LodIndex, int32 ExpectedNumberOfSections)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StaticMeshImportTestFunctions", "CheckSectionCount");

	Params::StaticMeshImportTestFunctions_CheckSectionCount Parms{};

	Parms.Mesh = Mesh;
	Parms.LodIndex = LodIndex;
	Parms.ExpectedNumberOfSections = ExpectedNumberOfSections;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeTests.StaticMeshImportTestFunctions.CheckSectionImportedMaterialSlotName
// (Final, Exec, Native, Static, Public)
// Parameters:
// class UStaticMesh*                      Mesh                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LodIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SectionIndex                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ExpectedImportedMaterialSlotName                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInterchangeTestFunctionResult   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInterchangeTestFunctionResult UStaticMeshImportTestFunctions::CheckSectionImportedMaterialSlotName(class UStaticMesh* Mesh, int32 LodIndex, int32 SectionIndex, const class FString& ExpectedImportedMaterialSlotName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StaticMeshImportTestFunctions", "CheckSectionImportedMaterialSlotName");

	Params::StaticMeshImportTestFunctions_CheckSectionImportedMaterialSlotName Parms{};

	Parms.Mesh = Mesh;
	Parms.LodIndex = LodIndex;
	Parms.SectionIndex = SectionIndex;
	Parms.ExpectedImportedMaterialSlotName = std::move(ExpectedImportedMaterialSlotName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeTests.StaticMeshImportTestFunctions.CheckSectionMaterialIndex
// (Final, Exec, Native, Static, Public)
// Parameters:
// class UStaticMesh*                      Mesh                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LodIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SectionIndex                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ExpectedMaterialIndex                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInterchangeTestFunctionResult   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInterchangeTestFunctionResult UStaticMeshImportTestFunctions::CheckSectionMaterialIndex(class UStaticMesh* Mesh, int32 LodIndex, int32 SectionIndex, int32 ExpectedMaterialIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StaticMeshImportTestFunctions", "CheckSectionMaterialIndex");

	Params::StaticMeshImportTestFunctions_CheckSectionMaterialIndex Parms{};

	Parms.Mesh = Mesh;
	Parms.LodIndex = LodIndex;
	Parms.SectionIndex = SectionIndex;
	Parms.ExpectedMaterialIndex = ExpectedMaterialIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeTests.StaticMeshImportTestFunctions.CheckSectionMaterialName
// (Final, Exec, Native, Static, Public)
// Parameters:
// class UStaticMesh*                      Mesh                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LodIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SectionIndex                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ExpectedMaterialName                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInterchangeTestFunctionResult   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInterchangeTestFunctionResult UStaticMeshImportTestFunctions::CheckSectionMaterialName(class UStaticMesh* Mesh, int32 LodIndex, int32 SectionIndex, const class FString& ExpectedMaterialName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StaticMeshImportTestFunctions", "CheckSectionMaterialName");

	Params::StaticMeshImportTestFunctions_CheckSectionMaterialName Parms{};

	Parms.Mesh = Mesh;
	Parms.LodIndex = LodIndex;
	Parms.SectionIndex = SectionIndex;
	Parms.ExpectedMaterialName = std::move(ExpectedMaterialName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeTests.StaticMeshImportTestFunctions.CheckSimpleCollisionPrimitiveCount
// (Final, Exec, Native, Static, Public)
// Parameters:
// class UStaticMesh*                      Mesh                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ExpectedSphereElementCount                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ExpectedBoxElementCount                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ExpectedCapsuleElementCount                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ExpectedConvexElementCount                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ExpectedTaperedCapsuleElementCount                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInterchangeTestFunctionResult   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInterchangeTestFunctionResult UStaticMeshImportTestFunctions::CheckSimpleCollisionPrimitiveCount(class UStaticMesh* Mesh, int32 ExpectedSphereElementCount, int32 ExpectedBoxElementCount, int32 ExpectedCapsuleElementCount, int32 ExpectedConvexElementCount, int32 ExpectedTaperedCapsuleElementCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StaticMeshImportTestFunctions", "CheckSimpleCollisionPrimitiveCount");

	Params::StaticMeshImportTestFunctions_CheckSimpleCollisionPrimitiveCount Parms{};

	Parms.Mesh = Mesh;
	Parms.ExpectedSphereElementCount = ExpectedSphereElementCount;
	Parms.ExpectedBoxElementCount = ExpectedBoxElementCount;
	Parms.ExpectedCapsuleElementCount = ExpectedCapsuleElementCount;
	Parms.ExpectedConvexElementCount = ExpectedConvexElementCount;
	Parms.ExpectedTaperedCapsuleElementCount = ExpectedTaperedCapsuleElementCount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeTests.StaticMeshImportTestFunctions.CheckSocketCount
// (Final, Exec, Native, Static, Public)
// Parameters:
// class UStaticMesh*                      Mesh                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ExpectedSocketCount                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInterchangeTestFunctionResult   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInterchangeTestFunctionResult UStaticMeshImportTestFunctions::CheckSocketCount(class UStaticMesh* Mesh, int32 ExpectedSocketCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StaticMeshImportTestFunctions", "CheckSocketCount");

	Params::StaticMeshImportTestFunctions_CheckSocketCount Parms{};

	Parms.Mesh = Mesh;
	Parms.ExpectedSocketCount = ExpectedSocketCount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeTests.StaticMeshImportTestFunctions.CheckSocketLocation
// (Final, Exec, Native, Static, Public, HasOutParams, HasDefaults)
// Parameters:
// class UStaticMesh*                      Mesh                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SocketIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ExpectedSocketLocation                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInterchangeTestFunctionResult   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInterchangeTestFunctionResult UStaticMeshImportTestFunctions::CheckSocketLocation(class UStaticMesh* Mesh, int32 SocketIndex, const struct FVector& ExpectedSocketLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StaticMeshImportTestFunctions", "CheckSocketLocation");

	Params::StaticMeshImportTestFunctions_CheckSocketLocation Parms{};

	Parms.Mesh = Mesh;
	Parms.SocketIndex = SocketIndex;
	Parms.ExpectedSocketLocation = std::move(ExpectedSocketLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeTests.StaticMeshImportTestFunctions.CheckSocketName
// (Final, Exec, Native, Static, Public)
// Parameters:
// class UStaticMesh*                      Mesh                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SocketIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ExpectedSocketName                                     (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInterchangeTestFunctionResult   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInterchangeTestFunctionResult UStaticMeshImportTestFunctions::CheckSocketName(class UStaticMesh* Mesh, int32 SocketIndex, const class FString& ExpectedSocketName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StaticMeshImportTestFunctions", "CheckSocketName");

	Params::StaticMeshImportTestFunctions_CheckSocketName Parms{};

	Parms.Mesh = Mesh;
	Parms.SocketIndex = SocketIndex;
	Parms.ExpectedSocketName = std::move(ExpectedSocketName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeTests.StaticMeshImportTestFunctions.CheckThatMeshHasQuadsOrNgons
// (Final, Exec, Native, Static, Public)
// Parameters:
// class UStaticMesh*                      Mesh                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LodIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bMeshHasQuadsOrNgons                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInterchangeTestFunctionResult   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInterchangeTestFunctionResult UStaticMeshImportTestFunctions::CheckThatMeshHasQuadsOrNgons(class UStaticMesh* Mesh, int32 LodIndex, bool bMeshHasQuadsOrNgons)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StaticMeshImportTestFunctions", "CheckThatMeshHasQuadsOrNgons");

	Params::StaticMeshImportTestFunctions_CheckThatMeshHasQuadsOrNgons Parms{};

	Parms.Mesh = Mesh;
	Parms.LodIndex = LodIndex;
	Parms.bMeshHasQuadsOrNgons = bMeshHasQuadsOrNgons;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeTests.StaticMeshImportTestFunctions.CheckTriangleCount
// (Final, Exec, Native, Static, Public)
// Parameters:
// class UStaticMesh*                      Mesh                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LodIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ExpectedTotalNumberOfTriangles                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInterchangeTestFunctionResult   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInterchangeTestFunctionResult UStaticMeshImportTestFunctions::CheckTriangleCount(class UStaticMesh* Mesh, int32 LodIndex, int32 ExpectedTotalNumberOfTriangles)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StaticMeshImportTestFunctions", "CheckTriangleCount");

	Params::StaticMeshImportTestFunctions_CheckTriangleCount Parms{};

	Parms.Mesh = Mesh;
	Parms.LodIndex = LodIndex;
	Parms.ExpectedTotalNumberOfTriangles = ExpectedTotalNumberOfTriangles;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeTests.StaticMeshImportTestFunctions.CheckTriangleCountInPolygonGroup
// (Final, Exec, Native, Static, Public)
// Parameters:
// class UStaticMesh*                      Mesh                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LodIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PolygonGroupIndex                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ExpectedNumberOfTriangles                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInterchangeTestFunctionResult   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInterchangeTestFunctionResult UStaticMeshImportTestFunctions::CheckTriangleCountInPolygonGroup(class UStaticMesh* Mesh, int32 LodIndex, int32 PolygonGroupIndex, int32 ExpectedNumberOfTriangles)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StaticMeshImportTestFunctions", "CheckTriangleCountInPolygonGroup");

	Params::StaticMeshImportTestFunctions_CheckTriangleCountInPolygonGroup Parms{};

	Parms.Mesh = Mesh;
	Parms.LodIndex = LodIndex;
	Parms.PolygonGroupIndex = PolygonGroupIndex;
	Parms.ExpectedNumberOfTriangles = ExpectedNumberOfTriangles;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeTests.StaticMeshImportTestFunctions.CheckUVChannelCount
// (Final, Exec, Native, Static, Public)
// Parameters:
// class UStaticMesh*                      Mesh                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LodIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ExpectedNumberOfUVChannels                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInterchangeTestFunctionResult   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInterchangeTestFunctionResult UStaticMeshImportTestFunctions::CheckUVChannelCount(class UStaticMesh* Mesh, int32 LodIndex, int32 ExpectedNumberOfUVChannels)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StaticMeshImportTestFunctions", "CheckUVChannelCount");

	Params::StaticMeshImportTestFunctions_CheckUVChannelCount Parms{};

	Parms.Mesh = Mesh;
	Parms.LodIndex = LodIndex;
	Parms.ExpectedNumberOfUVChannels = ExpectedNumberOfUVChannels;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeTests.StaticMeshImportTestFunctions.CheckVertexCount
// (Final, Exec, Native, Static, Public)
// Parameters:
// class UStaticMesh*                      Mesh                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LodIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ExpectedNumberOfVertices                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInterchangeTestFunctionResult   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInterchangeTestFunctionResult UStaticMeshImportTestFunctions::CheckVertexCount(class UStaticMesh* Mesh, int32 LodIndex, int32 ExpectedNumberOfVertices)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StaticMeshImportTestFunctions", "CheckVertexCount");

	Params::StaticMeshImportTestFunctions_CheckVertexCount Parms{};

	Parms.Mesh = Mesh;
	Parms.LodIndex = LodIndex;
	Parms.ExpectedNumberOfVertices = ExpectedNumberOfVertices;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeTests.StaticMeshImportTestFunctions.CheckVertexIndexPosition
// (Final, Exec, Native, Static, Public, HasOutParams, HasDefaults)
// Parameters:
// class UStaticMesh*                      Mesh                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LodIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   VertexIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ExpectedVertexPosition                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInterchangeTestFunctionResult   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInterchangeTestFunctionResult UStaticMeshImportTestFunctions::CheckVertexIndexPosition(class UStaticMesh* Mesh, int32 LodIndex, int32 VertexIndex, const struct FVector& ExpectedVertexPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StaticMeshImportTestFunctions", "CheckVertexIndexPosition");

	Params::StaticMeshImportTestFunctions_CheckVertexIndexPosition Parms{};

	Parms.Mesh = Mesh;
	Parms.LodIndex = LodIndex;
	Parms.VertexIndex = VertexIndex;
	Parms.ExpectedVertexPosition = std::move(ExpectedVertexPosition);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeTests.TextureImportTestFunctions.CheckImportedTextureCount
// (Final, Exec, Native, Static, Public, HasOutParams)
// Parameters:
// TArray<class UTexture*>                 Textures                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   ExpectedNumberOfImportedTextures                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInterchangeTestFunctionResult   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInterchangeTestFunctionResult UTextureImportTestFunctions::CheckImportedTextureCount(const TArray<class UTexture*>& Textures, int32 ExpectedNumberOfImportedTextures)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TextureImportTestFunctions", "CheckImportedTextureCount");

	Params::TextureImportTestFunctions_CheckImportedTextureCount Parms{};

	Parms.Textures = std::move(Textures);
	Parms.ExpectedNumberOfImportedTextures = ExpectedNumberOfImportedTextures;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeTests.TextureImportTestFunctions.CheckTextureAddressX
// (Final, Exec, Native, Static, Public)
// Parameters:
// class UTexture*                         Texture                                                (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETextureAddress                         ExpectedTextureAddressX                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInterchangeTestFunctionResult   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInterchangeTestFunctionResult UTextureImportTestFunctions::CheckTextureAddressX(const class UTexture* Texture, ETextureAddress ExpectedTextureAddressX)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TextureImportTestFunctions", "CheckTextureAddressX");

	Params::TextureImportTestFunctions_CheckTextureAddressX Parms{};

	Parms.Texture = Texture;
	Parms.ExpectedTextureAddressX = ExpectedTextureAddressX;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeTests.TextureImportTestFunctions.CheckTextureAddressY
// (Final, Exec, Native, Static, Public)
// Parameters:
// class UTexture*                         Texture                                                (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETextureAddress                         ExpectedTextureAddressY                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInterchangeTestFunctionResult   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInterchangeTestFunctionResult UTextureImportTestFunctions::CheckTextureAddressY(const class UTexture* Texture, ETextureAddress ExpectedTextureAddressY)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TextureImportTestFunctions", "CheckTextureAddressY");

	Params::TextureImportTestFunctions_CheckTextureAddressY Parms{};

	Parms.Texture = Texture;
	Parms.ExpectedTextureAddressY = ExpectedTextureAddressY;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeTests.TextureImportTestFunctions.CheckTextureAddressZ
// (Final, Exec, Native, Static, Public)
// Parameters:
// class UTexture*                         Texture                                                (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETextureAddress                         ExpectedTextureAddressZ                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInterchangeTestFunctionResult   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInterchangeTestFunctionResult UTextureImportTestFunctions::CheckTextureAddressZ(const class UTexture* Texture, ETextureAddress ExpectedTextureAddressZ)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TextureImportTestFunctions", "CheckTextureAddressZ");

	Params::TextureImportTestFunctions_CheckTextureAddressZ Parms{};

	Parms.Texture = Texture;
	Parms.ExpectedTextureAddressZ = ExpectedTextureAddressZ;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeTests.TextureImportTestFunctions.CheckTextureFilter
// (Final, Exec, Native, Static, Public)
// Parameters:
// class UTexture*                         Texture                                                (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETextureFilter                          ExpectedTextureFilter                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInterchangeTestFunctionResult   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInterchangeTestFunctionResult UTextureImportTestFunctions::CheckTextureFilter(const class UTexture* Texture, ETextureFilter ExpectedTextureFilter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TextureImportTestFunctions", "CheckTextureFilter");

	Params::TextureImportTestFunctions_CheckTextureFilter Parms{};

	Parms.Texture = Texture;
	Parms.ExpectedTextureFilter = ExpectedTextureFilter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeTests.InterchangeImportTestPlan.RunThisTest
// (Final, Native, Public, BlueprintCallable)

void UInterchangeImportTestPlan::RunThisTest()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterchangeImportTestPlan", "RunThisTest");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}

}

