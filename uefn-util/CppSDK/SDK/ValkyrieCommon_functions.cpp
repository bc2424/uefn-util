#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ValkyrieCommon

#include "Basic.hpp"

#include "ValkyrieCommon_classes.hpp"
#include "ValkyrieCommon_parameters.hpp"


namespace SDK
{

// Function ValkyrieCommon.ValkyrieBeaconClient.AddPrewarmCompatibilityVersion
// (Final, Net, NetReliable, Native, Event, Private, NetServer)
// Parameters:
// class FString                           ClientVersion                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AValkyrieBeaconClient::AddPrewarmCompatibilityVersion(const class FString& ClientVersion)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ValkyrieBeaconClient", "AddPrewarmCompatibilityVersion");

	Params::ValkyrieBeaconClient_AddPrewarmCompatibilityVersion Parms{};

	Parms.ClientVersion = std::move(ClientVersion);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ValkyrieCommon.ValkyrieBeaconClient.ClientDisallowedLiveEditTransactionEncountered
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// bool                                    bSuppressLiveEdit                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AValkyrieBeaconClient::ClientDisallowedLiveEditTransactionEncountered(bool bSuppressLiveEdit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ValkyrieBeaconClient", "ClientDisallowedLiveEditTransactionEncountered");

	Params::ValkyrieBeaconClient_ClientDisallowedLiveEditTransactionEncountered Parms{};

	Parms.bSuppressLiveEdit = bSuppressLiveEdit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ValkyrieCommon.ValkyrieBeaconClient.ClientHandleCookFailure
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// class FString                           CookJobId                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AValkyrieBeaconClient::ClientHandleCookFailure(const class FString& CookJobId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ValkyrieBeaconClient", "ClientHandleCookFailure");

	Params::ValkyrieBeaconClient_ClientHandleCookFailure Parms{};

	Parms.CookJobId = std::move(CookJobId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ValkyrieCommon.ValkyrieBeaconClient.ClientHandleError
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// class FText                             ErrorMessage                                           (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)

void AValkyrieBeaconClient::ClientHandleError(const class FText& ErrorMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ValkyrieBeaconClient", "ClientHandleError");

	Params::ValkyrieBeaconClient_ClientHandleError Parms{};

	Parms.ErrorMessage = std::move(ErrorMessage);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ValkyrieCommon.ValkyrieBeaconClient.ClientHandleTransactionFinalizedEvent
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// struct FConcertTransactionFinalizedEventEvent                                                  (Parm, NativeAccessSpecifierPublic)

void AValkyrieBeaconClient::ClientHandleTransactionFinalizedEvent(const struct FConcertTransactionFinalizedEvent& Event)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ValkyrieBeaconClient", "ClientHandleTransactionFinalizedEvent");

	Params::ValkyrieBeaconClient_ClientHandleTransactionFinalizedEvent Parms{};

	Parms.Event = std::move(Event);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ValkyrieCommon.ValkyrieBeaconClient.ClientHandleVerseDiagnostics
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// struct FVerseUploadDiagnostics          Diagnostics                                            (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bOpenMessageLog                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AValkyrieBeaconClient::ClientHandleVerseDiagnostics(const struct FVerseUploadDiagnostics& Diagnostics, const bool bOpenMessageLog)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ValkyrieBeaconClient", "ClientHandleVerseDiagnostics");

	Params::ValkyrieBeaconClient_ClientHandleVerseDiagnostics Parms{};

	Parms.Diagnostics = std::move(Diagnostics);
	Parms.bOpenMessageLog = bOpenMessageLog;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ValkyrieCommon.ValkyrieBeaconClient.ClientLogSummaryMessage
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// class FString                           LogMessage                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AValkyrieBeaconClient::ClientLogSummaryMessage(const class FString& LogMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ValkyrieBeaconClient", "ClientLogSummaryMessage");

	Params::ValkyrieBeaconClient_ClientLogSummaryMessage Parms{};

	Parms.LogMessage = std::move(LogMessage);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ValkyrieCommon.ValkyrieBeaconClient.ClientNotifyOfServerScriptDiagnosticMessage
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// struct FScriptDiagnosticMessage         Message                                                (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)

void AValkyrieBeaconClient::ClientNotifyOfServerScriptDiagnosticMessage(const struct FScriptDiagnosticMessage& Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ValkyrieBeaconClient", "ClientNotifyOfServerScriptDiagnosticMessage");

	Params::ValkyrieBeaconClient_ClientNotifyOfServerScriptDiagnosticMessage Parms{};

	Parms.Message = std::move(Message);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ValkyrieCommon.ValkyrieBeaconClient.ClientNotifyOfServerShutdown
// (Net, NetReliable, Native, Event, Public, NetClient)

void AValkyrieBeaconClient::ClientNotifyOfServerShutdown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ValkyrieBeaconClient", "ClientNotifyOfServerShutdown");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function ValkyrieCommon.ValkyrieBeaconClient.ClientNotifyOfServerUnrecoverableErrorMessage
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// struct FOnUnrecoverableErrorMessage     Message                                                (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)

void AValkyrieBeaconClient::ClientNotifyOfServerUnrecoverableErrorMessage(const struct FOnUnrecoverableErrorMessage& Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ValkyrieBeaconClient", "ClientNotifyOfServerUnrecoverableErrorMessage");

	Params::ValkyrieBeaconClient_ClientNotifyOfServerUnrecoverableErrorMessage Parms{};

	Parms.Message = std::move(Message);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ValkyrieCommon.ValkyrieBeaconClient.ClientNotifyOfServerVerseRuntimeErrorMessage
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// class FText                             ErrorMessage                                           (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)

void AValkyrieBeaconClient::ClientNotifyOfServerVerseRuntimeErrorMessage(const class FText& ErrorMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ValkyrieBeaconClient", "ClientNotifyOfServerVerseRuntimeErrorMessage");

	Params::ValkyrieBeaconClient_ClientNotifyOfServerVerseRuntimeErrorMessage Parms{};

	Parms.ErrorMessage = std::move(ErrorMessage);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ValkyrieCommon.ValkyrieBeaconClient.ClientProcessDebugMessage
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// struct FSolarisDebugMessage             Message                                                (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)

void AValkyrieBeaconClient::ClientProcessDebugMessage(const struct FSolarisDebugMessage& Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ValkyrieBeaconClient", "ClientProcessDebugMessage");

	Params::ValkyrieBeaconClient_ClientProcessDebugMessage Parms{};

	Parms.Message = std::move(Message);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ValkyrieCommon.ValkyrieBeaconClient.ClientUpdateContentUpdateState
// (Final, Net, NetReliable, Native, Event, Private, NetClient)
// Parameters:
// EContentUpdateState                     NewContentUpdateState                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AValkyrieBeaconClient::ClientUpdateContentUpdateState(const EContentUpdateState NewContentUpdateState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ValkyrieBeaconClient", "ClientUpdateContentUpdateState");

	Params::ValkyrieBeaconClient_ClientUpdateContentUpdateState Parms{};

	Parms.NewContentUpdateState = NewContentUpdateState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ValkyrieCommon.ValkyrieBeaconClient.ClientVerseUploadComplete
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// class FString                           InSnapshotId                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EVerseUploadState                       Result                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVerseUploadDiagnostics          Diagnostics                                            (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)

void AValkyrieBeaconClient::ClientVerseUploadComplete(const class FString& InSnapshotId, const EVerseUploadState Result, const struct FVerseUploadDiagnostics& Diagnostics)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ValkyrieBeaconClient", "ClientVerseUploadComplete");

	Params::ValkyrieBeaconClient_ClientVerseUploadComplete Parms{};

	Parms.InSnapshotId = std::move(InSnapshotId);
	Parms.Result = Result;
	Parms.Diagnostics = std::move(Diagnostics);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ValkyrieCommon.ValkyrieBeaconClient.HandleVkCheatConsoleCommand
// (Final, Native, Private, HasOutParams)
// Parameters:
// TArray<class FString>                   Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void AValkyrieBeaconClient::HandleVkCheatConsoleCommand(const TArray<class FString>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ValkyrieBeaconClient", "HandleVkCheatConsoleCommand");

	Params::ValkyrieBeaconClient_HandleVkCheatConsoleCommand Parms{};

	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ValkyrieCommon.ValkyrieBeaconClient.ServerContentUpdated
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// class FString                           ProjectId                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Snapshot                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FVkModuleVersion>         Modules_Legacy                                         (ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void AValkyrieBeaconClient::ServerContentUpdated(const class FString& ProjectId, const class FString& Snapshot, const TArray<struct FVkModuleVersion>& Modules_Legacy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ValkyrieBeaconClient", "ServerContentUpdated");

	Params::ValkyrieBeaconClient_ServerContentUpdated Parms{};

	Parms.ProjectId = std::move(ProjectId);
	Parms.Snapshot = std::move(Snapshot);
	Parms.Modules_Legacy = std::move(Modules_Legacy);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ValkyrieCommon.ValkyrieBeaconClient.ServerOnContentBeaconHostError
// (Final, Net, NetReliable, Native, Event, Private, NetServer)
// Parameters:
// struct FContentBeaconError              ContentBeaconError                                     (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)

void AValkyrieBeaconClient::ServerOnContentBeaconHostError(const struct FContentBeaconError& ContentBeaconError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ValkyrieBeaconClient", "ServerOnContentBeaconHostError");

	Params::ValkyrieBeaconClient_ServerOnContentBeaconHostError Parms{};

	Parms.ContentBeaconError = std::move(ContentBeaconError);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ValkyrieCommon.ValkyrieBeaconClient.ServerProcessDebugMessage
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// struct FSolarisDebugMessage             Message                                                (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)

void AValkyrieBeaconClient::ServerProcessDebugMessage(const struct FSolarisDebugMessage& Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ValkyrieBeaconClient", "ServerProcessDebugMessage");

	Params::ValkyrieBeaconClient_ServerProcessDebugMessage Parms{};

	Parms.Message = std::move(Message);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ValkyrieCommon.ValkyrieBeaconClient.ServerRefreshMemoryTracker
// (Net, NetReliable, Native, Event, Public, NetServer)

void AValkyrieBeaconClient::ServerRefreshMemoryTracker()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ValkyrieBeaconClient", "ServerRefreshMemoryTracker");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function ValkyrieCommon.ValkyrieBeaconClient.ServerRespawnAllPlayers
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)

void AValkyrieBeaconClient::ServerRespawnAllPlayers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ValkyrieBeaconClient", "ServerRespawnAllPlayers");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function ValkyrieCommon.ValkyrieBeaconClient.ServerSendGameFlowMessage
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// class FString                           Message                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EVkEditStatus                           VkEditStatus                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AValkyrieBeaconClient::ServerSendGameFlowMessage(const class FString& Message, const EVkEditStatus VkEditStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ValkyrieBeaconClient", "ServerSendGameFlowMessage");

	Params::ValkyrieBeaconClient_ServerSendGameFlowMessage Parms{};

	Parms.Message = std::move(Message);
	Parms.VkEditStatus = VkEditStatus;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ValkyrieCommon.ValkyrieBeaconClient.ServerSetExperimentalContentFilter
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// bool                                    bFilter                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AValkyrieBeaconClient::ServerSetExperimentalContentFilter(bool bFilter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ValkyrieBeaconClient", "ServerSetExperimentalContentFilter");

	Params::ValkyrieBeaconClient_ServerSetExperimentalContentFilter Parms{};

	Parms.bFilter = bFilter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ValkyrieCommon.ValkyrieBeaconClient.ServerSetPersistenceBehaviorOverride
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// EMinigameDevelopmentPersistenceBehavior InPersistenceBehaviorOverride                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AValkyrieBeaconClient::ServerSetPersistenceBehaviorOverride(EMinigameDevelopmentPersistenceBehavior InPersistenceBehaviorOverride)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ValkyrieBeaconClient", "ServerSetPersistenceBehaviorOverride");

	Params::ValkyrieBeaconClient_ServerSetPersistenceBehaviorOverride Parms{};

	Parms.InPersistenceBehaviorOverride = InPersistenceBehaviorOverride;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ValkyrieCommon.ValkyrieBeaconClient.ServerSetPublishingMemoryLimit
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// int32                                   PublishingMemoryLimit                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AValkyrieBeaconClient::ServerSetPublishingMemoryLimit(int32 PublishingMemoryLimit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ValkyrieBeaconClient", "ServerSetPublishingMemoryLimit");

	Params::ValkyrieBeaconClient_ServerSetPublishingMemoryLimit Parms{};

	Parms.PublishingMemoryLimit = PublishingMemoryLimit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ValkyrieCommon.ValkyrieBeaconClient.ServerSetUseLiveEditProxyActors
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AValkyrieBeaconClient::ServerSetUseLiveEditProxyActors(bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ValkyrieBeaconClient", "ServerSetUseLiveEditProxyActors");

	Params::ValkyrieBeaconClient_ServerSetUseLiveEditProxyActors Parms{};

	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ValkyrieCommon.ValkyrieBeaconClient.ServerStartGame
// (Net, NetReliable, Native, Event, Public, NetServer)

void AValkyrieBeaconClient::ServerStartGame()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ValkyrieBeaconClient", "ServerStartGame");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function ValkyrieCommon.ValkyrieBeaconClient.ServerStartMemorySampling
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// struct FOnlineLinkId                    LinkCode                                               (ConstParm, Parm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AValkyrieBeaconClient::ServerStartMemorySampling(const struct FOnlineLinkId& LinkCode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ValkyrieBeaconClient", "ServerStartMemorySampling");

	Params::ValkyrieBeaconClient_ServerStartMemorySampling Parms{};

	Parms.LinkCode = std::move(LinkCode);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ValkyrieCommon.ValkyrieBeaconClient.ServerStopGame
// (Net, NetReliable, Native, Event, Public, NetServer)

void AValkyrieBeaconClient::ServerStopGame()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ValkyrieBeaconClient", "ServerStopGame");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function ValkyrieCommon.ValkyrieBeaconClient.ServerSubmitConnectedClientLogs
// (Net, NetReliable, Native, Event, Public, NetServer, HasDefaults)
// Parameters:
// struct FGuid                            ParentReportId                                         (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AValkyrieBeaconClient::ServerSubmitConnectedClientLogs(const struct FGuid& ParentReportId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ValkyrieBeaconClient", "ServerSubmitConnectedClientLogs");

	Params::ValkyrieBeaconClient_ServerSubmitConnectedClientLogs Parms{};

	Parms.ParentReportId = std::move(ParentReportId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ValkyrieCommon.ValkyrieBeaconClient.ServerTeleportPlayer
// (Net, NetReliable, Native, Event, Public, NetServer, HasDefaults)
// Parameters:
// uint32                                  i                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Location                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         Rotation                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void AValkyrieBeaconClient::ServerTeleportPlayer(uint32 i, const struct FVector& Location, const struct FRotator& Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ValkyrieBeaconClient", "ServerTeleportPlayer");

	Params::ValkyrieBeaconClient_ServerTeleportPlayer Parms{};

	Parms.i = i;
	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ValkyrieCommon.ValkyrieBeaconClient.ServerVkCheatMessage
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// struct FVerseGameplayStringDebugMessage Message                                                (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)

void AValkyrieBeaconClient::ServerVkCheatMessage(const struct FVerseGameplayStringDebugMessage& Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ValkyrieBeaconClient", "ServerVkCheatMessage");

	Params::ValkyrieBeaconClient_ServerVkCheatMessage Parms{};

	Parms.Message = std::move(Message);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

