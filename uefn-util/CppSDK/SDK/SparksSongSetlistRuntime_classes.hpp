#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SparksSongSetlistRuntime

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"
#include "SparksSongSetlistRuntime_structs.hpp"
#include "PlayspaceSystem_classes.hpp"


namespace SDK
{

// Class SparksSongSetlistRuntime.SparksCustomSetlist
// 0x0028 (0x0100 - 0x00D8)
class USparksCustomSetlist final : public UPlayspaceComponent
{
public:
	uint8                                         Pad_D8[0x8];                                       // 0x00D8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class USparksCustomSetlist* Setlist)> OnSetlistChanged;                                  // 0x00E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<struct FSparksCustomSetlistEntry>      SetlistEntries;                                    // 0x00F0(0x0010)(Net, ZeroConstructor, RepNotify, Protected, NativeAccessSpecifierProtected)

public:
	void OnRep_SetlistEntries();
	void ServerAddSongForPlayer(const class FName& SongShortName, class APlayerState* Player);
	void ServerRemoveAllSongs();
	void ServerRemoveAllSongsForPlayer(class APlayerState* Player);
	void ServerRemoveSongAtIndex(const int32 Index_0, const class FName& SongShortName, class APlayerState* Player);
	void ServerRemoveSongForPlayer(const class FName& SongShortName, class APlayerState* Player, bool bRemoveAll);

	bool CanAddSongForPlayer(const class FName& SongShortName, class APlayerState* Player, struct FGameplayTag* OutReason, class APlayerState** OutAddedByPlayer) const;
	void FindEntriesForPlayer(class APlayerState* Player, TArray<int32>* OutMatchingEntryIndicies) const;
	void FindEntriesForSong(const class FName& SongShortName, TArray<int32>* OutMatchingEntryIndicies) const;
	void FindEntriesForSongAndPlayer(const class FName& SongShortName, class APlayerState* Player, TArray<int32>* OutMatchingEntryIndicies) const;
	void GetRelevantParticipants(TArray<class AFortPlayerController*>* OutPlayers) const;
	void GetSetlistEntryAtIndex(const int32 Index_0, class FName* OutSongShortName, class APlayerState** OutAddedByPlayer) const;
	TArray<class FName> GetSongsAddedByPlayer(class APlayerState* Player) const;
	bool HasAnyoneAddedSong(const class FName& SongShortName, class APlayerState** OutAddedByPlayer) const;
	bool HasPlayerAddedSong(const class FName& SongShortName, class APlayerState* Player) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SparksCustomSetlist">();
	}
	static class USparksCustomSetlist* GetDefaultObj()
	{
		return GetDefaultObjImpl<USparksCustomSetlist>();
	}
};

// Class SparksSongSetlistRuntime.SparksSetlistInterface
// 0x0000 (0x0030 - 0x0030)
class ISparksSetlistInterface final : public IInterface
{
public:
	void RemoveUnavailableSongs(const class UObject* WorldContextObject);

	int32 GetNumSongs(const class UObject* WorldContextObject) const;
	struct FTimespan GetSetlistDuration(const class UObject* WorldContextObject) const;
	class UCatalogData* GetSongAtIndex(const class UObject* WorldContextObject, const int32 Index_0) const;
	TArray<class UCatalogData*> GetSongList(const class UObject* WorldContextObject) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SparksSetlistInterface">();
	}
	static class ISparksSetlistInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<ISparksSetlistInterface>();
	}
};

}

