#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SequencerCore

#include "Basic.hpp"

#include "SequencerCore_classes.hpp"
#include "SequencerCore_parameters.hpp"


namespace SDK
{

// Function SequencerCore.SequencerOutlinerScriptingObject.SetSelection
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FSequencerViewModelScriptingStruct>InSelection                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void USequencerOutlinerScriptingObject::SetSelection(const TArray<struct FSequencerViewModelScriptingStruct>& InSelection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SequencerOutlinerScriptingObject", "SetSelection");

	Params::SequencerOutlinerScriptingObject_SetSelection Parms{};

	Parms.InSelection = std::move(InSelection);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SequencerCore.SequencerOutlinerScriptingObject.GetChildren
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FSequencerViewModelScriptingStructNode                                                   (Parm, NativeAccessSpecifierPublic)
// class FName                             TypeName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FSequencerViewModelScriptingStruct>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FSequencerViewModelScriptingStruct> USequencerOutlinerScriptingObject::GetChildren(const struct FSequencerViewModelScriptingStruct& Node, class FName TypeName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SequencerOutlinerScriptingObject", "GetChildren");

	Params::SequencerOutlinerScriptingObject_GetChildren Parms{};

	Parms.Node = std::move(Node);
	Parms.TypeName = TypeName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SequencerCore.SequencerOutlinerScriptingObject.GetRootNode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FSequencerViewModelScriptingStructReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FSequencerViewModelScriptingStruct USequencerOutlinerScriptingObject::GetRootNode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SequencerOutlinerScriptingObject", "GetRootNode");

	Params::SequencerOutlinerScriptingObject_GetRootNode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SequencerCore.SequencerOutlinerScriptingObject.GetSelection
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FSequencerViewModelScriptingStruct>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FSequencerViewModelScriptingStruct> USequencerOutlinerScriptingObject::GetSelection() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SequencerOutlinerScriptingObject", "GetSelection");

	Params::SequencerOutlinerScriptingObject_GetSelection Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SequencerCore.SequencerViewModelStructExtensions.GetLabel
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FSequencerViewModelScriptingStructViewModel                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USequencerViewModelStructExtensions::GetLabel(const struct FSequencerViewModelScriptingStruct& ViewModel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SequencerViewModelStructExtensions", "GetLabel");

	Params::SequencerViewModelStructExtensions_GetLabel Parms{};

	Parms.ViewModel = std::move(ViewModel);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SequencerCore.SequencerViewModelStructExtensions.GetPath
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FSequencerViewModelScriptingStructViewModel                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USequencerViewModelStructExtensions::GetPath(const struct FSequencerViewModelScriptingStruct& ViewModel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SequencerViewModelStructExtensions", "GetPath");

	Params::SequencerViewModelStructExtensions_GetPath Parms{};

	Parms.ViewModel = std::move(ViewModel);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

