#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DelMarTrackRuntime

#include "Basic.hpp"

#include "DelMarTrackRuntime_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "AudioShapes_classes.hpp"
#include "ModularGameplay_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "GameplayTags_structs.hpp"
#include "DeveloperSettings_classes.hpp"


namespace SDK
{

// Class DelMarTrackRuntime.DelMarTrackPositionComponent
// 0x0080 (0x02F0 - 0x0270)
#pragma pack(push, 0x1)
class alignas(0x10) UDelMarTrackPositionComponent : public USceneComponent
{
public:
	uint8                                         Pad_270[0x30];                                     // 0x0270(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTrackPosition                         ActiveTrackPosition;                               // 0x02A0(0x0020)(Transient, NoDestructor, Protected, NativeAccessSpecifierProtected)
	float                                         TrackRadius;                                       // 0x02C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2C4[0x24];                                     // 0x02C4(0x0024)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetActiveTrack(class ADelMarTrackBase* Track, int32 TrackSegmentIndex, bool bForce);

	int32 GetActiveSegmentIndex() const;
	class ADelMarTrackBase* GetActiveTrack() const;
	float GetActiveTrackDistance() const;
	struct FTrackPosition GetActiveTrackPosition() const;
	float GetActiveTrackRadius() const;
	float GetDistanceAlongSpline() const;
	struct FVector GetLastKnowGoodSplineLocation() const;
	float GetPrimaryDistance() const;
	class ADelMarTrackBase* GetPrimaryTrack() const;
	struct FVector GetPrimaryWorldLocationAlongSpline() const;
	struct FVector GetRawClosestSplineLocation() const;
	float GetRawDistanceAlongSpline() const;
	struct FVector GetWorldDirectionAlongSpline() const;
	struct FVector GetWorldLocationAlongSpline() const;
	struct FVector GetWorldRightVectorAlongSpline() const;
	struct FTransform GetWorldTransformAlongSpline() const;
	struct FVector GetWorldUpVectorAlongSpline() const;
	bool HasValidPosition() const;
	bool IsOnPrimaryTrack() const;
	bool IsTouchingTrack() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarTrackPositionComponent">();
	}
	static class UDelMarTrackPositionComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarTrackPositionComponent>();
	}
};
#pragma pack(pop)

// Class DelMarTrackRuntime.DelMarTrackBase
// 0x0088 (0x1278 - 0x11F0)
class ADelMarTrackBase : public AFortCreativeDeviceProp
{
public:
	uint8                                         Pad_11F0[0x20];                                    // 0x11F0(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	class UDelMarTrackPaletteTheme*               TrackPalette_V2;                                   // 0x1210(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDelMarTrackPointData*                  TrackSplinePointData;                              // 0x1218(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDelMarTrackSplineComponent*            Spline;                                            // 0x1220(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FDelMarTrackPropSection>        TrackPropData;                                     // 0x1228(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FDelMarSegmentActorCollection>  SegmentCollections;                                // 0x1238(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NonTransactional, ContainsInstancedReference, Protected, TextExportTransient, NonPIEDuplicateTransient, NativeAccessSpecifierProtected)
	float                                         DefaultMaxTrackWidth;                              // 0x1248(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         TotalSegmentActors;                                // 0x124C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TrackLength;                                       // 0x1250(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1254[0x4];                                     // 0x1254(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDelMarTrackPalette*                    TrackPalette;                                      // 0x1258(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bEnableGlobalMaterialCollectionIndex;              // 0x1260(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1261[0x3];                                     // 0x1261(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        GlobalMaterialCollectionIndex;                     // 0x1264(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bForceValidOOBTube;                                // 0x1268(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bForceValidTrack;                                  // 0x1269(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_126A[0x2];                                     // 0x126A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Version;                                           // 0x126C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, EditorOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1270[0x8];                                     // 0x1270(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ConvertTrackTagsToV2();
	TArray<class ADelMarTrackSegmentBase*> GetAllTrackSegmentActors();
	void InitializeSpline();
	void OnMetaDataChanged(class UDelMarTrackSplineComponent* InSpline, int32 SplineIndex);
	void OnSplineClosedLoopChanged(class UDelMarTrackSplineComponent* InSpline, int32 SplineIndex);
	void OnSplinePointAdded(class UDelMarTrackSplineComponent* InSpline, int32 SplineIndex);
	void OnSplinePointChanged(class UDelMarTrackSplineComponent* InSpline, int32 SplineIndex);
	void OnSplinePointRemoved(class UDelMarTrackSplineComponent* InSpline, int32 SplineIndex);
	void PostRebuildTrack_BP();
	void PostSplineSegmentGenerated(class UDelMarTrackSplineComponent* SplineComp, int32 PointIndex);
	void PreRebuildTrack_BP();
	void PreSplineSegmentGenerated(class UDelMarTrackSplineComponent* SplineComp, int32 PointIndex);
	void RebuildTrack();
	void SetTrackTypeTagAtIndex(int32 SplineIndex, const struct FGameplayTag& Tag);

	bool ForceValidOOBTube() const;
	bool ForceValidTrack(int32 SplineIndex) const;
	struct FDelMarTrackPointDistanceRange GetDistanceRangeFromPointRange(const struct FDelMarTrackPointIndexRange& InRange) const;
	class UClass* GetEndCapClass(int32 SplineIndex) const;
	float GetForwardDistance(float Start, float End) const;
	float GetLoopDistance(float InTotalDistance) const;
	const struct FDelMarSplinePointMetaData GetMetaDataAtSplinePoint(int32 SplineIndex) const;
	int32 GetNextSplinePoint(int32 InSplinePoint) const;
	int32 GetNextSplineSegment(int32 InSplineSegmentIndex) const;
	int32 GetNextSplineSegmentIndexWithActor(int32 SplineSegmentIndex) const;
	int32 GetPreviousSplinePoint(int32 InSplinePoint) const;
	int32 GetPreviousSplineSegment(int32 InSplineSegmentIndex) const;
	class UClass* GetSegmentClassAtSplinePoint(int32 SplineIndex) const;
	const struct FGameplayTag GetSegmentTrackTypeTag(int32 SplineIndex) const;
	class UClass* GetStartCapClass(int32 SplineIndex) const;
	class UClass* GetTransitionSegmentClass(int32 FromSplineIndex, int32 ToSplineIndex) const;
	bool IsCosmetic() const;
	bool IsDistanceWithinRange(float InDistance, float StartDistance, float EndDistance) const;
	bool IsPointInOOBTube(const struct FVector& Point) const;
	bool IsPrimary() const;
	bool IsSecondary() const;
	bool IsTrackable() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarTrackBase">();
	}
	static class ADelMarTrackBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADelMarTrackBase>();
	}
};

// Class DelMarTrackRuntime.DelMarTrackVehiclePositionComponent
// 0x0000 (0x02F0 - 0x02F0)
class UDelMarTrackVehiclePositionComponent final : public UDelMarTrackPositionComponent
{
public:
	class AFortAthenaVehicle*                     Vehicle;                                           // 0x02E8(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarTrackVehiclePositionComponent">();
	}
	static class UDelMarTrackVehiclePositionComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarTrackVehiclePositionComponent>();
	}
};

// Class DelMarTrackRuntime.DelMarTrack
// 0x0058 (0x12D0 - 0x1278)
class ADelMarTrack final : public ADelMarTrackBase
{
public:
	EDelMarTrackType                              TrackType;                                         // 0x1278(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUserSelectedStartTrack;                           // 0x1279(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_127A[0x6];                                     // 0x127A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ADelMarTrack*                           StartTrackConnection;                              // 0x1280(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, NoClear, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUserSelectedEndTrack;                             // 0x1288(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1289[0x7];                                     // 0x1289(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ADelMarTrack*                           EndTrackConnection;                                // 0x1290(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, NoClear, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ParentStartDistance;                               // 0x1298(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ParentEndDistance;                                 // 0x129C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         PrimaryStartDistance;                              // 0x12A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         PrimaryEndDistance;                                // 0x12A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         PrimarySegmentLength;                              // 0x12A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_12AC[0x4];                                     // 0x12AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class ADelMarTrackOobTube>        OobTubeClass;                                      // 0x12B0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class ADelMarTrackOobTube>     AttachedOobTube;                                   // 0x12B8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NonPIEDuplicateTransient, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_12C0[0x10];                                    // 0x12C0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void GenerateOOBTube();
	bool MergeTrack(class ADelMarTrack* OtherTrack, bool MergeToEndPoint, bool CopyFromStartPoint);
	bool SplitTrackAtPoint(int32 SplitAtPoint);

	float GetParentEndDistance() const;
	float GetParentStartDistance() const;
	float GetPrimaryDistance(float DistanceOnThisTrack) const;
	float GetPrimaryEndDistance() const;
	float GetPrimaryLength() const;
	float GetPrimaryStartDistance() const;
	float GetSecondaryDistance(const float DistanceOnPrimaryTrack) const;
	class ADelMarTrack* GetSecondaryEndTrack() const;
	class ADelMarTrack* GetSecondaryStartTrack() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarTrack">();
	}
	static class ADelMarTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADelMarTrack>();
	}
};

// Class DelMarTrackRuntime.DelMarTrackBlueprintFunctionLibrary
// 0x0000 (0x0030 - 0x0030)
class UDelMarTrackBlueprintFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool IsTrackRadiusCheckDisabled();
	static bool TrackPositionDebugDrawEnabled();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarTrackBlueprintFunctionLibrary">();
	}
	static class UDelMarTrackBlueprintFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarTrackBlueprintFunctionLibrary>();
	}
};

// Class DelMarTrackRuntime.DelMarTrackCustomizationInterface
// 0x0000 (0x0030 - 0x0030)
class IDelMarTrackCustomizationInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarTrackCustomizationInterface">();
	}
	static class IDelMarTrackCustomizationInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IDelMarTrackCustomizationInterface>();
	}
};

// Class DelMarTrackRuntime.DelMarTrackSegmentBase
// 0x0030 (0x0450 - 0x0420)
class ADelMarTrackSegmentBase : public AActor
{
public:
	uint8                                         Pad_420[0x8];                                      // 0x0420(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIgnoreSplineLength;                               // 0x0428(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_429[0x3];                                      // 0x0429(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class ADelMarTrackBase>        Track;                                             // 0x042C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_434[0x4];                                      // 0x0434(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDelMarTrackMatLayerComponent*          MaterialLayerComponent;                            // 0x0438(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BeginDistanceAlongSpline;                          // 0x0440(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         EndDistanceAlongSpline;                            // 0x0444(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         TrackSegmentIndex;                                 // 0x0448(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_44C[0x4];                                      // 0x044C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool ContainsDistanceAlongSpline(const float DistanceAlongSpline) const;
	struct FDelMarTrackPointDistanceRange GetSplineDistanceRange() const;
	class USplineMeshComponent* GetSplineMeshComponent() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarTrackSegmentBase">();
	}
	static class ADelMarTrackSegmentBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADelMarTrackSegmentBase>();
	}
};

// Class DelMarTrackRuntime.DelMarTrackCustomSegment
// 0x0008 (0x0458 - 0x0450)
class ADelMarTrackCustomSegment final : public ADelMarTrackSegmentBase
{
public:
	float                                         SegmentLength;                                     // 0x0450(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_454[0x4];                                      // 0x0454(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarTrackCustomSegment">();
	}
	static class ADelMarTrackCustomSegment* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADelMarTrackCustomSegment>();
	}
};

// Class DelMarTrackRuntime.DelMarTrackMaterialCollection
// 0x0030 (0x0068 - 0x0038)
class UDelMarTrackMaterialCollection final : public UDataAsset
{
public:
	uint32                                        SelectedIndex;                                     // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FDelMarTrackMaterialCollectionEntry> Materials;                                         // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x18];                                      // 0x0050(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarTrackMaterialCollection">();
	}
	static class UDelMarTrackMaterialCollection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarTrackMaterialCollection>();
	}
};

// Class DelMarTrackRuntime.DelMarTrackMatLayerComponent
// 0x0018 (0x00F0 - 0x00D8)
class UDelMarTrackMatLayerComponent final : public UActorComponent
{
public:
	TWeakObjectPtr<class UStaticMeshComponent>    RoadMesh;                                          // 0x00D8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class ADelMarTrackBase>        Track;                                             // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDelMarTrackMaterialCollection*         MaterialCollection;                                // 0x00E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarTrackMatLayerComponent">();
	}
	static class UDelMarTrackMatLayerComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarTrackMatLayerComponent>();
	}
};

// Class DelMarTrackRuntime.DelMarTrackMeshCustomization
// 0x0010 (0x07E0 - 0x07D0)
class UDelMarTrackMeshCustomization final : public USplineMeshComponent
{
public:
	uint8                                         Pad_7D0[0x9];                                      // 0x07D0(0x0009)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsADefaultCustomization;                          // 0x07D9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_7DA[0x6];                                      // 0x07DA(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarTrackMeshCustomization">();
	}
	static class UDelMarTrackMeshCustomization* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarTrackMeshCustomization>();
	}
};

// Class DelMarTrackRuntime.DelMarTrackOobTube
// 0x0108 (0x0528 - 0x0420)
class ADelMarTrackOobTube final : public AActor
{
public:
	class ADelMarTrack*                           AttachedTrack;                                     // 0x0420(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDelMarTrackSplineComponent*            Spline;                                            // 0x0428(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDelMarTrackOobTubePointData*           SplinePointData;                                   // 0x0430(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, InstancedReference, NoClear, NoDestructor, Protected, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftClassPtr<class UClass>                   TubeMeshComponentClass;                            // 0x0438(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoClear, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FDelMarTrackOobTubeMeshSection> OobTubeMeshSections;                               // 0x0468(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NonTransactional, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UStaticMesh>             TubeMesh;                                          // 0x0478(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<EDelMarTrackOobTubeTransitionType, TSoftObjectPtr<class UStaticMesh>> TransitionMeshes;                                  // 0x04A8(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	float                                         DefaultTransitionMeshLength;                       // 0x04F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         DefaultNumSubsections;                             // 0x04FC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SmallestSubsectionLength;                          // 0x0500(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MinimumMeshScale;                                  // 0x0504(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAlwaysDrawOobTube;                                // 0x0508(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, EditorOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUseEditorMaterial;                                // 0x0509(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, EditorOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bPointsSelectableInEditor;                         // 0x050A(0x0001)(ZeroConstructor, IsPlainOldData, EditorOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_50B[0x1D];                                     // 0x050B(0x001D)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnAttachedTrackPointAdded(class UDelMarTrackSplineComponent* InSpline, int32 PointIndex);
	void OnAttachedTrackPointChanged(class UDelMarTrackSplineComponent* InSpline, int32 PointIndex);
	void OnAttachedTrackPointRemoved(class UDelMarTrackSplineComponent* InSpline, int32 PointIndex);
	void OnConstructTubeMesh(class USplineMeshComponent* TubeMeshComponent, bool bIsTransitionMesh, bool bIsTransitionIn);
	void OnPostContructedOOBTube();

	EDelMarTrackOobTubeTransitionType DetermineTubeMeshTransitionType(int32 CurrentPointIndex, int32 NextPointIndex) const;
	const struct FGameplayTag GetSplinePointTagAtIndex(int32 PointIndex) const;
	bool HasTubeMeshAtDistance(float InDistance) const;
	bool IsAttachedToPrimaryTrack() const;
	bool IsAttachedToSecondaryTrack() const;
	bool IsSplinePointOffset(int32 PointIndex) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarTrackOobTube">();
	}
	static class ADelMarTrackOobTube* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADelMarTrackOobTube>();
	}
};

// Class DelMarTrackRuntime.DelMarTrackOobTubePointData
// 0x0010 (0x0040 - 0x0030)
class UDelMarTrackOobTubePointData final : public USplineMetadata
{
public:
	TArray<struct FDelMarTrackOobTubePointMetaData> MetaData;                                          // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, EditFixedSize, ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarTrackOobTubePointData">();
	}
	static class UDelMarTrackOobTubePointData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarTrackOobTubePointData>();
	}
};

// Class DelMarTrackRuntime.DelMarTrackOobTubePositionalRenderingComponent
// 0x0070 (0x0148 - 0x00D8)
class UDelMarTrackOobTubePositionalRenderingComponent : public UControllerComponent
{
public:
	TWeakObjectPtr<class UDelMarTrackPositionComponent> PlayerPositionComponent;                           // 0x00D8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSet<class USplineMeshComponent*>             ActiveOOBTubeMeshes;                               // 0x00E0(0x0050)(BlueprintVisible, ExportObject, BlueprintReadOnly, ContainsInstancedReference, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	class ADelMarTrackOobTube*                    ActiveOOBTube;                                     // 0x0130(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RenderDistanceInFrontOfPlayer;                     // 0x0138(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RenderDistanceBehindPlayer;                        // 0x013C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         UpdateIntervalInSeconds;                           // 0x0140(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_144[0x4];                                      // 0x0144(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarTrackOobTubePositionalRenderingComponent">();
	}
	static class UDelMarTrackOobTubePositionalRenderingComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarTrackOobTubePositionalRenderingComponent>();
	}
};

// Class DelMarTrackRuntime.DelMarTrackOobTubeProxy
// 0x0000 (0x0030 - 0x0030)
class UDelMarTrackOobTubeProxy final : public UObject
{
public:
	class ADelMarTrack* GetAttachedTrack() const;
	int32 GetDefaultSubsectionCount() const;
	double GetDefaultTransitionMeshLength() const;
	double GetMinimumMeshScale() const;
	class AActor* GetOobTubeActor() const;
	double GetSmallestSubsectionLength() const;
	class USplineComponent* GetSplineComponent() const;
	struct FDelMarTrackOobTubePointMetaData GetSplineMetadata(int32 PointIndex) const;
	double GetSplineVisualizationOffset() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarTrackOobTubeProxy">();
	}
	static class UDelMarTrackOobTubeProxy* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarTrackOobTubeProxy>();
	}
};

// Class DelMarTrackRuntime.DelMarTrackOobTubeCollectionProxy
// 0x0008 (0x0038 - 0x0030)
class UDelMarTrackOobTubeCollectionProxy final : public UObject
{
public:
	TSubclassOf<class AActor>                     OobTubeClass;                                      // 0x0030(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	class UDelMarTrackOobTubeProxy* GetOobTubeProxy(int32 OobTubeIndex);
	void RegisterOobTube(class AActor* OobTubeActor);

	int32 GetNumOobTubeProxies() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarTrackOobTubeCollectionProxy">();
	}
	static class UDelMarTrackOobTubeCollectionProxy* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarTrackOobTubeCollectionProxy>();
	}
};

// Class DelMarTrackRuntime.DelMarTrackPaletteTrackType
// 0x0020 (0x0058 - 0x0038)
class UDelMarTrackPaletteTrackType final : public UDataAsset
{
public:
	TArray<struct FDelMarTrackPaletteTrackTypeEntry> StyleArray;                                        // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	bool                                          bShouldOOBTubeFunnel;                              // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            OOBTubeMeshOverride;                               // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void AddSegmentClassActorToStyle(const struct FGameplayTag& StyleTag, class UClass* SegmentClass);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarTrackPaletteTrackType">();
	}
	static class UDelMarTrackPaletteTrackType* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarTrackPaletteTrackType>();
	}
};

// Class DelMarTrackRuntime.DelMarTrackPaletteTransitions
// 0x0010 (0x0048 - 0x0038)
class UDelMarTrackPaletteTransitions final : public UDataAsset
{
public:
	TArray<struct FDelMarTrackPaletteTransitionEntry_v2> TransitionArray;                                   // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarTrackPaletteTransitions">();
	}
	static class UDelMarTrackPaletteTransitions* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarTrackPaletteTransitions>();
	}
};

// Class DelMarTrackRuntime.DelMarTrackPaletteTheme
// 0x0048 (0x0080 - 0x0038)
class UDelMarTrackPaletteTheme final : public UDataAsset
{
public:
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ThemeName;                                         // 0x0040(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ThemeDescription;                                  // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UDelMarTrackPaletteTrackType*>   Tracks;                                            // 0x0060(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class UDelMarTrackPaletteTransitions*         Transitions;                                       // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UStaticMesh*                            OOBTubeMesh;                                       // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarTrackPaletteTheme">();
	}
	static class UDelMarTrackPaletteTheme* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarTrackPaletteTheme>();
	}
};

// Class DelMarTrackRuntime.DelMarTrackPerformanceScrubber
// 0x00B8 (0x04D8 - 0x0420)
class ADelMarTrackPerformanceScrubber final : public AActor
{
public:
	class UCameraComponent*                       Camera;                                            // 0x0420(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UDelMarTrackSplineComponent> Spline;                                            // 0x0428(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SplineSelection;                                   // 0x0430(0x0010)(Edit, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ScrubUnits;                                        // 0x0440(0x0004)(Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraHeightOffset;                                // 0x0444(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            FloatCurve;                                        // 0x0448(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RuntimeSpeed;                                      // 0x0450(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bRunCsvProfilerDuringScrub : 1;                    // 0x0454(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_455[0x1B];                                     // 0x0455(0x001B)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ScrubUnitMax;                                      // 0x0470(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         bRuntimeEnabled : 1;                               // 0x0474(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Net, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_475[0x3];                                      // 0x0475(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class UDelMarTrackSplineComponent*> StringToSplineMap;                                 // 0x0478(0x0050)(ExportObject, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class UTimelineComponent*                     Timeline;                                          // 0x04C8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4D0[0x8];                                      // 0x04D0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClientStartScrub();
	void ClientStopScrub();
	void ReceiveRuntimeTrackScrubbingSpeed();
	void ReceiveRuntimeTrackScrubbingStart();
	void TimelineFinishedCallback();
	void TimelineTickCallback();
	void TimelineTickFloatCallback(float Progress);
	TArray<class FString> UpdateSplines();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarTrackPerformanceScrubber">();
	}
	static class ADelMarTrackPerformanceScrubber* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADelMarTrackPerformanceScrubber>();
	}
};

// Class DelMarTrackRuntime.DelMarTrackRoadProp
// 0x0010 (0x11D8 - 0x11C8)
class ADelMarTrackRoadProp final : public ABuildingProp
{
public:
	EDelMarTrackRoadPropType                      RoadPropType;                                      // 0x11C8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_11C9[0x7];                                     // 0x11C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDelMarTrackSnapToComponent*            SnapToComponent;                                   // 0x11D0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarTrackRoadProp">();
	}
	static class ADelMarTrackRoadProp* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADelMarTrackRoadProp>();
	}
};

// Class DelMarTrackRuntime.DelMarTrackSegmentCollectionSpawnDataProvider
// 0x0000 (0x0030 - 0x0030)
class IDelMarTrackSegmentCollectionSpawnDataProvider final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarTrackSegmentCollectionSpawnDataProvider">();
	}
	static class IDelMarTrackSegmentCollectionSpawnDataProvider* GetDefaultObj()
	{
		return GetDefaultObjImpl<IDelMarTrackSegmentCollectionSpawnDataProvider>();
	}
};

// Class DelMarTrackRuntime.DelMarTrackSettings
// 0x0038 (0x0098 - 0x0060)
class UDelMarTrackSettings final : public UDeveloperSettings
{
public:
	struct FGameplayTag                           RootTrackTag;                                      // 0x0060(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, Config, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FDelMarTrackTagConverterData>   TagConverterData;                                  // 0x0070(0x0010)(Edit, ZeroConstructor, Config, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FGameplayTag                           DefaultConverterTag;                               // 0x0080(0x000C)(Edit, Config, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FGameplayTag                           HiddenTrackTag;                                    // 0x008C(0x000C)(Edit, Config, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarTrackSettings">();
	}
	static class UDelMarTrackSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarTrackSettings>();
	}
};

// Class DelMarTrackRuntime.DelMarTrackSnapToComponent
// 0x0030 (0x02A0 - 0x0270)
class UDelMarTrackSnapToComponent : public USceneComponent
{
public:
	struct FVector                                OffsetToOwnerActor;                                // 0x0270(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_288[0x18];                                     // 0x0288(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarTrackSnapToComponent">();
	}
	static class UDelMarTrackSnapToComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarTrackSnapToComponent>();
	}
};

// Class DelMarTrackRuntime.DelMarTrackSnapToSplinePointComponent
// 0x0020 (0x02C0 - 0x02A0)
class UDelMarTrackSnapToSplinePointComponent final : public UDelMarTrackSnapToComponent
{
public:
	class USplineComponent*                       SplineToSnapTo;                                    // 0x02A0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EDelMarTrackSplinePointSnapMode               SplinePointSnapMode;                               // 0x02A8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2A9[0x3];                                      // 0x02A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SplinePointIndexToSnapTo;                          // 0x02AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2B0[0x10];                                     // 0x02B0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarTrackSnapToSplinePointComponent">();
	}
	static class UDelMarTrackSnapToSplinePointComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarTrackSnapToSplinePointComponent>();
	}
};

// Class DelMarTrackRuntime.DelMarTrackStaticMeshSegment
// 0x0008 (0x0458 - 0x0450)
class ADelMarTrackStaticMeshSegment final : public ADelMarTrackSegmentBase
{
public:
	class UStaticMeshComponent*                   StaticMeshComponent;                               // 0x0450(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarTrackStaticMeshSegment">();
	}
	static class ADelMarTrackStaticMeshSegment* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADelMarTrackStaticMeshSegment>();
	}
};

// Class DelMarTrackRuntime.DelMarTrackManager
// 0x0050 (0x0088 - 0x0038)
class UDelMarTrackManager final : public UWorldSubsystem
{
public:
	uint8                                         Pad_38[0x30];                                      // 0x0038(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ADelMarTrackBase*>               DelMarTracks;                                      // 0x0068(0x0010)(ZeroConstructor, Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	class ADelMarTrackBase*                       PrimaryTrack;                                      // 0x0078(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ADelMarTrackBase*                       LowestTrack;                                       // 0x0080(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarTrackManager">();
	}
	static class UDelMarTrackManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarTrackManager>();
	}
};

// Class DelMarTrackRuntime.DelMarTrackPalette
// 0x0030 (0x0068 - 0x0038)
class UDelMarTrackPalette final : public UDataAsset
{
public:
	TArray<struct FDelMarTrackPaletteEntry>       Palette;                                           // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoClear, NativeAccessSpecifierPublic)
	TArray<struct FDelMarTrackPaletteTransitionEntry> Transitions;                                       // 0x0048(0x0010)(Edit, EditFixedSize, ZeroConstructor, DisableEditOnInstance, NoClear, NativeAccessSpecifierPublic)
	TArray<struct FDelMarTrackCapEntry>           Caps;                                              // 0x0058(0x0010)(Edit, EditFixedSize, ZeroConstructor, DisableEditOnInstance, NoClear, NativeAccessSpecifierPublic)

public:
	void UpdateMappingArrays();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarTrackPalette">();
	}
	static class UDelMarTrackPalette* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarTrackPalette>();
	}
};

// Class DelMarTrackRuntime.DelMarTrackPrefabSegment
// 0x0028 (0x0478 - 0x0450)
class ADelMarTrackPrefabSegment final : public ADelMarTrackSegmentBase
{
public:
	float                                         TangentLength;                                     // 0x0450(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_454[0x4];                                      // 0x0454(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   PrefabStaticMesh;                                  // 0x0458(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   StartSocketName;                                   // 0x0460(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   EndSocketName;                                     // 0x046C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	TArray<class FString> GetSockets() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarTrackPrefabSegment">();
	}
	static class ADelMarTrackPrefabSegment* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADelMarTrackPrefabSegment>();
	}
};

// Class DelMarTrackRuntime.DelMarTrackSegmentInterface
// 0x0000 (0x0030 - 0x0030)
class IDelMarTrackSegmentInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarTrackSegmentInterface">();
	}
	static class IDelMarTrackSegmentInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IDelMarTrackSegmentInterface>();
	}
};

// Class DelMarTrackRuntime.DelMarTrackPointData
// 0x0018 (0x0048 - 0x0030)
class UDelMarTrackPointData final : public USplineMetadata
{
public:
	TArray<struct FDelMarSplinePointMetaData>     MetaData;                                          // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class UDelMarTrackSplineComponent*            Spline;                                            // 0x0040(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarTrackPointData">();
	}
	static class UDelMarTrackPointData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarTrackPointData>();
	}
};

// Class DelMarTrackRuntime.DelMarTrackSplineComponent
// 0x0140 (0x0800 - 0x06C0)
class UDelMarTrackSplineComponent final : public USplineComponent
{
public:
	int32                                         WorldPlaneLookupSubsteps;                          // 0x06C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_6C4[0x94];                                     // 0x06C4(0x0094)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FDelMarRotationalMinimalFrame>  RotationalMinimalFrameNormals;                     // 0x0758(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class UDelMarTrackSnapToSplinePointComponent* SnapToBeginningComponent;                          // 0x0768(0x0008)(Edit, ExportObject, ZeroConstructor, DisableEditOnTemplate, EditConst, InstancedReference, EditorOnly, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UDelMarTrackSnapToSplinePointComponent* SnapToEndComponent;                                // 0x0770(0x0008)(Edit, ExportObject, ZeroConstructor, DisableEditOnTemplate, EditConst, InstancedReference, EditorOnly, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UDelMarTrackSnapToSplinePointComponent*> SnapToPointComponents;                             // 0x0778(0x0010)(Edit, ExportObject, ZeroConstructor, DisableEditOnTemplate, EditConst, EditorOnly, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_788[0x78];                                     // 0x0788(0x0078)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	struct FClosestLocationToWorldPlaneResult FindClosestLocationForSegmentToWorldPlane(const struct FVector& WorldPlaneOrigin, const struct FVector& WorldPlaneNormal, const int32 SegmentIndex, ESplineCoordinateSpace CoordinateSpace) const;
	struct FClosestLocationToWorldPlaneResult FindClosestLocationToWorldPlane(const struct FVector& WorldPlaneOrigin, const struct FVector& WorldPlaneNormal, ESplineCoordinateSpace CoordinateSpace) const;
	struct FClosestLocationToWorldPlaneResult FindInputKeyForNeighboringSegmentClosestToWorldPlane(const struct FVector& WorldPlaneOrigin, const struct FVector& WorldPlaneNormal, const int32 SegmentIndex, int32* OutClosestSegmentIndex) const;
	float GetForwardDistance(float Start, float End) const;
	float GetLoopDistance(float InTotalDistance) const;
	int32 GetNextSplinePoint(int32 InSplinePoint) const;
	int32 GetNextSplineSegment(int32 InSplineSegmentIndex) const;
	int32 GetPreviousSplinePoint(int32 InSplinePoint) const;
	int32 GetPreviousSplineSegment(int32 InSplineSegmentIndex) const;
	const TArray<struct FDelMarRotationalMinimalFrame> GetRotationalMinimalFrames() const;
	struct FVector GetRotationalMinimalUpVectorAtDistanceAlongSpline(float DistanceAlongSpline, ESplineCoordinateSpace CoordinateSpace) const;
	struct FVector GetRotationalMinimalUpVectorAtSplinePoint(int32 SplinePoint, ESplineCoordinateSpace CoordinateSpace) const;
	int32 GetSplinePointAtDistanceAlongSpline(float DistanceAlongSpline) const;
	int32 GetSplinePointClosestToDistanceAlongSpline(float DistanceAlongSpline) const;
	int32 GetSplinePointClosestToWorldLocation(const struct FVector& WorldLocation) const;
	bool IsDistanceAheadOfOtherDistance(float Distance, float OtherDistance, float BaseDistance) const;
	bool IsDistanceBehindOtherDistance(float Distance, float OtherDistance, float BaseDistance) const;
	bool IsDistanceWithinRange(float InDistance, float StartDistance, float EndDistance) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarTrackSplineComponent">();
	}
	static class UDelMarTrackSplineComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarTrackSplineComponent>();
	}
};

// Class DelMarTrackRuntime.DelMarTrackSplineMeshSegment
// 0x0010 (0x0460 - 0x0450)
class ADelMarTrackSplineMeshSegment : public ADelMarTrackSegmentBase
{
public:
	class USplineMeshComponent*                   SplineMesh;                                        // 0x0450(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SegmentLengthScaler;                               // 0x0458(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_45C[0x4];                                      // 0x045C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarTrackSplineMeshSegment">();
	}
	static class ADelMarTrackSplineMeshSegment* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADelMarTrackSplineMeshSegment>();
	}
};

// Class DelMarTrackRuntime.DelMarTrackVariableSplineMeshSegment
// 0x0050 (0x04B0 - 0x0460)
class ADelMarTrackVariableSplineMeshSegment final : public ADelMarTrackSplineMeshSegment
{
public:
	TMap<int32, class UStaticMesh*>               VariableStaticMeshes;                              // 0x0460(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarTrackVariableSplineMeshSegment">();
	}
	static class ADelMarTrackVariableSplineMeshSegment* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADelMarTrackVariableSplineMeshSegment>();
	}
};

// Class DelMarTrackRuntime.DelMarTrackTubeAudioComponent
// 0x0050 (0x0290 - 0x0240)
class UDelMarTrackTubeAudioComponent final : public UAudioShapePrimitiveComponent
{
public:
	float                                         Radius;                                            // 0x0238(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23C[0x4];                                      // 0x023C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBox                                   SplineAABB;                                        // 0x0240(0x0038)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	class USplineComponent*                       Spline;                                            // 0x0278(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ADelMarTrackOobTube*                    ParentOobTube;                                     // 0x0280(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_288[0x8];                                      // 0x0288(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetRadius(const float InRadius);
	void SetSpline(class USplineComponent* NewSpline);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarTrackTubeAudioComponent">();
	}
	static class UDelMarTrackTubeAudioComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarTrackTubeAudioComponent>();
	}
};

}

