#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SubobjectDataInterface

#include "Basic.hpp"

#include "Engine_classes.hpp"


namespace SDK
{

// Class SubobjectDataInterface.SubobjectDataBlueprintFunctionLibrary
// 0x0000 (0x0030 - 0x0030)
class USubobjectDataBlueprintFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool CanCopy(const struct FSubobjectData& Data);
	static bool CanDelete(const struct FSubobjectData& Data);
	static bool CanDuplicate(const struct FSubobjectData& Data);
	static bool CanEdit(const struct FSubobjectData& Data);
	static bool CanRename(const struct FSubobjectData& Data);
	static bool CanReparent(const struct FSubobjectData& Data);
	static class UBlueprint* GetBlueprint(const struct FSubobjectData& Data);
	static void GetData(const struct FSubobjectDataHandle& DataHandle, struct FSubobjectData* OutData);
	static class FText GetDisplayName(const struct FSubobjectData& Data);
	static void GetHandle(const struct FSubobjectData& Data, struct FSubobjectDataHandle* OutHandle);
	static const class UObject* GetObject(const struct FSubobjectData& Data, bool bEvenIfPendingKill);
	static const class UObject* GetObjectForBlueprint(const struct FSubobjectData& Data, class UBlueprint* Blueprint);
	static class FName GetVariableName(const struct FSubobjectData& Data);
	static bool IsActor(const struct FSubobjectData& Data);
	static bool IsAttachedTo(const struct FSubobjectData& Data, const struct FSubobjectDataHandle& InHandle);
	static bool IsChildActor(const struct FSubobjectData& Data);
	static bool IsComponent(const struct FSubobjectData& Data);
	static bool IsDefaultSceneRoot(const struct FSubobjectData& Data);
	static bool IsHandleValid(const struct FSubobjectDataHandle& DataHandle);
	static bool IsInheritedComponent(const struct FSubobjectData& Data);
	static bool IsInstancedActor(const struct FSubobjectData& Data);
	static bool IsInstancedComponent(const struct FSubobjectData& Data);
	static bool IsNativeComponent(const struct FSubobjectData& Data);
	static bool IsRootActor(const struct FSubobjectData& Data);
	static bool IsRootComponent(const struct FSubobjectData& Data);
	static bool IsSceneComponent(const struct FSubobjectData& Data);
	static bool IsValid(const struct FSubobjectData& Data);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SubobjectDataBlueprintFunctionLibrary">();
	}
	static class USubobjectDataBlueprintFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USubobjectDataBlueprintFunctionLibrary>();
	}
};

// Class SubobjectDataInterface.SubobjectDataSubsystem
// 0x0018 (0x0050 - 0x0038)
class USubobjectDataSubsystem final : public UEngineSubsystem
{
public:
	uint8                                         Pad_38[0x18];                                      // 0x0038(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* CreateNewBPComponent(TSubclassOf<class UActorComponent> ComponentClass, const class FString& NewClassPath, const class FString& NewClassName);
	static class UClass* CreateNewCPPComponent(TSubclassOf<class UActorComponent> ComponentClass, const class FString& NewClassPath, const class FString& NewClassName);
	static void RenameSubobjectMemberVariable(class UBlueprint* BPContext, const struct FSubobjectDataHandle& InHandle, const class FName NewName);

	struct FSubobjectDataHandle AddNewSubobject(const struct FAddNewSubobjectParams& Params_0, class FText* FailReason);
	bool AttachSubobject(const struct FSubobjectDataHandle& OwnerHandle, const struct FSubobjectDataHandle& ChildToAddHandle);
	bool ChangeSubobjectClass(const struct FSubobjectDataHandle& Handle, const class UClass* NewClass);
	void CopySubobjects(const TArray<struct FSubobjectDataHandle>& Handles, class UBlueprint* BpContext);
	int32 DeleteSubobject(const struct FSubobjectDataHandle& ContextHandle, const struct FSubobjectDataHandle& SubobjectToDelete, class UBlueprint* BPContext);
	int32 DeleteSubobjects(const struct FSubobjectDataHandle& ContextHandle, const TArray<struct FSubobjectDataHandle>& SubobjectsToDelete, class UBlueprint* BPContext);
	bool DetachSubobject(const struct FSubobjectDataHandle& OwnerHandle, const struct FSubobjectDataHandle& ChildToRemove);
	void DuplicateSubobjects(const struct FSubobjectDataHandle& Context, const TArray<struct FSubobjectDataHandle>& SubobjectsToDup, class UBlueprint* BpContext, TArray<struct FSubobjectDataHandle>* OutNewSubobjects);
	int32 K2_DeleteSubobjectFromInstance(const struct FSubobjectDataHandle& ContextHandle, const struct FSubobjectDataHandle& SubobjectToDelete);
	int32 K2_DeleteSubobjectsFromInstance(const struct FSubobjectDataHandle& ContextHandle, const TArray<struct FSubobjectDataHandle>& SubobjectsToDelete);
	void K2_GatherSubobjectDataForBlueprint(class UBlueprint* Context, TArray<struct FSubobjectDataHandle>* OutArray);
	void K2_GatherSubobjectDataForInstance(class AActor* Context, TArray<struct FSubobjectDataHandle>* OutArray);
	bool MakeNewSceneRoot(const struct FSubobjectDataHandle& Context, const struct FSubobjectDataHandle& NewSceneRoot, class UBlueprint* BPContext);
	void PasteSubobjects(const struct FSubobjectDataHandle& PasteToContext, const TArray<struct FSubobjectDataHandle>& NewParentHandles, class UBlueprint* BpContext, TArray<struct FSubobjectDataHandle>* OutPastedHandles);
	bool RenameSubobject(const struct FSubobjectDataHandle& Handle, const class FText& InNewName);
	bool ReparentSubobject(const struct FReparentSubobjectParams& Params_0, const struct FSubobjectDataHandle& ToReparentHandle);
	bool ReparentSubobjects(const struct FReparentSubobjectParams& Params_0, const TArray<struct FSubobjectDataHandle>& HandlesToMove);

	bool CanCopySubobjects(const TArray<struct FSubobjectDataHandle>& Handles) const;
	bool CanPasteSubobjects(const struct FSubobjectDataHandle& RootHandle, class UBlueprint* BPContext) const;
	struct FSubobjectDataHandle FindHandleForObject(const struct FSubobjectDataHandle& Context, const class UObject* ObjectToFind, class UBlueprint* BPContext) const;
	bool IsValidRename(const struct FSubobjectDataHandle& Handle, const class FText& InNewText, class FText* OutErrorMessage) const;
	bool K2_FindSubobjectDataFromHandle(const struct FSubobjectDataHandle& Handle, struct FSubobjectData* OutData) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SubobjectDataSubsystem">();
	}
	static class USubobjectDataSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<USubobjectDataSubsystem>();
	}
};

}

