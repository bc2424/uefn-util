#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BarnTowelRuntime

#include "Basic.hpp"

#include "BarnTowelRuntime_classes.hpp"
#include "BarnTowelRuntime_parameters.hpp"


namespace SDK
{

// Function BarnTowelRuntime.AFortGameplayCueNotifyLoop_BarnTowel.SetFlyingParameters
// (Final, Native, Private, HasOutParams, BlueprintCallable)
// Parameters:
// class UFXSystemComponent*               FlyingTrailFX                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UAudioComponent*>          AudioComponents                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class AFortPlayerPawn*                  PlayerPawn                                             (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FlappingAlpha                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   RollCombined                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   RollingAlpha                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PitchAlpha                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsBoosting                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsAscending                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAllowWingFlap                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Speed                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsDiving                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CurrentHeight                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AAFortGameplayCueNotifyLoop_BarnTowel::SetFlyingParameters(class UFXSystemComponent* FlyingTrailFX, const TArray<class UAudioComponent*>& AudioComponents, const class AFortPlayerPawn* PlayerPawn, const float FlappingAlpha, const float RollCombined, const float RollingAlpha, const float PitchAlpha, const bool bIsBoosting, const bool bIsAscending, const bool bAllowWingFlap, const float Speed, const bool bIsDiving, const float CurrentHeight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AFortGameplayCueNotifyLoop_BarnTowel", "SetFlyingParameters");

	Params::AFortGameplayCueNotifyLoop_BarnTowel_SetFlyingParameters Parms{};

	Parms.FlyingTrailFX = FlyingTrailFX;
	Parms.AudioComponents = std::move(AudioComponents);
	Parms.PlayerPawn = PlayerPawn;
	Parms.FlappingAlpha = FlappingAlpha;
	Parms.RollCombined = RollCombined;
	Parms.RollingAlpha = RollingAlpha;
	Parms.PitchAlpha = PitchAlpha;
	Parms.bIsBoosting = bIsBoosting;
	Parms.bIsAscending = bIsAscending;
	Parms.bAllowWingFlap = bAllowWingFlap;
	Parms.Speed = Speed;
	Parms.bIsDiving = bIsDiving;
	Parms.CurrentHeight = CurrentHeight;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BarnTowelRuntime.BarnTowelWeaponInterface.GetBarnTowelData
// (Native, Event, Public, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// struct FVector2D                        MovementInput                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsInInitialHover                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         ReplicatedControlRotation                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void IBarnTowelWeaponInterface::GetBarnTowelData(struct FVector2D* MovementInput, bool* bIsInInitialHover, struct FRotator* ReplicatedControlRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BarnTowelWeaponInterface", "GetBarnTowelData");

	Params::BarnTowelWeaponInterface_GetBarnTowelData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (MovementInput != nullptr)
		*MovementInput = std::move(Parms.MovementInput);

	if (bIsInInitialHover != nullptr)
		*bIsInInitialHover = Parms.bIsInInitialHover;

	if (ReplicatedControlRotation != nullptr)
		*ReplicatedControlRotation = std::move(Parms.ReplicatedControlRotation);
}


// Function BarnTowelRuntime.FortBarnTowelFlyingBlueprintLibrary.ClearInputActionDisplayContext
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AFortPawn*                        PlayerPawn                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UFortInputMappingContext*         InputMappingContext                                    (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortBarnTowelFlyingBlueprintLibrary::ClearInputActionDisplayContext(class AFortPawn* PlayerPawn, const class UFortInputMappingContext* InputMappingContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortBarnTowelFlyingBlueprintLibrary", "ClearInputActionDisplayContext");

	Params::FortBarnTowelFlyingBlueprintLibrary_ClearInputActionDisplayContext Parms{};

	Parms.PlayerPawn = PlayerPawn;
	Parms.InputMappingContext = InputMappingContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BarnTowelRuntime.FortBarnTowelFlyingBlueprintLibrary.FlyingStatusAddFlags
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// EBarnTowelFlyingStatus                  Status                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   FlagsToAdd                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBarnTowelFlyingStatus                  NewStatus                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortBarnTowelFlyingBlueprintLibrary::FlyingStatusAddFlags(EBarnTowelFlyingStatus Status, int32 FlagsToAdd, EBarnTowelFlyingStatus* NewStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortBarnTowelFlyingBlueprintLibrary", "FlyingStatusAddFlags");

	Params::FortBarnTowelFlyingBlueprintLibrary_FlyingStatusAddFlags Parms{};

	Parms.Status = Status;
	Parms.FlagsToAdd = FlagsToAdd;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (NewStatus != nullptr)
		*NewStatus = Parms.NewStatus;
}


// Function BarnTowelRuntime.FortBarnTowelFlyingBlueprintLibrary.FlyingStatusHasAllFlags
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EBarnTowelFlyingStatus                  Status                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Flags_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortBarnTowelFlyingBlueprintLibrary::FlyingStatusHasAllFlags(EBarnTowelFlyingStatus Status, int32 Flags_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortBarnTowelFlyingBlueprintLibrary", "FlyingStatusHasAllFlags");

	Params::FortBarnTowelFlyingBlueprintLibrary_FlyingStatusHasAllFlags Parms{};

	Parms.Status = Status;
	Parms.Flags_0 = Flags_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BarnTowelRuntime.FortBarnTowelFlyingBlueprintLibrary.FlyingStatusHasAnyFlags
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EBarnTowelFlyingStatus                  Status                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Flags_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortBarnTowelFlyingBlueprintLibrary::FlyingStatusHasAnyFlags(EBarnTowelFlyingStatus Status, int32 Flags_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortBarnTowelFlyingBlueprintLibrary", "FlyingStatusHasAnyFlags");

	Params::FortBarnTowelFlyingBlueprintLibrary_FlyingStatusHasAnyFlags Parms{};

	Parms.Status = Status;
	Parms.Flags_0 = Flags_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BarnTowelRuntime.FortBarnTowelFlyingBlueprintLibrary.FlyingStatusRemoveFlags
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// EBarnTowelFlyingStatus                  Status                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   FlagsToRemove                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBarnTowelFlyingStatus                  NewStatus                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortBarnTowelFlyingBlueprintLibrary::FlyingStatusRemoveFlags(EBarnTowelFlyingStatus Status, int32 FlagsToRemove, EBarnTowelFlyingStatus* NewStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortBarnTowelFlyingBlueprintLibrary", "FlyingStatusRemoveFlags");

	Params::FortBarnTowelFlyingBlueprintLibrary_FlyingStatusRemoveFlags Parms{};

	Parms.Status = Status;
	Parms.FlagsToRemove = FlagsToRemove;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (NewStatus != nullptr)
		*NewStatus = Parms.NewStatus;
}


// Function BarnTowelRuntime.FortBarnTowelFlyingBlueprintLibrary.GetDodgeElapsedTime
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UFortMovementMode_BarnTowelFlyingRuntimeData*MoveStatus                                             (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UFortBarnTowelFlyingBlueprintLibrary::GetDodgeElapsedTime(const class UFortMovementMode_BarnTowelFlyingRuntimeData* MoveStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortBarnTowelFlyingBlueprintLibrary", "GetDodgeElapsedTime");

	Params::FortBarnTowelFlyingBlueprintLibrary_GetDodgeElapsedTime Parms{};

	Parms.MoveStatus = MoveStatus;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BarnTowelRuntime.FortBarnTowelFlyingBlueprintLibrary.GetFlyingDuration
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UFortMovementMode_BarnTowelFlyingRuntimeData*MoveStatus                                             (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UFortBarnTowelFlyingBlueprintLibrary::GetFlyingDuration(const class UFortMovementMode_BarnTowelFlyingRuntimeData* MoveStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortBarnTowelFlyingBlueprintLibrary", "GetFlyingDuration");

	Params::FortBarnTowelFlyingBlueprintLibrary_GetFlyingDuration Parms{};

	Parms.MoveStatus = MoveStatus;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BarnTowelRuntime.FortBarnTowelFlyingBlueprintLibrary.GetFlyingStatusElapsedTime
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EBarnTowelFlyingStatus                  FlyingStatus                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UFortMovementMode_BarnTowelFlyingRuntimeData*MoveStatus                                             (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UFortBarnTowelFlyingBlueprintLibrary::GetFlyingStatusElapsedTime(const EBarnTowelFlyingStatus FlyingStatus, const class UFortMovementMode_BarnTowelFlyingRuntimeData* MoveStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortBarnTowelFlyingBlueprintLibrary", "GetFlyingStatusElapsedTime");

	Params::FortBarnTowelFlyingBlueprintLibrary_GetFlyingStatusElapsedTime Parms{};

	Parms.FlyingStatus = FlyingStatus;
	Parms.MoveStatus = MoveStatus;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BarnTowelRuntime.FortBarnTowelFlyingBlueprintLibrary.SetInputActionDisplayContext
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AFortPawn*                        PlayerPawn                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UFortInputMappingContext*         InputMappingContext                                    (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortBarnTowelFlyingBlueprintLibrary::SetInputActionDisplayContext(class AFortPawn* PlayerPawn, const class UFortInputMappingContext* InputMappingContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortBarnTowelFlyingBlueprintLibrary", "SetInputActionDisplayContext");

	Params::FortBarnTowelFlyingBlueprintLibrary_SetInputActionDisplayContext Parms{};

	Parms.PlayerPawn = PlayerPawn;
	Parms.InputMappingContext = InputMappingContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BarnTowelRuntime.FortBarnTowelFlyingBlueprintLibrary.TraceForWorldAndWater
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class AActor*                           PlayerPawn                                             (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          TraceStart                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          TraceEnd                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsBlockingHit                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       ClosestHit                                             (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UFortBarnTowelFlyingBlueprintLibrary::TraceForWorldAndWater(const class AActor* PlayerPawn, const struct FVector& TraceStart, const struct FVector& TraceEnd, bool* bIsBlockingHit, struct FHitResult* ClosestHit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortBarnTowelFlyingBlueprintLibrary", "TraceForWorldAndWater");

	Params::FortBarnTowelFlyingBlueprintLibrary_TraceForWorldAndWater Parms{};

	Parms.PlayerPawn = PlayerPawn;
	Parms.TraceStart = std::move(TraceStart);
	Parms.TraceEnd = std::move(TraceEnd);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bIsBlockingHit != nullptr)
		*bIsBlockingHit = Parms.bIsBlockingHit;

	if (ClosestHit != nullptr)
		*ClosestHit = std::move(Parms.ClosestHit);
}


// Function BarnTowelRuntime.FortCameraModifier_BarnTowel.NativeActivate
// (Final, Native, Public, BlueprintCallable)

void UFortCameraModifier_BarnTowel::NativeActivate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortCameraModifier_BarnTowel", "NativeActivate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BarnTowelRuntime.FortCameraModifier_BarnTowel.NativeDeactivate
// (Final, Native, Public, BlueprintCallable)

void UFortCameraModifier_BarnTowel::NativeDeactivate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortCameraModifier_BarnTowel", "NativeDeactivate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BarnTowelRuntime.FortCameraModifier_BarnTowel.UseNativeCalculation
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortCameraModifier_BarnTowel::UseNativeCalculation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortCameraModifier_BarnTowel", "UseNativeCalculation");

	Params::FortCameraModifier_BarnTowel_UseNativeCalculation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BarnTowelRuntime.FortGameplayAbility_LaunchBarnTowel.NativeStartDestructionTrace
// (Final, Native, Protected, BlueprintCallable)

void UFortGameplayAbility_LaunchBarnTowel::NativeStartDestructionTrace()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortGameplayAbility_LaunchBarnTowel", "NativeStartDestructionTrace");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BarnTowelRuntime.FortGameplayAbility_LaunchBarnTowel.NativeStopDestructionTrace
// (Final, Native, Protected, BlueprintCallable)

void UFortGameplayAbility_LaunchBarnTowel::NativeStopDestructionTrace()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortGameplayAbility_LaunchBarnTowel", "NativeStopDestructionTrace");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BarnTowelRuntime.FortGameplayAbility_LaunchBarnTowel.ResetDestructionIgnoredCollision
// (Final, Native, Protected, BlueprintCallable)

void UFortGameplayAbility_LaunchBarnTowel::ResetDestructionIgnoredCollision()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortGameplayAbility_LaunchBarnTowel", "ResetDestructionIgnoredCollision");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BarnTowelRuntime.FortMovementMode_ExtLogicFlyingBarnTowel.BlueprintUpdateForHitResponse
// (Event, Protected, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// class UFortMovementMode_BarnTowelFlyingRuntimeData*MoveStatus                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DeltaTime                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          InVelocity                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OldPosition                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Adjustement                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// EFortMovementModeExt_PhysUpdateResult   OutHitResult                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bOutWantToSlide                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortMovementMode_ExtLogicFlyingBarnTowel::BlueprintUpdateForHitResponse(class UFortMovementMode_BarnTowelFlyingRuntimeData* MoveStatus, const float DeltaTime, const struct FVector& InVelocity, const struct FVector& OldPosition, const struct FVector& Adjustement, const struct FHitResult& Hit, EFortMovementModeExt_PhysUpdateResult* OutHitResult, bool* bOutWantToSlide)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortMovementMode_ExtLogicFlyingBarnTowel", "BlueprintUpdateForHitResponse");

	Params::FortMovementMode_ExtLogicFlyingBarnTowel_BlueprintUpdateForHitResponse Parms{};

	Parms.MoveStatus = MoveStatus;
	Parms.DeltaTime = DeltaTime;
	Parms.InVelocity = std::move(InVelocity);
	Parms.OldPosition = std::move(OldPosition);
	Parms.Adjustement = std::move(Adjustement);
	Parms.Hit = std::move(Hit);

	UObject::ProcessEvent(Func, &Parms);

	if (OutHitResult != nullptr)
		*OutHitResult = Parms.OutHitResult;

	if (bOutWantToSlide != nullptr)
		*bOutWantToSlide = Parms.bOutWantToSlide;
}


// Function BarnTowelRuntime.FortMovementMode_ExtLogicFlyingBarnTowel.BlueprintUpdateForMovement
// (Event, Protected, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// class UFortMovementMode_BarnTowelFlyingRuntimeData*MoveStatus                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DeltaTime                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          InVelocity                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          InAcceleration                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutNewVelocity                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutNewAcceleration                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortMovementMode_ExtLogicFlyingBarnTowel::BlueprintUpdateForMovement(class UFortMovementMode_BarnTowelFlyingRuntimeData* MoveStatus, const float DeltaTime, const struct FVector& InVelocity, const struct FVector& InAcceleration, struct FVector* OutNewVelocity, struct FVector* OutNewAcceleration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortMovementMode_ExtLogicFlyingBarnTowel", "BlueprintUpdateForMovement");

	Params::FortMovementMode_ExtLogicFlyingBarnTowel_BlueprintUpdateForMovement Parms{};

	Parms.MoveStatus = MoveStatus;
	Parms.DeltaTime = DeltaTime;
	Parms.InVelocity = std::move(InVelocity);
	Parms.InAcceleration = std::move(InAcceleration);

	UObject::ProcessEvent(Func, &Parms);

	if (OutNewVelocity != nullptr)
		*OutNewVelocity = std::move(Parms.OutNewVelocity);

	if (OutNewAcceleration != nullptr)
		*OutNewAcceleration = std::move(Parms.OutNewAcceleration);
}


// Function BarnTowelRuntime.FortMovementMode_ExtLogicFlyingBarnTowel.GetControlRotationToUse
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator UFortMovementMode_ExtLogicFlyingBarnTowel::GetControlRotationToUse()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortMovementMode_ExtLogicFlyingBarnTowel", "GetControlRotationToUse");

	Params::FortMovementMode_ExtLogicFlyingBarnTowel_GetControlRotationToUse Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BarnTowelRuntime.FortMovementMode_ExtLogicFlyingBarnTowel.HandleFlyingStatusActivationFailed
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// EBarnTowelFlyingStatus                  FailedStatus                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     FailureTag                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortMovementMode_ExtLogicFlyingBarnTowel::HandleFlyingStatusActivationFailed(EBarnTowelFlyingStatus FailedStatus, const struct FGameplayTag& FailureTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortMovementMode_ExtLogicFlyingBarnTowel", "HandleFlyingStatusActivationFailed");

	Params::FortMovementMode_ExtLogicFlyingBarnTowel_HandleFlyingStatusActivationFailed Parms{};

	Parms.FailedStatus = FailedStatus;
	Parms.FailureTag = std::move(FailureTag);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BarnTowelRuntime.FortMovementMode_ExtLogicFlyingBarnTowel.HandleFlyingStatusChanged
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// class UFortMovementMode_BarnTowelFlyingRuntimeData*MoveStatus                                             (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBarnTowelFlyingStatus                  NewStatus                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsActive                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     FailureTag                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortMovementMode_ExtLogicFlyingBarnTowel::HandleFlyingStatusChanged(const class UFortMovementMode_BarnTowelFlyingRuntimeData* MoveStatus, EBarnTowelFlyingStatus NewStatus, const bool bIsActive, const struct FGameplayTag& FailureTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortMovementMode_ExtLogicFlyingBarnTowel", "HandleFlyingStatusChanged");

	Params::FortMovementMode_ExtLogicFlyingBarnTowel_HandleFlyingStatusChanged Parms{};

	Parms.MoveStatus = MoveStatus;
	Parms.NewStatus = NewStatus;
	Parms.bIsActive = bIsActive;
	Parms.FailureTag = std::move(FailureTag);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BarnTowelRuntime.FortMovementMode_ExtLogicFlyingBarnTowel.CanContinueFlyingStatus
// (Native, Event, Protected, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class UFortMovementMode_BarnTowelFlyingRuntimeData*MoveStatus                                             (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBarnTowelFlyingStatus                  StatusToContinue                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ElapsedDuration                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bOutCanContinue                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     OutFailureTag                                          (Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortMovementMode_ExtLogicFlyingBarnTowel::CanContinueFlyingStatus(const class UFortMovementMode_BarnTowelFlyingRuntimeData* MoveStatus, EBarnTowelFlyingStatus StatusToContinue, const float ElapsedDuration, bool* bOutCanContinue, struct FGameplayTag* OutFailureTag) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortMovementMode_ExtLogicFlyingBarnTowel", "CanContinueFlyingStatus");

	Params::FortMovementMode_ExtLogicFlyingBarnTowel_CanContinueFlyingStatus Parms{};

	Parms.MoveStatus = MoveStatus;
	Parms.StatusToContinue = StatusToContinue;
	Parms.ElapsedDuration = ElapsedDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bOutCanContinue != nullptr)
		*bOutCanContinue = Parms.bOutCanContinue;

	if (OutFailureTag != nullptr)
		*OutFailureTag = std::move(Parms.OutFailureTag);
}


// Function BarnTowelRuntime.FortMovementMode_ExtLogicFlyingBarnTowel.CanEndFlyingStatus
// (Native, Event, Protected, BlueprintEvent, Const)
// Parameters:
// class UFortMovementMode_BarnTowelFlyingRuntimeData*MoveStatus                                             (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBarnTowelFlyingStatus                  StatusToEnd                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ElapsedDuration                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortMovementMode_ExtLogicFlyingBarnTowel::CanEndFlyingStatus(const class UFortMovementMode_BarnTowelFlyingRuntimeData* MoveStatus, EBarnTowelFlyingStatus StatusToEnd, float ElapsedDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortMovementMode_ExtLogicFlyingBarnTowel", "CanEndFlyingStatus");

	Params::FortMovementMode_ExtLogicFlyingBarnTowel_CanEndFlyingStatus Parms{};

	Parms.MoveStatus = MoveStatus;
	Parms.StatusToEnd = StatusToEnd;
	Parms.ElapsedDuration = ElapsedDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BarnTowelRuntime.FortMovementMode_ExtLogicFlyingBarnTowel.CanStartFlyingStatus
// (Native, Event, Protected, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class UFortMovementMode_BarnTowelFlyingRuntimeData*MoveStatus                                             (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBarnTowelFlyingStatus                  StatusToStart                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bOutCanStart                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     OutFailureTag                                          (Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortMovementMode_ExtLogicFlyingBarnTowel::CanStartFlyingStatus(const class UFortMovementMode_BarnTowelFlyingRuntimeData* MoveStatus, EBarnTowelFlyingStatus StatusToStart, bool* bOutCanStart, struct FGameplayTag* OutFailureTag) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortMovementMode_ExtLogicFlyingBarnTowel", "CanStartFlyingStatus");

	Params::FortMovementMode_ExtLogicFlyingBarnTowel_CanStartFlyingStatus Parms{};

	Parms.MoveStatus = MoveStatus;
	Parms.StatusToStart = StatusToStart;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bOutCanStart != nullptr)
		*bOutCanStart = Parms.bOutCanStart;

	if (OutFailureTag != nullptr)
		*OutFailureTag = std::move(Parms.OutFailureTag);
}


// Function BarnTowelRuntime.FortMovementMode_ExtLogicFlyingBarnTowel.IsClientReplaying
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortMovementMode_ExtLogicFlyingBarnTowel::IsClientReplaying() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortMovementMode_ExtLogicFlyingBarnTowel", "IsClientReplaying");

	Params::FortMovementMode_ExtLogicFlyingBarnTowel_IsClientReplaying Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BarnTowelRuntime.FortWeaponBarnTowel.EndFlying
// (Final, BlueprintCosmetic, Native, Public, BlueprintCallable)

void AFortWeaponBarnTowel::EndFlying()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortWeaponBarnTowel", "EndFlying");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BarnTowelRuntime.FortWeaponBarnTowel.HandleForwardSpeedUpdated
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   NewForwardSpeed                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortWeaponBarnTowel::HandleForwardSpeedUpdated(const float NewForwardSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortWeaponBarnTowel", "HandleForwardSpeedUpdated");

	Params::FortWeaponBarnTowel_HandleForwardSpeedUpdated Parms{};

	Parms.NewForwardSpeed = NewForwardSpeed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BarnTowelRuntime.FortWeaponBarnTowel.HandleInstigatorASCInitialized
// (Final, Native, Protected)
// Parameters:
// class UFortAbilitySystemComponent*      AbilitySystemComponent                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AFortPlayerPawn*                  AffectedPawn                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortWeaponBarnTowel::HandleInstigatorASCInitialized(class UFortAbilitySystemComponent* AbilitySystemComponent, class AFortPlayerPawn* AffectedPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortWeaponBarnTowel", "HandleInstigatorASCInitialized");

	Params::FortWeaponBarnTowel_HandleInstigatorASCInitialized Parms{};

	Parms.AbilitySystemComponent = AbilitySystemComponent;
	Parms.AffectedPawn = AffectedPawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BarnTowelRuntime.FortWeaponBarnTowel.HandleMeshRotationValuesUpdated
// (Event, Public, HasDefaults, BlueprintEvent)
// Parameters:
// struct FRotator                         GoalMovementOrientation                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                          GoalMovementDirection                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          CurrentNoiseOffset                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          DodgeVelocity                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        MovementInput                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsStartingFlying                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsinInitialHover                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsInInitialHoverWithBuffer                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TimeLeftInInitialHover                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortWeaponBarnTowel::HandleMeshRotationValuesUpdated(const struct FRotator& GoalMovementOrientation, const struct FVector& GoalMovementDirection, const struct FVector& CurrentNoiseOffset, const struct FVector& DodgeVelocity, const struct FVector2D& MovementInput, const bool bIsStartingFlying, const bool bIsinInitialHover, const bool bIsInInitialHoverWithBuffer, const float TimeLeftInInitialHover)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortWeaponBarnTowel", "HandleMeshRotationValuesUpdated");

	Params::FortWeaponBarnTowel_HandleMeshRotationValuesUpdated Parms{};

	Parms.GoalMovementOrientation = std::move(GoalMovementOrientation);
	Parms.GoalMovementDirection = std::move(GoalMovementDirection);
	Parms.CurrentNoiseOffset = std::move(CurrentNoiseOffset);
	Parms.DodgeVelocity = std::move(DodgeVelocity);
	Parms.MovementInput = std::move(MovementInput);
	Parms.bIsStartingFlying = bIsStartingFlying;
	Parms.bIsinInitialHover = bIsinInitialHover;
	Parms.bIsInInitialHoverWithBuffer = bIsInInitialHoverWithBuffer;
	Parms.TimeLeftInInitialHover = TimeLeftInInitialHover;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BarnTowelRuntime.FortWeaponBarnTowel.StartFlying
// (Final, BlueprintCosmetic, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FFortMovementMode_FlyingCreationDataCreationData                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void AFortWeaponBarnTowel::StartFlying(const struct FFortMovementMode_FlyingCreationData& CreationData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortWeaponBarnTowel", "StartFlying");

	Params::FortWeaponBarnTowel_StartFlying Parms{};

	Parms.CreationData = std::move(CreationData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BarnTowelRuntime.FortWeaponBarnTowel.GetLocalFlyingMoveActionValue
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D AFortWeaponBarnTowel::GetLocalFlyingMoveActionValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortWeaponBarnTowel", "GetLocalFlyingMoveActionValue");

	Params::FortWeaponBarnTowel_GetLocalFlyingMoveActionValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

