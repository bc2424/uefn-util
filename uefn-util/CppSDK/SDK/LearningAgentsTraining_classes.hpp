#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LearningAgentsTraining

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "LearningAgentsTraining_structs.hpp"
#include "LearningAgents_classes.hpp"


namespace SDK
{

// Class LearningAgentsTraining.LearningAgentsCommunicatorLibrary
// 0x0000 (0x0030 - 0x0030)
class ULearningAgentsCommunicatorLibrary final : public UBlueprintFunctionLibrary
{
public:
	static struct FLearningAgentsCommunicator MakeSharedMemoryCommunicator(const struct FLearningAgentsTrainerProcess& TrainerProcess, const struct FLearningAgentsTrainerProcessSettings& TrainerProcessSettings, const struct FLearningAgentsSharedMemoryCommunicatorSettings& SharedMemorySettings);
	static struct FLearningAgentsCommunicator MakeSocketCommunicator(const struct FLearningAgentsTrainerProcess& TrainerProcess, const struct FLearningAgentsSocketCommunicatorSettings& SocketSettings);
	static struct FLearningAgentsTrainerProcess SpawnSharedMemoryTrainingProcess(const struct FLearningAgentsTrainerProcessSettings& TrainerProcessSettings, const struct FLearningAgentsSharedMemoryCommunicatorSettings& SharedMemorySettings);
	static struct FLearningAgentsTrainerProcess SpawnSocketTrainingProcess(const struct FLearningAgentsTrainerProcessSettings& TrainerProcessSettings, const struct FLearningAgentsSocketCommunicatorSettings& SocketSettings);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LearningAgentsCommunicatorLibrary">();
	}
	static class ULearningAgentsCommunicatorLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULearningAgentsCommunicatorLibrary>();
	}
};

// Class LearningAgentsTraining.LearningAgentsCompletions
// 0x0000 (0x0030 - 0x0030)
class ULearningAgentsCompletions final : public UBlueprintFunctionLibrary
{
public:
	static ELearningAgentsCompletion CompletionAnd(ELearningAgentsCompletion A, ELearningAgentsCompletion B);
	static ELearningAgentsCompletion CompletionNot(ELearningAgentsCompletion A, ELearningAgentsCompletion NotRunningType);
	static ELearningAgentsCompletion CompletionOr(ELearningAgentsCompletion A, ELearningAgentsCompletion B);
	static bool IsCompletionCompleted(const ELearningAgentsCompletion Completion);
	static bool IsCompletionRunning(const ELearningAgentsCompletion Completion);
	static bool IsCompletionTermination(const ELearningAgentsCompletion Completion);
	static bool IsCompletionTruncation(const ELearningAgentsCompletion Completion);
	static ELearningAgentsCompletion MakeCompletion(const ELearningAgentsCompletion CompletionType, const class FName Tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor);
	static ELearningAgentsCompletion MakeCompletionOnCondition(const bool bCondition, const ELearningAgentsCompletion CompletionType, const class FName Tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor);
	static ELearningAgentsCompletion MakeCompletionOnEpisodeStepsRecorded(const int32 EpisodeSteps, const int32 MaxEpisodeSteps, const ELearningAgentsCompletion CompletionType, const class FName Tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor);
	static ELearningAgentsCompletion MakeCompletionOnLocationDifferenceAboveThreshold(const struct FVector& LocationA, const struct FVector& LocationB, const float DistanceThreshold, const ELearningAgentsCompletion CompletionType, const class FName Tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor);
	static ELearningAgentsCompletion MakeCompletionOnLocationDifferenceBelowThreshold(const struct FVector& LocationA, const struct FVector& LocationB, const float DistanceThreshold, const ELearningAgentsCompletion CompletionType, const class FName Tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor);
	static ELearningAgentsCompletion MakeCompletionOnLocationOutsideBounds(const struct FVector& Location, const struct FTransform& BoundsTransform, const struct FVector& BoundsMins, const struct FVector& BoundsMaxs, const ELearningAgentsCompletion CompletionType, const class FName Tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor);
	static ELearningAgentsCompletion MakeCompletionOnTimeElapsed(const float Time, const float TimeThreshold, const ELearningAgentsCompletion CompletionType, const class FName Tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LearningAgentsCompletions">();
	}
	static class ULearningAgentsCompletions* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULearningAgentsCompletions>();
	}
};

// Class LearningAgentsTraining.LearningAgentsImitationTrainer
// 0x0020 (0x00B0 - 0x0090)
class ULearningAgentsImitationTrainer final : public ULearningAgentsManagerListener
{
public:
	class ULearningAgentsInteractor*              Interactor;                                        // 0x0090(0x0008)(Edit, ZeroConstructor, Transient, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ULearningAgentsPolicy*                  Policy;                                            // 0x0098(0x0008)(Edit, ZeroConstructor, Transient, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bIsTraining;                                       // 0x00A0(0x0001)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bHasTrainingFailed;                                // 0x00A1(0x0001)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_A2[0xE];                                       // 0x00A2(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class ULearningAgentsImitationTrainer* MakeImitationTrainer(class ULearningAgentsManager* InManager, class ULearningAgentsInteractor* InInteractor, class ULearningAgentsPolicy* InPolicy, TSubclassOf<class ULearningAgentsImitationTrainer> Class_0);

	void BeginTraining(const class ULearningAgentsRecording* Recording, const struct FLearningAgentsImitationTrainerSettings& ImitationTrainerSettings, const struct FLearningAgentsImitationTrainerTrainingSettings& ImitationTrainerTrainingSettings, const struct FLearningAgentsTrainerProcessSettings& ImitationTrainerPathSettings);
	void EndTraining();
	void IterateTraining();
	void RunTraining(const class ULearningAgentsRecording* Recording, const struct FLearningAgentsImitationTrainerSettings& ImitationTrainerSettings, const struct FLearningAgentsImitationTrainerTrainingSettings& ImitationTrainerTrainingSettings, const struct FLearningAgentsTrainerProcessSettings& ImitationTrainerPathSettings);

	bool HasTrainingFailed() const;
	bool IsTraining() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LearningAgentsImitationTrainer">();
	}
	static class ULearningAgentsImitationTrainer* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULearningAgentsImitationTrainer>();
	}
};

// Class LearningAgentsTraining.LearningAgentsPPOTrainer
// 0x0068 (0x00F8 - 0x0090)
class ULearningAgentsPPOTrainer final : public ULearningAgentsManagerListener
{
public:
	class ULearningAgentsInteractor*              Interactor;                                        // 0x0090(0x0008)(Edit, ZeroConstructor, Transient, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ULearningAgentsTrainingEnvironment*     TrainingEnvironment;                               // 0x0098(0x0008)(Edit, ZeroConstructor, Transient, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ULearningAgentsPolicy*                  Policy;                                            // 0x00A0(0x0008)(Edit, ZeroConstructor, Transient, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ULearningAgentsCritic*                  Critic;                                            // 0x00A8(0x0008)(Edit, ZeroConstructor, Transient, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bIsTraining;                                       // 0x00B0(0x0001)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bHasTrainingFailed;                                // 0x00B1(0x0001)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_B2[0x46];                                      // 0x00B2(0x0046)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class ULearningAgentsPPOTrainer* MakePPOTrainer(class ULearningAgentsManager* InManager, class ULearningAgentsInteractor* InInteractor, class ULearningAgentsTrainingEnvironment* InTrainingEnvironment, class ULearningAgentsPolicy* InPolicy, class ULearningAgentsCritic* InCritic, const struct FLearningAgentsCommunicator& Communicator, TSubclassOf<class ULearningAgentsPPOTrainer> Class_0, const class FName Name_0, const struct FLearningAgentsPPOTrainerSettings& TrainerSettings);

	void BeginTraining(const struct FLearningAgentsPPOTrainingSettings& TrainerTrainingSettings, const struct FLearningAgentsTrainingGameSettings& TrainingGameSettings, const bool bResetAgentsOnBegin);
	void EndTraining();
	void ProcessExperience(const bool bResetAgentsOnUpdate);
	void RunTraining(const struct FLearningAgentsPPOTrainingSettings& TrainerTrainingSettings, const struct FLearningAgentsTrainingGameSettings& TrainingGameSettings, const bool bResetAgentsOnBegin, const bool bResetAgentsOnUpdate);
	void SetupPPOTrainer(class ULearningAgentsManager* InManager, class ULearningAgentsInteractor* InInteractor, class ULearningAgentsTrainingEnvironment* InTrainingEnvironment, class ULearningAgentsPolicy* InPolicy, class ULearningAgentsCritic* InCritic, const struct FLearningAgentsCommunicator& Communicator, const struct FLearningAgentsPPOTrainerSettings& TrainerSettings);

	int32 GetEpisodeStepNum(const int32 AgentId) const;
	bool HasTrainingFailed() const;
	const bool IsTraining() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LearningAgentsPPOTrainer">();
	}
	static class ULearningAgentsPPOTrainer* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULearningAgentsPPOTrainer>();
	}
};

// Class LearningAgentsTraining.LearningAgentsRecorder
// 0x4638 (0x46C8 - 0x0090)
class ULearningAgentsRecorder final : public ULearningAgentsManagerListener
{
public:
	class ULearningAgentsInteractor*              Interactor;                                        // 0x0090(0x0008)(Edit, ZeroConstructor, Transient, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ULearningAgentsRecording*               Recording;                                         // 0x0098(0x0008)(Edit, ZeroConstructor, Transient, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bIsRecording;                                      // 0x00A0(0x0001)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_A1[0x4627];                                    // 0x00A1(0x4627)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class ULearningAgentsRecorder* MakeRecorder(class ULearningAgentsManager* InManager, class ULearningAgentsInteractor* InInteractor, TSubclassOf<class ULearningAgentsRecorder> Class_0, const class FName Name_0, const struct FLearningAgentsRecorderPathSettings& RecorderPathSettings, class ULearningAgentsRecording* RecordingAsset, bool bReinitializeRecording);

	void AddExperience();
	void BeginRecording();
	void EndRecording();
	void EndRecordingAndDiscard();
	void SetupRecorder(class ULearningAgentsManager* InManager, class ULearningAgentsInteractor* InInteractor, const struct FLearningAgentsRecorderPathSettings& RecorderPathSettings, class ULearningAgentsRecording* RecordingAsset, bool bReinitializeRecording);

	const class ULearningAgentsRecording* GetRecordingAsset() const;
	bool IsRecording() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LearningAgentsRecorder">();
	}
	static class ULearningAgentsRecorder* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULearningAgentsRecorder>();
	}
};

// Class LearningAgentsTraining.LearningAgentsRecording
// 0x0010 (0x0048 - 0x0038)
class ULearningAgentsRecording final : public UDataAsset
{
public:
	TArray<struct FLearningAgentsRecord>          Records;                                           // 0x0038(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, NativeAccessSpecifierPublic)

public:
	void AppendRecordingFromFile(const struct FFilePath& File);
	void AppendRecordingToAsset(class ULearningAgentsRecording* RecordingAsset);
	void GetActionVector(TArray<float>* OutActionVector, int32* OutActionCompatibilityHash, const int32 Record, const int32 Step);
	void GetObservationVector(TArray<float>* OutObservationVector, int32* OutObservationCompatibilityHash, const int32 Record, const int32 Step);
	void LoadRecordingFromAsset(class ULearningAgentsRecording* RecordingAsset);
	void LoadRecordingFromFile(const struct FFilePath& File);
	void ResetRecording();
	void SaveRecordingToAsset(class ULearningAgentsRecording* RecordingAsset);

	int32 GetRecordNum() const;
	int32 GetRecordStepNum(const int32 Record) const;
	void SaveRecordingToFile(const struct FFilePath& File) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LearningAgentsRecording">();
	}
	static class ULearningAgentsRecording* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULearningAgentsRecording>();
	}
};

// Class LearningAgentsTraining.LearningAgentsRewards
// 0x0000 (0x0030 - 0x0030)
class ULearningAgentsRewards final : public UBlueprintFunctionLibrary
{
public:
	static float MakeReward(const float RewardValue, const float RewardScale, const class FName Tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor);
	static float MakeRewardFromAngleSimilarity(const float AngleA, const float AngleB, const float RewardScale, const class FName Tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerAngleLocationA, const struct FVector& VisualLoggerAngleLocationB, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor);
	static float MakeRewardFromDirectionSimilarity(const struct FVector& DirectionA, const struct FVector& DirectionB, const float RewardScale, const class FName Tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerDirectionLocationA, const struct FVector& VisualLoggerDirectionLocationB, const struct FVector& VisualLoggerLocation, const float VisualLoggerArrowLength, const struct FLinearColor& VisualLoggerColor);
	static float MakeRewardFromLocationDifference(const struct FVector& LocationA, const struct FVector& LocationB, const float LocationScale, const float RewardScale, const class FName Tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor);
	static float MakeRewardFromLocationSimilarity(const struct FVector& LocationA, const struct FVector& LocationB, const float LocationScale, const float RewardScale, const class FName Tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor);
	static float MakeRewardFromRotationSimilarity(const struct FRotator& RotationA, const struct FRotator& RotationB, const float RewardScale, const class FName Tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerRotationLocationA, const struct FVector& VisualLoggerRotationLocationB, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor);
	static float MakeRewardFromRotationSimilarityAsQuats(const struct FQuat& RotationA, const struct FQuat& RotationB, const float RewardScale, const class FName Tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerRotationLocationA, const struct FVector& VisualLoggerRotationLocationB, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor);
	static float MakeRewardFromVelocityAlongSpline(const class USplineComponent* SplineComponent, const struct FVector& Location, const struct FVector& Velocity, const float VelocityScale, const float RewardScale, const float FiniteDifferenceDelta, const class FName Tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor);
	static float MakeRewardOnCondition(const bool bCondition, const float RewardScale, const class FName Tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor);
	static float MakeRewardOnLocationDifferenceAboveThreshold(const struct FVector& LocationA, const struct FVector& LocationB, const float DistanceThreshold, const float RewardScale, const class FName Tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor);
	static float MakeRewardOnLocationDifferenceBelowThreshold(const struct FVector& LocationA, const struct FVector& LocationB, const float DistanceThreshold, const float RewardScale, const class FName Tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LearningAgentsRewards">();
	}
	static class ULearningAgentsRewards* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULearningAgentsRewards>();
	}
};

// Class LearningAgentsTraining.LearningAgentsTrainingEnvironment
// 0x0298 (0x0328 - 0x0090)
class ULearningAgentsTrainingEnvironment final : public ULearningAgentsManagerListener
{
public:
	uint8                                         Pad_90[0x298];                                     // 0x0090(0x0298)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class ULearningAgentsTrainingEnvironment* MakeTrainingEnvironment(class ULearningAgentsManager* InManager, TSubclassOf<class ULearningAgentsTrainingEnvironment> Class_0, const class FName Name_0);

	void GatherAgentCompletion(ELearningAgentsCompletion* OutCompletion, const int32 AgentId);
	void GatherAgentCompletions(TArray<ELearningAgentsCompletion>* OutCompletions, const TArray<int32>& AgentIds);
	void GatherAgentReward(float* OutReward, const int32 AgentId);
	void GatherAgentRewards(TArray<float>* OutRewards, const TArray<int32>& AgentIds);
	void GatherCompletions();
	void GatherRewards();
	void ResetAgentEpisode(const int32 AgentId);
	void ResetAgentEpisodes(const TArray<int32>& AgentIds);
	void SetupTrainingEnvironment(class ULearningAgentsManager* InManager);

	ELearningAgentsCompletion GetCompletion(const int32 AgentId) const;
	float GetEpisodeTime(const int32 AgentId) const;
	float GetReward(const int32 AgentId) const;
	bool HasCompletion(const int32 AgentId) const;
	bool HasReward(const int32 AgentId) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LearningAgentsTrainingEnvironment">();
	}
	static class ULearningAgentsTrainingEnvironment* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULearningAgentsTrainingEnvironment>();
	}
};

}

