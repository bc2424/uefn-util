#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BeanstalkDevicesCoreRuntime

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "BeanstalkDevicesCoreRuntime_structs.hpp"


namespace SDK
{

// Class BeanstalkDevicesCoreRuntime.BeanDeviceFunctionLibrary
// 0x0000 (0x0030 - 0x0030)
class UBeanDeviceFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static struct FVector CalculateKnockbackForce(const struct FBeanKnockbackForceCalculator& KnockbackForceCalculator, const struct FVector& SourceLocation, const struct FVector& TargetLocation);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BeanDeviceFunctionLibrary">();
	}
	static class UBeanDeviceFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBeanDeviceFunctionLibrary>();
	}
};

// Class BeanstalkDevicesCoreRuntime.BeanObstacleImpactComponent
// 0x0090 (0x0168 - 0x00D8)
class UBeanObstacleImpactComponent final : public UActorComponent
{
public:
	uint8                                         Pad_D8[0x8];                                       // 0x00D8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class UPrimitiveComponent* MySourceComponent, class AActor* TargetActor, struct FVector& ImpactPoint, struct FVector& ImpactVector)> OnObstacleImpact;                                  // 0x00E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	bool                                          bApplyDefaultKnockback;                            // 0x00F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bApplyRagdoll;                                     // 0x00F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_F2[0x6];                                       // 0x00F2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FComponentReference>            AffectedColliders;                                 // 0x00F8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	struct FBeanKnockbackForceCalculator          KnockbackForce;                                    // 0x0108(0x0030)(Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bApplyImpactLocally;                               // 0x0138(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_139[0x7];                                      // 0x0139(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MaxExpectedComponentVelocityForServerValidation;   // 0x0140(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<TWeakObjectPtr<class UPrimitiveComponent>> CachedColliders;                                   // 0x0148(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<struct FBeanComponentTransformDelta>   CachedColliderDeltas;                              // 0x0158(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)

public:
	void OnAffectedComponentHit(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void OnSleepStateChanged(bool bIsSleeping);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BeanObstacleImpactComponent">();
	}
	static class UBeanObstacleImpactComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBeanObstacleImpactComponent>();
	}
};

// Class BeanstalkDevicesCoreRuntime.BeanObstacleMeshSelectorComponent
// 0x0058 (0x0130 - 0x00D8)
class UBeanObstacleMeshSelectorComponent final : public UActorComponent
{
public:
	TMulticastInlineDelegate<void(class UStaticMeshComponent* MeshComponent, class UStaticMesh* SelectedMesh)> OnSelectedMeshSetDelegate;                         // 0x00D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FComponentReference                    TargetStaticMeshComponentRef;                      // 0x00E8(0x0030)(Edit, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FSelectableMeshData>            SelectableMeshes;                                  // 0x0118(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class UStaticMeshComponent*                   TargetStaticMeshComponent;                         // 0x0128(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	bool SetSelectedMeshIndex(int32 MeshIndex);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BeanObstacleMeshSelectorComponent">();
	}
	static class UBeanObstacleMeshSelectorComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBeanObstacleMeshSelectorComponent>();
	}
};

// Class BeanstalkDevicesCoreRuntime.BeanObstacleMotion
// 0x0000 (0x0030 - 0x0030)
class UBeanObstacleMotion : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BeanObstacleMotion">();
	}
	static class UBeanObstacleMotion* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBeanObstacleMotion>();
	}
};

// Class BeanstalkDevicesCoreRuntime.BeanObstacleMotion_Rotational
// 0x0010 (0x0040 - 0x0030)
class UBeanObstacleMotion_Rotational final : public UBeanObstacleMotion
{
public:
	EAxis                                         RotationAxis;                                      // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RotationSpeed;                                     // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         StartRotation;                                     // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BeanObstacleMotion_Rotational">();
	}
	static class UBeanObstacleMotion_Rotational* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBeanObstacleMotion_Rotational>();
	}
};

// Class BeanstalkDevicesCoreRuntime.BeanObstacleMotion_Punch
// 0x0030 (0x0060 - 0x0030)
class UBeanObstacleMotion_Punch final : public UBeanObstacleMotion
{
public:
	struct FVector                                MovementVector;                                    // 0x0030(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         StartDelay;                                        // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MoveOutDuration;                                   // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         OutPauseDuration;                                  // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MoveInDuration;                                    // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         InPauseDuration;                                   // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BeanObstacleMotion_Punch">();
	}
	static class UBeanObstacleMotion_Punch* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBeanObstacleMotion_Punch>();
	}
};

// Class BeanstalkDevicesCoreRuntime.BeanObstacleMovementComponent
// 0x00E8 (0x01C0 - 0x00D8)
class UBeanObstacleMovementComponent final : public UActorComponent
{
public:
	uint8                                         bRegisterWithBeanTickManager : 1;                  // 0x00D8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(EBeanObstacleMotionMovementState MovementState)> ClientOnStartedMoving;                             // 0x00E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(EBeanObstacleMotionMovementState PreviousMovementState)> ClientOnStoppedMoving;                             // 0x00F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	struct FComponentReference                    TargetComponentRef;                                // 0x0100(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UBeanObstacleMotion*                    ObstacleMotion;                                    // 0x0130(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShouldSweep;                                      // 0x0138(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bEnableEventSleeping;                              // 0x0139(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_13A[0x6];                                      // 0x013A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        EventSleepDistanceThreshold;                       // 0x0140(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	double                                        EventSleepPollInterval;                            // 0x0148(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                TargetComponentOriginalRelativeLocation;           // 0x0150(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_168[0x8];                                      // 0x0168(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  TargetComponentOriginalRelativeRotation;           // 0x0170(0x0020)(Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class USceneComponent>         TargetComponent;                                   // 0x0190(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	double                                        LastEventSleepPollTime;                            // 0x0198(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         bLastFiredEventWasStart : 1;                       // 0x01A0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         bAreEventsAsleep : 1;                              // 0x01A0(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         bIsUsingTickManager : 1;                           // 0x01A0(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         bIsObstacleTickSleeping : 1;                       // 0x01A0(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         bStartWithMotionEnabled : 1;                       // 0x01A0(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         Pad_1A1[0x7];                                      // 0x01A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBeanObstacleMotionRuntimeState        ObstacleMotionRuntimeState;                        // 0x01A8(0x0010)(Net, Transient, NoDestructor, NativeAccessSpecifierPrivate)
	EBeanObstacleMotionMovementState              LastObstacleMovementState;                         // 0x01B8(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1B9[0x7];                                      // 0x01B9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnSleepStateChanged(bool bIsSleeping);
	void SetIsMotionLocked(bool bNewIsLocked, bool bResetToInitial);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BeanObstacleMovementComponent">();
	}
	static class UBeanObstacleMovementComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBeanObstacleMovementComponent>();
	}
};

// Class BeanstalkDevicesCoreRuntime.BeanObstacleOptimizerComponent
// 0x0090 (0x0680 - 0x05F0)
class UBeanObstacleOptimizerComponent final : public UBoxComponent
{
public:
	float                                         ExtraMarginSize;                                   // 0x05F0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bDisableCollidersWhenSleeping;                     // 0x05F4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bDetachFromParentAndAttachToOptimizerActor;        // 0x05F5(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5F6[0x2];                                      // 0x05F6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(bool bIsSleeping)> OnSleepStateChanged;                               // 0x05F8(0x0010)(ZeroConstructor, Transient, InstancedReference, Protected, NativeAccessSpecifierProtected)
	bool                                          bIsSleeping;                                       // 0x0608(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_609[0x3];                                      // 0x0609(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumPawnsOverlapping;                               // 0x060C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<TWeakObjectPtr<class UPrimitiveComponent>> OptimizableColliders;                              // 0x0610(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	TMap<class UPrimitiveComponent*, ECollisionEnabled> OptimizableCollidersOriginalCollisionEnabled;      // 0x0620(0x0050)(Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_670[0x10];                                     // 0x0670(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnOptimizerBeginOverlap(class UPrimitiveComponent* OverlappedComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void OnOptimizerEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void OnOriginalOwnerEndPlay(class AActor* Actor, EEndPlayReason EndPlayReason);
	void RecalculateEstimatedBounds();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BeanObstacleOptimizerComponent">();
	}
	static class UBeanObstacleOptimizerComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBeanObstacleOptimizerComponent>();
	}
};

// Class BeanstalkDevicesCoreRuntime.BeanObstacleTickManager
// 0x0018 (0x0438 - 0x0420)
class ABeanObstacleTickManager final : public AActor
{
public:
	uint8                                         Pad_420[0x18];                                     // 0x0420(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnTickableComponentEndPlay(class AActor* Actor, EEndPlayReason EndPlayReason);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BeanObstacleTickManager">();
	}
	static class ABeanObstacleTickManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABeanObstacleTickManager>();
	}
};

}

