#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: EnergyRuntime

#include "Basic.hpp"

#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "GameplayAbilities_structs.hpp"
#include "EnergyRuntime_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"
#include "ModularGameplay_classes.hpp"


namespace SDK
{

// Class EnergyRuntime.FortEnergyAttrSet
// 0x0080 (0x00B8 - 0x0038)
class UFortEnergyAttrSet final : public UFortAttributeSet
{
public:
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortGameplayAttributeData             MaxEnergy;                                         // 0x0040(0x0028)(Net, RepNotify, NativeAccessSpecifierPrivate)
	struct FFortGameplayAttributeData             RechargeAmountPerSecond;                           // 0x0068(0x0028)(Net, RepNotify, NativeAccessSpecifierPrivate)
	struct FFortGameplayAttributeData             EnergyUsageMultiplier;                             // 0x0090(0x0028)(Net, RepNotify, NativeAccessSpecifierPrivate)

public:
	void OnRep_EnergyUsageMultiplier(const struct FFortGameplayAttributeData& OldValue);
	void OnRep_MaxEnergy(const struct FFortGameplayAttributeData& OldValue);
	void OnRep_RechargeAmountPerSecond(const struct FFortGameplayAttributeData& OldValue);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortEnergyAttrSet">();
	}
	static class UFortEnergyAttrSet* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortEnergyAttrSet>();
	}
};

// Class EnergyRuntime.FortComponent_Energy
// 0x03B0 (0x0488 - 0x00D8)
class UFortComponent_Energy final : public UPawnComponent
{
public:
	TMulticastInlineDelegate<void(class UFortComponent_Energy* EnergyComponent)> OnEnergyCompletelyDrained;                         // 0x00D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UFortComponent_Energy* EnergyComponent)> OnEnergyRechargeComplete;                          // 0x00E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FGameplayAttribute                     MaxEnergyAttribute;                                // 0x00F8(0x0048)(Edit, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FScalableFloat                         MaxEnergy;                                         // 0x0140(0x0038)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTagQuery                      RechargeDisabledQuery;                             // 0x0178(0x0048)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1C0[0x10];                                     // 0x01C0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagQuery                      EnergyUseDisabledQuery;                            // 0x01D0(0x0048)(NativeAccessSpecifierPrivate)
	struct FTimerHandle                           BeginRechargeTimerHandle;                          // 0x0218(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FGameplayTagContainer                  EnergyTypeIdentifierTagContainer;                  // 0x0220(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	float                                         CurrentEnergy;                                     // 0x0240(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CachedMaxEnergy;                                   // 0x0244(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         NetEnergyDeltaPerSecond;                           // 0x0248(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_24C[0x4];                                      // 0x024C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         MinEnergyForUsing;                                 // 0x0250(0x0038)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FGameplayAttribute                     RechargeAmountPerSecondAttribute;                  // 0x0288(0x0048)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         RechargeAmountPerSecond;                           // 0x02D0(0x0038)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         RechargeDelayInSeconds;                            // 0x0308(0x0038)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         RechargePercentageLimit;                           // 0x0340(0x0038)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FGameplayAttribute                     EnergyUsageMultiplierAttribute;                    // 0x0378(0x0048)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         EnergyUsageMultiplier;                             // 0x03C0(0x0038)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	bool                                          bRemoveEnergyUsersWhenEmpty;                       // 0x03F8(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3F9[0x7];                                      // 0x03F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FEnergyChannelingData>          ActiveEnergyChannels;                              // 0x0400(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FEnergyChannelingData>          NewActiveEnergyChannels;                           // 0x0410(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FEnergyRegenOverrideData>       EnergyRegenOverrides;                              // 0x0420(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void(class UFortComponent_Energy* EnergyComponent, float PreviousValue)> OnCurrentEnergyChanged;                            // 0x0430(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void(class UFortComponent_Energy* EnergyComponent)> OnEnergyRechargeBegun;                             // 0x0440(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void(class UFortComponent_Energy* EnergyComponent)> OnEnergyRechargeInterrupted;                       // 0x0450(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void(class UFortComponent_Energy* EnergyComponent)> OnEnergyReachedMax;                                // 0x0460(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void(class UFortComponent_Energy* EnergyComponent)> OnEnergyReachedMinForUsing;                        // 0x0470(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)
	uint8                                         bRechargingEnabled : 1;                            // 0x0480(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         bIsRecharging : 1;                                 // 0x0480(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         bIsUsingEnergy : 1;                                // 0x0480(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         BitPad_480_3 : 1;                                  // 0x0480(0x0001)(Fixing Bit-Field Size Between Bits [ Dumper-7 ])
	uint8                                         bAllowEditMaxEnergyScalableFloat : 1;              // 0x0480(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         bAllowEditRechargeAmountPerSecondScalableFloat : 1; // 0x0480(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         bAllowEditEnergyUsageMultiplierScalableFloat : 1;  // 0x0480(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         Pad_481[0x7];                                      // 0x0481(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool AddEnergy(float* OutAmountOfEnergyAdded, float AmountOfEnergyToAdd, class UObject* OptionalEnergySource, bool bBroadcastEnergyPercentChanged);
	void ApplyRegenDataOverride(const struct FGameplayTag& RegenOverrideIdentifier, const float NewRechargeAmountPerSecond, const float NewRechargeDelayInSeconds, const float NewRechargePercentageLimit);
	void HandleAbilitySystemComponentInitialized(class UFortAbilitySystemComponent* AbilitySystemComponent, class AFortPlayerPawn* PlayerPawn);
	void HandleAbilitySystemComponentInvalidated();
	void OnMutatorUpdated();
	void OnPlayerStatePawnSet(class APlayerState* Player, class APawn* NewPawn, class APawn* OldPawn);
	void RegisterMutatorUpdatedDelegate(class APawn* AffectedPawn);
	bool RemoveRegenDataOverride(const struct FGameplayTag& RegenOverrideIdentifier);
	bool SetAllEnergyUsageFree(bool bShouldEnergyUsageBeFree);
	bool StartAddingEnergy(float EnergyToAddPerSecond, const struct FGameplayTag& EnergySourceIdentifier, class UObject* OptionalEnergySource);
	bool StartUsingEnergy(float EnergyToUseToStart, float EnergyToUsePerSecond, const struct FGameplayTag& EnergyUseIdentifier, class UObject* OptionalEnergyUser);
	bool StopAddingEnergy(const struct FGameplayTag& EnergyUseIdentifier, class UObject* OptionalEnergySource);
	bool StopUsingEnergy(const struct FGameplayTag& EnergyUseIdentifier, class UObject* OptionalEnergyUser);
	bool UseEnergy(float* OutAmountOfEnergyUsed, float AmountOfEnergyToUse, bool bUseEnergyEvenOnFailure, class UObject* OptionalEnergyUser, bool bBroadcastEnergyPercentChanged);

	bool BP_HasSufficientEnergy(float EnergyAmountToTest) const;
	float GetCurrentEnergyPercentage() const;
	bool HasSufficientEnergy(float EnergyAmountToTest) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortComponent_Energy">();
	}
	static class UFortComponent_Energy* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortComponent_Energy>();
	}
};

}

