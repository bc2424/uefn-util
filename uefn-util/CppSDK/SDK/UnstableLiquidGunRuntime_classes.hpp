#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UnstableLiquidGunRuntime

#include "Basic.hpp"

#include "GameplayAbilities_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "UnstableLiquidGunRuntime_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// Class UnstableLiquidGunRuntime.FortLiquidGunProjectile
// 0x0188 (0x0F10 - 0x0D88)
class AFortLiquidGunProjectile final : public AFortProjectileBase
{
public:
	class USceneComponent*                        AttachComponent;                                   // 0x0D88(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AttachOffset;                                      // 0x0D90(0x0018)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ProjectileIndex;                                   // 0x0DA8(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DAC[0x4];                                      // 0x0DAC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                StopNormal;                                        // 0x0DB0(0x0018)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ALiquidRibbonManager*                   RibbonManager;                                     // 0x0DC8(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScalableFloat                         MinDistBetweenProjectilesForSplineCollisionTest;   // 0x0DD0(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FScalableFloat                         MinDistBetweenInLineProjectilesForSplineCollisionTest; // 0x0E08(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FScalableFloat                         MinProjectileVelocityAngleToBeInLine;              // 0x0E40(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	ECollisionChannel                             BroadSphereOverlapTraceChannel;                    // 0x0E78(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E79[0x3];                                      // 0x0E79(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CapsuleTraceProfileName;                           // 0x0E7C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCapsuleTraceComplex;                              // 0x0E88(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E89[0x7];                                      // 0x0E89(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector_NetQuantize                    RandomDetachmentAngleFirstHalf;                    // 0x0E90(0x0018)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize                    RandomDetachmentAngleSecondHalf;                   // 0x0EA8(0x0018)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawDebugCollision;                               // 0x0EC0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bDrawDebugCollisionOnlyCapsuleTraceHits;           // 0x0EC1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ELiquidRibbonDetachmentReason                 DetachmentReason;                                  // 0x0EC2(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_EC3[0x4D];                                     // 0x0EC3(0x004D)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleSplineHit(const struct FHitResult& Hit);
	void SetDetachmentReason(ELiquidRibbonDetachmentReason InDetachmentReason);

	ELiquidRibbonDetachmentReason GetDetachmentReason() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortLiquidGunProjectile">();
	}
	static class AFortLiquidGunProjectile* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFortLiquidGunProjectile>();
	}
};

// Class UnstableLiquidGunRuntime.LiquidRibbonManager
// 0x0250 (0x0670 - 0x0420)
class ALiquidRibbonManager final : public AActor
{
public:
	int32                                         PointsPerSegment;                                  // 0x0420(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_424[0x4];                                      // 0x0424(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         MaxSegmentLengthBeforeBreak;                       // 0x0428(0x0038)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         SplineCurveTension;                                // 0x0460(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinPointSize;                                      // 0x0464(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxPointSize;                                      // 0x0468(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumPointsAtMinPointSize;                           // 0x046C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumPointsAtMaxPointSize;                           // 0x0470(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SplineLengthForSizeCalculation;                    // 0x0474(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumPointsToTaperDownSplineEndSize;                 // 0x0478(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinSplineEndTaperSize;                             // 0x047C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TaperSizeAtDetachment_RemapClosenessToBreakageOldMin; // 0x0480(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TaperSizeAtDetachment_RemapClosenessToBreakageOldMax; // 0x0484(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinPointSizePercentForFlashIntensity;              // 0x0488(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxPointSizePercentForFlashIntensity;              // 0x048C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PositionsNiagaraParamName;                         // 0x0490(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RibbonIDsNiagaraParamName;                         // 0x049C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RibbonVisibilitiesNiagaraParamName;                // 0x04A8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FlashIntensitiesNiagaraParamName;                  // 0x04B4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RibbonSizesNiagaraParamName;                       // 0x04C0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4CC[0x4];                                      // 0x04CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         CalculateBaseCurlOffset_MaxSegmentLength;          // 0x04D0(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FScalableFloat                         CalculateBaseCurlOffset_MaxTimeSinceDetachment;    // 0x0508(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FScalableFloat                         CalculateBaseCurlOffset_TowardPerpendicularMult;   // 0x0540(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FScalableFloat                         CalculateBaseCurlOffset_TowardEndMult;             // 0x0578(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FScalableFloat                         CalculateBaseCurlOffset_TowardRandomMult;          // 0x05B0(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class UCurveFloat*                            TimeSinceDetachmentCurlCurve;                      // 0x05E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScalableFloat                         TimeSinceDetachmentCurlCurve_MaxTime;              // 0x05F0(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	float                                         CurlingMaxClosenessToBreakage;                     // 0x0628(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_62C[0x4];                                      // 0x062C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 SegmentLengths;                                    // 0x0630(0x0010)(BlueprintVisible, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	TArray<struct FLiquidRibbonSplineDetachment>  Detachments;                                       // 0x0640(0x0010)(BlueprintVisible, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	TArray<struct FLiquidRibbonSplineSegment>     SplineSegments;                                    // 0x0650(0x0010)(BlueprintVisible, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	TArray<class AFortLiquidGunProjectile*>       Projectiles_Native;                                // 0x0660(0x0010)(BlueprintVisible, ZeroConstructor, Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected)

public:
	TArray<struct FLiquidRibbonSplineSegment> CalculateSegments(const TArray<struct FVector>& Points, const float Tension);
	void CalculateSplinePointsAndSetNiagaraData(const TArray<class AFortLiquidGunProjectile*>& Projectiles, bool bAttachSplineToMuzzle, class UNiagaraComponent* NiagaraComponent, TArray<struct FVector>* OutAllPositions, TArray<int32>* OutRibbonIDs, TArray<bool>* OutRibbonVisibilities, TArray<float>* OutFlashIntensities, TArray<int32>* OutRibbonSizes);
	const struct FLiquidRibbonSplineDetachment GetOrAddDetachment(const int32 RibbonID, const struct FLiquidRibbonSplineSegment& Segment);
	void RunSplineCollisionTestOnProjectiles();

	float CalculatePointFlashIntensity(const int32 PointSize) const;
	float CalculatePointSize(int32 SegmentIndex, int32 PointIndex) const;
	int32 GetFirstVisiblePointIndex() const;
	struct FVector GetPointOnSegment(float T, const struct FLiquidRibbonSplineSegment& Segment) const;
	void SetNiagaraData(class UNiagaraComponent* NiagaraComponent, const TArray<struct FVector>& Positions, const TArray<int32>& RibbonIDs, const TArray<bool>& RibbonVisibilities, const TArray<float>& FlashIntensities, const TArray<int32>& RibbonSizes) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LiquidRibbonManager">();
	}
	static class ALiquidRibbonManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALiquidRibbonManager>();
	}
};

}

