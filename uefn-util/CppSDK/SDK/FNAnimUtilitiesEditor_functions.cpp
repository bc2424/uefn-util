#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FNAnimUtilitiesEditor

#include "Basic.hpp"

#include "FNAnimUtilitiesEditor_classes.hpp"
#include "FNAnimUtilitiesEditor_parameters.hpp"


namespace SDK
{

// Function FNAnimUtilitiesEditor.AnimBlueprintNativizationEditorLibrary.CreateInterfaceSourceFile
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           InterfaceNameWithoutPrefix                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           InterfaceSaveDirectory                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAnimBlueprintNativizationEditorLibrary::CreateInterfaceSourceFile(const class FString& InterfaceNameWithoutPrefix, const class FString& InterfaceSaveDirectory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AnimBlueprintNativizationEditorLibrary", "CreateInterfaceSourceFile");

	Params::AnimBlueprintNativizationEditorLibrary_CreateInterfaceSourceFile Parms{};

	Parms.InterfaceNameWithoutPrefix = std::move(InterfaceNameWithoutPrefix);
	Parms.InterfaceSaveDirectory = std::move(InterfaceSaveDirectory);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FNAnimUtilitiesEditor.AnimBlueprintNativizationEditorLibrary.DeleteVariablesWithNoReferences
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Suffix                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBlueprint*                       Blueprint                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAnimBlueprintNativizationEditorLibrary::DeleteVariablesWithNoReferences(const class FString& Suffix, class UBlueprint* Blueprint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AnimBlueprintNativizationEditorLibrary", "DeleteVariablesWithNoReferences");

	Params::AnimBlueprintNativizationEditorLibrary_DeleteVariablesWithNoReferences Parms{};

	Parms.Suffix = std::move(Suffix);
	Parms.Blueprint = Blueprint;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FNAnimUtilitiesEditor.AnimBlueprintNativizationEditorLibrary.FindAndReplaceVariableReferences
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Suffix                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBlueprint*                       Blueprint                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAnimBlueprintNativizationEditorLibrary::FindAndReplaceVariableReferences(const class FString& Suffix, class UBlueprint* Blueprint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AnimBlueprintNativizationEditorLibrary", "FindAndReplaceVariableReferences");

	Params::AnimBlueprintNativizationEditorLibrary_FindAndReplaceVariableReferences Parms{};

	Parms.Suffix = std::move(Suffix);
	Parms.Blueprint = Blueprint;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FNAnimUtilitiesEditor.AnimBlueprintNativizationEditorLibrary.GetCurrentBP
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAnimBlueprint*                   CurrentAnimBP                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UClass*                           CurrentChooserData                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBlueprint*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBlueprint* UAnimBlueprintNativizationEditorLibrary::GetCurrentBP(class UAnimBlueprint* CurrentAnimBP, class UClass* CurrentChooserData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AnimBlueprintNativizationEditorLibrary", "GetCurrentBP");

	Params::AnimBlueprintNativizationEditorLibrary_GetCurrentBP Parms{};

	Parms.CurrentAnimBP = CurrentAnimBP;
	Parms.CurrentChooserData = CurrentChooserData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FNAnimUtilitiesEditor.AnimBlueprintNativizationEditorLibrary.GetPluginNameForAssetPath
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           AssetPath                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UAnimBlueprintNativizationEditorLibrary::GetPluginNameForAssetPath(const class FString& AssetPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AnimBlueprintNativizationEditorLibrary", "GetPluginNameForAssetPath");

	Params::AnimBlueprintNativizationEditorLibrary_GetPluginNameForAssetPath Parms{};

	Parms.AssetPath = std::move(AssetPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FNAnimUtilitiesEditor.AnimBlueprintNativizationEditorLibrary.GetSuggestedInterfaceName
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           BlueprintDisplayName                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UAnimBlueprintNativizationEditorLibrary::GetSuggestedInterfaceName(const class FString& BlueprintDisplayName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AnimBlueprintNativizationEditorLibrary", "GetSuggestedInterfaceName");

	Params::AnimBlueprintNativizationEditorLibrary_GetSuggestedInterfaceName Parms{};

	Parms.BlueprintDisplayName = std::move(BlueprintDisplayName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FNAnimUtilitiesEditor.AnimBlueprintNativizationEditorLibrary.GetSuggestedNativeClassName
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           BlueprintDisplayName                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UClass*                           ParentClass                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UAnimBlueprintNativizationEditorLibrary::GetSuggestedNativeClassName(const class FString& BlueprintDisplayName, class UClass* ParentClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AnimBlueprintNativizationEditorLibrary", "GetSuggestedNativeClassName");

	Params::AnimBlueprintNativizationEditorLibrary_GetSuggestedNativeClassName Parms{};

	Parms.BlueprintDisplayName = std::move(BlueprintDisplayName);
	Parms.ParentClass = ParentClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FNAnimUtilitiesEditor.AnimBlueprintNativizationEditorLibrary.GetSuggestedNativePaths
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           BlueprintPathString                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           CurrentModuleName                                      (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ParentClassStringWithoutPrefix                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           HeaderSaveDirectory                                    (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           CppSaveDirectory                                       (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           InterfaceSaveDirectory                                 (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           SuggestedNewRuntimeModuleName                          (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAnimBlueprintNativizationEditorLibrary::GetSuggestedNativePaths(const class FString& BlueprintPathString, const class FString& CurrentModuleName, const class FString& ParentClassStringWithoutPrefix, class FString* HeaderSaveDirectory, class FString* CppSaveDirectory, class FString* InterfaceSaveDirectory, class FString* SuggestedNewRuntimeModuleName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AnimBlueprintNativizationEditorLibrary", "GetSuggestedNativePaths");

	Params::AnimBlueprintNativizationEditorLibrary_GetSuggestedNativePaths Parms{};

	Parms.BlueprintPathString = std::move(BlueprintPathString);
	Parms.CurrentModuleName = std::move(CurrentModuleName);
	Parms.ParentClassStringWithoutPrefix = std::move(ParentClassStringWithoutPrefix);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (HeaderSaveDirectory != nullptr)
		*HeaderSaveDirectory = std::move(Parms.HeaderSaveDirectory);

	if (CppSaveDirectory != nullptr)
		*CppSaveDirectory = std::move(Parms.CppSaveDirectory);

	if (InterfaceSaveDirectory != nullptr)
		*InterfaceSaveDirectory = std::move(Parms.InterfaceSaveDirectory);

	if (SuggestedNewRuntimeModuleName != nullptr)
		*SuggestedNewRuntimeModuleName = std::move(Parms.SuggestedNewRuntimeModuleName);
}


// Function FNAnimUtilitiesEditor.AnimBlueprintNativizationEditorLibrary.GetSuperClass
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UClass*                           Class_0                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UClass*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UClass* UAnimBlueprintNativizationEditorLibrary::GetSuperClass(class UClass* Class_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AnimBlueprintNativizationEditorLibrary", "GetSuperClass");

	Params::AnimBlueprintNativizationEditorLibrary_GetSuperClass Parms{};

	Parms.Class_0 = Class_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FNAnimUtilitiesEditor.AnimBlueprintNativizationEditorLibrary.NativizationSetup
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           ClassNameWithoutPrefix                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBlueprint*                       Blueprint                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ParentClassNameWithoutPrefix                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           HeaderSaveDirectory                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           CppSaveDirectory                                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bCreateNewRuntimeModule                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           NewRuntimeModuleName                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bPauseAfterSourceFilesCreated                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          DuplicatedBlueprint                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FAnimBlueprintNativizationSetupContextInputContext                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FAnimBlueprintNativizationSetupContextReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FAnimBlueprintNativizationSetupContext UAnimBlueprintNativizationEditorLibrary::NativizationSetup(const class FString& ClassNameWithoutPrefix, class UBlueprint* Blueprint, const class FString& ParentClassNameWithoutPrefix, const class FString& HeaderSaveDirectory, const class FString& CppSaveDirectory, bool bCreateNewRuntimeModule, const class FString& NewRuntimeModuleName, bool bPauseAfterSourceFilesCreated, class UObject* DuplicatedBlueprint, const struct FAnimBlueprintNativizationSetupContext& InputContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AnimBlueprintNativizationEditorLibrary", "NativizationSetup");

	Params::AnimBlueprintNativizationEditorLibrary_NativizationSetup Parms{};

	Parms.ClassNameWithoutPrefix = std::move(ClassNameWithoutPrefix);
	Parms.Blueprint = Blueprint;
	Parms.ParentClassNameWithoutPrefix = std::move(ParentClassNameWithoutPrefix);
	Parms.HeaderSaveDirectory = std::move(HeaderSaveDirectory);
	Parms.CppSaveDirectory = std::move(CppSaveDirectory);
	Parms.bCreateNewRuntimeModule = bCreateNewRuntimeModule;
	Parms.NewRuntimeModuleName = std::move(NewRuntimeModuleName);
	Parms.bPauseAfterSourceFilesCreated = bPauseAfterSourceFilesCreated;
	Parms.DuplicatedBlueprint = DuplicatedBlueprint;
	Parms.InputContext = std::move(InputContext);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FNAnimUtilitiesEditor.AnimBlueprintNativizationEditorLibrary.ResetNativizationSetup
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FAnimBlueprintNativizationSetupContextContext                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FAnimBlueprintNativizationSetupContextReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FAnimBlueprintNativizationSetupContext UAnimBlueprintNativizationEditorLibrary::ResetNativizationSetup(const struct FAnimBlueprintNativizationSetupContext& Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AnimBlueprintNativizationEditorLibrary", "ResetNativizationSetup");

	Params::AnimBlueprintNativizationEditorLibrary_ResetNativizationSetup Parms{};

	Parms.Context = std::move(Context);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

