#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LearningAgents

#include "Basic.hpp"

#include "LearningAgents_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class LearningAgents.LearningAgentsActionSchema
// 0x0118 (0x0148 - 0x0030)
class ULearningAgentsActionSchema final : public UObject
{
public:
	uint8                                         Pad_30[0x118];                                     // 0x0030(0x0118)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LearningAgentsActionSchema">();
	}
	static class ULearningAgentsActionSchema* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULearningAgentsActionSchema>();
	}
};

// Class LearningAgents.LearningAgentsActionObject
// 0x00C8 (0x00F8 - 0x0030)
class ULearningAgentsActionObject final : public UObject
{
public:
	uint8                                         Pad_30[0xC8];                                      // 0x0030(0x00C8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LearningAgentsActionObject">();
	}
	static class ULearningAgentsActionObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULearningAgentsActionObject>();
	}
};

// Class LearningAgents.LearningAgentsManager
// 0x0088 (0x0160 - 0x00D8)
class ULearningAgentsManager final : public UActorComponent
{
public:
	int32                                         MaxAgentNum;                                       // 0x00D8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UObject*>                        Agents;                                            // 0x00E0(0x0010)(Edit, ZeroConstructor, Transient, EditConst, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<class ULearningAgentsManagerListener*> Listeners;                                         // 0x00F0(0x0010)(Edit, ZeroConstructor, Transient, EditConst, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_100[0x60];                                     // 0x0100(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	int32 AddAgent(class UObject* Agent);
	void AddAgents(TArray<int32>* OutAgentIds, const TArray<class UObject*>& InAgents);
	void AddListener(class ULearningAgentsManagerListener* Listener);
	void RemoveAgent(const int32 AgentId);
	void RemoveAgents(const TArray<int32>& AgentIds);
	void RemoveAllAgents();
	void RemoveListener(class ULearningAgentsManagerListener* Listener);
	void ResetAgent(const int32 AgentId);
	void ResetAgents(const TArray<int32>& AgentIds);
	void ResetAllAgents();

	class UObject* GetAgent(const int32 AgentId, const TSubclassOf<class UObject> AgentClass) const;
	int32 GetAgentId(class UObject* Agent) const;
	void GetAgentIds(TArray<int32>* OutAgentIds, const TArray<class UObject*>& InAgents) const;
	int32 GetAgentNum() const;
	void GetAgents(TArray<class UObject*>* OutAgents, const TArray<int32>& AgentIds, const TSubclassOf<class UObject> AgentClass) const;
	void GetAllAgents(TArray<class UObject*>* OutAgents, TArray<int32>* OutAgentIds, const TSubclassOf<class UObject> AgentClass) const;
	int32 GetMaxAgentNum() const;
	bool HasAgent(const int32 AgentId) const;
	bool HasAgentObject(class UObject* Agent) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LearningAgentsManager">();
	}
	static class ULearningAgentsManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULearningAgentsManager>();
	}
};

// Class LearningAgents.LearningAgentsActions
// 0x0000 (0x0030 - 0x0030)
class ULearningAgentsActions final : public UBlueprintFunctionLibrary
{
public:
	static bool GetAngleAction(float* OutAngle, const class ULearningAgentsActionObject* Object, const struct FLearningAgentsActionObjectElement& Element, const float RelativeAngle, const class FName Tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerAngleLocation, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor);
	static bool GetAngleActionRadians(float* OutAngle, const class ULearningAgentsActionObject* Object, const struct FLearningAgentsActionObjectElement& Element, const float RelativeAngle, const class FName Tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerAngleLocation, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor);
	static bool GetBitmaskAction(int32* OutBitmaskValue, const class ULearningAgentsActionObject* Object, const struct FLearningAgentsActionObjectElement& Element, const class UEnum* Enum, const class FName Tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor);
	static bool GetBoolAction(bool* bOutValue, const class ULearningAgentsActionObject* Object, const struct FLearningAgentsActionObjectElement& Element, const class FName Tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor);
	static bool GetContinuousAction(TArray<float>* OutValues, const class ULearningAgentsActionObject* Object, const struct FLearningAgentsActionObjectElement& Element, const class FName Tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor);
	static bool GetContinuousActionNum(int32* OutNum, const class ULearningAgentsActionObject* Object, const struct FLearningAgentsActionObjectElement& Element, const class FName Tag);
	static bool GetDirectionAction(struct FVector* OutDirection, const class ULearningAgentsActionObject* Object, const struct FLearningAgentsActionObjectElement& Element, const struct FTransform& RelativeTransform, const class FName Tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerDirectionLocation, const struct FVector& VisualLoggerLocation, const float VisualLoggerArrowLength, const struct FLinearColor& VisualLoggerColor);
	static bool GetEitherAction(ELearningAgentsEitherAction* OutEither, struct FLearningAgentsActionObjectElement* OutElement, const class ULearningAgentsActionObject* Object, const struct FLearningAgentsActionObjectElement& Element, const class FName Tag);
	static bool GetEncodingAction(struct FLearningAgentsActionObjectElement* OutElement, const class ULearningAgentsActionObject* Object, const struct FLearningAgentsActionObjectElement& Element, const class FName Tag);
	static bool GetEnumAction(uint8* OutEnumValue, const class ULearningAgentsActionObject* Object, const struct FLearningAgentsActionObjectElement& Element, const class UEnum* Enum, const class FName Tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor);
	static bool GetExclusiveDiscreteAction(int32* OutIndex, const class ULearningAgentsActionObject* Object, const struct FLearningAgentsActionObjectElement& Element, const class FName Tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor);
	static bool GetExclusiveUnionAction(class FName* OutElementName, struct FLearningAgentsActionObjectElement* OutElement, const class ULearningAgentsActionObject* Object, const struct FLearningAgentsActionObjectElement& Element, const class FName Tag);
	static bool GetFloatAction(float* OutValue, const class ULearningAgentsActionObject* Object, const struct FLearningAgentsActionObjectElement& Element, const class FName Tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor);
	static bool GetInclusiveDiscreteAction(TArray<int32>* OutIndices, const class ULearningAgentsActionObject* Object, const struct FLearningAgentsActionObjectElement& Element, const class FName Tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor);
	static bool GetInclusiveDiscreteActionNum(int32* OutNum, const class ULearningAgentsActionObject* Object, const struct FLearningAgentsActionObjectElement& Element, const class FName Tag);
	static bool GetInclusiveUnionAction(TMap<class FName, struct FLearningAgentsActionObjectElement>* OutElements, const class ULearningAgentsActionObject* Object, const struct FLearningAgentsActionObjectElement& Element, const class FName Tag);
	static bool GetInclusiveUnionActionNum(int32* OutNum, const class ULearningAgentsActionObject* Object, const struct FLearningAgentsActionObjectElement& Element, const class FName Tag);
	static bool GetInclusiveUnionActionToArrays(TArray<class FName>* OutElementNames, TArray<struct FLearningAgentsActionObjectElement>* OutElements, const class ULearningAgentsActionObject* Object, const struct FLearningAgentsActionObjectElement& Element, const class FName Tag);
	static bool GetLocationAction(struct FVector* OutLocation, const class ULearningAgentsActionObject* Object, const struct FLearningAgentsActionObjectElement& Element, const struct FTransform& RelativeTransform, const class FName Tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor);
	static bool GetNullAction(const class ULearningAgentsActionObject* Object, const struct FLearningAgentsActionObjectElement& Element, const class FName Tag);
	static bool GetOptionalAction(ELearningAgentsOptionalAction* OutOption, struct FLearningAgentsActionObjectElement* OutElement, const class ULearningAgentsActionObject* Object, const struct FLearningAgentsActionObjectElement& Element, const class FName Tag);
	static bool GetPairAction(struct FLearningAgentsActionObjectElement* OutKey, struct FLearningAgentsActionObjectElement* OutValue, const class ULearningAgentsActionObject* Object, const struct FLearningAgentsActionObjectElement& Element, const class FName Tag);
	static bool GetRotationAction(struct FRotator* OutRotation, const class ULearningAgentsActionObject* Object, const struct FLearningAgentsActionObjectElement& Element, const struct FRotator& RelativeRotation, const class FName Tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerRotationLocation, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor);
	static bool GetRotationActionAsQuat(struct FQuat* OutRotation, const class ULearningAgentsActionObject* Object, const struct FLearningAgentsActionObjectElement& Element, const struct FQuat& RelativeRotation, const class FName Tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerRotationLocation, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor);
	static bool GetScaleAction(struct FVector* OutScale, const class ULearningAgentsActionObject* Object, const struct FLearningAgentsActionObjectElement& Element, const struct FVector& RelativeScale, const class FName Tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor);
	static bool GetStaticArrayAction(TArray<struct FLearningAgentsActionObjectElement>* OutElements, const class ULearningAgentsActionObject* Object, const struct FLearningAgentsActionObjectElement& Element, const class FName Tag);
	static bool GetStaticArrayActionNum(int32* OutNum, const class ULearningAgentsActionObject* Object, const struct FLearningAgentsActionObjectElement& Element, const class FName Tag);
	static bool GetStructAction(TMap<class FName, struct FLearningAgentsActionObjectElement>* OutElements, const class ULearningAgentsActionObject* Object, const struct FLearningAgentsActionObjectElement& Element, const class FName Tag);
	static bool GetStructActionElement(struct FLearningAgentsActionObjectElement* OutElement, const class ULearningAgentsActionObject* Object, const struct FLearningAgentsActionObjectElement& Element, const class FName ElementName, const class FName Tag);
	static bool GetStructActionNum(int32* OutNum, const class ULearningAgentsActionObject* Object, const struct FLearningAgentsActionObjectElement& Element, const class FName Tag);
	static bool GetStructActionToArrays(TArray<class FName>* OutElementNames, TArray<struct FLearningAgentsActionObjectElement>* OutElements, const class ULearningAgentsActionObject* Object, const struct FLearningAgentsActionObjectElement& Element, const class FName Tag);
	static bool GetTransformAction(struct FTransform* OutTransform, const class ULearningAgentsActionObject* Object, const struct FLearningAgentsActionObjectElement& Element, const struct FTransform& RelativeTransform, const class FName Tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor);
	static bool GetVelocityAction(struct FVector* OutVelocity, const class ULearningAgentsActionObject* Object, const struct FLearningAgentsActionObjectElement& Element, const struct FTransform& RelativeTransform, const class FName Tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerVelocityLocation, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor);
	static void LogAction(const class ULearningAgentsActionObject* Object, const struct FLearningAgentsActionObjectElement& Element);
	static struct FLearningAgentsActionObjectElement MakeAngleAction(class ULearningAgentsActionObject* Object, const float Angle, const float RelativeAngle, const class FName Tag);
	static struct FLearningAgentsActionObjectElement MakeAngleActionRadians(class ULearningAgentsActionObject* Object, const float Angle, const float RelativeAngle, const class FName Tag);
	static struct FLearningAgentsActionObjectElement MakeBitmaskAction(class ULearningAgentsActionObject* Object, const class UEnum* Enum, const int32 BitmaskValue, const class FName Tag);
	static struct FLearningAgentsActionObjectElement MakeBoolAction(class ULearningAgentsActionObject* Object, const bool bValue, const class FName Tag);
	static struct FLearningAgentsActionObjectElement MakeContinuousAction(class ULearningAgentsActionObject* Object, const TArray<float>& Values, const class FName Tag);
	static struct FLearningAgentsActionObjectElement MakeDirectionAction(class ULearningAgentsActionObject* Object, const struct FVector& Direction, const struct FTransform& RelativeTransform, const class FName Tag);
	static struct FLearningAgentsActionObjectElement MakeEitherAAction(class ULearningAgentsActionObject* Object, const struct FLearningAgentsActionObjectElement& A, const class FName Tag);
	static struct FLearningAgentsActionObjectElement MakeEitherAction(class ULearningAgentsActionObject* Object, const struct FLearningAgentsActionObjectElement& Element, const ELearningAgentsEitherAction Either, const class FName Tag);
	static struct FLearningAgentsActionObjectElement MakeEitherBAction(class ULearningAgentsActionObject* Object, const struct FLearningAgentsActionObjectElement& B, const class FName Tag);
	static struct FLearningAgentsActionObjectElement MakeEncodingAction(class ULearningAgentsActionObject* Object, const struct FLearningAgentsActionObjectElement& Element, const class FName Tag);
	static struct FLearningAgentsActionObjectElement MakeEnumAction(class ULearningAgentsActionObject* Object, const class UEnum* Enum, const uint8 EnumValue, const class FName Tag);
	static struct FLearningAgentsActionObjectElement MakeExclusiveDiscreteAction(class ULearningAgentsActionObject* Object, const int32 Index_0, const class FName Tag);
	static struct FLearningAgentsActionObjectElement MakeExclusiveUnionAction(class ULearningAgentsActionObject* Object, const class FName ElementName, const struct FLearningAgentsActionObjectElement& Element, const class FName Tag);
	static struct FLearningAgentsActionObjectElement MakeFloatAction(class ULearningAgentsActionObject* Object, const float Value, const class FName Tag);
	static struct FLearningAgentsActionObjectElement MakeInclusiveDiscreteAction(class ULearningAgentsActionObject* Object, const TArray<int32>& Indices, const class FName Tag);
	static struct FLearningAgentsActionObjectElement MakeInclusiveUnionAction(class ULearningAgentsActionObject* Object, const TMap<class FName, struct FLearningAgentsActionObjectElement>& Elements, const class FName Tag);
	static struct FLearningAgentsActionObjectElement MakeInclusiveUnionActionFromArrays(class ULearningAgentsActionObject* Object, const TArray<class FName>& ElementNames, const TArray<struct FLearningAgentsActionObjectElement>& Elements, const class FName Tag);
	static struct FLearningAgentsActionObjectElement MakeLocationAction(class ULearningAgentsActionObject* Object, const struct FVector& Location, const struct FTransform& RelativeTransform, const class FName Tag);
	static struct FLearningAgentsActionObjectElement MakeNullAction(class ULearningAgentsActionObject* Object, const class FName Tag);
	static struct FLearningAgentsActionObjectElement MakeOptionalAction(class ULearningAgentsActionObject* Object, const struct FLearningAgentsActionObjectElement& Element, const ELearningAgentsOptionalAction Option, const class FName Tag);
	static struct FLearningAgentsActionObjectElement MakeOptionalNullAction(class ULearningAgentsActionObject* Object, const class FName Tag);
	static struct FLearningAgentsActionObjectElement MakeOptionalValidAction(class ULearningAgentsActionObject* Object, const struct FLearningAgentsActionObjectElement& Element, const class FName Tag);
	static struct FLearningAgentsActionObjectElement MakePairAction(class ULearningAgentsActionObject* Object, const struct FLearningAgentsActionObjectElement& Key, const struct FLearningAgentsActionObjectElement& Value, const class FName Tag);
	static struct FLearningAgentsActionObjectElement MakeRotationAction(class ULearningAgentsActionObject* Object, const struct FRotator& Rotation, const struct FRotator& RelativeRotation, const class FName Tag);
	static struct FLearningAgentsActionObjectElement MakeRotationActionFromQuat(class ULearningAgentsActionObject* Object, const struct FQuat& Rotation, const struct FQuat& RelativeRotation, const class FName Tag);
	static struct FLearningAgentsActionObjectElement MakeScaleAction(class ULearningAgentsActionObject* Object, const struct FVector& Scale, const struct FVector& RelativeScale, const class FName Tag);
	static struct FLearningAgentsActionObjectElement MakeStaticArrayAction(class ULearningAgentsActionObject* Object, const TArray<struct FLearningAgentsActionObjectElement>& Elements, const class FName Tag);
	static struct FLearningAgentsActionObjectElement MakeStructAction(class ULearningAgentsActionObject* Object, const TMap<class FName, struct FLearningAgentsActionObjectElement>& Elements, const class FName Tag);
	static struct FLearningAgentsActionObjectElement MakeStructActionFromArrays(class ULearningAgentsActionObject* Object, const TArray<class FName>& ElementNames, const TArray<struct FLearningAgentsActionObjectElement>& Elements, const class FName Tag);
	static struct FLearningAgentsActionObjectElement MakeTransformAction(class ULearningAgentsActionObject* Object, const struct FTransform& Transform, const struct FTransform& RelativeTransform, const class FName Tag);
	static struct FLearningAgentsActionObjectElement MakeVelocityAction(class ULearningAgentsActionObject* Object, const struct FVector& Velocity, const struct FTransform& RelativeTransform, const class FName Tag);
	static struct FLearningAgentsActionSchemaElement SpecifyAngleAction(class ULearningAgentsActionSchema* Schema, const float AngleScale, const class FName Tag);
	static struct FLearningAgentsActionSchemaElement SpecifyBitmaskAction(class ULearningAgentsActionSchema* Schema, const class UEnum* Enum, const TMap<uint8, float>& PriorProbabilities, const class FName Tag);
	static struct FLearningAgentsActionSchemaElement SpecifyBitmaskActionFromArray(class ULearningAgentsActionSchema* Schema, const class UEnum* Enum, const TArray<float>& PriorProbabilities, const class FName Tag);
	static struct FLearningAgentsActionSchemaElement SpecifyBoolAction(class ULearningAgentsActionSchema* Schema, const float PriorProbability, const class FName Tag);
	static struct FLearningAgentsActionSchemaElement SpecifyContinuousAction(class ULearningAgentsActionSchema* Schema, const int32 Size, const float Scale, const class FName Tag);
	static struct FLearningAgentsActionSchemaElement SpecifyDirectionAction(class ULearningAgentsActionSchema* Schema, const class FName Tag);
	static struct FLearningAgentsActionSchemaElement SpecifyEitherAction(class ULearningAgentsActionSchema* Schema, const struct FLearningAgentsActionSchemaElement& A, const struct FLearningAgentsActionSchemaElement& B, const float PriorProbabilityOfA, const class FName Tag);
	static struct FLearningAgentsActionSchemaElement SpecifyEncodingAction(class ULearningAgentsActionSchema* Schema, const struct FLearningAgentsActionSchemaElement& Element, const int32 EncodingSize, const int32 HiddenLayerNum, const ELearningAgentsActivationFunction ActivationFunction, const class FName Tag);
	static struct FLearningAgentsActionSchemaElement SpecifyEnumAction(class ULearningAgentsActionSchema* Schema, const class UEnum* Enum, const TMap<uint8, float>& PriorProbabilities, const class FName Tag);
	static struct FLearningAgentsActionSchemaElement SpecifyEnumActionFromArray(class ULearningAgentsActionSchema* Schema, const class UEnum* Enum, const TArray<float>& PriorProbabilities, const class FName Tag);
	static struct FLearningAgentsActionSchemaElement SpecifyExclusiveDiscreteAction(class ULearningAgentsActionSchema* Schema, const int32 Size, const TArray<float>& PriorProbabilities, const class FName Tag);
	static struct FLearningAgentsActionSchemaElement SpecifyExclusiveUnionAction(class ULearningAgentsActionSchema* Schema, const TMap<class FName, struct FLearningAgentsActionSchemaElement>& Elements, const TMap<class FName, float>& PriorProbabilities, const class FName Tag);
	static struct FLearningAgentsActionSchemaElement SpecifyExclusiveUnionActionFromArrays(class ULearningAgentsActionSchema* Schema, const TArray<class FName>& ElementNames, const TArray<struct FLearningAgentsActionSchemaElement>& Elements, const TArray<float>& PriorProbabilities, const class FName Tag);
	static struct FLearningAgentsActionSchemaElement SpecifyFloatAction(class ULearningAgentsActionSchema* Schema, const float FloatScale, const class FName Tag);
	static struct FLearningAgentsActionSchemaElement SpecifyInclusiveDiscreteAction(class ULearningAgentsActionSchema* Schema, const int32 Size, const TArray<float>& PriorProbabilities, const class FName Tag);
	static struct FLearningAgentsActionSchemaElement SpecifyInclusiveUnionAction(class ULearningAgentsActionSchema* Schema, const TMap<class FName, struct FLearningAgentsActionSchemaElement>& Elements, const TMap<class FName, float>& PriorProbabilities, const class FName Tag);
	static struct FLearningAgentsActionSchemaElement SpecifyInclusiveUnionActionFromArrays(class ULearningAgentsActionSchema* Schema, const TArray<class FName>& ElementNames, const TArray<struct FLearningAgentsActionSchemaElement>& Elements, const TArray<float>& PriorProbabilities, const class FName Tag);
	static struct FLearningAgentsActionSchemaElement SpecifyLocationAction(class ULearningAgentsActionSchema* Schema, const float LocationScale, const class FName Tag);
	static struct FLearningAgentsActionSchemaElement SpecifyNullAction(class ULearningAgentsActionSchema* Schema, const class FName Tag);
	static struct FLearningAgentsActionSchemaElement SpecifyOptionalAction(class ULearningAgentsActionSchema* Schema, const struct FLearningAgentsActionSchemaElement& Element, const float PriorProbability, const class FName Tag);
	static struct FLearningAgentsActionSchemaElement SpecifyPairAction(class ULearningAgentsActionSchema* Schema, const struct FLearningAgentsActionSchemaElement& Key, const struct FLearningAgentsActionSchemaElement& Value, const class FName Tag);
	static struct FLearningAgentsActionSchemaElement SpecifyRotationAction(class ULearningAgentsActionSchema* Schema, const float RotationScale, const class FName Tag);
	static struct FLearningAgentsActionSchemaElement SpecifyScaleAction(class ULearningAgentsActionSchema* Schema, const float ScaleScale, const class FName Tag);
	static struct FLearningAgentsActionSchemaElement SpecifyStaticArrayAction(class ULearningAgentsActionSchema* Schema, const struct FLearningAgentsActionSchemaElement& Element, const int32 Num, const class FName Tag);
	static struct FLearningAgentsActionSchemaElement SpecifyStructAction(class ULearningAgentsActionSchema* Schema, const TMap<class FName, struct FLearningAgentsActionSchemaElement>& Elements, const class FName Tag);
	static struct FLearningAgentsActionSchemaElement SpecifyStructActionFromArrays(class ULearningAgentsActionSchema* Schema, const TArray<class FName>& ElementNames, const TArray<struct FLearningAgentsActionSchemaElement>& Elements, const class FName Tag);
	static struct FLearningAgentsActionSchemaElement SpecifyTransformAction(class ULearningAgentsActionSchema* Schema, const float LocationScale, const float RotationScale, const float ScaleScale, const class FName Tag);
	static struct FLearningAgentsActionSchemaElement SpecifyVelocityAction(class ULearningAgentsActionSchema* Schema, const float VelocityScale, const class FName Tag);
	static bool ValidateActionObjectMatchesSchema(const class ULearningAgentsActionSchema* Schema, const struct FLearningAgentsActionSchemaElement& SchemaElement, const class ULearningAgentsActionObject* Object, const struct FLearningAgentsActionObjectElement& ObjectElement);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LearningAgentsActions">();
	}
	static class ULearningAgentsActions* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULearningAgentsActions>();
	}
};

// Class LearningAgents.LearningAgentsManagerListener
// 0x0060 (0x0090 - 0x0030)
class ULearningAgentsManagerListener : public UObject
{
public:
	bool                                          bIsSetup;                                          // 0x0030(0x0001)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULearningAgentsManager*                 Manager;                                           // 0x0038(0x0008)(Edit, ExportObject, ZeroConstructor, Transient, EditConst, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<class FName, class ULearningAgentsVisualLoggerObject*> VisualLoggerObjects;                               // 0x0040(0x0050)(Edit, Transient, EditConst, Protected, UObjectWrapper, NativeAccessSpecifierProtected)

public:
	void OnAgentsAdded(const TArray<int32>& AgentIds);
	void OnAgentsManagerTick(const TArray<int32>& AgentIds, const float DeltaTime);
	void OnAgentsRemoved(const TArray<int32>& AgentIds);
	void OnAgentsReset(const TArray<int32>& AgentIds);

	class UObject* GetAgent(const int32 AgentId, const TSubclassOf<class UObject> AgentClass) const;
	class ULearningAgentsManager* GetAgentManager() const;
	void GetAgents(const TArray<int32>& AgentIds, const TSubclassOf<class UObject> AgentClass, TArray<class UObject*>* OutAgents) const;
	void GetAllAgents(TArray<class UObject*>* OutAgents, TArray<int32>* OutAgentIds, const TSubclassOf<class UObject> AgentClass) const;
	bool IsSetup() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LearningAgentsManagerListener">();
	}
	static class ULearningAgentsManagerListener* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULearningAgentsManagerListener>();
	}
};

// Class LearningAgents.LearningAgentsInteractor
// 0x02C0 (0x0350 - 0x0090)
class ULearningAgentsInteractor final : public ULearningAgentsManagerListener
{
public:
	class ULearningAgentsObservationSchema*       ObservationSchema;                                 // 0x0090(0x0008)(Edit, ZeroConstructor, Transient, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FLearningAgentsObservationSchemaElement ObservationSchemaElement;                          // 0x0098(0x0008)(Edit, Transient, EditConst, NoDestructor, NativeAccessSpecifierPrivate)
	class ULearningAgentsActionSchema*            ActionSchema;                                      // 0x00A0(0x0008)(Edit, ZeroConstructor, Transient, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FLearningAgentsActionSchemaElement     ActionSchemaElement;                               // 0x00A8(0x0008)(Edit, Transient, EditConst, NoDestructor, NativeAccessSpecifierPrivate)
	class ULearningAgentsObservationObject*       ObservationObject;                                 // 0x00B0(0x0008)(Edit, ZeroConstructor, Transient, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FLearningAgentsObservationObjectElement> ObservationObjectElements;                         // 0x00B8(0x0010)(Edit, ZeroConstructor, Transient, EditConst, NativeAccessSpecifierPrivate)
	class ULearningAgentsActionObject*            ActionObject;                                      // 0x00C8(0x0008)(Edit, ZeroConstructor, Transient, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FLearningAgentsActionObjectElement> ActionObjectElements;                              // 0x00D0(0x0010)(Edit, ZeroConstructor, Transient, EditConst, NativeAccessSpecifierPrivate)
	uint8                                         Pad_E0[0x270];                                     // 0x00E0(0x0270)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class ULearningAgentsInteractor* MakeInteractor(class ULearningAgentsManager* InManager, TSubclassOf<class ULearningAgentsInteractor> Class_0, const class FName Name_0);

	void GatherAgentObservation(struct FLearningAgentsObservationObjectElement* OutObservationObjectElement, class ULearningAgentsObservationObject* InObservationObject, const int32 AgentId);
	void GatherAgentObservations(TArray<struct FLearningAgentsObservationObjectElement>* OutObservationObjectElements, class ULearningAgentsObservationObject* InObservationObject, const TArray<int32>& AgentIds);
	void GatherObservations();
	void GetActionVector(TArray<float>* OutActionVector, int32* OutActionCompatibilityHash, const int32 AgentId);
	void GetObservationVector(TArray<float>* OutObservationVector, int32* OutObservationCompatibilityHash, const int32 AgentId);
	void PerformActions();
	void PerformAgentAction(const class ULearningAgentsActionObject* InActionObject, const struct FLearningAgentsActionObjectElement& InActionObjectElement, const int32 AgentId);
	void PerformAgentActions(const class ULearningAgentsActionObject* InActionObject, const TArray<struct FLearningAgentsActionObjectElement>& InActionObjectElements, const TArray<int32>& AgentIds);
	void SetActionVector(const TArray<float>& ActionVector, const int32 InActionCompatibilityHash, const int32 AgentId, bool bIncrementIteration);
	void SetObservationVector(const TArray<float>& ObservationVector, const int32 InObservationCompatibilityHash, const int32 AgentId, bool bIncrementIteration);
	void SetupInteractor(class ULearningAgentsManager* InManager);
	void SpecifyAgentAction(struct FLearningAgentsActionSchemaElement* OutActionSchemaElement, class ULearningAgentsActionSchema* InActionSchema);
	void SpecifyAgentObservation(struct FLearningAgentsObservationSchemaElement* OutObservationSchemaElement, class ULearningAgentsObservationSchema* InObservationSchema);

	int32 GetActionDistributionVectorSize() const;
	int32 GetActionEncodedVectorSize() const;
	int32 GetActionVectorSize() const;
	int32 GetObservationEncodedVectorSize() const;
	int32 GetObservationVectorSize() const;
	bool HasActionVector(const int32 AgentId) const;
	bool HasObservationVector(const int32 AgentId) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LearningAgentsInteractor">();
	}
	static class ULearningAgentsInteractor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULearningAgentsInteractor>();
	}
};

// Class LearningAgents.LearningAgentsController
// 0x0008 (0x0098 - 0x0090)
class ULearningAgentsController final : public ULearningAgentsManagerListener
{
public:
	class ULearningAgentsInteractor*              Interactor;                                        // 0x0090(0x0008)(Edit, ZeroConstructor, Transient, EditConst, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class ULearningAgentsController* MakeController(class ULearningAgentsManager* InManager, class ULearningAgentsInteractor* InInteractor, TSubclassOf<class ULearningAgentsController> Class_0, const class FName Name_0);

	void EvaluateAgentController(struct FLearningAgentsActionObjectElement* OutActionObjectElement, class ULearningAgentsActionObject* InActionObject, const class ULearningAgentsObservationObject* InObservationObject, const struct FLearningAgentsObservationObjectElement& InObservationObjectElement, const int32 AgentId);
	void EvaluateAgentControllers(TArray<struct FLearningAgentsActionObjectElement>* OutActionObjectElements, class ULearningAgentsActionObject* InActionObject, const class ULearningAgentsObservationObject* InObservationObject, const TArray<struct FLearningAgentsObservationObjectElement>& InObservationObjectElements, const TArray<int32>& AgentIds);
	void EvaluateController();
	void RunController();
	void SetupController(class ULearningAgentsManager* InManager, class ULearningAgentsInteractor* InInteractor);

	class ULearningAgentsInteractor* GetInteractor(const TSubclassOf<class ULearningAgentsInteractor> InteractorClass) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LearningAgentsController">();
	}
	static class ULearningAgentsController* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULearningAgentsController>();
	}
};

// Class LearningAgents.LearningAgentsCritic
// 0x01F0 (0x0280 - 0x0090)
class ULearningAgentsCritic final : public ULearningAgentsManagerListener
{
public:
	class ULearningAgentsInteractor*              Interactor;                                        // 0x0090(0x0008)(Edit, ZeroConstructor, Transient, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ULearningAgentsPolicy*                  Policy;                                            // 0x0098(0x0008)(Edit, ZeroConstructor, Transient, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ULearningAgentsNeuralNetwork*           CriticNetwork;                                     // 0x00A0(0x0008)(Edit, ZeroConstructor, Transient, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_A8[0x1D8];                                     // 0x00A8(0x01D8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class ULearningAgentsCritic* MakeCritic(class ULearningAgentsManager* InManager, class ULearningAgentsInteractor* InInteractor, class ULearningAgentsPolicy* InPolicy, TSubclassOf<class ULearningAgentsCritic> Class_0, const class FName Name_0, class ULearningAgentsNeuralNetwork* CriticNeuralNetworkAsset, const bool bReinitializeCriticNetwork, const struct FLearningAgentsCriticSettings& CriticSettings, const int32 Seed);

	void EvaluateCritic();
	class ULearningAgentsNeuralNetwork* GetCriticNetworkAsset();
	void SetupCritic(class ULearningAgentsManager* InManager, class ULearningAgentsInteractor* InInteractor, class ULearningAgentsPolicy* InPolicy, class ULearningAgentsNeuralNetwork* CriticNeuralNetworkAsset, const bool bReinitializeCriticNetwork, const struct FLearningAgentsCriticSettings& CriticSettings, const int32 Seed);

	float GetEstimatedDiscountedReturn(const int32 AgentId) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LearningAgentsCritic">();
	}
	static class ULearningAgentsCritic* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULearningAgentsCritic>();
	}
};

// Class LearningAgents.LearningAgentsVisualLoggerObject
// 0x0000 (0x0030 - 0x0030)
class ULearningAgentsVisualLoggerObject final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LearningAgentsVisualLoggerObject">();
	}
	static class ULearningAgentsVisualLoggerObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULearningAgentsVisualLoggerObject>();
	}
};

// Class LearningAgents.LearningAgentsNeuralNetwork
// 0x0008 (0x0040 - 0x0038)
class ULearningAgentsNeuralNetwork final : public UDataAsset
{
public:
	class ULearningNeuralNetworkData*             NeuralNetworkData;                                 // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void LoadNetworkFromAsset(class ULearningAgentsNeuralNetwork* NeuralNetworkAsset);
	void LoadNetworkFromSnapshot(const struct FFilePath& File);
	void ResetNetwork();
	void SaveNetworkToAsset(class ULearningAgentsNeuralNetwork* NeuralNetworkAsset);
	void SaveNetworkToSnapshot(const struct FFilePath& File);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LearningAgentsNeuralNetwork">();
	}
	static class ULearningAgentsNeuralNetwork* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULearningAgentsNeuralNetwork>();
	}
};

// Class LearningAgents.LearningAgentsObservationSchema
// 0x00E8 (0x0118 - 0x0030)
class ULearningAgentsObservationSchema final : public UObject
{
public:
	uint8                                         Pad_30[0xE8];                                      // 0x0030(0x00E8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LearningAgentsObservationSchema">();
	}
	static class ULearningAgentsObservationSchema* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULearningAgentsObservationSchema>();
	}
};

// Class LearningAgents.LearningAgentsObservationObject
// 0x0098 (0x00C8 - 0x0030)
class ULearningAgentsObservationObject final : public UObject
{
public:
	uint8                                         Pad_30[0x98];                                      // 0x0030(0x0098)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LearningAgentsObservationObject">();
	}
	static class ULearningAgentsObservationObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULearningAgentsObservationObject>();
	}
};

// Class LearningAgents.LearningAgentsObservations
// 0x0000 (0x0030 - 0x0030)
class ULearningAgentsObservations final : public UBlueprintFunctionLibrary
{
public:
	static class UEnum* FindEnumByName(const class FString& Name_0);
	static bool GetAngleObservation(float* OutAngle, const class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element, const float RelativeAngle, const class FName Tag);
	static bool GetAngleObservationRadians(float* OutAngle, const class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element, const float RelativeAngle, const class FName Tag);
	static bool GetArrayObservation(TArray<struct FLearningAgentsObservationObjectElement>* OutElements, const class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element, const int32 MaxNum, const class FName Tag);
	static bool GetArrayObservationNum(int32* OutNum, const class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element, const class FName Tag);
	static bool GetBitmaskObservation(int32* OutBitmaskValue, const class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element, const class UEnum* Enum, const class FName Tag);
	static bool GetBoolObservation(bool* bOutValue, const class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element, const class FName Tag);
	static bool GetContinuousObservation(TArray<float>* OutValues, const class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element, const class FName Tag);
	static bool GetContinuousObservationNum(int32* OutNum, const class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element, const class FName Tag);
	static bool GetCountObservation(int32* OutNum, const class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element, const int32 MaxNum, const class FName Tag);
	static bool GetDirectionAlongSplineObservation(struct FVector* OutDirection, const class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element, const struct FTransform& RelativeTransform, const class FName Tag);
	static bool GetDirectionObservation(struct FVector* OutDirection, const class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element, const struct FTransform& RelativeTransform, const class FName Tag);
	static bool GetEitherObservation(ELearningAgentsEitherObservation* OutEither, struct FLearningAgentsObservationObjectElement* OutElement, const class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element, const class FName Tag);
	static bool GetEncodingObservation(struct FLearningAgentsObservationObjectElement* OutElement, const class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element, const class FName Tag);
	static bool GetEnumObservation(uint8* OutEnumValue, const class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element, const class UEnum* Enum, const class FName Tag);
	static bool GetExclusiveDiscreteObservation(int32* OutIndex, const class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element, const class FName Tag);
	static bool GetExclusiveUnionObservation(class FName* OutElementName, struct FLearningAgentsObservationObjectElement* OutElement, const class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element, const class FName Tag);
	static bool GetFloatObservation(float* OutValue, const class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element, const class FName Tag);
	static bool GetInclusiveDiscreteObservation(TArray<int32>* OutIndices, const class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element, const class FName Tag);
	static bool GetInclusiveDiscreteObservationNum(int32* OutNum, const class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element, const class FName Tag);
	static bool GetInclusiveUnionObservation(TMap<class FName, struct FLearningAgentsObservationObjectElement>* OutElements, const class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element, const class FName Tag);
	static bool GetInclusiveUnionObservationNum(int32* OutNum, const class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element, const class FName Tag);
	static bool GetInclusiveUnionObservationToArrays(TArray<class FName>* OutElementNames, TArray<struct FLearningAgentsObservationObjectElement>* OutElements, const class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element, const class FName Tag);
	static bool GetLocationAlongSplineObservation(struct FVector* OutLocation, const class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element, const struct FTransform& RelativeTransform, const class FName Tag);
	static bool GetLocationObservation(struct FVector* OutLocation, const class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element, const struct FTransform& RelativeTransform, const class FName Tag);
	static bool GetMapObservation(TMap<struct FLearningAgentsObservationObjectElement, struct FLearningAgentsObservationObjectElement>* OutElements, const class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element, const class FName Tag);
	static bool GetMapObservationNum(int32* OutNum, const class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element, const class FName Tag);
	static bool GetMapObservationToArrays(TArray<struct FLearningAgentsObservationObjectElement>* OutKeys, TArray<struct FLearningAgentsObservationObjectElement>* OutValues, const class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element, const class FName Tag);
	static bool GetNullObservation(const class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element, const class FName Tag);
	static bool GetOptionalObservation(ELearningAgentsOptionalObservation* OutOption, struct FLearningAgentsObservationObjectElement* OutElement, const class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element, const class FName Tag);
	static bool GetPairObservation(struct FLearningAgentsObservationObjectElement* OutKey, struct FLearningAgentsObservationObjectElement* OutValue, const class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element, const class FName Tag);
	static bool GetProportionAlongRayObservation(float* OutProportion, const class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element, const class FName Tag);
	static bool GetProportionAlongSplineObservation(bool* bOutIsClosedLoop, float* OutAngle, float* OutPropotion, const class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element, const class FName Tag);
	static bool GetRotationObservation(struct FRotator* OutRotation, const class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element, const struct FRotator& RelativeRotation, const class FName Tag);
	static bool GetRotationObservationAsQuat(struct FQuat* OutRotation, const class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element, const struct FQuat& RelativeRotation, const class FName Tag);
	static bool GetScaleObservation(struct FVector* OutScale, const class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element, const struct FVector& RelativeScale, const class FName Tag);
	static bool GetSetObservation(TSet<struct FLearningAgentsObservationObjectElement>* OutElements, const class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element, const class FName Tag);
	static bool GetSetObservationNum(int32* OutNum, const class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element, const class FName Tag);
	static bool GetSetObservationToArray(TArray<struct FLearningAgentsObservationObjectElement>* OutElements, const class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element, const class FName Tag);
	static bool GetStaticArrayObservation(TArray<struct FLearningAgentsObservationObjectElement>* OutElements, const class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element, const class FName Tag);
	static bool GetStaticArrayObservationNum(int32* OutNum, const class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element, const class FName Tag);
	static bool GetStructObservation(TMap<class FName, struct FLearningAgentsObservationObjectElement>* OutElements, const class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element, const class FName Tag);
	static bool GetStructObservationElement(struct FLearningAgentsObservationObjectElement* OutElement, const class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element, const class FName ElementName, const class FName Tag);
	static bool GetStructObservationNum(int32* OutNum, const class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element, const class FName Tag);
	static bool GetStructObservationToArrays(TArray<class FName>* OutElementNames, TArray<struct FLearningAgentsObservationObjectElement>* OutElements, const class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element, const class FName Tag);
	static bool GetTransformObservation(struct FTransform* OutTransform, const class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element, const struct FTransform& RelativeTransform, const class FName Tag);
	static bool GetVelocityObservation(struct FVector* OutVelocity, const class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element, const struct FTransform& RelativeTransform, const class FName Tag);
	static void LogObservation(const class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element);
	static struct FLearningAgentsObservationObjectElement MakeAngleObservation(class ULearningAgentsObservationObject* Object, const float Angle, const float RelativeAngle, const class FName Tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor);
	static struct FLearningAgentsObservationObjectElement MakeAngleObservationRadians(class ULearningAgentsObservationObject* Object, const float Angle, const float RelativeAngle, const class FName Tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor);
	static struct FLearningAgentsObservationObjectElement MakeArrayObservation(class ULearningAgentsObservationObject* Object, const TArray<struct FLearningAgentsObservationObjectElement>& Elements, const int32 MaxNum, const class FName Tag);
	static struct FLearningAgentsObservationObjectElement MakeBitmaskObservation(class ULearningAgentsObservationObject* Object, const class UEnum* Enum, const int32 BitmaskValue, const class FName Tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor);
	static struct FLearningAgentsObservationObjectElement MakeBoolObservation(class ULearningAgentsObservationObject* Object, const bool bValue, const class FName Tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor);
	static struct FLearningAgentsObservationObjectElement MakeContinuousObservation(class ULearningAgentsObservationObject* Object, const TArray<float>& Values, const class FName Tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor);
	static struct FLearningAgentsObservationObjectElement MakeCountObservation(class ULearningAgentsObservationObject* Object, const int32 Num, const int32 MaxNum, const class FName Tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor);
	static struct FLearningAgentsObservationObjectElement MakeDirectionAlongSplineObservation(class ULearningAgentsObservationObject* Object, const class USplineComponent* SplineComponent, const float DistanceAlongSpline, const struct FTransform& RelativeTransform, const class FName Tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerLocation, const float VisualLoggerArrowLength, const struct FLinearColor& VisualLoggerColor);
	static struct FLearningAgentsObservationObjectElement MakeDirectionObservation(class ULearningAgentsObservationObject* Object, const struct FVector& Direction, const struct FTransform& RelativeTransform, const class FName Tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerDirectionLocation, const struct FVector& VisualLoggerLocation, const float VisualLoggerArrowLength, const struct FLinearColor& VisualLoggerColor);
	static struct FLearningAgentsObservationObjectElement MakeEitherAObservation(class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& A, const class FName Tag);
	static struct FLearningAgentsObservationObjectElement MakeEitherBObservation(class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& B, const class FName Tag);
	static struct FLearningAgentsObservationObjectElement MakeEitherObservation(class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element, const ELearningAgentsEitherObservation Either, const class FName Tag);
	static struct FLearningAgentsObservationObjectElement MakeEncodingObservation(class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element, const class FName Tag);
	static struct FLearningAgentsObservationObjectElement MakeEnumObservation(class ULearningAgentsObservationObject* Object, const class UEnum* Enum, const uint8 EnumValue, const class FName Tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor);
	static struct FLearningAgentsObservationObjectElement MakeExclusiveDiscreteObservation(class ULearningAgentsObservationObject* Object, const int32 DiscreteIndex, const int32 Size, const class FName Tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor);
	static struct FLearningAgentsObservationObjectElement MakeExclusiveUnionObservation(class ULearningAgentsObservationObject* Object, const class FName ElementName, const struct FLearningAgentsObservationObjectElement& Element, const class FName Tag);
	static struct FLearningAgentsObservationObjectElement MakeFloatObservation(class ULearningAgentsObservationObject* Object, const float Value, const class FName Tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor);
	static struct FLearningAgentsObservationObjectElement MakeInclusiveDiscreteObservation(class ULearningAgentsObservationObject* Object, const TArray<int32>& DiscreteIndices, const int32 Size, const class FName Tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor);
	static struct FLearningAgentsObservationObjectElement MakeInclusiveUnionObservation(class ULearningAgentsObservationObject* Object, const TMap<class FName, struct FLearningAgentsObservationObjectElement>& Elements, const class FName Tag);
	static struct FLearningAgentsObservationObjectElement MakeInclusiveUnionObservationFromArrays(class ULearningAgentsObservationObject* Object, const TArray<class FName>& ElementNames, const TArray<struct FLearningAgentsObservationObjectElement>& Elements, const class FName Tag);
	static struct FLearningAgentsObservationObjectElement MakeLocationAlongSplineObservation(class ULearningAgentsObservationObject* Object, const class USplineComponent* SplineComponent, const float DistanceAlongSpline, const struct FTransform& RelativeTransform, const class FName Tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor);
	static struct FLearningAgentsObservationObjectElement MakeLocationObservation(class ULearningAgentsObservationObject* Object, const struct FVector& Location, const struct FTransform& RelativeTransform, const class FName Tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor);
	static struct FLearningAgentsObservationObjectElement MakeMapObservation(class ULearningAgentsObservationObject* Object, const TMap<struct FLearningAgentsObservationObjectElement, struct FLearningAgentsObservationObjectElement>& Map, const class FName Tag);
	static struct FLearningAgentsObservationObjectElement MakeMapObservationFromArrays(class ULearningAgentsObservationObject* Object, const TArray<struct FLearningAgentsObservationObjectElement>& Keys, const TArray<struct FLearningAgentsObservationObjectElement>& Values, const class FName Tag);
	static struct FLearningAgentsObservationObjectElement MakeNullObservation(class ULearningAgentsObservationObject* Object, const class FName Tag);
	static struct FLearningAgentsObservationObjectElement MakeOptionalNullObservation(class ULearningAgentsObservationObject* Object, const class FName Tag);
	static struct FLearningAgentsObservationObjectElement MakeOptionalObservation(class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element, const ELearningAgentsOptionalObservation Option, const class FName Tag);
	static struct FLearningAgentsObservationObjectElement MakeOptionalValidObservation(class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element, const class FName Tag);
	static struct FLearningAgentsObservationObjectElement MakePairObservation(class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Key, const struct FLearningAgentsObservationObjectElement& Value, const class FName Tag);
	static struct FLearningAgentsObservationObjectElement MakeProportionAlongRayObservation(class ULearningAgentsObservationObject* Object, const struct FVector& RayStart, const struct FVector& RayEnd, const struct FTransform& RayTransform, const ECollisionChannel CollisionChannel, const class FName Tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor);
	static struct FLearningAgentsObservationObjectElement MakeProportionAlongSplineObservation(class ULearningAgentsObservationObject* Object, const class USplineComponent* SplineComponent, const float DistanceAlongSpline, const class FName Tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor);
	static struct FLearningAgentsObservationObjectElement MakeRotationObservation(class ULearningAgentsObservationObject* Object, const struct FRotator& Rotation, const struct FRotator& RelativeRotation, const class FName Tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerRotationLocation, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor);
	static struct FLearningAgentsObservationObjectElement MakeRotationObservationFromQuat(class ULearningAgentsObservationObject* Object, const struct FQuat& Rotation, const struct FQuat& RelativeRotation, const class FName Tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerRotationLocation, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor);
	static struct FLearningAgentsObservationObjectElement MakeScaleObservation(class ULearningAgentsObservationObject* Object, const struct FVector& Scale, const struct FVector& RelativeScale, const class FName Tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerScaleLocation, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor);
	static struct FLearningAgentsObservationObjectElement MakeSetObservation(class ULearningAgentsObservationObject* Object, const TSet<struct FLearningAgentsObservationObjectElement>& Elements, const class FName Tag);
	static struct FLearningAgentsObservationObjectElement MakeSetObservationFromArray(class ULearningAgentsObservationObject* Object, const TArray<struct FLearningAgentsObservationObjectElement>& Elements, const class FName Tag);
	static struct FLearningAgentsObservationObjectElement MakeStaticArrayObservation(class ULearningAgentsObservationObject* Object, const TArray<struct FLearningAgentsObservationObjectElement>& Elements, const class FName Tag);
	static struct FLearningAgentsObservationObjectElement MakeStructObservation(class ULearningAgentsObservationObject* Object, const TMap<class FName, struct FLearningAgentsObservationObjectElement>& Elements, const class FName Tag);
	static struct FLearningAgentsObservationObjectElement MakeStructObservationFromArrays(class ULearningAgentsObservationObject* Object, const TArray<class FName>& ElementNames, const TArray<struct FLearningAgentsObservationObjectElement>& Elements, const class FName Tag);
	static struct FLearningAgentsObservationObjectElement MakeTransformObservation(class ULearningAgentsObservationObject* Object, const struct FTransform& Transform, const struct FTransform& RelativeTransform, const class FName Tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor);
	static struct FLearningAgentsObservationObjectElement MakeVelocityObservation(class ULearningAgentsObservationObject* Object, const struct FVector& Velocity, const struct FTransform& RelativeTransform, const class FName Tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerVelocityLocation, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor);
	static struct FTransform ProjectTransformOntoGroundPlane(const struct FTransform& Transform, const struct FVector& LocalForwardVector, const float GroundPlaneHeight);
	static struct FLearningAgentsObservationSchemaElement SpecifyAngleObservation(class ULearningAgentsObservationSchema* Schema, const class FName Tag);
	static struct FLearningAgentsObservationSchemaElement SpecifyArrayObservation(class ULearningAgentsObservationSchema* Schema, const struct FLearningAgentsObservationSchemaElement& Element, const int32 MaxNum, const int32 AttentionEncodingSize, const int32 AttentionHeadNum, const int32 ValueEncodingSize, const class FName Tag);
	static struct FLearningAgentsObservationSchemaElement SpecifyBitmaskObservation(class ULearningAgentsObservationSchema* Schema, const class UEnum* Enum, const class FName Tag);
	static struct FLearningAgentsObservationSchemaElement SpecifyBoolObservation(class ULearningAgentsObservationSchema* Schema, const class FName Tag);
	static struct FLearningAgentsObservationSchemaElement SpecifyContinuousObservation(class ULearningAgentsObservationSchema* Schema, const int32 Size, const float Scale, const class FName Tag);
	static struct FLearningAgentsObservationSchemaElement SpecifyCountObservation(class ULearningAgentsObservationSchema* Schema, const class FName Tag);
	static struct FLearningAgentsObservationSchemaElement SpecifyDirectionAlongSplineObservation(class ULearningAgentsObservationSchema* Schema, const class FName Tag);
	static struct FLearningAgentsObservationSchemaElement SpecifyDirectionObservation(class ULearningAgentsObservationSchema* Schema, const class FName Tag);
	static struct FLearningAgentsObservationSchemaElement SpecifyEitherObservation(class ULearningAgentsObservationSchema* Schema, const struct FLearningAgentsObservationSchemaElement& A, const struct FLearningAgentsObservationSchemaElement& B, const int32 EncodingSize, const class FName Tag);
	static struct FLearningAgentsObservationSchemaElement SpecifyEncodingObservation(class ULearningAgentsObservationSchema* Schema, const struct FLearningAgentsObservationSchemaElement& Element, const int32 EncodingSize, const int32 HiddenLayerNum, const ELearningAgentsActivationFunction ActivationFunction, const class FName Tag);
	static struct FLearningAgentsObservationSchemaElement SpecifyEnumObservation(class ULearningAgentsObservationSchema* Schema, const class UEnum* Enum, const class FName Tag);
	static struct FLearningAgentsObservationSchemaElement SpecifyExclusiveDiscreteObservation(class ULearningAgentsObservationSchema* Schema, const int32 Size, const class FName Tag);
	static struct FLearningAgentsObservationSchemaElement SpecifyExclusiveUnionObservation(class ULearningAgentsObservationSchema* Schema, const TMap<class FName, struct FLearningAgentsObservationSchemaElement>& Elements, const int32 EncodingSize, const class FName Tag);
	static struct FLearningAgentsObservationSchemaElement SpecifyExclusiveUnionObservationFromArrays(class ULearningAgentsObservationSchema* Schema, const TArray<class FName>& ElementNames, const TArray<struct FLearningAgentsObservationSchemaElement>& Elements, const int32 EncodingSize, const class FName Tag);
	static struct FLearningAgentsObservationSchemaElement SpecifyFloatObservation(class ULearningAgentsObservationSchema* Schema, const float FloatScale, const class FName Tag);
	static struct FLearningAgentsObservationSchemaElement SpecifyInclusiveDiscreteObservation(class ULearningAgentsObservationSchema* Schema, const int32 Size, const class FName Tag);
	static struct FLearningAgentsObservationSchemaElement SpecifyInclusiveUnionObservation(class ULearningAgentsObservationSchema* Schema, const TMap<class FName, struct FLearningAgentsObservationSchemaElement>& Elements, const int32 AttentionEncodingSize, const int32 AttentionHeadNum, const int32 ValueEncodingSize, const class FName Tag);
	static struct FLearningAgentsObservationSchemaElement SpecifyInclusiveUnionObservationFromArrays(class ULearningAgentsObservationSchema* Schema, const TArray<class FName>& ElementNames, const TArray<struct FLearningAgentsObservationSchemaElement>& Elements, const int32 AttentionEncodingSize, const int32 AttentionHeadNum, const int32 ValueEncodingSize, const class FName Tag);
	static struct FLearningAgentsObservationSchemaElement SpecifyLocationAlongSplineObservation(class ULearningAgentsObservationSchema* Schema, const float LocationScale, const class FName Tag);
	static struct FLearningAgentsObservationSchemaElement SpecifyLocationObservation(class ULearningAgentsObservationSchema* Schema, const float LocationScale, const class FName Tag);
	static struct FLearningAgentsObservationSchemaElement SpecifyMapObservation(class ULearningAgentsObservationSchema* Schema, const struct FLearningAgentsObservationSchemaElement& KeyElement, const struct FLearningAgentsObservationSchemaElement& ValueElement, const int32 MaxNum, const int32 AttentionEncodingSize, const int32 AttentionHeadNum, const int32 ValueEncodingSize, const class FName Tag);
	static struct FLearningAgentsObservationSchemaElement SpecifyNullObservation(class ULearningAgentsObservationSchema* Schema, const class FName Tag);
	static struct FLearningAgentsObservationSchemaElement SpecifyOptionalObservation(class ULearningAgentsObservationSchema* Schema, const struct FLearningAgentsObservationSchemaElement& Element, const int32 EncodingSize, const class FName Tag);
	static struct FLearningAgentsObservationSchemaElement SpecifyPairObservation(class ULearningAgentsObservationSchema* Schema, const struct FLearningAgentsObservationSchemaElement& Key, const struct FLearningAgentsObservationSchemaElement& Value, const class FName Tag);
	static struct FLearningAgentsObservationSchemaElement SpecifyProportionAlongRayObservation(class ULearningAgentsObservationSchema* Schema, const class FName Tag);
	static struct FLearningAgentsObservationSchemaElement SpecifyProportionAlongSplineObservation(class ULearningAgentsObservationSchema* Schema, const class FName Tag);
	static struct FLearningAgentsObservationSchemaElement SpecifyRotationObservation(class ULearningAgentsObservationSchema* Schema, const class FName Tag);
	static struct FLearningAgentsObservationSchemaElement SpecifyScaleObservation(class ULearningAgentsObservationSchema* Schema, const class FName Tag);
	static struct FLearningAgentsObservationSchemaElement SpecifySetObservation(class ULearningAgentsObservationSchema* Schema, const struct FLearningAgentsObservationSchemaElement& Element, const int32 MaxNum, const int32 AttentionEncodingSize, const int32 AttentionHeadNum, const int32 ValueEncodingSize, const class FName Tag);
	static struct FLearningAgentsObservationSchemaElement SpecifyStaticArrayObservation(class ULearningAgentsObservationSchema* Schema, const struct FLearningAgentsObservationSchemaElement& Element, const int32 Num, const class FName Tag);
	static struct FLearningAgentsObservationSchemaElement SpecifyStructObservation(class ULearningAgentsObservationSchema* Schema, const TMap<class FName, struct FLearningAgentsObservationSchemaElement>& Elements, const class FName Tag);
	static struct FLearningAgentsObservationSchemaElement SpecifyStructObservationFromArrays(class ULearningAgentsObservationSchema* Schema, const TArray<class FName>& ElementNames, const TArray<struct FLearningAgentsObservationSchemaElement>& Elements, const class FName Tag);
	static struct FLearningAgentsObservationSchemaElement SpecifyTransformObservation(class ULearningAgentsObservationSchema* Schema, const float LocationScale, const class FName Tag);
	static struct FLearningAgentsObservationSchemaElement SpecifyVelocityObservation(class ULearningAgentsObservationSchema* Schema, const float VelocityScale, const class FName Tag);
	static bool ValidateObservationObjectMatchesSchema(const class ULearningAgentsObservationSchema* Schema, const struct FLearningAgentsObservationSchemaElement& SchemaElement, const class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& ObjectElement);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LearningAgentsObservations">();
	}
	static class ULearningAgentsObservations* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULearningAgentsObservations>();
	}
};

// Class LearningAgents.LearningAgentsPolicy
// 0x0410 (0x04A0 - 0x0090)
class ULearningAgentsPolicy final : public ULearningAgentsManagerListener
{
public:
	class ULearningAgentsInteractor*              Interactor;                                        // 0x0090(0x0008)(Edit, ZeroConstructor, Transient, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ULearningAgentsNeuralNetwork*           EncoderNetwork;                                    // 0x0098(0x0008)(Edit, ZeroConstructor, Transient, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ULearningAgentsNeuralNetwork*           PolicyNetwork;                                     // 0x00A0(0x0008)(Edit, ZeroConstructor, Transient, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ULearningAgentsNeuralNetwork*           DecoderNetwork;                                    // 0x00A8(0x0008)(Edit, ZeroConstructor, Transient, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_B0[0x3F0];                                     // 0x00B0(0x03F0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class ULearningAgentsPolicy* MakePolicy(class ULearningAgentsManager* InManager, class ULearningAgentsInteractor* InInteractor, TSubclassOf<class ULearningAgentsPolicy> Class_0, const class FName Name_0, class ULearningAgentsNeuralNetwork* EncoderNeuralNetworkAsset, class ULearningAgentsNeuralNetwork* PolicyNeuralNetworkAsset, class ULearningAgentsNeuralNetwork* DecoderNeuralNetworkAsset, const bool bReinitializeEncoderNetwork, const bool bReinitializePolicyNetwork, const bool bReinitializeDecoderNetwork, const struct FLearningAgentsPolicySettings& PolicySettings, const int32 Seed);

	void DecodeAndSampleActions(const float ActionNoiseScale);
	void EncodeObservations();
	void EvaluatePolicy();
	class ULearningAgentsNeuralNetwork* GetDecoderNetworkAsset();
	class ULearningAgentsNeuralNetwork* GetEncoderNetworkAsset();
	class ULearningAgentsNeuralNetwork* GetPolicyNetworkAsset();
	void RunInference(const float ActionNoiseScale);
	void SetMemoryState(const int32 AgentId, const TArray<float>& InMemoryState);
	void SetupPolicy(class ULearningAgentsManager* InManager, class ULearningAgentsInteractor* InInteractor, class ULearningAgentsNeuralNetwork* EncoderNeuralNetworkAsset, class ULearningAgentsNeuralNetwork* PolicyNeuralNetworkAsset, class ULearningAgentsNeuralNetwork* DecoderNeuralNetworkAsset, const bool bReinitializeEncoderNetwork, const bool bReinitializePolicyNetwork, const bool bReinitializeDecoderNetwork, const struct FLearningAgentsPolicySettings& PolicySettings, const int32 Seed);

	void GetMemoryState(TArray<float>* OutMemoryState, const int32 AgentId) const;
	int32 GetMemoryStateSize() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LearningAgentsPolicy">();
	}
	static class ULearningAgentsPolicy* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULearningAgentsPolicy>();
	}
};

}

