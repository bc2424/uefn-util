#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FMJamPlayspaceRuntime

#include "Basic.hpp"

#include "FMJamPlayspaceRuntime_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "SparksMusicPlayspaceRuntime_classes.hpp"
#include "SparksCoreRuntime_structs.hpp"
#include "PlayspaceSystem_classes.hpp"
#include "GameplayTags_structs.hpp"
#include "FMCoreRuntime_structs.hpp"
#include "GameplayEventRouter_structs.hpp"


namespace SDK
{

// Class FMJamPlayspaceRuntime.JamAnalytics
// 0x00B8 (0x0198 - 0x00E0)
class UJamAnalytics final : public UFortControllerComponent
{
public:
	uint8                                         Pad_E0[0x40];                                      // 0x00E0(0x0040)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         MinLoopLength;                                     // 0x0120(0x0038)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	float                                         LoopStartTime;                                     // 0x0158(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         LoopLength;                                        // 0x015C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   LoopShortName;                                     // 0x0160(0x000C)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_16C[0x4];                                      // 0x016C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LoopType;                                          // 0x0170(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 LoopID;                                            // 0x0180(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AJamPlayspace*                          JamPlayspace;                                      // 0x0190(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"JamAnalytics">();
	}
	static class UJamAnalytics* GetDefaultObj()
	{
		return GetDefaultObjImpl<UJamAnalytics>();
	}
};

// Class FMJamPlayspaceRuntime.JamMidiEventDriver
// 0x0020 (0x0050 - 0x0030)
class UJamMidiEventDriver final : public UObject
{
public:
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UJamMusicSlot>           WeakOwningMusicSlotPtr;                            // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UParsedMidiEventData*                   ParsedMidiEventData;                               // 0x0040(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"JamMidiEventDriver">();
	}
	static class UJamMidiEventDriver* GetDefaultObj()
	{
		return GetDefaultObjImpl<UJamMidiEventDriver>();
	}
};

// Class FMJamPlayspaceRuntime.JamPlayspace
// 0x00A8 (0x09A0 - 0x08F8)
class AJamPlayspace final : public ASparksMusicPlayspace
{
public:
	uint8                                         Pad_8F8[0x18];                                     // 0x08F8(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class UJamPlayspaceComponent_MusicManager*    MusicManager;                                      // 0x0910(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_918[0x18];                                     // 0x0918(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class UJamPlayspaceComponent_LipSyncAssetManager* JamLipSyncManager;                                 // 0x0930(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UJamPlayspaceComponent_ReactiveFX*      ReactiveFXComponent;                               // 0x0938(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGuid                                  JamSessionGuid;                                    // 0x0940(0x0010)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_950[0x50];                                     // 0x0950(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BeginShutdownJam();
	void ConvertPlayerToAutoJammer(const class APlayerState* PlayerState);
	class UAudioComponent* GetJamAudioSource();
	void OnJamAudioSourceActiveStateChange(class UAudioComponent* JamAudioSource, bool bNewActiveState);
	class UJamMusicSlot* PlayLoop(class APlayerState* PlayerState, const class FName SongShortName, const EFMJamLoopType LoopType, const bool bForceAudioState, const bool bIsAutoJammer);
	void StopAllLoops(const bool bStopAutoJammers);
	void StopAllLoopsForLoopType(const EFMJamLoopType LoopType);
	void StopAllLoopsWithTag(const struct FGameplayTag& Tag);
	void StopAutoJammersForPlayer(const class APlayerState* PlayerState);
	void StopLoopByInstanceId(const int32 LoopInstanceId);
	void StopLoopForPlayer(const class APlayerState* PlayerState, const bool bStopAutoJammers);

	int32 CountActiveLoops(const bool bCountAutoJammers) const;
	bool DoAnyOtherJammersHaveGameplayTag(const class APlayerState* LocalPlayerState, const struct FGameplayTag& GlobalControlsTag) const;
	void GetAllowGlobalControlAccess(bool* OutAllowGlobalControlAccess, struct FGameplayTagContainer* OutRestrictionReason) const;
	TSoftObjectPtr<class UTexture2D> GetAutoJammerProfilPic() const;
	TArray<class APlayerState*> GetJammers() const;
	class AJamPlayspaceVolume* GetJamPlayspaceVolume() const;
	const struct FGuid GetJamSessionGuid() const;
	class UJamMusicSlot* GetMusicSlotForPlayer(const class APlayerState* PlayerState) const;
	TArray<class UJamMusicSlot*> GetMusicSlots() const;
	TArray<class UJamMusicSlot*> GetMusicSlotsForLoopType(const EFMJamLoopType LoopType) const;
	TArray<class UJamMusicSlot*> GetMusicSlotsInUse() const;
	TArray<class UJamMusicSlot*> GetMusicSlotsSortedByLoopType() const;
	bool IsJamFull(const bool bCountAutoJammers) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"JamPlayspace">();
	}
	static class AJamPlayspace* GetDefaultObj()
	{
		return GetDefaultObjImpl<AJamPlayspace>();
	}
};

// Class FMJamPlayspaceRuntime.JamPlayspaceComponent_JamCompanion
// 0x0090 (0x0168 - 0x00D8)
class UJamPlayspaceComponent_JamCompanion final : public UPlayspaceComponent
{
public:
	uint8                                         Pad_D8[0x18];                                      // 0x00D8(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bOverrideShouldPlaySongAlone;                      // 0x00F0(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bForceShouldPlaySongAlone;                         // 0x00F1(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_F2[0x76];                                      // 0x00F2(0x0076)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static struct FGameplayTag GetJamCompanionSlotTag();

	void BP_OnJamLoopStarted(const struct FJamEvent_JamLoopStarted& Payload);
	void BP_OnJamLoopStopped(const struct FJamEvent_JamLoopStopped& Payload);

	class UGameplayEventRouterComponent* GetEventRouter() const;
	class AJamPlayspace* GetJamPlayspace() const;
	class UJamPlayspaceComponent_MusicManager* GetMusicManager() const;
	bool GetShouldPlaySongAlone() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"JamPlayspaceComponent_JamCompanion">();
	}
	static class UJamPlayspaceComponent_JamCompanion* GetDefaultObj()
	{
		return GetDefaultObjImpl<UJamPlayspaceComponent_JamCompanion>();
	}
};

// Class FMJamPlayspaceRuntime.JamPlayspaceComponent_LipSyncAssetManager
// 0x0048 (0x0148 - 0x0100)
class UJamPlayspaceComponent_LipSyncAssetManager final : public UPlayspaceComponent_LipSyncAssetManager
{
public:
	uint8                                         Pad_100[0x48];                                     // 0x0100(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"JamPlayspaceComponent_LipSyncAssetManager">();
	}
	static class UJamPlayspaceComponent_LipSyncAssetManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UJamPlayspaceComponent_LipSyncAssetManager>();
	}
};

// Class FMJamPlayspaceRuntime.JamMusicSlot
// 0x00D0 (0x0100 - 0x0030)
class UJamMusicSlot final : public UObject
{
public:
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(struct FJamPlayParams& PlayParams, bool bChangedLoop)> OnLoopStarted;                                     // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(struct FJamPlayParams& PlayParams, bool bChangedLoop)> OnLoopStopped;                                     // 0x0048(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UMidiFile*                              CurrentMidiFile;                                   // 0x0058(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFusionPatch*                           CurrentFusionPatch;                                // 0x0060(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USparksJamEmoteItemDefinition*          CurrentItemDef;                                    // 0x0068(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UJamMidiEventDriver*                    MidiEventDriver;                                   // 0x0070(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAttemptingResolveAndLoad;                         // 0x0078(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_79[0x27];                                      // 0x0079(0x0027)(Fixing Size After Last Property [ Dumper-7 ])
	struct FJamPlayParams                         CurrentPlayParams;                                 // 0x00A0(0x0030)(Net, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected)
	class UJamPlayspaceComponent_MusicManager*    JamMusicManager;                                   // 0x00D0(0x0008)(ExportObject, Net, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         NthSlot;                                           // 0x00D8(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  OwnedGameplayTags;                                 // 0x00E0(0x0020)(Net, Protected, NativeAccessSpecifierProtected)

public:
	void AddGameplayTag(const struct FGameplayTag& Tag);
	void OnCMSCatalogRequestFinished(class UFMJamSongCatalog* Sender, bool bSuccess);
	void OnJamLoadRequestComplete(const struct FJamLoadResult& LoadResult);
	void OnJamResolverComplete(class UJamContentResolver* Sender, const class FString& LinkCode, bool bSuccess, bool bWasAlreadyLoaded);
	void OnRep_CurrentPlayParams(const struct FJamPlayParams& OldPlayParams);
	void OnScanForSongsCompleted(class UFMJamSongCatalog* Sender, const TArray<class UFMJamSong*>& AddedSongs);
	void OnTerminatingLinkCode(class UJamContentResolver* Sender, const class FString& LinkCode);
	void RemoveAllGameplayTags();
	bool RemoveGameplayTag(const struct FGameplayTag& Tag);

	const class UCatalogData* GetCurrentCatalogEntry() const;
	EMusicKey GetCurrentKey() const;
	const class UFMJamLoop* GetCurrentLoop() const;
	int32 GetCurrentLoopInstanceId() const;
	EFMJamLoopType GetCurrentLoopType() const;
	EMusicKeyMode GetCurrentMode() const;
	class APlayerState* GetCurrentPlayerState() const;
	const class UFMJamSong* GetCurrentSong() const;
	class FString GetCurrentSongLinkCode() const;
	class FName GetCurrentSongShortName() const;
	int32 GetCurrentTempo() const;
	bool GetIsAutoJammer() const;
	class UJamPlayspaceComponent_MusicManager* GetMusicManager() const;
	const struct FJamEvent_JamLoopStarted GetParamsAsJamEvent() const;
	const struct FJamPlayParams GetPlayParams() const;
	bool HasGameplayTag(const struct FGameplayTag& Tag) const;
	bool IsInUse() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"JamMusicSlot">();
	}
	static class UJamMusicSlot* GetDefaultObj()
	{
		return GetDefaultObjImpl<UJamMusicSlot>();
	}
};

// Class FMJamPlayspaceRuntime.JamPlayspaceComponent_MusicManager
// 0x00F8 (0x01D0 - 0x00D8)
class UJamPlayspaceComponent_MusicManager final : public UPlayspaceComponent
{
public:
	TMulticastInlineDelegate<void(struct FJamPlayParams& PlayParams, bool bChangedLoop)> OnLoopStarted;                                     // 0x00D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(struct FJamPlayParams& PlayParams, bool bChangedLoop)> OnLoopStopped;                                     // 0x00E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool SuppressEmoteMusicSetting)> OnEmoteMusicSettingChanged;                        // 0x00F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<class UJamMusicSlot*>                  MusicSlots;                                        // 0x0108(0x0010)(Net, ZeroConstructor, RepNotify, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	struct FGameplayEventListenerHandle           KeyChangedEventHandle;                             // 0x0118(0x001C)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayEventListenerHandle           ModeChangedEventHandle;                            // 0x0134(0x001C)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayEventListenerHandle           TempoChangedEventHandle;                           // 0x0150(0x001C)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_16C[0x2C];                                     // 0x016C(0x002C)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LocalPlayerGainParam;                              // 0x0198(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         StandardGainParam;                                 // 0x019C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1A0[0x30];                                     // 0x01A0(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static bool IsAllowedToJamInSplitscreen(class APlayerState* PlayerStateToCheck);

	void FireGlobalControlsAnalytics(const class APlayerState* PlayerState);
	void HandleKeyChangedEvent(const struct FSparksPlayspaceEvent_KeyChanged& Payload);
	void HandleModeChangedEvent(const struct FSparksPlayspaceEvent_KeyModeChanged& Payload);
	void HandleOnLoopStarted(const struct FJamPlayParams& PlayParams, bool bChangedLoop);
	void HandleOnLoopStopped(const struct FJamPlayParams& PlayParams, bool bChangedLoop);
	void HandleTempoChangedEvent(const struct FSparksPlayspaceEvent_TempoChanged& Payload);
	void OnLicensedAudioTreatmentChanged();
	void OnPlayspaceUserAdded(struct FPlayspaceUser* AddedUser);
	void OnPlayspaceUserRemoved(struct FPlayspaceUser* RemovedUser);
	void OnRep_MusicSlots(const TArray<class UJamMusicSlot*>& PreviousMusicSlots);
	void OnSuppressEmoteMusicInJamChanged();
	void UpdateAllMetasounds(const class APlayerState* PlayerToIgnore);

	int32 CountActiveSlots(const bool bCountAutoJammers) const;
	TArray<class APlayerState*> GetAllJammers() const;
	TArray<class UJamMusicSlot*> GetAllMusicSlots() const;
	TArray<class UJamMusicSlot*> GetAllSlotsWithTag(const struct FGameplayTag& Tag) const;
	TArray<class UJamMusicSlot*> GetAutoJammersForPlayer(const class APlayerState* PlayerState) const;
	EMusicKey GetCurrentKey() const;
	float GetCurrentMidiSeconds() const;
	int32 GetCurrentMidiTick() const;
	EMusicKeyMode GetCurrentMode() const;
	int32 GetCurrentTempo() const;
	float GetDesiredGain(const class APlayerState* PlayerState) const;
	class AJamPlayspace* GetJamPlayspace() const;
	class USparksInstrumentAnimations* GetLoadedAnimations() const;
	float GetLocalPlayerGainValue() const;
	class UAudioComponent* GetMetasoundPlayer() const;
	class UJamMusicSlot* GetMusicSlotByLoopInstanceId(const int32 LoopInstanceId) const;
	class UJamMusicSlot* GetMusicSlotBySlotIndex(const int32 SlotIndex) const;
	class UJamMusicSlot* GetMusicSlotForPlayer(const class APlayerState* PlayerState) const;
	int32 GetMusicSlotIndexForLoopInstanceId(const int32 LoopInstanceId) const;
	int32 GetMusicSlotIndexForPlayer(const class APlayerState* PlayerState) const;
	TArray<class UJamMusicSlot*> GetMusicSlotsForLoopType(const EFMJamLoopType LoopType) const;
	TArray<class UJamMusicSlot*> GetMusicSlotsInUse() const;
	float GetStandardGainValue() const;
	int32 SecondsToTick(const float Seconds) const;
	bool ShouldPlayLocalSound(const class APlayerState* PlayerToIgnore) const;
	float TickToSeconds(const int32 Tick) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"JamPlayspaceComponent_MusicManager">();
	}
	static class UJamPlayspaceComponent_MusicManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UJamPlayspaceComponent_MusicManager>();
	}
};

// Class FMJamPlayspaceRuntime.JamPlayspaceComponent_ReactiveFX
// 0x0120 (0x01F8 - 0x00D8)
class UJamPlayspaceComponent_ReactiveFX final : public UPlayspaceComponent
{
public:
	struct FJamReactiveFXState                    ReactiveFXState;                                   // 0x00D8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, Transient, EditConst, DuplicateTransient, NativeAccessSpecifierPublic)
	bool                                          bSetReactivityUpdateRateToTargetFPS;               // 0x0100(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_101[0x3];                                      // 0x0101(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReactivityUpdateRate;                              // 0x0104(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         PeakTamerValueReleaseTimeSec;                      // 0x0108(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, struct FJamLoopReactiveFX>        LoopReactiveFX;                                    // 0x0110(0x0050)(Edit, Transient, EditConst, DuplicateTransient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_160[0x98];                                     // 0x0160(0x0098)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddReactiveNiagaraEffect(int32 LoopInstanceId, class UNiagaraComponent* NiagaraComponent);
	void ClearReactiveEffects(bool bStopEffectsImmediately);
	void ClearReactiveEffectsForLoop(int32 LoopInstanceId, bool bStopEffectsImmediately);
	bool HasReactiveEffectsForLoop(int32 LoopInstanceId);
	bool RemoveReactiveNiagaraEffect(int32 LoopInstanceId, class UNiagaraComponent* NiagaraComponent);

	TArray<class UNiagaraComponent*> GetReactiveNiagaraEffects(int32 LoopInstanceId) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"JamPlayspaceComponent_ReactiveFX">();
	}
	static class UJamPlayspaceComponent_ReactiveFX* GetDefaultObj()
	{
		return GetDefaultObjImpl<UJamPlayspaceComponent_ReactiveFX>();
	}
};

// Class FMJamPlayspaceRuntime.JamPlayspaceVolume
// 0x0050 (0x0520 - 0x04D0)
class AJamPlayspaceVolume final : public AGameplayVolume
{
public:
	TArray<EFMJamLoopType>                        PriorityFillOrder;                                 // 0x04D0(0x0010)(Edit, EditFixedSize, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              AutoJammerProfilePic;                              // 0x04E0(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   JamCompanionSong;                                  // 0x0510(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldJamCompanionStaggerAutoJammers;             // 0x051C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51D[0x3];                                      // 0x051D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_OnPlayspaceSet();
	void BP_UpdateReactiveFX(float JamAmplitude);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"JamPlayspaceVolume">();
	}
	static class AJamPlayspaceVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<AJamPlayspaceVolume>();
	}
};

// Class FMJamPlayspaceRuntime.JamQuickplayPlayerSpawningComponent
// 0x0020 (0x0108 - 0x00E8)
class UJamQuickplayPlayerSpawningComponent final : public UPlayspaceComponent_PlayerSpawning
{
public:
	struct FGameplayTagContainer                  PregameSpawnTags;                                  // 0x00E8(0x0020)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"JamQuickplayPlayerSpawningComponent">();
	}
	static class UJamQuickplayPlayerSpawningComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UJamQuickplayPlayerSpawningComponent>();
	}
};

}

