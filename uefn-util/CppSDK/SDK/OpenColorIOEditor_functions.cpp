#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: OpenColorIOEditor

#include "Basic.hpp"

#include "OpenColorIOEditor_classes.hpp"
#include "OpenColorIOEditor_parameters.hpp"


namespace SDK
{

// Function OpenColorIOEditor.OpenColorIOEditorBlueprintLibrary.ApplyColorSpaceTransformToColor
// (Final, RequiredAPI, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FOpenColorIOColorConversionSettingsConversionSettings                                     (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLinearColor                     InColor                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     OutColor                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UOpenColorIOEditorBlueprintLibrary::ApplyColorSpaceTransformToColor(const struct FOpenColorIOColorConversionSettings& ConversionSettings, const struct FLinearColor& InColor, struct FLinearColor* OutColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OpenColorIOEditorBlueprintLibrary", "ApplyColorSpaceTransformToColor");

	Params::OpenColorIOEditorBlueprintLibrary_ApplyColorSpaceTransformToColor Parms{};

	Parms.ConversionSettings = std::move(ConversionSettings);
	Parms.InColor = std::move(InColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutColor != nullptr)
		*OutColor = std::move(Parms.OutColor);

	return Parms.ReturnValue;
}


// Function OpenColorIOEditor.OpenColorIOEditorBlueprintLibrary.ApplyColorSpaceTransformToTexture
// (Final, RequiredAPI, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FOpenColorIOColorConversionSettingsConversionSettings                                     (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UTexture*                         InOutTexture                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UOpenColorIOEditorBlueprintLibrary::ApplyColorSpaceTransformToTexture(const struct FOpenColorIOColorConversionSettings& ConversionSettings, class UTexture* InOutTexture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OpenColorIOEditorBlueprintLibrary", "ApplyColorSpaceTransformToTexture");

	Params::OpenColorIOEditorBlueprintLibrary_ApplyColorSpaceTransformToTexture Parms{};

	Parms.ConversionSettings = std::move(ConversionSettings);
	Parms.InOutTexture = InOutTexture;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OpenColorIOEditor.OpenColorIOEditorBlueprintLibrary.ApplyColorSpaceTransformToTextureCompressed
// (Final, RequiredAPI, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FOpenColorIOColorConversionSettingsConversionSettings                                     (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// ETextureCompressionSettings             TargetCompression                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture*                         InOutTexture                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UOpenColorIOEditorBlueprintLibrary::ApplyColorSpaceTransformToTextureCompressed(const struct FOpenColorIOColorConversionSettings& ConversionSettings, ETextureCompressionSettings TargetCompression, class UTexture* InOutTexture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OpenColorIOEditorBlueprintLibrary", "ApplyColorSpaceTransformToTextureCompressed");

	Params::OpenColorIOEditorBlueprintLibrary_ApplyColorSpaceTransformToTextureCompressed Parms{};

	Parms.ConversionSettings = std::move(ConversionSettings);
	Parms.TargetCompression = TargetCompression;
	Parms.InOutTexture = InOutTexture;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OpenColorIOEditor.OpenColorIOEditorBlueprintLibrary.SetActiveViewportConfiguration
// (Final, RequiredAPI, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FOpenColorIODisplayConfiguration InConfiguration                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UOpenColorIOEditorBlueprintLibrary::SetActiveViewportConfiguration(const struct FOpenColorIODisplayConfiguration& InConfiguration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OpenColorIOEditorBlueprintLibrary", "SetActiveViewportConfiguration");

	Params::OpenColorIOEditorBlueprintLibrary_SetActiveViewportConfiguration Parms{};

	Parms.InConfiguration = std::move(InConfiguration);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

