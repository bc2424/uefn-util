#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AnimationBlueprintLibrary

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "AnimationBlueprintLibrary_structs.hpp"
#include "BlueprintGraph_classes.hpp"


namespace SDK
{

// Class AnimationBlueprintLibrary.AnimationAttributeBlueprintLibrary
// 0x0000 (0x0030 - 0x0030)
class UAnimationAttributeBlueprintLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool GetAttributeKey(TScriptInterface<class IAnimationDataModel> AnimationDataModel, const struct FAnimationAttributeIdentifier& AttributeIdentifier, float Time, int32* Value);
	static bool GetAttributeKeys(TScriptInterface<class IAnimationDataModel> AnimationDataModel, const struct FAnimationAttributeIdentifier& AttributeIdentifier, TArray<float>* OutTimes, TArray<int32>* Values);
	static bool SetAttributeKey(TScriptInterface<class IAnimationDataController> AnimationDataController, const struct FAnimationAttributeIdentifier& AttributeIdentifier, float Time, const int32& Value);
	static bool SetAttributeKeys(TScriptInterface<class IAnimationDataController> AnimationDataController, const struct FAnimationAttributeIdentifier& AttributeIdentifier, const TArray<float>& Times, const TArray<int32>& Values);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimationAttributeBlueprintLibrary">();
	}
	static class UAnimationAttributeBlueprintLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimationAttributeBlueprintLibrary>();
	}
};

// Class AnimationBlueprintLibrary.AnimationBlueprintLibrary
// 0x0000 (0x0030 - 0x0030)
class UAnimationBlueprintLibrary final : public UBlueprintFunctionLibrary
{
public:
	static const class UAnimNotify* AddAnimationNotifyEvent(class UAnimSequenceBase* AnimationSequenceBase, class FName NotifyTrackName, float StartTime, TSubclassOf<class UAnimNotify> NotifyClass);
	static void AddAnimationNotifyEventObject(class UAnimSequenceBase* AnimationSequenceBase, float StartTime, const class UAnimNotify* Notify, class FName NotifyTrackName);
	static const class UAnimNotifyState* AddAnimationNotifyStateEvent(class UAnimSequenceBase* AnimationSequenceBase, class FName NotifyTrackName, float StartTime, float Duration, TSubclassOf<class UAnimNotifyState> NotifyStateClass);
	static void AddAnimationNotifyStateEventObject(class UAnimSequenceBase* AnimationSequenceBase, float StartTime, float Duration, const class UAnimNotifyState* NotifyState, class FName NotifyTrackName);
	static void AddAnimationNotifyTrack(class UAnimSequenceBase* AnimationSequenceBase, class FName NotifyTrackName, const struct FLinearColor& TrackColor);
	static void AddAnimationSyncMarker(class UAnimSequence* AnimationSequence, class FName MarkerName, float Time, class FName NotifyTrackName);
	static void AddCurve(class UAnimSequenceBase* AnimationSequenceBase, class FName CurveName, ERawCurveTrackTypes CurveType, bool bMetaDataCurve);
	static void AddFloatCurveKey(class UAnimSequenceBase* AnimationSequenceBase, class FName CurveName, const float Time, const float Value);
	static void AddFloatCurveKeys(class UAnimSequenceBase* AnimationSequenceBase, class FName CurveName, const TArray<float>& Times, const TArray<float>& Values);
	static void AddMetaData(class UAnimationAsset* AnimationAsset, TSubclassOf<class UAnimMetaData> MetaDataClass, class UAnimMetaData** MetaDataInstance);
	static void AddMetaDataObject(class UAnimationAsset* AnimationAsset, class UAnimMetaData* MetaDataObject);
	static void AddNodeAssetOverride(class UAnimBlueprint* AnimBlueprint, const class UAnimationAsset* Target, class UAnimationAsset* Override, bool bPrintAppliedOverrides);
	static void AddTransformationCurveKey(class UAnimSequenceBase* AnimationSequenceBase, class FName CurveName, const float Time, const struct FTransform& Transform);
	static void AddTransformationCurveKeys(class UAnimSequenceBase* AnimationSequenceBase, class FName CurveName, const TArray<float>& Times, const TArray<struct FTransform>& Transforms);
	static void AddVectorCurveKey(class UAnimSequenceBase* AnimationSequenceBase, class FName CurveName, const float Time, const struct FVector& Vector);
	static void AddVectorCurveKeys(class UAnimSequenceBase* AnimationSequenceBase, class FName CurveName, const TArray<float>& Times, const TArray<struct FVector>& Vectors);
	static void AddVirtualBone(const class UAnimSequence* AnimationSequence, class FName SourceBoneName, class FName TargetBoneName, class FName* VirtualBoneName);
	static bool ContainsMetaDataOfClass(const class UAnimationAsset* AnimationAsset, TSubclassOf<class UAnimMetaData> MetaDataClass);
	static void CopyAnimationCurveNamesToSkeleton(class USkeleton* OldSkeleton, class USkeleton* NewSkeleton, class UAnimSequenceBase* SequenceBase, ERawCurveTrackTypes CurveType);
	static void CopyAnimNotifiesFromSequence(class UAnimSequenceBase* SourceAnimationSequenceBase, class UAnimSequenceBase* DestinationAnimationSequenceBase, bool bDeleteExistingNotifies);
	static void DoesBoneNameExist(class UAnimSequence* AnimationSequence, class FName BoneName, bool* bExists);
	static bool DoesCurveExist(class UAnimSequenceBase* AnimationSequenceBase, class FName CurveName, ERawCurveTrackTypes CurveType);
	static bool EvaluateRootBoneTimecodeAttributesAtTime(const class UAnimSequenceBase* AnimationSequenceBase, const float EvalTime, struct FQualifiedFrameTime* OutQualifiedFrameTime);
	static bool EvaluateRootBoneTimecodeSubframeAttributeAtTime(const class UAnimSequenceBase* AnimationSequenceBase, const float EvalTime, float* OutSubframe);
	static struct FTransform ExtractRootTrackTransform(const class UAnimSequenceBase* AnimationSequenceBase, float Time);
	static void FinalizeBoneAnimation(class UAnimSequence* AnimationSequence);
	static void FindBonePathToRoot(const class UAnimSequenceBase* AnimationSequenceBase, class FName BoneName, TArray<class FName>* BonePath);
	static void GetAdditiveAnimationType(const class UAnimSequence* AnimationSequence, EAdditiveAnimationType* AdditiveAnimationType);
	static void GetAdditiveBasePoseType(const class UAnimSequence* AnimationSequence, EAdditiveBasePoseType* AdditiveBasePoseType);
	static void GetAnimationCurveNames(const class UAnimSequenceBase* AnimationSequenceBase, ERawCurveTrackTypes CurveType, TArray<class FName>* CurveNames);
	static void GetAnimationGraphs(class UAnimBlueprint* AnimationBlueprint, TArray<class UAnimationGraph*>* AnimationGraphs);
	static void GetAnimationInterpolationType(const class UAnimSequence* AnimationSequence, EAnimInterpolationType* InterpolationType);
	static void GetAnimationNotifyEventNames(const class UAnimSequenceBase* AnimationSequenceBase, TArray<class FName>* EventNames);
	static void GetAnimationNotifyEvents(const class UAnimSequenceBase* AnimationSequenceBase, TArray<struct FAnimNotifyEvent>* NotifyEvents);
	static void GetAnimationNotifyEventsForTrack(const class UAnimSequenceBase* AnimationSequenceBase, class FName NotifyTrackName, TArray<struct FAnimNotifyEvent>* Events);
	static void GetAnimationNotifyTrackNames(const class UAnimSequenceBase* AnimationSequenceBase, TArray<class FName>* TrackNames);
	static void GetAnimationSyncMarkers(const class UAnimSequence* AnimationSequence, TArray<struct FAnimSyncMarker>* Markers);
	static void GetAnimationSyncMarkersForTrack(const class UAnimSequence* AnimationSequence, class FName NotifyTrackName, TArray<struct FAnimSyncMarker>* Markers);
	static void GetAnimationTrackNames(const class UAnimSequenceBase* AnimationSequenceBase, TArray<class FName>* TrackNames);
	static float GetAnimNotifyEventDuration(const struct FAnimNotifyEvent& NotifyEvent);
	static float GetAnimNotifyEventTriggerTime(const struct FAnimNotifyEvent& NotifyEvent);
	static void GetBoneCompressionSettings(const class UAnimSequence* AnimationSequence, class UAnimBoneCompressionSettings** CompressionSettings);
	static void GetBonePoseForFrame(const class UAnimSequenceBase* AnimationSequenceBase, class FName BoneName, int32 Frame, bool bExtractRootMotion, struct FTransform* Pose);
	static void GetBonePoseForTime(const class UAnimSequenceBase* AnimationSequenceBase, class FName BoneName, float Time, bool bExtractRootMotion, struct FTransform* Pose);
	static void GetBonePosesForFrame(const class UAnimSequenceBase* AnimationSequenceBase, const TArray<class FName>& BoneNames, int32 Frame, bool bExtractRootMotion, TArray<struct FTransform>* Poses, const class USkeletalMesh* PreviewMesh);
	static void GetBonePosesForTime(const class UAnimSequenceBase* AnimationSequenceBase, const TArray<class FName>& BoneNames, float Time, bool bExtractRootMotion, TArray<struct FTransform>* Poses, const class USkeletalMesh* PreviewMesh);
	static void GetCurveCompressionSettings(const class UAnimSequence* AnimationSequence, class UAnimCurveCompressionSettings** CompressionSettings);
	static void GetFloatKeys(class UAnimSequenceBase* AnimationSequenceBase, class FName CurveName, TArray<float>* Times, TArray<float>* Values);
	static float GetFloatValueAtTime(class UAnimSequenceBase* AnimationSequenceBase, class FName CurveName, float Time);
	static void GetFrameAtTime(const class UAnimSequenceBase* AnimationSequenceBase, const float Time, int32* Frame);
	static void GetMetaData(const class UAnimationAsset* AnimationAsset, TArray<class UAnimMetaData*>* MetaData);
	static void GetMetaDataOfClass(const class UAnimationAsset* AnimationAsset, TSubclassOf<class UAnimMetaData> MetaDataClass, TArray<class UAnimMetaData*>* MetaDataOfClass);
	static void GetMontageSlotNames(const class UAnimMontage* AnimationMontage, TArray<class FName>* SlotNames);
	static void GetNodesOfClass(class UAnimBlueprint* AnimationBlueprint, TSubclassOf<class UAnimGraphNode_Base> NodeClass, TArray<class UAnimGraphNode_Base*>* GraphNodes, bool bIncludeChildClasses);
	static void GetNumFrames(const class UAnimSequenceBase* AnimationSequenceBase, int32* NumFrames);
	static void GetNumKeys(const class UAnimSequenceBase* AnimationSequenceBase, int32* NumKeys);
	static void GetRateScale(const class UAnimSequenceBase* AnimationSequenceBase, float* RateScale);
	static void GetRawTrackData(const class UAnimSequenceBase* AnimationSequenceBase, const class FName TrackName, TArray<struct FVector>* PositionKeys, TArray<struct FQuat>* RotationKeys, TArray<struct FVector>* ScalingKeys);
	static void GetRawTrackPositionData(const class UAnimSequenceBase* AnimationSequenceBase, const class FName TrackName, TArray<struct FVector>* PositionData);
	static void GetRawTrackRotationData(const class UAnimSequenceBase* AnimationSequenceBase, const class FName TrackName, TArray<struct FQuat>* RotationData);
	static void GetRawTrackScaleData(const class UAnimSequenceBase* AnimationSequenceBase, const class FName TrackName, TArray<struct FVector>* ScaleData);
	static void GetRootMotionLockType(const class UAnimSequence* AnimationSequence, ERootMotionRootLock* LockType);
	static void GetSequenceLength(const class UAnimSequenceBase* AnimationSequenceBase, float* Length);
	static void GetTimeAtFrame(const class UAnimSequenceBase* AnimationSequenceBase, const int32 Frame, float* Time);
	static void GetTransformationKeys(class UAnimSequenceBase* AnimationSequenceBase, class FName CurveName, TArray<float>* Times, TArray<struct FTransform>* Values);
	static void GetUniqueMarkerNames(const class UAnimSequence* AnimationSequence, TArray<class FName>* MarkerNames);
	static void GetVariableFrameStrippingSettings(const class UAnimSequence* AnimationSequence, class UVariableFrameStrippingSettings** VariableFrameStrippingSettings);
	static void GetVectorKeys(class UAnimSequenceBase* AnimationSequenceBase, class FName CurveName, TArray<float>* Times, TArray<struct FVector>* Values);
	static bool IsRootMotionEnabled(const class UAnimSequence* AnimationSequence);
	static bool IsRootMotionLockForced(const class UAnimSequence* AnimationSequence);
	static bool IsValidAnimationSyncMarkerName(const class UAnimSequence* AnimationSequence, class FName MarkerName);
	static bool IsValidAnimNotifyTrackName(const class UAnimSequenceBase* AnimationSequenceBase, class FName NotifyTrackName);
	static bool IsValidRawAnimationTrackName(const class UAnimSequenceBase* AnimationSequenceBase, const class FName TrackName);
	static void IsValidTime(const class UAnimSequenceBase* AnimationSequenceBase, const float Time, bool* IsValid);
	static void RemoveAllAnimationNotifyTracks(class UAnimSequenceBase* AnimationSequenceBase);
	static void RemoveAllAnimationSyncMarkers(class UAnimSequence* AnimationSequence);
	static void RemoveAllBoneAnimation(class UAnimSequence* AnimationSequence);
	static void RemoveAllCurveData(class UAnimSequenceBase* AnimationSequenceBase);
	static void RemoveAllMetaData(class UAnimationAsset* AnimationAsset);
	static void RemoveAllVirtualBones(const class UAnimSequence* AnimationSequence);
	static int32 RemoveAnimationNotifyEventsByName(class UAnimSequenceBase* AnimationSequenceBase, class FName NotifyName);
	static int32 RemoveAnimationNotifyEventsByTrack(class UAnimSequenceBase* AnimationSequenceBase, class FName NotifyTrackName);
	static void RemoveAnimationNotifyTrack(class UAnimSequenceBase* AnimationSequenceBase, class FName NotifyTrackName);
	static int32 RemoveAnimationSyncMarkersByName(class UAnimSequence* AnimationSequence, class FName MarkerName);
	static int32 RemoveAnimationSyncMarkersByTrack(class UAnimSequence* AnimationSequence, class FName NotifyTrackName);
	static void RemoveBoneAnimation(class UAnimSequence* AnimationSequence, class FName BoneName, bool bIncludeChildren, bool bFinalize);
	static void RemoveCurve(class UAnimSequenceBase* AnimationSequenceBase, class FName CurveName, bool bRemoveNameFromSkeleton);
	static void RemoveMetaData(class UAnimationAsset* AnimationAsset, class UAnimMetaData* MetaDataObject);
	static void RemoveMetaDataOfClass(class UAnimationAsset* AnimationAsset, TSubclassOf<class UAnimMetaData> MetaDataClass);
	static void RemoveVirtualBone(const class UAnimSequence* AnimationSequence, class FName VirtualBoneName);
	static void RemoveVirtualBones(const class UAnimSequence* AnimationSequence, const TArray<class FName>& VirtualBoneNames);
	static void ReplaceAnimNotifies(class UAnimSequenceBase* AnimationSequenceBase, TSubclassOf<class UAnimNotify> OldNotifyClass, TSubclassOf<class UAnimNotify> NewNotifyClass, TDelegate<void(class UAnimNotify* OldNotify, class UAnimNotify* NewNotify)> OnNotifyReplaced);
	static void ReplaceAnimNotifyStates(class UAnimSequenceBase* AnimationSequenceBase, TSubclassOf<class UAnimNotifyState> OldNotifyClass, TSubclassOf<class UAnimNotifyState> NewNotifyClass, TDelegate<void(class UAnimNotifyState* OldNotifyState, class UAnimNotifyState* NewNotifyState)> OnNotifyStateReplaced);
	static void SetAdditiveAnimationType(class UAnimSequence* AnimationSequence, const EAdditiveAnimationType AdditiveAnimationType);
	static void SetAdditiveBasePoseType(class UAnimSequence* AnimationSequence, const EAdditiveBasePoseType AdditiveBasePoseType);
	static void SetAnimationInterpolationType(class UAnimSequence* AnimationSequence, EAnimInterpolationType InterpolationType);
	static void SetBoneCompressionSettings(class UAnimSequence* AnimationSequence, class UAnimBoneCompressionSettings* CompressionSettings);
	static void SetCurveCompressionSettings(class UAnimSequence* AnimationSequence, class UAnimCurveCompressionSettings* CompressionSettings);
	static void SetIsRootMotionLockForced(class UAnimSequence* AnimationSequence, bool bForced);
	static void SetRateScale(class UAnimSequenceBase* AnimationSequenceBase, float RateScale);
	static void SetRootMotionEnabled(class UAnimSequence* AnimationSequence, bool bEnabled);
	static void SetRootMotionLockType(class UAnimSequence* AnimationSequence, ERootMotionRootLock RootMotionLockType);
	static void SetVariableFrameStrippingSettings(class UAnimSequence* AnimationSequence, class UVariableFrameStrippingSettings* VariableFrameStrippingSettings);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimationBlueprintLibrary">();
	}
	static class UAnimationBlueprintLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimationBlueprintLibrary>();
	}
};

// Class AnimationBlueprintLibrary.AnimPoseExtensions
// 0x0000 (0x0030 - 0x0030)
class UAnimPoseExtensions final : public UBlueprintFunctionLibrary
{
public:
	static void EvaluateAnimationBlueprintWithInputPose(const struct FAnimPose& InputPose, class USkeletalMesh* TargetSkeletalMesh, class UAnimBlueprint* AnimationBlueprint, struct FAnimPose* OutPose);
	static void GetAnimPoseAtFrame(const class UAnimSequenceBase* AnimationSequenceBase, int32 FrameIndex, const struct FAnimPoseEvaluationOptions& EvaluationOptions, struct FAnimPose* Pose);
	static void GetAnimPoseAtTime(const class UAnimSequenceBase* AnimationSequenceBase, double Time, const struct FAnimPoseEvaluationOptions& EvaluationOptions, struct FAnimPose* Pose);
	static void GetBoneNames(const struct FAnimPose& Pose, TArray<class FName>* Bones);
	static const struct FTransform GetBonePose(const struct FAnimPose& Pose, class FName BoneName, EAnimPoseSpaces Space);
	static void GetCurveNames(const struct FAnimPose& Pose, TArray<class FName>* Curves);
	static float GetCurveWeight(const struct FAnimPose& Pose, const class FName& CurveName);
	static const struct FTransform GetRefBonePose(const struct FAnimPose& Pose, class FName BoneName, EAnimPoseSpaces Space);
	static void GetReferencePose(class USkeleton* Skeleton, struct FAnimPose* OutPose);
	static struct FTransform GetRefPoseRelativeTransform(const struct FAnimPose& Pose, class FName FromBoneName, class FName ToBoneName, EAnimPoseSpaces Space);
	static struct FTransform GetRelativeToRefPoseTransform(const struct FAnimPose& Pose, class FName BoneName, EAnimPoseSpaces Space);
	static struct FTransform GetRelativeTransform(const struct FAnimPose& Pose, class FName FromBoneName, class FName ToBoneName, EAnimPoseSpaces Space);
	static void GetSocketNames(const struct FAnimPose& Pose, TArray<class FName>* Sockets);
	static struct FTransform GetSocketPose(const struct FAnimPose& Pose, class FName SocketName, EAnimPoseSpaces Space);
	static bool IsValid(const struct FAnimPose& Pose);
	static void SetBonePose(struct FAnimPose& Pose, const struct FTransform& Transform, class FName BoneName, EAnimPoseSpaces Space);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimPoseExtensions">();
	}
	static class UAnimPoseExtensions* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimPoseExtensions>();
	}
};

// Class AnimationBlueprintLibrary.K2Node_BaseAttributeActionNode
// 0x0020 (0x0168 - 0x0148)
class UK2Node_BaseAttributeActionNode : public UK2Node_CallFunction
{
public:
	uint8                                         Pad_148[0x20];                                     // 0x0148(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"K2Node_BaseAttributeActionNode">();
	}
	static class UK2Node_BaseAttributeActionNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UK2Node_BaseAttributeActionNode>();
	}
};

// Class AnimationBlueprintLibrary.K2Node_SetAttributeKeyGeneric
// 0x0000 (0x0168 - 0x0168)
class UK2Node_SetAttributeKeyGeneric final : public UK2Node_BaseAttributeActionNode
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"K2Node_SetAttributeKeyGeneric">();
	}
	static class UK2Node_SetAttributeKeyGeneric* GetDefaultObj()
	{
		return GetDefaultObjImpl<UK2Node_SetAttributeKeyGeneric>();
	}
};

// Class AnimationBlueprintLibrary.K2Node_SetAttributeKeysGeneric
// 0x0000 (0x0168 - 0x0168)
class UK2Node_SetAttributeKeysGeneric final : public UK2Node_BaseAttributeActionNode
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"K2Node_SetAttributeKeysGeneric">();
	}
	static class UK2Node_SetAttributeKeysGeneric* GetDefaultObj()
	{
		return GetDefaultObjImpl<UK2Node_SetAttributeKeysGeneric>();
	}
};

// Class AnimationBlueprintLibrary.K2Node_GetAttributeKeyGeneric
// 0x0000 (0x0168 - 0x0168)
class UK2Node_GetAttributeKeyGeneric final : public UK2Node_BaseAttributeActionNode
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"K2Node_GetAttributeKeyGeneric">();
	}
	static class UK2Node_GetAttributeKeyGeneric* GetDefaultObj()
	{
		return GetDefaultObjImpl<UK2Node_GetAttributeKeyGeneric>();
	}
};

// Class AnimationBlueprintLibrary.K2Node_GetAttributeKeysGeneric
// 0x0000 (0x0168 - 0x0168)
class UK2Node_GetAttributeKeysGeneric final : public UK2Node_BaseAttributeActionNode
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"K2Node_GetAttributeKeysGeneric">();
	}
	static class UK2Node_GetAttributeKeysGeneric* GetDefaultObj()
	{
		return GetDefaultObjImpl<UK2Node_GetAttributeKeysGeneric>();
	}
};

}

