#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: USDExporter

#include "Basic.hpp"

#include "USDExporter_structs.hpp"
#include "Engine_classes.hpp"
#include "USDClasses_structs.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class USDExporter.AnimSequenceExporterUSD
// 0x0000 (0x0080 - 0x0080)
class UAnimSequenceExporterUSD final : public UExporter
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimSequenceExporterUSD">();
	}
	static class UAnimSequenceExporterUSD* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimSequenceExporterUSD>();
	}
};

// Class USDExporter.AnimSequenceExporterUSDOptions
// 0x0098 (0x00C8 - 0x0030)
class UAnimSequenceExporterUSDOptions final : public UObject
{
public:
	struct FUsdStageOptions                       StageOptions;                                      // 0x0030(0x0008)(Edit, BlueprintVisible, Config, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bExportPreviewMesh;                                // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUsdMeshAssetOptions                   PreviewMeshOptions;                                // 0x0040(0x0060)(Edit, BlueprintVisible, Config, NativeAccessSpecifierPublic)
	struct FUsdMetadataExportOptions              MetadataOptions;                                   // 0x00A0(0x0020)(Edit, BlueprintVisible, Config, NativeAccessSpecifierPublic)
	bool                                          bReExportIdenticalAssets;                          // 0x00C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimSequenceExporterUSDOptions">();
	}
	static class UAnimSequenceExporterUSDOptions* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimSequenceExporterUSDOptions>();
	}
};

// Class USDExporter.GeometryCacheExporterUSD
// 0x0000 (0x0080 - 0x0080)
class UGeometryCacheExporterUSD final : public UExporter
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GeometryCacheExporterUSD">();
	}
	static class UGeometryCacheExporterUSD* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGeometryCacheExporterUSD>();
	}
};

// Class USDExporter.GeometryCacheExporterUSDOptions
// 0x0090 (0x00C0 - 0x0030)
class UGeometryCacheExporterUSDOptions final : public UObject
{
public:
	struct FUsdStageOptions                       StageOptions;                                      // 0x0030(0x0008)(Edit, BlueprintVisible, Config, NoDestructor, NativeAccessSpecifierPublic)
	struct FUsdMeshAssetOptions                   MeshAssetOptions;                                  // 0x0038(0x0060)(Edit, BlueprintVisible, Config, NativeAccessSpecifierPublic)
	struct FUsdMetadataExportOptions              MetadataOptions;                                   // 0x0098(0x0020)(Edit, BlueprintVisible, Config, NativeAccessSpecifierPublic)
	bool                                          bReExportIdenticalAssets;                          // 0x00B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GeometryCacheExporterUSDOptions">();
	}
	static class UGeometryCacheExporterUSDOptions* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGeometryCacheExporterUSDOptions>();
	}
};

// Class USDExporter.LevelExporterUSD
// 0x0000 (0x0080 - 0x0080)
class ULevelExporterUSD final : public UExporter
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LevelExporterUSD">();
	}
	static class ULevelExporterUSD* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULevelExporterUSD>();
	}
};

// Class USDExporter.LevelExporterUSDOptions
// 0x0120 (0x0150 - 0x0030)
class ULevelExporterUSDOptions final : public UObject
{
public:
	struct FUsdStageOptions                       StageOptions;                                      // 0x0030(0x0008)(Edit, BlueprintVisible, Config, NoDestructor, NativeAccessSpecifierPublic)
	float                                         StartTimeCode;                                     // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndTimeCode;                                       // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLevelExporterUSDOptionsInner          Inner;                                             // 0x0040(0x0100)(Edit, BlueprintVisible, Config, NativeAccessSpecifierPublic)
	bool                                          bReExportIdenticalLevelsAndSequences;              // 0x0140(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReExportIdenticalAssets;                          // 0x0141(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_142[0x2];                                      // 0x0142(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UAssetExportTask>        CurrentTask;                                       // 0x0144(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14C[0x4];                                      // 0x014C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static TArray<class FString> GetUsdExtensions();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LevelExporterUSDOptions">();
	}
	static class ULevelExporterUSDOptions* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULevelExporterUSDOptions>();
	}
};

// Class USDExporter.LevelSequenceExporterUsd
// 0x0000 (0x0080 - 0x0080)
class ULevelSequenceExporterUsd final : public UExporter
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LevelSequenceExporterUsd">();
	}
	static class ULevelSequenceExporterUsd* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULevelSequenceExporterUsd>();
	}
};

// Class USDExporter.LevelSequenceExporterUsdOptions
// 0x0128 (0x0158 - 0x0030)
class ULevelSequenceExporterUsdOptions final : public UObject
{
public:
	struct FUsdStageOptions                       StageOptions;                                      // 0x0030(0x0008)(Edit, BlueprintVisible, Config, NoDestructor, NativeAccessSpecifierPublic)
	float                                         TimeCodesPerSecond;                                // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideExportRange;                              // 0x003C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         StartFrame;                                        // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndFrame;                                          // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSelectionOnly;                                    // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExportSubsequencesAsLayers;                       // 0x0049(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExportLevel;                                      // 0x004A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseExportedLevelAsSublayer;                       // 0x004B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReExportIdenticalLevelsAndSequences;              // 0x004C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReExportIdenticalAssets;                          // 0x004D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4E[0x2];                                       // 0x004E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UWorld>                  Level;                                             // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLevelExporterUSDOptionsInner          LevelExportOptions;                                // 0x0058(0x0100)(Edit, BlueprintVisible, Config, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LevelSequenceExporterUsdOptions">();
	}
	static class ULevelSequenceExporterUsdOptions* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULevelSequenceExporterUsdOptions>();
	}
};

// Class USDExporter.MaterialExporterUsd
// 0x0000 (0x0080 - 0x0080)
class UMaterialExporterUsd final : public UExporter
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MaterialExporterUsd">();
	}
	static class UMaterialExporterUsd* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExporterUsd>();
	}
};

// Class USDExporter.MaterialExporterUSDOptions
// 0x0058 (0x0088 - 0x0030)
class UMaterialExporterUSDOptions final : public UObject
{
public:
	struct FUsdMaterialBakingOptions              MaterialBakingOptions;                             // 0x0030(0x0030)(Edit, BlueprintVisible, Config, NativeAccessSpecifierPublic)
	struct FUsdMetadataExportOptions              MetadataOptions;                                   // 0x0060(0x0020)(Edit, BlueprintVisible, Config, NativeAccessSpecifierPublic)
	bool                                          bReExportIdenticalAssets;                          // 0x0080(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MaterialExporterUSDOptions">();
	}
	static class UMaterialExporterUSDOptions* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExporterUSDOptions>();
	}
};

// Class USDExporter.SkeletalMeshExporterUsd
// 0x0000 (0x0080 - 0x0080)
class USkeletalMeshExporterUsd final : public UExporter
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SkeletalMeshExporterUsd">();
	}
	static class USkeletalMeshExporterUsd* GetDefaultObj()
	{
		return GetDefaultObjImpl<USkeletalMeshExporterUsd>();
	}
};

// Class USDExporter.SkeletalMeshExporterUSDOptions
// 0x0090 (0x00C0 - 0x0030)
class USkeletalMeshExporterUSDOptions final : public UObject
{
public:
	struct FUsdStageOptions                       StageOptions;                                      // 0x0030(0x0008)(Edit, BlueprintVisible, Config, NoDestructor, NativeAccessSpecifierPublic)
	struct FUsdMeshAssetOptions                   MeshAssetOptions;                                  // 0x0038(0x0060)(Edit, BlueprintVisible, Config, NativeAccessSpecifierPublic)
	struct FUsdMetadataExportOptions              MetadataOptions;                                   // 0x0098(0x0020)(Edit, BlueprintVisible, Config, NativeAccessSpecifierPublic)
	bool                                          bReExportIdenticalAssets;                          // 0x00B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SkeletalMeshExporterUSDOptions">();
	}
	static class USkeletalMeshExporterUSDOptions* GetDefaultObj()
	{
		return GetDefaultObjImpl<USkeletalMeshExporterUSDOptions>();
	}
};

// Class USDExporter.StaticMeshExporterUsd
// 0x0000 (0x0080 - 0x0080)
class UStaticMeshExporterUsd final : public UExporter
{
public:
	static bool IsUsdAvailable();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StaticMeshExporterUsd">();
	}
	static class UStaticMeshExporterUsd* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStaticMeshExporterUsd>();
	}
};

// Class USDExporter.StaticMeshExporterUSDOptions
// 0x0090 (0x00C0 - 0x0030)
class UStaticMeshExporterUSDOptions final : public UObject
{
public:
	struct FUsdStageOptions                       StageOptions;                                      // 0x0030(0x0008)(Edit, BlueprintVisible, Config, NoDestructor, NativeAccessSpecifierPublic)
	struct FUsdMeshAssetOptions                   MeshAssetOptions;                                  // 0x0038(0x0060)(Edit, BlueprintVisible, Config, NativeAccessSpecifierPublic)
	struct FUsdMetadataExportOptions              MetadataOptions;                                   // 0x0098(0x0020)(Edit, BlueprintVisible, Config, NativeAccessSpecifierPublic)
	bool                                          bReExportIdenticalAssets;                          // 0x00B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StaticMeshExporterUSDOptions">();
	}
	static class UStaticMeshExporterUSDOptions* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStaticMeshExporterUSDOptions>();
	}
};

// Class USDExporter.UsdConversionBlueprintContext
// 0x0010 (0x0040 - 0x0030)
class UUsdConversionBlueprintContext final : public UObject
{
public:
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Cleanup();
	bool ConvertAudioComponent(const class UAudioComponent* Component, const class FString& PrimPath, float TimeCode, bool bFilePathOnly);
	bool ConvertCineCameraComponent(const class UCineCameraComponent* Component, const class FString& PrimPath, float TimeCode);
	bool ConvertDirectionalLightComponent(const class UDirectionalLightComponent* Component, const class FString& PrimPath, float TimeCode);
	bool ConvertDrawModeComponent(const class UUsdDrawModeComponent* Component, const class FString& PrimPath, float TimeCode);
	bool ConvertHismComponent(const class UHierarchicalInstancedStaticMeshComponent* Component, const class FString& PrimPath, float TimeCode);
	bool ConvertInstancedFoliageActor(const class AInstancedFoliageActor* Actor, const class FString& PrimPath, class ULevel* InstancesLevel, float TimeCode);
	bool ConvertLandscapeProxyActorMaterial(class ALandscapeProxy* Actor, const class FString& PrimPath, const TArray<struct FPropertyEntry>& PropertiesToBake, const struct FIntPoint& DefaultTextureSize, const struct FDirectoryPath& TexturesDir, float TimeCode);
	bool ConvertLandscapeProxyActorMesh(const class ALandscapeProxy* Actor, const class FString& PrimPath, int32 LowestLOD, int32 HighestLOD, float TimeCode);
	bool ConvertLightComponent(const class ULightComponentBase* Component, const class FString& PrimPath, float TimeCode);
	bool ConvertMaterialOverrides(const class UObject* MeshAsset, const TArray<class UMaterialInterface*>& MaterialOverrides, const class FString& PrimPath, int32 LowestLOD, int32 HighestLOD);
	bool ConvertMeshComponent(const class UMeshComponent* Component, const class FString& PrimPath);
	bool ConvertPointLightComponent(const class UPointLightComponent* Component, const class FString& PrimPath, float TimeCode);
	bool ConvertRectLightComponent(const class URectLightComponent* Component, const class FString& PrimPath, float TimeCode);
	bool ConvertSceneComponent(const class USceneComponent* Component, const class FString& PrimPath);
	bool ConvertSkyLightComponent(const class USkyLightComponent* Component, const class FString& PrimPath, float TimeCode);
	bool ConvertSpotLightComponent(const class USpotLightComponent* Component, const class FString& PrimPath, float TimeCode);
	struct FFilePath GetEditTarget();
	struct FUsdUnrealAssetInfo GetPrimAssetInfo(const class FString& PrimPath);
	struct FUsdCombinedPrimMetadata GetPrimMetadata(const class FString& PrimPath, const TArray<class FString>& BlockedPrefixFilter, bool bInvertFilter, bool bCollectFromEntireSubtrees);
	struct FFilePath GetStageRootLayer();
	int32 GetUsdStageNumFrames();
	bool RemoveUnrealSurfaceOutput(const class FString& PrimPath, const struct FFilePath& LayerToAuthorIn);
	void ReplaceUnrealMaterialsWithBaked(const struct FFilePath& LayerToAuthorIn, const TMap<class FString, class FString>& BakedMaterials, bool bIsAssetLayer, bool bUsePayload, bool bRemoveUnrealMaterials);
	void SetEditTarget(const struct FFilePath& EditTargetLayerPath);
	void SetPrimAssetInfo(const class FString& PrimPath, const struct FUsdUnrealAssetInfo& Info);
	void SetPrimMetadata(const class FString& PrimPath, const struct FUsdCombinedPrimMetadata& Metadata, const TArray<class FString>& BlockedPrefixFilter, bool bInvertFilter);
	void SetPrimMetadataFromUserData(const class FString& PrimPath, const class UUsdAssetUserData* UserData, const TArray<class FString>& BlockedPrefixFilter, bool bInvertFilter);
	void SetStageRootLayer(const struct FFilePath& StageRootLayerPath);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UsdConversionBlueprintContext">();
	}
	static class UUsdConversionBlueprintContext* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUsdConversionBlueprintContext>();
	}
};

// Class USDExporter.UsdConversionBlueprintLibrary
// 0x0000 (0x0030 - 0x0030)
class UUsdConversionBlueprintLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void AddPayload(const class FString& ReferencingStagePath, const class FString& ReferencingPrimPath, const class FString& TargetStagePath);
	static void AddReference(const class FString& ReferencingStagePath, const class FString& ReferencingPrimPath, const class FString& TargetStagePath);
	static bool CanExportToLayer(const class FString& TargetFilePath);
	static bool CanPastePrims();
	static bool ClearMetadataField(class UUsdAssetUserData* AssetUserData, const class FString& Key, const class FString& StageIdentifier, const class FString& PrimPath, bool bTriggerPropertyChangeEvents);
	static void ClearPrimClipboard();
	static bool CopyPrims(const class FString& StageRootLayer, const TArray<class FString>& PrimPaths);
	static bool CutPrims(const class FString& StageRootLayer, const TArray<class FString>& PrimPaths);
	static TArray<class FString> DuplicatePrims(const class FString& StageRootLayer, const TArray<class FString>& PrimPaths, EUsdDuplicateType DuplicateType, const class FString& TargetLayer);
	static class FString GenerateObjectVersionString(const class UObject* ObjectToExport, class UObject* ExportOptions);
	static TSet<class AActor*> GetActorsToConvert(class UWorld* World);
	static TArray<struct FAnalyticsEventAttr> GetAnalyticsAttributes(const class ULevelExporterUSDOptions* Options);
	static class AInstancedFoliageActor* GetInstancedFoliageActorForLevel(bool bCreateIfNone, class ULevel* Level);
	static TArray<struct FTransform> GetInstanceTransforms(class AInstancedFoliageActor* Actor, class UFoliageType* FoliageType, class ULevel* InstancesLevel);
	static TArray<class FString> GetLoadedLevelNames(class UWorld* World);
	static struct FUsdMetadataValue GetMetadataField(class UUsdAssetUserData* AssetUserData, const class FString& Key, const class FString& StageIdentifier, const class FString& PrimPath);
	static int32 GetNumLevelsToExport(class UWorld* World, const TSet<class FString>& LevelsToIgnore);
	static class FString GetPrimPathForObject(const class UObject* ActorOrComponent, const class FString& ParentPrimPath, bool bUseActorFolders);
	static class FString GetSchemaNameForComponent(const class USceneComponent* Component);
	static class UObject* GetSource(class UFoliageType* FoliageType);
	static class UUsdAssetUserData* GetUsdAssetUserData(class UObject* Object);
	static TArray<class UFoliageType*> GetUsedFoliageTypes(class AInstancedFoliageActor* Actor);
	static TArray<class FString> GetVisibleInEditorLevelNames(class UWorld* World);
	static bool HasMetadataField(class UUsdAssetUserData* AssetUserData, const class FString& Key, const class FString& StageIdentifier, const class FString& PrimPath);
	static void InsertSubLayer(const class FString& ParentLayerPath, const class FString& SubLayerPath, int32 Index_0);
	static class FString MakePathRelativeToLayer(const class FString& AnchorLayerPath, const class FString& PathToMakeRelative);
	static TArray<class FString> PastePrims(const class FString& StageRootLayer, const class FString& ParentPrimPath);
	static void ReapplySequencerAnimations();
	static void RemoveAllPrimSpecs(const class FString& StageRootLayer, const class FString& PrimPath, const class FString& TargetLayer);
	static void RevertSequencerAnimations();
	static void SendAnalytics(const TArray<struct FAnalyticsEventAttr>& Attrs, const class FString& EventName, bool bAutomated, double ElapsedSeconds, double NumberOfFrames, const class FString& Extension);
	static bool SetMetadataField(class UUsdAssetUserData* AssetUserData, const class FString& Key, const class FString& Value, const class FString& ValueTypeName, const class FString& StageIdentifier, const class FString& PrimPath, bool bTriggerPropertyChangeEvents);
	static bool SetUsdAssetUserData(class UObject* Object, class UUsdAssetUserData* AssetUserData);
	static void StreamInRequiredLevels(class UWorld* World, const TSet<class FString>& LevelsToIgnore);
	static void StreamOutLevels(class UWorld* OwningWorld, const TArray<class FString>& LevelNamesToStreamOut, const TArray<class FString>& LevelNamesToHide);
	static class FString StringifyAsAssetPath(const class FString& Value);
	static class FString StringifyAsAssetPathArray(const TArray<class FString>& Value);
	static class FString StringifyAsBool(bool Value);
	static class FString StringifyAsBoolArray(const TArray<bool>& Value);
	static class FString StringifyAsDouble(double Value);
	static class FString StringifyAsDouble2(const struct FVector2D& Value);
	static class FString StringifyAsDouble2Array(const TArray<struct FVector2D>& Value);
	static class FString StringifyAsDouble3(const struct FVector& Value);
	static class FString StringifyAsDouble3Array(const TArray<struct FVector>& Value);
	static class FString StringifyAsDouble4(const struct FVector4& Value);
	static class FString StringifyAsDouble4Array(const TArray<struct FVector4>& Value);
	static class FString StringifyAsDoubleArray(const TArray<double>& Value);
	static class FString StringifyAsFloat(float Value);
	static class FString StringifyAsFloat2(const struct FVector2D& Value);
	static class FString StringifyAsFloat2Array(const TArray<struct FVector2D>& Value);
	static class FString StringifyAsFloat3(const struct FVector& Value);
	static class FString StringifyAsFloat3Array(const TArray<struct FVector>& Value);
	static class FString StringifyAsFloat4(const struct FVector4& Value);
	static class FString StringifyAsFloat4Array(const TArray<struct FVector4>& Value);
	static class FString StringifyAsFloatArray(const TArray<float>& Value);
	static class FString StringifyAsHalf(float Value);
	static class FString StringifyAsHalf2(const struct FVector2D& Value);
	static class FString StringifyAsHalf2Array(const TArray<struct FVector2D>& Value);
	static class FString StringifyAsHalf3(const struct FVector& Value);
	static class FString StringifyAsHalf3Array(const TArray<struct FVector>& Value);
	static class FString StringifyAsHalf4(const struct FVector4& Value);
	static class FString StringifyAsHalf4Array(const TArray<struct FVector4>& Value);
	static class FString StringifyAsHalfArray(const TArray<float>& Value);
	static class FString StringifyAsInt(int32 Value);
	static class FString StringifyAsInt2(const struct FIntPoint& Value);
	static class FString StringifyAsInt2Array(const TArray<struct FIntPoint>& Value);
	static class FString StringifyAsInt3(const struct FIntVector& Value);
	static class FString StringifyAsInt3Array(const TArray<struct FIntVector>& Value);
	static class FString StringifyAsInt4(const struct FIntVector4& Value);
	static class FString StringifyAsInt4Array(const TArray<struct FIntVector4>& Value);
	static class FString StringifyAsInt64(int64 Value);
	static class FString StringifyAsInt64Array(const TArray<int64>& Value);
	static class FString StringifyAsIntArray(const TArray<int32>& Value);
	static class FString StringifyAsListOpTokens(const TArray<class FString>& Value);
	static class FString StringifyAsMatrix2d(const struct FMatrix2D& Value);
	static class FString StringifyAsMatrix2dArray(const TArray<struct FMatrix2D>& Value);
	static class FString StringifyAsMatrix3d(const struct FMatrix3D& Value);
	static class FString StringifyAsMatrix3dArray(const TArray<struct FMatrix3D>& Value);
	static class FString StringifyAsMatrix4d(const struct FMatrix& Value);
	static class FString StringifyAsMatrix4dArray(const TArray<struct FMatrix>& Value);
	static class FString StringifyAsQuatd(const struct FQuat& Value);
	static class FString StringifyAsQuatdArray(const TArray<struct FQuat>& Value);
	static class FString StringifyAsQuatf(const struct FQuat& Value);
	static class FString StringifyAsQuatfArray(const TArray<struct FQuat>& Value);
	static class FString StringifyAsQuath(const struct FQuat& Value);
	static class FString StringifyAsQuathArray(const TArray<struct FQuat>& Value);
	static class FString StringifyAsString(const class FString& Value);
	static class FString StringifyAsStringArray(const TArray<class FString>& Value);
	static class FString StringifyAsTimeCode(double Value);
	static class FString StringifyAsTimeCodeArray(const TArray<double>& Value);
	static class FString StringifyAsToken(const class FString& Value);
	static class FString StringifyAsTokenArray(const TArray<class FString>& Value);
	static class FString StringifyAsUChar(uint8 Value);
	static class FString StringifyAsUCharArray(const TArray<uint8>& Value);
	static class FString StringifyAsUInt(int32 Value);
	static class FString StringifyAsUInt64(int64 Value);
	static class FString StringifyAsUInt64Array(const TArray<int64>& Value);
	static class FString StringifyAsUIntArray(const TArray<int32>& Value);
	static class FString UnstringifyAsAssetPath(const class FString& String);
	static TArray<class FString> UnstringifyAsAssetPathArray(const class FString& String);
	static bool UnstringifyAsBool(const class FString& String);
	static TArray<bool> UnstringifyAsBoolArray(const class FString& String);
	static double UnstringifyAsDouble(const class FString& String);
	static struct FVector2D UnstringifyAsDouble2(const class FString& String);
	static TArray<struct FVector2D> UnstringifyAsDouble2Array(const class FString& String);
	static struct FVector UnstringifyAsDouble3(const class FString& String);
	static TArray<struct FVector> UnstringifyAsDouble3Array(const class FString& String);
	static struct FVector4 UnstringifyAsDouble4(const class FString& String);
	static TArray<struct FVector4> UnstringifyAsDouble4Array(const class FString& String);
	static TArray<double> UnstringifyAsDoubleArray(const class FString& String);
	static float UnstringifyAsFloat(const class FString& String);
	static struct FVector2D UnstringifyAsFloat2(const class FString& String);
	static TArray<struct FVector2D> UnstringifyAsFloat2Array(const class FString& String);
	static struct FVector UnstringifyAsFloat3(const class FString& String);
	static TArray<struct FVector> UnstringifyAsFloat3Array(const class FString& String);
	static struct FVector4 UnstringifyAsFloat4(const class FString& String);
	static TArray<struct FVector4> UnstringifyAsFloat4Array(const class FString& String);
	static TArray<float> UnstringifyAsFloatArray(const class FString& String);
	static float UnstringifyAsHalf(const class FString& String);
	static struct FVector2D UnstringifyAsHalf2(const class FString& String);
	static TArray<struct FVector2D> UnstringifyAsHalf2Array(const class FString& String);
	static struct FVector UnstringifyAsHalf3(const class FString& String);
	static TArray<struct FVector> UnstringifyAsHalf3Array(const class FString& String);
	static struct FVector4 UnstringifyAsHalf4(const class FString& String);
	static TArray<struct FVector4> UnstringifyAsHalf4Array(const class FString& String);
	static TArray<float> UnstringifyAsHalfArray(const class FString& String);
	static int32 UnstringifyAsInt(const class FString& String);
	static struct FIntPoint UnstringifyAsInt2(const class FString& String);
	static TArray<struct FIntPoint> UnstringifyAsInt2Array(const class FString& String);
	static struct FIntVector UnstringifyAsInt3(const class FString& String);
	static TArray<struct FIntVector> UnstringifyAsInt3Array(const class FString& String);
	static struct FIntVector4 UnstringifyAsInt4(const class FString& String);
	static TArray<struct FIntVector4> UnstringifyAsInt4Array(const class FString& String);
	static int64 UnstringifyAsInt64(const class FString& String);
	static TArray<int64> UnstringifyAsInt64Array(const class FString& String);
	static TArray<int32> UnstringifyAsIntArray(const class FString& String);
	static TArray<class FString> UnstringifyAsListOpTokens(const class FString& String);
	static struct FMatrix2D UnstringifyAsMatrix2d(const class FString& String);
	static TArray<struct FMatrix2D> UnstringifyAsMatrix2dArray(const class FString& String);
	static struct FMatrix3D UnstringifyAsMatrix3d(const class FString& String);
	static TArray<struct FMatrix3D> UnstringifyAsMatrix3dArray(const class FString& String);
	static struct FMatrix UnstringifyAsMatrix4d(const class FString& String);
	static TArray<struct FMatrix> UnstringifyAsMatrix4dArray(const class FString& String);
	static struct FQuat UnstringifyAsQuatd(const class FString& String);
	static TArray<struct FQuat> UnstringifyAsQuatdArray(const class FString& String);
	static struct FQuat UnstringifyAsQuatf(const class FString& String);
	static TArray<struct FQuat> UnstringifyAsQuatfArray(const class FString& String);
	static struct FQuat UnstringifyAsQuath(const class FString& String);
	static TArray<struct FQuat> UnstringifyAsQuathArray(const class FString& String);
	static class FString UnstringifyAsString(const class FString& String);
	static TArray<class FString> UnstringifyAsStringArray(const class FString& String);
	static double UnstringifyAsTimeCode(const class FString& String);
	static TArray<double> UnstringifyAsTimeCodeArray(const class FString& String);
	static class FString UnstringifyAsToken(const class FString& String);
	static TArray<class FString> UnstringifyAsTokenArray(const class FString& String);
	static uint8 UnstringifyAsUChar(const class FString& String);
	static TArray<uint8> UnstringifyAsUCharArray(const class FString& String);
	static int32 UnstringifyAsUInt(const class FString& String);
	static int64 UnstringifyAsUInt64(const class FString& String);
	static TArray<int64> UnstringifyAsUInt64Array(const class FString& String);
	static TArray<int32> UnstringifyAsUIntArray(const class FString& String);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UsdConversionBlueprintLibrary">();
	}
	static class UUsdConversionBlueprintLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUsdConversionBlueprintLibrary>();
	}
};

}

