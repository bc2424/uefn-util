#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RockVehicle_Test

#include "Basic.hpp"

#include "RockVehicle_Test_classes.hpp"
#include "RockVehicle_Test_parameters.hpp"


namespace SDK
{

// Function RockVehicle_Test.FortCheatManager_RockVehicleTests.RockVehiclePhysicsReplayPlay
// (Final, Exec, Native, Public)
// Parameters:
// class FString                           FileName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortCheatManager_RockVehicleTests::RockVehiclePhysicsReplayPlay(const class FString& FileName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortCheatManager_RockVehicleTests", "RockVehiclePhysicsReplayPlay");

	Params::FortCheatManager_RockVehicleTests_RockVehiclePhysicsReplayPlay Parms{};

	Parms.FileName = std::move(FileName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RockVehicle_Test.FortCheatManager_RockVehicleTests.RockVehiclePhysicsTest
// (Final, Exec, Native, Public)
// Parameters:
// class FString                           TestName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortCheatManager_RockVehicleTests::RockVehiclePhysicsTest(const class FString& TestName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortCheatManager_RockVehicleTests", "RockVehiclePhysicsTest");

	Params::FortCheatManager_RockVehicleTests_RockVehiclePhysicsTest Parms{};

	Parms.TestName = std::move(TestName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RockVehicle_Test.RockVehicle_ReplicatedTestComponent.NotifyTestComplete
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// struct FRockVehicle_PhysicsErrorLog     ErrorLog                                               (Parm, NativeAccessSpecifierPublic)

void URockVehicle_ReplicatedTestComponent::NotifyTestComplete(const struct FRockVehicle_PhysicsErrorLog& ErrorLog)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RockVehicle_ReplicatedTestComponent", "NotifyTestComplete");

	Params::RockVehicle_ReplicatedTestComponent_NotifyTestComplete Parms{};

	Parms.ErrorLog = std::move(ErrorLog);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RockVehicle_Test.RockVehicle_ReplicatedTestComponent.RunTest
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// class FString                           InName                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InTrackIdx                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URockVehicle_ReplicatedTestComponent::RunTest(const class FString& InName, int32 InTrackIdx)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RockVehicle_ReplicatedTestComponent", "RunTest");

	Params::RockVehicle_ReplicatedTestComponent_RunTest Parms{};

	Parms.InName = std::move(InName);
	Parms.InTrackIdx = InTrackIdx;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

