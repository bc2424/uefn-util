#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BeatSyncedAnimRuntime

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "BeatSyncedAnimRuntime_structs.hpp"


namespace SDK
{

// Class BeatSyncedAnimRuntime.BeatSyncedAnimLibrary
// 0x0000 (0x0030 - 0x0030)
class UBeatSyncedAnimLibrary final : public UBlueprintFunctionLibrary
{
public:
	static struct FFMontageBeatSyncInfo CalculateMontageBeatSyncInfo(const class UMusicClockComponent* MusicClock, const float SongBeatOffset, const float AnimBeatOffset, const class UAnimMontage* Montage, float HalfDoubleFactor);
	static float CalculateMontagePlayRate(const class UMusicClockComponent* MusicClock, const class UAnimMontage* Montage, float HalfDoubleFactor);
	static class UFortItemDefinition* GetLastEmoteExecuted(const class AController* Controller);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BeatSyncedAnimLibrary">();
	}
	static class UBeatSyncedAnimLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBeatSyncedAnimLibrary>();
	}
};

// Class BeatSyncedAnimRuntime.FMBeatTimingUtils
// 0x0000 (0x0030 - 0x0030)
class UFMBeatTimingUtils final : public UBlueprintFunctionLibrary
{
public:
	static float GetBeatsPerMeasure();
	static float GetCurrentBeat(const class UMusicClockComponent* InMusicClock, bool bRounded);
	static float GetCurrentBeat_Unsafe(const class UMusicClockComponent* InMusicClock, bool bRounded);
	static struct FBeatAndTime GetCurrentBeatAndTime(const class UMusicClockComponent* MusicClock, const class UObject* WorldContext, bool bAlwaysAllowPreviewBPM, float PreviewBPM, bool bForceUnsafe);
	static float GetCurrentBeatForBPM(float InBPM, const class UObject* worldContextObject);
	static float GetCurrentSongTime(const class UMusicClockComponent* InMusicClock, bool bRounded);
	static float GetCurrentSongTime_Unsafe(const class UMusicClockComponent* InMusicClock, bool bRounded);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FMBeatTimingUtils">();
	}
	static class UFMBeatTimingUtils* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFMBeatTimingUtils>();
	}
};

// Class BeatSyncedAnimRuntime.MontageBeatSyncComponent
// 0x0080 (0x0158 - 0x00D8)
class UMontageBeatSyncComponent : public UActorComponent
{
public:
	uint8                                         Pad_D8[0x4];                                       // 0x00D8(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         UsingMaxPlayRateBeforeHalf;                        // 0x00DC(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         UsingMinPlayRateBeforeDoubling;                    // 0x00E0(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUpdateMusicClockOnTick;                           // 0x00E4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_E5[0x3];                                       // 0x00E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UMusicClockComponent>    WeakMusicClockPtr;                                 // 0x00E8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EUserEmoteBeatSyncingPermission               UserEmoteBeatSyncingPermission;                    // 0x00F0(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsMusicPlaying;                                   // 0x00F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bHaveTimingInfo;                                   // 0x00F2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_F3[0x1];                                       // 0x00F3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LastKnownMontageInstanceId;                        // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AFortPlayerPawn*                        OwnerPlayerPawn;                                   // 0x00F8(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USkeletalMeshComponent*                 OwnerMeshComponent;                                // 0x0100(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<TWeakObjectPtr<class UMontageBeatSyncComponent>> YoungerSiblings;                                   // 0x0108(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<TWeakObjectPtr<class UMontageBeatSyncComponent>> OlderSiblings;                                     // 0x0118(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	class UPreciseBeatSyncedAnimMetaData*         ActiveTimingInfo;                                  // 0x0128(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EUserEmoteBeatSyncingPermission               UsingUserEmoteBeatSyncingPermission;               // 0x0130(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_131[0x3];                                      // 0x0131(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LastFrameMontageInstanceId;                        // 0x0134(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         LastSongBeat;                                      // 0x0138(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         SongBeatOffset;                                    // 0x013C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AnimBeatOffset;                                    // 0x0140(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_144[0x14];                                     // 0x0144(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BeganPlayingMusic();
	void EndedPlayingMusic();
	class AFortPlayerPawn* GetOwnerFortPlayerPawn();
	class USkeletalMeshComponent* GetOwnerSkeletalMeshComponent();
	const class UPreciseBeatSyncedAnimMetaData* LookupMontageTimingInfo_BP(class UAnimMontage* Montage, const class AFortPlayerPawn* PlayerPawn);
	void ServerRPC_ReceiveNewAllowingBeatSyncingTheirEmotes(bool bNewState);
	void SetMusicClockReference(class UMusicClockComponent* MusicClock);

	bool IsMusicPlaying() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MontageBeatSyncComponent">();
	}
	static class UMontageBeatSyncComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMontageBeatSyncComponent>();
	}
};

// Class BeatSyncedAnimRuntime.SparksAnimLoggingComponent
// 0x0018 (0x00F0 - 0x00D8)
class USparksAnimLoggingComponent final : public UActorComponent
{
public:
	uint8                                         Pad_D8[0x18];                                      // 0x00D8(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class FString GetCurrentFullBodyAnimName() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SparksAnimLoggingComponent">();
	}
	static class USparksAnimLoggingComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USparksAnimLoggingComponent>();
	}
};

// Class BeatSyncedAnimRuntime.AnimNotify_BeatMarker
// 0x0000 (0x0040 - 0x0040)
class UAnimNotify_BeatMarker final : public UAnimNotify
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotify_BeatMarker">();
	}
	static class UAnimNotify_BeatMarker* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotify_BeatMarker>();
	}
};

}

