#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AtomModelImporterEditor

#include "Basic.hpp"

#include "AtomModelImporterEditor_classes.hpp"
#include "AtomModelImporterEditor_parameters.hpp"


namespace SDK
{

// Function AtomModelImporterEditor.AtomDestructionBlueprintLibrary.SetGeometryCollectionSourceFromAtomModel
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UGeometryCollection*              GeometryCollection                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAtomModel*                       AtomModel                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAtomModelProcessor*              CustomPrimitiveProcessor                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FAtomOnProcessPrimitiveSettings  PrimitiveSettings                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UAtomMaterialFactory*             MaterialFactory                                        (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAtomDestructionBlueprintLibrary::SetGeometryCollectionSourceFromAtomModel(class UGeometryCollection* GeometryCollection, class UAtomModel* AtomModel, class UAtomModelProcessor* CustomPrimitiveProcessor, const struct FAtomOnProcessPrimitiveSettings& PrimitiveSettings, const class UAtomMaterialFactory* MaterialFactory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AtomDestructionBlueprintLibrary", "SetGeometryCollectionSourceFromAtomModel");

	Params::AtomDestructionBlueprintLibrary_SetGeometryCollectionSourceFromAtomModel Parms{};

	Parms.GeometryCollection = GeometryCollection;
	Parms.AtomModel = AtomModel;
	Parms.CustomPrimitiveProcessor = CustomPrimitiveProcessor;
	Parms.PrimitiveSettings = std::move(PrimitiveSettings);
	Parms.MaterialFactory = MaterialFactory;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AtomModelImporterEditor.AtomEditPivotToolProperties.Back
// (Final, Native, Public)

void UAtomEditPivotToolProperties::Back()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtomEditPivotToolProperties", "Back");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function AtomModelImporterEditor.AtomEditPivotToolProperties.Bottom
// (Final, Native, Public)

void UAtomEditPivotToolProperties::Bottom()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtomEditPivotToolProperties", "Bottom");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function AtomModelImporterEditor.AtomEditPivotToolProperties.Center
// (Final, Native, Public)

void UAtomEditPivotToolProperties::Center()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtomEditPivotToolProperties", "Center");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function AtomModelImporterEditor.AtomEditPivotToolProperties.Front
// (Final, Native, Public)

void UAtomEditPivotToolProperties::Front()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtomEditPivotToolProperties", "Front");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function AtomModelImporterEditor.AtomEditPivotToolProperties.Left
// (Final, Native, Public)

void UAtomEditPivotToolProperties::Left()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtomEditPivotToolProperties", "Left");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function AtomModelImporterEditor.AtomEditPivotToolProperties.Right
// (Final, Native, Public)

void UAtomEditPivotToolProperties::Right()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtomEditPivotToolProperties", "Right");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function AtomModelImporterEditor.AtomEditPivotToolProperties.Top
// (Final, Native, Public)

void UAtomEditPivotToolProperties::Top()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtomEditPivotToolProperties", "Top");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function AtomModelImporterEditor.AtomEditPivotToolProperties.WorldOrigin
// (Final, Native, Public)

void UAtomEditPivotToolProperties::WorldOrigin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtomEditPivotToolProperties", "WorldOrigin");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function AtomModelImporterEditor.AtomModelSelectionToolProperties.Clear
// (Final, Native, Public)

void UAtomModelSelectionToolProperties::Clear()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtomModelSelectionToolProperties", "Clear");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function AtomModelImporterEditor.AtomModelSelectionToolProperties.Copy
// (Final, Native, Public)

void UAtomModelSelectionToolProperties::Copy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtomModelSelectionToolProperties", "Copy");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function AtomModelImporterEditor.AtomModelSelectionToolProperties.Delete
// (Final, Native, Public)

void UAtomModelSelectionToolProperties::Delete()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtomModelSelectionToolProperties", "Delete");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function AtomModelImporterEditor.AtomModelSelectionToolProperties.Invert
// (Final, Native, Public)

void UAtomModelSelectionToolProperties::Invert()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtomModelSelectionToolProperties", "Invert");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function AtomModelImporterEditor.AtomPaintToolProperties.ApplyColorToSelection
// (Final, Native, Public)

void UAtomPaintToolProperties::ApplyColorToSelection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtomPaintToolProperties", "ApplyColorToSelection");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function AtomModelImporterEditor.AtomPartsCollectionEditorBlueprintLibrary.CreatePartInstanceFromPrimitive
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UAtomPrimitive*                   Primitive                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FTransform>               Transforms                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FAtomModelPartInstanceInfo       ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FAtomModelPartInstanceInfo UAtomPartsCollectionEditorBlueprintLibrary::CreatePartInstanceFromPrimitive(class UAtomPrimitive* Primitive, const TArray<struct FTransform>& Transforms)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AtomPartsCollectionEditorBlueprintLibrary", "CreatePartInstanceFromPrimitive");

	Params::AtomPartsCollectionEditorBlueprintLibrary_CreatePartInstanceFromPrimitive Parms{};

	Parms.Primitive = Primitive;
	Parms.Transforms = std::move(Transforms);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AtomModelImporterEditor.AtomPartsCollectionEditorBlueprintLibrary.CreatePartInstanceFromPrimitiveId
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   PrimitiveId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FTransform>               Transforms                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FAtomModelPartInstanceInfo       ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FAtomModelPartInstanceInfo UAtomPartsCollectionEditorBlueprintLibrary::CreatePartInstanceFromPrimitiveId(int32 PrimitiveId, const TArray<struct FTransform>& Transforms)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AtomPartsCollectionEditorBlueprintLibrary", "CreatePartInstanceFromPrimitiveId");

	Params::AtomPartsCollectionEditorBlueprintLibrary_CreatePartInstanceFromPrimitiveId Parms{};

	Parms.PrimitiveId = PrimitiveId;
	Parms.Transforms = std::move(Transforms);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AtomModelImporterEditor.AtomPartSelectionToolProperties.Clear
// (Final, Native, Public)

void UAtomPartSelectionToolProperties::Clear()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtomPartSelectionToolProperties", "Clear");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function AtomModelImporterEditor.AtomPartSelectionToolProperties.Invert
// (Final, Native, Public)

void UAtomPartSelectionToolProperties::Invert()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtomPartSelectionToolProperties", "Invert");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function AtomModelImporterEditor.AtomPartSelectionToolProperties.SelectSimilarColor
// (Final, Native, Public)

void UAtomPartSelectionToolProperties::SelectSimilarColor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtomPartSelectionToolProperties", "SelectSimilarColor");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function AtomModelImporterEditor.AtomPartSelectionToolProperties.SelectSimilarParts
// (Final, Native, Public)

void UAtomPartSelectionToolProperties::SelectSimilarParts()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtomPartSelectionToolProperties", "SelectSimilarParts");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function AtomModelImporterEditor.AtomPrimitiveEditorBlueprintLibrary.AddSkeletonToGeometry
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAtomPrimitiveGeometry*           Geometry                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USkeleton*                        Skeleton                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAtomPrimitiveGeometry*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAtomPrimitiveGeometry* UAtomPrimitiveEditorBlueprintLibrary::AddSkeletonToGeometry(class UAtomPrimitiveGeometry* Geometry, class USkeleton* Skeleton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AtomPrimitiveEditorBlueprintLibrary", "AddSkeletonToGeometry");

	Params::AtomPrimitiveEditorBlueprintLibrary_AddSkeletonToGeometry Parms{};

	Parms.Geometry = Geometry;
	Parms.Skeleton = Skeleton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AtomModelImporterEditor.AtomPrimitiveEditorBlueprintLibrary.AppendAtomPrimitiveGeometryLODs
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FAtomPrimitiveGeometryLODs       BaseLODs                                               (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FAtomPrimitiveGeometryLODs       AppendLODs                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FTransform                       Transform                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FAtomPrimitiveGeometryLODs       ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FAtomPrimitiveGeometryLODs UAtomPrimitiveEditorBlueprintLibrary::AppendAtomPrimitiveGeometryLODs(struct FAtomPrimitiveGeometryLODs& BaseLODs, const struct FAtomPrimitiveGeometryLODs& AppendLODs, const struct FTransform& Transform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AtomPrimitiveEditorBlueprintLibrary", "AppendAtomPrimitiveGeometryLODs");

	Params::AtomPrimitiveEditorBlueprintLibrary_AppendAtomPrimitiveGeometryLODs Parms{};

	Parms.BaseLODs = std::move(BaseLODs);
	Parms.AppendLODs = std::move(AppendLODs);
	Parms.Transform = std::move(Transform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	BaseLODs = std::move(Parms.BaseLODs);

	return Parms.ReturnValue;
}


// Function AtomModelImporterEditor.AtomPrimitiveEditorBlueprintLibrary.BevelGeometry
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAtomPrimitiveGeometry*           GeometryToBevel                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BevelWidth                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AngleThresholdInDegrees                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIgnoreUVSeams                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bOnlyBevelBlockLikeGeometry                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAtomPrimitiveGeometry*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAtomPrimitiveGeometry* UAtomPrimitiveEditorBlueprintLibrary::BevelGeometry(class UAtomPrimitiveGeometry* GeometryToBevel, float BevelWidth, float AngleThresholdInDegrees, bool bIgnoreUVSeams, bool bOnlyBevelBlockLikeGeometry)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AtomPrimitiveEditorBlueprintLibrary", "BevelGeometry");

	Params::AtomPrimitiveEditorBlueprintLibrary_BevelGeometry Parms{};

	Parms.GeometryToBevel = GeometryToBevel;
	Parms.BevelWidth = BevelWidth;
	Parms.AngleThresholdInDegrees = AngleThresholdInDegrees;
	Parms.bIgnoreUVSeams = bIgnoreUVSeams;
	Parms.bOnlyBevelBlockLikeGeometry = bOnlyBevelBlockLikeGeometry;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AtomModelImporterEditor.AtomPrimitiveEditorBlueprintLibrary.Conv_AtomPrimitiveCollisionGeometryToGeometryScriptSimpleCollision
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FAtomPrimitiveCollisionGeometry  AtomCollision                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FGeometryScriptSimpleCollision   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGeometryScriptSimpleCollision UAtomPrimitiveEditorBlueprintLibrary::Conv_AtomPrimitiveCollisionGeometryToGeometryScriptSimpleCollision(const struct FAtomPrimitiveCollisionGeometry& AtomCollision)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AtomPrimitiveEditorBlueprintLibrary", "Conv_AtomPrimitiveCollisionGeometryToGeometryScriptSimpleCollision");

	Params::AtomPrimitiveEditorBlueprintLibrary_Conv_AtomPrimitiveCollisionGeometryToGeometryScriptSimpleCollision Parms{};

	Parms.AtomCollision = std::move(AtomCollision);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AtomModelImporterEditor.AtomPrimitiveEditorBlueprintLibrary.Conv_GeometryScriptSimpleCollisionToAtomPrimitiveCollisionGeometry
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGeometryScriptSimpleCollision   GeometryScriptSimpleCollision                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FAtomPrimitiveCollisionGeometry  ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FAtomPrimitiveCollisionGeometry UAtomPrimitiveEditorBlueprintLibrary::Conv_GeometryScriptSimpleCollisionToAtomPrimitiveCollisionGeometry(const struct FGeometryScriptSimpleCollision& GeometryScriptSimpleCollision)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AtomPrimitiveEditorBlueprintLibrary", "Conv_GeometryScriptSimpleCollisionToAtomPrimitiveCollisionGeometry");

	Params::AtomPrimitiveEditorBlueprintLibrary_Conv_GeometryScriptSimpleCollisionToAtomPrimitiveCollisionGeometry Parms{};

	Parms.GeometryScriptSimpleCollision = std::move(GeometryScriptSimpleCollision);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AtomModelImporterEditor.AtomPrimitiveEditorBlueprintLibrary.ConvertAtomPrimitiveGeometryToDynamicMesh
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAtomPrimitiveGeometry*           AtomPrimitiveGeometry                                  (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDynamicMesh*                     DynamicMesh                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDynamicMesh*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDynamicMesh* UAtomPrimitiveEditorBlueprintLibrary::ConvertAtomPrimitiveGeometryToDynamicMesh(const class UAtomPrimitiveGeometry* AtomPrimitiveGeometry, class UDynamicMesh* DynamicMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AtomPrimitiveEditorBlueprintLibrary", "ConvertAtomPrimitiveGeometryToDynamicMesh");

	Params::AtomPrimitiveEditorBlueprintLibrary_ConvertAtomPrimitiveGeometryToDynamicMesh Parms{};

	Parms.AtomPrimitiveGeometry = AtomPrimitiveGeometry;
	Parms.DynamicMesh = DynamicMesh;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AtomModelImporterEditor.AtomPrimitiveEditorBlueprintLibrary.ConvertDynamicMeshToAtomPrimitiveGeometry
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UDynamicMesh*                     DynamicMesh                                            (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAtomPrimitiveGeometry*           AtomPrimitiveGeometry                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAtomPrimitiveGeometry*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAtomPrimitiveGeometry* UAtomPrimitiveEditorBlueprintLibrary::ConvertDynamicMeshToAtomPrimitiveGeometry(const class UDynamicMesh* DynamicMesh, class UAtomPrimitiveGeometry* AtomPrimitiveGeometry)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AtomPrimitiveEditorBlueprintLibrary", "ConvertDynamicMeshToAtomPrimitiveGeometry");

	Params::AtomPrimitiveEditorBlueprintLibrary_ConvertDynamicMeshToAtomPrimitiveGeometry Parms{};

	Parms.DynamicMesh = DynamicMesh;
	Parms.AtomPrimitiveGeometry = AtomPrimitiveGeometry;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AtomModelImporterEditor.AtomPrimitiveEditorBlueprintLibrary.CreateSkeletalMeshFromGeometry
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class UAtomPrimitiveGeometry*>   GeometryLODs                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<class UMaterialInterface*>       MaterialArray                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class USkeleton*                        TemplateSkeleton                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Subpath                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           SkeletonName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           MeshName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USkeletalMesh*                    OutSkeletalMesh                                        (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USkeleton*                        OutSkeleton                                            (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAtomPrimitiveEditorBlueprintLibrary::CreateSkeletalMeshFromGeometry(const TArray<class UAtomPrimitiveGeometry*>& GeometryLODs, const TArray<class UMaterialInterface*>& MaterialArray, class USkeleton* TemplateSkeleton, const class FString& Subpath, const class FString& SkeletonName, const class FString& MeshName, class USkeletalMesh** OutSkeletalMesh, class USkeleton** OutSkeleton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AtomPrimitiveEditorBlueprintLibrary", "CreateSkeletalMeshFromGeometry");

	Params::AtomPrimitiveEditorBlueprintLibrary_CreateSkeletalMeshFromGeometry Parms{};

	Parms.GeometryLODs = std::move(GeometryLODs);
	Parms.MaterialArray = std::move(MaterialArray);
	Parms.TemplateSkeleton = TemplateSkeleton;
	Parms.Subpath = std::move(Subpath);
	Parms.SkeletonName = std::move(SkeletonName);
	Parms.MeshName = std::move(MeshName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutSkeletalMesh != nullptr)
		*OutSkeletalMesh = Parms.OutSkeletalMesh;

	if (OutSkeleton != nullptr)
		*OutSkeleton = Parms.OutSkeleton;
}


// Function AtomModelImporterEditor.AtomPrimitiveEditorBlueprintLibrary.CreateStaticMeshFromGeometry
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FAtomPrimitiveGeometryLODs       GeometryLODs                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UAtomPrimitiveGeometry*           NaniteHiResLOD                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UMaterialInterface*>       MaterialArray                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           Subpath                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           StaticMeshName                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bPreserveExistingCollision                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bPreserveExistingSockets                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bGenerateMeshDistanceFields                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECollisionTraceFlag                     TraceFlag                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSupportRaytracing                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UStaticMesh*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UStaticMesh* UAtomPrimitiveEditorBlueprintLibrary::CreateStaticMeshFromGeometry(const struct FAtomPrimitiveGeometryLODs& GeometryLODs, class UAtomPrimitiveGeometry* NaniteHiResLOD, const TArray<class UMaterialInterface*>& MaterialArray, const class FString& Subpath, const class FString& StaticMeshName, bool bPreserveExistingCollision, bool bPreserveExistingSockets, bool bGenerateMeshDistanceFields, ECollisionTraceFlag TraceFlag, bool bSupportRaytracing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AtomPrimitiveEditorBlueprintLibrary", "CreateStaticMeshFromGeometry");

	Params::AtomPrimitiveEditorBlueprintLibrary_CreateStaticMeshFromGeometry Parms{};

	Parms.GeometryLODs = std::move(GeometryLODs);
	Parms.NaniteHiResLOD = NaniteHiResLOD;
	Parms.MaterialArray = std::move(MaterialArray);
	Parms.Subpath = std::move(Subpath);
	Parms.StaticMeshName = std::move(StaticMeshName);
	Parms.bPreserveExistingCollision = bPreserveExistingCollision;
	Parms.bPreserveExistingSockets = bPreserveExistingSockets;
	Parms.bGenerateMeshDistanceFields = bGenerateMeshDistanceFields;
	Parms.TraceFlag = TraceFlag;
	Parms.bSupportRaytracing = bSupportRaytracing;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AtomModelImporterEditor.AtomPrimitiveEditorBlueprintLibrary.DuplicateAtomPrimitiveGeometryLODs
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FAtomPrimitiveGeometryLODs       GeometryLODs                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FAtomPrimitiveGeometryLODs       ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FAtomPrimitiveGeometryLODs UAtomPrimitiveEditorBlueprintLibrary::DuplicateAtomPrimitiveGeometryLODs(const struct FAtomPrimitiveGeometryLODs& GeometryLODs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AtomPrimitiveEditorBlueprintLibrary", "DuplicateAtomPrimitiveGeometryLODs");

	Params::AtomPrimitiveEditorBlueprintLibrary_DuplicateAtomPrimitiveGeometryLODs Parms{};

	Parms.GeometryLODs = std::move(GeometryLODs);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AtomModelImporterEditor.AtomPrimitiveEditorBlueprintLibrary.GenerateCollisionGeometry
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAtomPrimitiveGeometry*           Geometry                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EPrimitiveAutoCollisionType             CollisionType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FAtomPrimitiveCollisionGeometry  ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FAtomPrimitiveCollisionGeometry UAtomPrimitiveEditorBlueprintLibrary::GenerateCollisionGeometry(class UAtomPrimitiveGeometry* Geometry, EPrimitiveAutoCollisionType CollisionType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AtomPrimitiveEditorBlueprintLibrary", "GenerateCollisionGeometry");

	Params::AtomPrimitiveEditorBlueprintLibrary_GenerateCollisionGeometry Parms{};

	Parms.Geometry = Geometry;
	Parms.CollisionType = CollisionType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AtomModelImporterEditor.AtomPrimitiveEditorBlueprintLibrary.GetAtomModelsReferencingPrimitive
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAtomPrimitive*                   AtomPrimitive                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UAtomModel*>               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UAtomModel*> UAtomPrimitiveEditorBlueprintLibrary::GetAtomModelsReferencingPrimitive(class UAtomPrimitive* AtomPrimitive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AtomPrimitiveEditorBlueprintLibrary", "GetAtomModelsReferencingPrimitive");

	Params::AtomPrimitiveEditorBlueprintLibrary_GetAtomModelsReferencingPrimitive Parms{};

	Parms.AtomPrimitive = AtomPrimitive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AtomModelImporterEditor.AtomPrimitiveEditorBlueprintLibrary.GetAtomModelsReferencingPrimitives
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class UAtomPrimitive*>           AtomPrimitives                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<class UAtomModel*>               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UAtomModel*> UAtomPrimitiveEditorBlueprintLibrary::GetAtomModelsReferencingPrimitives(const TArray<class UAtomPrimitive*>& AtomPrimitives)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AtomPrimitiveEditorBlueprintLibrary", "GetAtomModelsReferencingPrimitives");

	Params::AtomPrimitiveEditorBlueprintLibrary_GetAtomModelsReferencingPrimitives Parms{};

	Parms.AtomPrimitives = std::move(AtomPrimitives);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AtomModelImporterEditor.AtomPrimitiveEditorBlueprintLibrary.GetAtomPrimitiveById
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   PrimitiveId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAtomPrimitive*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAtomPrimitive* UAtomPrimitiveEditorBlueprintLibrary::GetAtomPrimitiveById(int32 PrimitiveId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AtomPrimitiveEditorBlueprintLibrary", "GetAtomPrimitiveById");

	Params::AtomPrimitiveEditorBlueprintLibrary_GetAtomPrimitiveById Parms{};

	Parms.PrimitiveId = PrimitiveId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AtomModelImporterEditor.AtomPrimitiveEditorBlueprintLibrary.GetCommonPartStaticMesh
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ExportStyleName                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAtomCommonPartType                     CommonPartType                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           CommonPartMeshPath                                     (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UStaticMesh*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UStaticMesh* UAtomPrimitiveEditorBlueprintLibrary::GetCommonPartStaticMesh(const class FString& ExportStyleName, EAtomCommonPartType CommonPartType, const class FString& CommonPartMeshPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AtomPrimitiveEditorBlueprintLibrary", "GetCommonPartStaticMesh");

	Params::AtomPrimitiveEditorBlueprintLibrary_GetCommonPartStaticMesh Parms{};

	Parms.ExportStyleName = std::move(ExportStyleName);
	Parms.CommonPartType = CommonPartType;
	Parms.CommonPartMeshPath = std::move(CommonPartMeshPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AtomModelImporterEditor.AtomPrimitiveEditorBlueprintLibrary.GetCustomPrimitiveProcessorTargetAsset
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UAtomModelProcessor*              Processor                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAtomPrimitive*                   Primitive                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FAtomOnProcessPrimitiveSettings  PrimitiveSettings                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UObject* UAtomPrimitiveEditorBlueprintLibrary::GetCustomPrimitiveProcessorTargetAsset(class UAtomModelProcessor* Processor, class UAtomPrimitive* Primitive, const struct FAtomOnProcessPrimitiveSettings& PrimitiveSettings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AtomPrimitiveEditorBlueprintLibrary", "GetCustomPrimitiveProcessorTargetAsset");

	Params::AtomPrimitiveEditorBlueprintLibrary_GetCustomPrimitiveProcessorTargetAsset Parms{};

	Parms.Processor = Processor;
	Parms.Primitive = Primitive;
	Parms.PrimitiveSettings = std::move(PrimitiveSettings);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AtomModelImporterEditor.AtomPrimitiveEditorBlueprintLibrary.GetIsPrimitiveProcessorValid
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAtomPrimitiveEditorBlueprintLibrary::GetIsPrimitiveProcessorValid()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AtomPrimitiveEditorBlueprintLibrary", "GetIsPrimitiveProcessorValid");

	Params::AtomPrimitiveEditorBlueprintLibrary_GetIsPrimitiveProcessorValid Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AtomModelImporterEditor.AtomPrimitiveEditorBlueprintLibrary.GetPrimitiveProcessorTargetAsset
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UAtomPrimitive*                   Primitive                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FAtomOnProcessPrimitiveSettings  PrimitiveSettings                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UObject* UAtomPrimitiveEditorBlueprintLibrary::GetPrimitiveProcessorTargetAsset(class UAtomPrimitive* Primitive, const struct FAtomOnProcessPrimitiveSettings& PrimitiveSettings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AtomPrimitiveEditorBlueprintLibrary", "GetPrimitiveProcessorTargetAsset");

	Params::AtomPrimitiveEditorBlueprintLibrary_GetPrimitiveProcessorTargetAsset Parms{};

	Parms.Primitive = Primitive;
	Parms.PrimitiveSettings = std::move(PrimitiveSettings);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AtomModelImporterEditor.AtomPrimitiveEditorBlueprintLibrary.GetPrimitiveSourceCollision
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAtomPrimitive*                   Primitive                                              (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PrimitiveScale                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FAtomPrimitiveCollisionGeometry  ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FAtomPrimitiveCollisionGeometry UAtomPrimitiveEditorBlueprintLibrary::GetPrimitiveSourceCollision(const class UAtomPrimitive* Primitive, float PrimitiveScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AtomPrimitiveEditorBlueprintLibrary", "GetPrimitiveSourceCollision");

	Params::AtomPrimitiveEditorBlueprintLibrary_GetPrimitiveSourceCollision Parms{};

	Parms.Primitive = Primitive;
	Parms.PrimitiveScale = PrimitiveScale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AtomModelImporterEditor.AtomPrimitiveEditorBlueprintLibrary.IsGeometryBlockLike
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UAtomPrimitiveGeometry*           Geometry                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAtomPrimitiveEditorBlueprintLibrary::IsGeometryBlockLike(class UAtomPrimitiveGeometry* Geometry)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AtomPrimitiveEditorBlueprintLibrary", "IsGeometryBlockLike");

	Params::AtomPrimitiveEditorBlueprintLibrary_IsGeometryBlockLike Parms{};

	Parms.Geometry = Geometry;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AtomModelImporterEditor.AtomPrimitiveEditorBlueprintLibrary.RunCustomPrimitiveProcessor
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UAtomModelProcessor*              Processor                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAtomPrimitive*                   Primitive                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FAtomOnProcessPrimitiveSettings  PrimitiveSettings                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FAtomProcessorResult             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FAtomProcessorResult UAtomPrimitiveEditorBlueprintLibrary::RunCustomPrimitiveProcessor(class UAtomModelProcessor* Processor, class UAtomPrimitive* Primitive, const struct FAtomOnProcessPrimitiveSettings& PrimitiveSettings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AtomPrimitiveEditorBlueprintLibrary", "RunCustomPrimitiveProcessor");

	Params::AtomPrimitiveEditorBlueprintLibrary_RunCustomPrimitiveProcessor Parms{};

	Parms.Processor = Processor;
	Parms.Primitive = Primitive;
	Parms.PrimitiveSettings = std::move(PrimitiveSettings);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AtomModelImporterEditor.AtomPrimitiveEditorBlueprintLibrary.RunPrimitiveProcessor
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UAtomPrimitive*                   Primitive                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FAtomOnProcessPrimitiveSettings  PrimitiveSettings                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FAtomProcessorResult             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FAtomProcessorResult UAtomPrimitiveEditorBlueprintLibrary::RunPrimitiveProcessor(class UAtomPrimitive* Primitive, const struct FAtomOnProcessPrimitiveSettings& PrimitiveSettings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AtomPrimitiveEditorBlueprintLibrary", "RunPrimitiveProcessor");

	Params::AtomPrimitiveEditorBlueprintLibrary_RunPrimitiveProcessor Parms{};

	Parms.Primitive = Primitive;
	Parms.PrimitiveSettings = std::move(PrimitiveSettings);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AtomModelImporterEditor.AtomPrimitiveEditorBlueprintLibrary.SubdivideGeometry
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAtomPrimitiveGeometry*           GeometryToSubdivide                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NumberOfSubdivisions                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAtomPrimitiveGeometry*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAtomPrimitiveGeometry* UAtomPrimitiveEditorBlueprintLibrary::SubdivideGeometry(class UAtomPrimitiveGeometry* GeometryToSubdivide, int32 NumberOfSubdivisions)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AtomPrimitiveEditorBlueprintLibrary", "SubdivideGeometry");

	Params::AtomPrimitiveEditorBlueprintLibrary_SubdivideGeometry Parms{};

	Parms.GeometryToSubdivide = GeometryToSubdivide;
	Parms.NumberOfSubdivisions = NumberOfSubdivisions;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AtomModelImporterEditor.AtomPrimitiveEditorBlueprintLibrary.UpdatePrimitiveArray
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class UAtomPrimitive*>           AtomPrimitives                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAtomPrimitiveEditorBlueprintLibrary::UpdatePrimitiveArray(const TArray<class UAtomPrimitive*>& AtomPrimitives)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AtomPrimitiveEditorBlueprintLibrary", "UpdatePrimitiveArray");

	Params::AtomPrimitiveEditorBlueprintLibrary_UpdatePrimitiveArray Parms{};

	Parms.AtomPrimitives = std::move(AtomPrimitives);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AtomModelImporterEditor.AtomMaterialFactory.GetTextureFeatureHash
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FAtomMaterialFeatures            MaterialFeatures                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UAtomMaterialFactory::GetTextureFeatureHash(const struct FAtomMaterialFeatures& MaterialFeatures)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AtomMaterialFactory", "GetTextureFeatureHash");

	Params::AtomMaterialFactory_GetTextureFeatureHash Parms{};

	Parms.MaterialFeatures = std::move(MaterialFeatures);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AtomModelImporterEditor.AtomMaterialFactory.ApplyMaterialFeatures
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// class UMaterialInstanceConstant*        Material                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FAtomMaterialFeatures            Features                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UAtomMaterialFactory::ApplyMaterialFeatures(class UMaterialInstanceConstant* Material, const struct FAtomMaterialFeatures& Features) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtomMaterialFactory", "ApplyMaterialFeatures");

	Params::AtomMaterialFactory_ApplyMaterialFeatures Parms{};

	Parms.Material = Material;
	Parms.Features = std::move(Features);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AtomModelImporterEditor.AtomMaterialFactory.GetBaseMaterial
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// struct FAtomMaterialFeatures            MaterialFeatures                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UMaterialInterface*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMaterialInterface* UAtomMaterialFactory::GetBaseMaterial(const struct FAtomMaterialFeatures& MaterialFeatures) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtomMaterialFactory", "GetBaseMaterial");

	Params::AtomMaterialFactory_GetBaseMaterial Parms{};

	Parms.MaterialFeatures = std::move(MaterialFeatures);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AtomModelImporterEditor.AtomMaterialFactory.GetMaterialFeatures
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// class UMaterialInterface*               Material                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FAtomMaterialFeatures            ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FAtomMaterialFeatures UAtomMaterialFactory::GetMaterialFeatures(class UMaterialInterface* Material) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtomMaterialFactory", "GetMaterialFeatures");

	Params::AtomMaterialFactory_GetMaterialFeatures Parms{};

	Parms.Material = Material;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AtomModelImporterEditor.AtomMaterialFactory.GetMaterialNameForFeatures
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FAtomMaterialFeatures            MaterialFeatures                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UAtomMaterialFactory::GetMaterialNameForFeatures(const struct FAtomMaterialFeatures& MaterialFeatures) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtomMaterialFactory", "GetMaterialNameForFeatures");

	Params::AtomMaterialFactory_GetMaterialNameForFeatures Parms{};

	Parms.MaterialFeatures = std::move(MaterialFeatures);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AtomModelImporterEditor.AtomMaterialFactory.GetMaterialPathForFeatures
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FAtomMaterialFeatures            MaterialFeatures                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FTopLevelAssetPath               ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FTopLevelAssetPath UAtomMaterialFactory::GetMaterialPathForFeatures(const struct FAtomMaterialFeatures& MaterialFeatures) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtomMaterialFactory", "GetMaterialPathForFeatures");

	Params::AtomMaterialFactory_GetMaterialPathForFeatures Parms{};

	Parms.MaterialFeatures = std::move(MaterialFeatures);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AtomModelImporterEditor.AtomMaterialFactory.GetMaterialType
// (Final, Native, Public, HasOutParams, BlueprintCallable, Const)
// Parameters:
// class UMaterialInterface*               Material                                               (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAtomMaterialType                       MaterialType                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAtomMaterialFactory::GetMaterialType(const class UMaterialInterface* Material, EAtomMaterialType* MaterialType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtomMaterialFactory", "GetMaterialType");

	Params::AtomMaterialFactory_GetMaterialType Parms{};

	Parms.Material = Material;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (MaterialType != nullptr)
		*MaterialType = Parms.MaterialType;

	return Parms.ReturnValue;
}


// Function AtomModelImporterEditor.AtomMaterialFactory.GetOrCreateMaterial
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// struct FAtomMaterialFeatures            MaterialFeatures                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UMaterialInterface*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMaterialInterface* UAtomMaterialFactory::GetOrCreateMaterial(const struct FAtomMaterialFeatures& MaterialFeatures) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtomMaterialFactory", "GetOrCreateMaterial");

	Params::AtomMaterialFactory_GetOrCreateMaterial Parms{};

	Parms.MaterialFeatures = std::move(MaterialFeatures);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AtomModelImporterEditor.EditorAtomModelChildProcessor.OnFinalizeModel
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAtomModel*                       Model                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FAtomModelPartsCollection        AtomModelPartsCollection                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<class UObject*>                  InputObjects                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FAtomProcessorResult             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FAtomProcessorResult UEditorAtomModelChildProcessor::OnFinalizeModel(class UAtomModel* Model, const struct FAtomModelPartsCollection& AtomModelPartsCollection, const TArray<class UObject*>& InputObjects)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditorAtomModelChildProcessor", "OnFinalizeModel");

	Params::EditorAtomModelChildProcessor_OnFinalizeModel Parms{};

	Parms.Model = Model;
	Parms.AtomModelPartsCollection = std::move(AtomModelPartsCollection);
	Parms.InputObjects = std::move(InputObjects);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function AtomModelImporterEditor.EditorAtomModelProcessor.InvokeChildProcessorOnFinalizeModels
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UAtomModel*                       Model                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FAtomModelPartsCollection        AtomModelPartsCollection                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<class UObject*>                  InputObjects                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FAtomProcessorResult             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FAtomProcessorResult UEditorAtomModelProcessor::InvokeChildProcessorOnFinalizeModels(class UAtomModel* Model, const struct FAtomModelPartsCollection& AtomModelPartsCollection, const TArray<class UObject*>& InputObjects)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditorAtomModelProcessor", "InvokeChildProcessorOnFinalizeModels");

	Params::EditorAtomModelProcessor_InvokeChildProcessorOnFinalizeModels Parms{};

	Parms.Model = Model;
	Parms.AtomModelPartsCollection = std::move(AtomModelPartsCollection);
	Parms.InputObjects = std::move(InputObjects);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AtomModelImporterEditor.EditorAtomModelProcessor.AreAnyChildProcessorsActive
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEditorAtomModelProcessor::AreAnyChildProcessorsActive() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditorAtomModelProcessor", "AreAnyChildProcessorsActive");

	Params::EditorAtomModelProcessor_AreAnyChildProcessorsActive Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AtomModelImporterEditor.AtomModelBlueprintLibrary.AddAtomModelReferenceToStaticMesh
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UStaticMesh*                      StaticMesh                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAtomModel*                       AtomModel                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSaveConnectivityState                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAtomModelBlueprintLibrary::AddAtomModelReferenceToStaticMesh(class UStaticMesh* StaticMesh, class UAtomModel* AtomModel, bool bSaveConnectivityState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AtomModelBlueprintLibrary", "AddAtomModelReferenceToStaticMesh");

	Params::AtomModelBlueprintLibrary_AddAtomModelReferenceToStaticMesh Parms{};

	Parms.StaticMesh = StaticMesh;
	Parms.AtomModel = AtomModel;
	Parms.bSaveConnectivityState = bSaveConnectivityState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AtomModelImporterEditor.AtomModelBlueprintLibrary.AddAtomModelTagToStaticMesh
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UStaticMesh*                      StaticMesh                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Tag                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAtomModelBlueprintLibrary::AddAtomModelTagToStaticMesh(class UStaticMesh* StaticMesh, class FName Tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AtomModelBlueprintLibrary", "AddAtomModelTagToStaticMesh");

	Params::AtomModelBlueprintLibrary_AddAtomModelTagToStaticMesh Parms{};

	Parms.StaticMesh = StaticMesh;
	Parms.Tag = Tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AtomModelImporterEditor.AtomModelBlueprintLibrary.AddCommonPartDescriptionToStaticMesh
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UStaticMesh*                      StaticMesh                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FAtomCommonPartAssetDescription  Description                                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UAtomModelBlueprintLibrary::AddCommonPartDescriptionToStaticMesh(class UStaticMesh* StaticMesh, const struct FAtomCommonPartAssetDescription& Description)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AtomModelBlueprintLibrary", "AddCommonPartDescriptionToStaticMesh");

	Params::AtomModelBlueprintLibrary_AddCommonPartDescriptionToStaticMesh Parms{};

	Parms.StaticMesh = StaticMesh;
	Parms.Description = std::move(Description);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AtomModelImporterEditor.AtomModelBlueprintLibrary.AddCommonPartInstanceToCache
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FAtomCommonPartInstancesCache    Cache                                                  (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FTransform                       Transform                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UStaticMesh*                      Mesh                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*               Material                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FAtomModelPartGuid               Guid                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ColorId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAtomModelBlueprintLibrary::AddCommonPartInstanceToCache(struct FAtomCommonPartInstancesCache& Cache, const struct FTransform& Transform, class UStaticMesh* Mesh, class UMaterialInterface* Material, const struct FAtomModelPartGuid& Guid, int32 ColorId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AtomModelBlueprintLibrary", "AddCommonPartInstanceToCache");

	Params::AtomModelBlueprintLibrary_AddCommonPartInstanceToCache Parms{};

	Parms.Cache = std::move(Cache);
	Parms.Transform = std::move(Transform);
	Parms.Mesh = Mesh;
	Parms.Material = Material;
	Parms.Guid = std::move(Guid);
	Parms.ColorId = ColorId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Cache = std::move(Parms.Cache);
}


// Function AtomModelImporterEditor.AtomModelBlueprintLibrary.AddPrimitiveInstanceDataToStaticMesh
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UStaticMesh*                      StaticMesh                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<struct FAtomModelPartGuid, struct FAtomPrimitiveInstanceData>InstanceDataMap                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UAtomModelBlueprintLibrary::AddPrimitiveInstanceDataToStaticMesh(class UStaticMesh* StaticMesh, const TMap<struct FAtomModelPartGuid, struct FAtomPrimitiveInstanceData>& InstanceDataMap)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AtomModelBlueprintLibrary", "AddPrimitiveInstanceDataToStaticMesh");

	Params::AtomModelBlueprintLibrary_AddPrimitiveInstanceDataToStaticMesh Parms{};

	Parms.StaticMesh = StaticMesh;
	Parms.InstanceDataMap = std::move(InstanceDataMap);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AtomModelImporterEditor.AtomModelBlueprintLibrary.AddProcessorMaterialOverrideToStaticMesh
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UStaticMesh*                      StaticMesh                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<int32, class UMaterialInterface*>  MaterialOverrides                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UAtomModelBlueprintLibrary::AddProcessorMaterialOverrideToStaticMesh(class UStaticMesh* StaticMesh, const TMap<int32, class UMaterialInterface*>& MaterialOverrides)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AtomModelBlueprintLibrary", "AddProcessorMaterialOverrideToStaticMesh");

	Params::AtomModelBlueprintLibrary_AddProcessorMaterialOverrideToStaticMesh Parms{};

	Parms.StaticMesh = StaticMesh;
	Parms.MaterialOverrides = std::move(MaterialOverrides);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AtomModelImporterEditor.AtomModelBlueprintLibrary.AddProcessorPrimitiveMeshOverrideToStaticMesh
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UStaticMesh*                      StaticMesh                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<struct FAtomModelPartGuid, class UStaticMesh*>PrimitiveMeshOverrides                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UAtomModelBlueprintLibrary::AddProcessorPrimitiveMeshOverrideToStaticMesh(class UStaticMesh* StaticMesh, const TMap<struct FAtomModelPartGuid, class UStaticMesh*>& PrimitiveMeshOverrides)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AtomModelBlueprintLibrary", "AddProcessorPrimitiveMeshOverrideToStaticMesh");

	Params::AtomModelBlueprintLibrary_AddProcessorPrimitiveMeshOverrideToStaticMesh Parms{};

	Parms.StaticMesh = StaticMesh;
	Parms.PrimitiveMeshOverrides = std::move(PrimitiveMeshOverrides);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AtomModelImporterEditor.AtomModelBlueprintLibrary.AddSkeletonToGeometryFromGroups
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UAtomModel*                       AtomModel                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FAtomModelPartsCollection        PartsCollection                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UAtomPrimitiveGeometry*           Geometry                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAtomModelBlueprintLibrary::AddSkeletonToGeometryFromGroups(class UAtomModel* AtomModel, const struct FAtomModelPartsCollection& PartsCollection, class UAtomPrimitiveGeometry* Geometry)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AtomModelBlueprintLibrary", "AddSkeletonToGeometryFromGroups");

	Params::AtomModelBlueprintLibrary_AddSkeletonToGeometryFromGroups Parms{};

	Parms.AtomModel = AtomModel;
	Parms.PartsCollection = std::move(PartsCollection);
	Parms.Geometry = Geometry;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AtomModelImporterEditor.AtomModelBlueprintLibrary.AppendPrimitiveToHISMContainer
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UHierarchicalInstancedStaticMeshComponent*Container                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FAtomModelPart                   Part                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UAtomModelBlueprintLibrary::AppendPrimitiveToHISMContainer(class UHierarchicalInstancedStaticMeshComponent* Container, const struct FAtomModelPart& Part)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AtomModelBlueprintLibrary", "AppendPrimitiveToHISMContainer");

	Params::AtomModelBlueprintLibrary_AppendPrimitiveToHISMContainer Parms{};

	Parms.Container = Container;
	Parms.Part = std::move(Part);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AtomModelImporterEditor.AtomModelBlueprintLibrary.ApplyImportedSocketsToStaticMesh
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UStaticMesh*                      StaticMesh                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAtomModel*                       AtomModel                                              (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAtomModelBlueprintLibrary::ApplyImportedSocketsToStaticMesh(class UStaticMesh* StaticMesh, const class UAtomModel* AtomModel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AtomModelBlueprintLibrary", "ApplyImportedSocketsToStaticMesh");

	Params::AtomModelBlueprintLibrary_ApplyImportedSocketsToStaticMesh Parms{};

	Parms.StaticMesh = StaticMesh;
	Parms.AtomModel = AtomModel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AtomModelImporterEditor.AtomModelBlueprintLibrary.ApplyProcessorAssetImportDataToStaticMesh
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UStaticMesh*                      StaticMesh                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAtomModelProcessor*              Processor                                              (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAtomModel*                       AtomModel                                              (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAtomModelBlueprintLibrary::ApplyProcessorAssetImportDataToStaticMesh(class UStaticMesh* StaticMesh, const class UAtomModelProcessor* Processor, const class UAtomModel* AtomModel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AtomModelBlueprintLibrary", "ApplyProcessorAssetImportDataToStaticMesh");

	Params::AtomModelBlueprintLibrary_ApplyProcessorAssetImportDataToStaticMesh Parms{};

	Parms.StaticMesh = StaticMesh;
	Parms.Processor = Processor;
	Parms.AtomModel = AtomModel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AtomModelImporterEditor.AtomModelBlueprintLibrary.ApplyProcessorAssetImportDataToStaticMeshWithJson
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UStaticMesh*                      StaticMesh                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ProcessorJson                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAtomModel*                       AtomModel                                              (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAtomModelBlueprintLibrary::ApplyProcessorAssetImportDataToStaticMeshWithJson(class UStaticMesh* StaticMesh, const class FString& ProcessorJson, const class UAtomModel* AtomModel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AtomModelBlueprintLibrary", "ApplyProcessorAssetImportDataToStaticMeshWithJson");

	Params::AtomModelBlueprintLibrary_ApplyProcessorAssetImportDataToStaticMeshWithJson Parms{};

	Parms.StaticMesh = StaticMesh;
	Parms.ProcessorJson = std::move(ProcessorJson);
	Parms.AtomModel = AtomModel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AtomModelImporterEditor.AtomModelBlueprintLibrary.CalculateMergedMeshScreenSizes
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FAtomMergedMeshLODDistanceSettingsLODSettings                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UStaticMesh*                      StaticMesh                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAtomModelBlueprintLibrary::CalculateMergedMeshScreenSizes(const struct FAtomMergedMeshLODDistanceSettings& LODSettings, class UStaticMesh* StaticMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AtomModelBlueprintLibrary", "CalculateMergedMeshScreenSizes");

	Params::AtomModelBlueprintLibrary_CalculateMergedMeshScreenSizes Parms{};

	Parms.LODSettings = std::move(LODSettings);
	Parms.StaticMesh = StaticMesh;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AtomModelImporterEditor.AtomModelBlueprintLibrary.CanPartFitIntoHISM
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FAtomModelPart                   Part                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAtomModelBlueprintLibrary::CanPartFitIntoHISM(const struct FAtomModelPart& Part)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AtomModelBlueprintLibrary", "CanPartFitIntoHISM");

	Params::AtomModelBlueprintLibrary_CanPartFitIntoHISM Parms{};

	Parms.Part = std::move(Part);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AtomModelImporterEditor.AtomModelBlueprintLibrary.ConvertToSortedPartList
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FAtomModelPrimitive>      Primitives                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<struct FAtomModelPart>           SortedParts                                            (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UAtomModelBlueprintLibrary::ConvertToSortedPartList(const TArray<struct FAtomModelPrimitive>& Primitives, TArray<struct FAtomModelPart>* SortedParts)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AtomModelBlueprintLibrary", "ConvertToSortedPartList");

	Params::AtomModelBlueprintLibrary_ConvertToSortedPartList Parms{};

	Parms.Primitives = std::move(Primitives);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (SortedParts != nullptr)
		*SortedParts = std::move(Parms.SortedParts);
}


// Function AtomModelImporterEditor.AtomModelBlueprintLibrary.CreateBlueprintContainer
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           AssetPath                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             AssetName                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UClass*                           ParentClass                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UActorComponent*>          Components                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class UBlueprint*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBlueprint* UAtomModelBlueprintLibrary::CreateBlueprintContainer(const class FString& AssetPath, const class FName& AssetName, class UClass* ParentClass, const TArray<class UActorComponent*>& Components)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AtomModelBlueprintLibrary", "CreateBlueprintContainer");

	Params::AtomModelBlueprintLibrary_CreateBlueprintContainer Parms{};

	Parms.AssetPath = std::move(AssetPath);
	Parms.AssetName = AssetName;
	Parms.ParentClass = ParentClass;
	Parms.Components = std::move(Components);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AtomModelImporterEditor.AtomModelBlueprintLibrary.CreateBlueprintContainerFromAtomModelScene
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           AssetPath                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           AssetName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UClass*                           ParentClass                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FAtomModelHierarchicalScene      Scene                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TMap<class FString, class UStaticMesh*> StaticMeshes                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UBlueprint*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBlueprint* UAtomModelBlueprintLibrary::CreateBlueprintContainerFromAtomModelScene(const class FString& AssetPath, const class FString& AssetName, class UClass* ParentClass, const struct FAtomModelHierarchicalScene& Scene, const TMap<class FString, class UStaticMesh*>& StaticMeshes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AtomModelBlueprintLibrary", "CreateBlueprintContainerFromAtomModelScene");

	Params::AtomModelBlueprintLibrary_CreateBlueprintContainerFromAtomModelScene Parms{};

	Parms.AssetPath = std::move(AssetPath);
	Parms.AssetName = std::move(AssetName);
	Parms.ParentClass = ParentClass;
	Parms.Scene = std::move(Scene);
	Parms.StaticMeshes = std::move(StaticMeshes);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AtomModelImporterEditor.AtomModelBlueprintLibrary.CreateComponentForPart
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                           ActorOwner                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USceneComponent*                  ParentComponent                                        (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UClass*                           ParentClass                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FAtomModelPartInstanceInfo       Part                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class USceneComponent*                  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USceneComponent* UAtomModelBlueprintLibrary::CreateComponentForPart(class AActor* ActorOwner, class USceneComponent* ParentComponent, class UClass* ParentClass, const struct FAtomModelPartInstanceInfo& Part)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AtomModelBlueprintLibrary", "CreateComponentForPart");

	Params::AtomModelBlueprintLibrary_CreateComponentForPart Parms{};

	Parms.ActorOwner = ActorOwner;
	Parms.ParentComponent = ParentComponent;
	Parms.ParentClass = ParentClass;
	Parms.Part = std::move(Part);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AtomModelImporterEditor.AtomModelBlueprintLibrary.CreateHashForDecorationMaterial
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<struct FAtomModelPartDecorationInfo>Decorations                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UAtomModelBlueprintLibrary::CreateHashForDecorationMaterial(const TArray<struct FAtomModelPartDecorationInfo>& Decorations)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AtomModelBlueprintLibrary", "CreateHashForDecorationMaterial");

	Params::AtomModelBlueprintLibrary_CreateHashForDecorationMaterial Parms{};

	Parms.Decorations = std::move(Decorations);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AtomModelImporterEditor.AtomModelBlueprintLibrary.CreateHISMContainerForPrimitive
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                           ActorOwner                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USceneComponent*                  ParentComponent                                        (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FAtomModelPart                   Part                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UHierarchicalInstancedStaticMeshComponent*ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UHierarchicalInstancedStaticMeshComponent* UAtomModelBlueprintLibrary::CreateHISMContainerForPrimitive(class AActor* ActorOwner, class USceneComponent* ParentComponent, const struct FAtomModelPart& Part)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AtomModelBlueprintLibrary", "CreateHISMContainerForPrimitive");

	Params::AtomModelBlueprintLibrary_CreateHISMContainerForPrimitive Parms{};

	Parms.ActorOwner = ActorOwner;
	Parms.ParentComponent = ParentComponent;
	Parms.Part = std::move(Part);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AtomModelImporterEditor.AtomModelBlueprintLibrary.CreateMaterialInstanceFromBaseMaterial
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UMaterialInterface*               BaseMaterial                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Subpath                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           MaterialInstanceName                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bOverwriteExisting                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAlreadyExists                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMaterialInterface* UAtomModelBlueprintLibrary::CreateMaterialInstanceFromBaseMaterial(class UMaterialInterface* BaseMaterial, const class FString& Subpath, const class FString& MaterialInstanceName, bool bOverwriteExisting, bool* bAlreadyExists)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AtomModelBlueprintLibrary", "CreateMaterialInstanceFromBaseMaterial");

	Params::AtomModelBlueprintLibrary_CreateMaterialInstanceFromBaseMaterial Parms{};

	Parms.BaseMaterial = BaseMaterial;
	Parms.Subpath = std::move(Subpath);
	Parms.MaterialInstanceName = std::move(MaterialInstanceName);
	Parms.bOverwriteExisting = bOverwriteExisting;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bAlreadyExists != nullptr)
		*bAlreadyExists = Parms.bAlreadyExists;

	return Parms.ReturnValue;
}


// Function AtomModelImporterEditor.AtomModelBlueprintLibrary.CreateModelMergedMesh
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAtomModel*                       AtomModel                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           TargetPackageName                                      (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SelectionSetFilter                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UStaticMesh*>              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UStaticMesh*> UAtomModelBlueprintLibrary::CreateModelMergedMesh(class UAtomModel* AtomModel, const class FString& TargetPackageName, class FName SelectionSetFilter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AtomModelBlueprintLibrary", "CreateModelMergedMesh");

	Params::AtomModelBlueprintLibrary_CreateModelMergedMesh Parms{};

	Parms.AtomModel = AtomModel;
	Parms.TargetPackageName = std::move(TargetPackageName);
	Parms.SelectionSetFilter = SelectionSetFilter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AtomModelImporterEditor.AtomModelBlueprintLibrary.CreateModelMergedMeshWithSettings
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UAtomModel*                       AtomModel                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           TargetPackageName                                      (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FAtomModelMergingSettings        ModelMergingSettings                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<class UStaticMesh*>              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UStaticMesh*> UAtomModelBlueprintLibrary::CreateModelMergedMeshWithSettings(class UAtomModel* AtomModel, const class FString& TargetPackageName, const struct FAtomModelMergingSettings& ModelMergingSettings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AtomModelBlueprintLibrary", "CreateModelMergedMeshWithSettings");

	Params::AtomModelBlueprintLibrary_CreateModelMergedMeshWithSettings Parms{};

	Parms.AtomModel = AtomModel;
	Parms.TargetPackageName = std::move(TargetPackageName);
	Parms.ModelMergingSettings = std::move(ModelMergingSettings);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AtomModelImporterEditor.AtomModelBlueprintLibrary.CreateSceneComponentForPrimitive
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                           ActorOwner                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USceneComponent*                  ParentComponent                                        (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FAtomModelPart                   Part                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class USceneComponent*                  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USceneComponent* UAtomModelBlueprintLibrary::CreateSceneComponentForPrimitive(class AActor* ActorOwner, class USceneComponent* ParentComponent, const struct FAtomModelPart& Part)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AtomModelBlueprintLibrary", "CreateSceneComponentForPrimitive");

	Params::AtomModelBlueprintLibrary_CreateSceneComponentForPrimitive Parms{};

	Parms.ActorOwner = ActorOwner;
	Parms.ParentComponent = ParentComponent;
	Parms.Part = std::move(Part);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AtomModelImporterEditor.AtomModelBlueprintLibrary.DoPartsBelongToSameHISM
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FAtomModelPart                   PartA                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FAtomModelPart                   PartB                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bAllowColorMismatch                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAtomModelBlueprintLibrary::DoPartsBelongToSameHISM(const struct FAtomModelPart& PartA, const struct FAtomModelPart& PartB, bool bAllowColorMismatch)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AtomModelBlueprintLibrary", "DoPartsBelongToSameHISM");

	Params::AtomModelBlueprintLibrary_DoPartsBelongToSameHISM Parms{};

	Parms.PartA = std::move(PartA);
	Parms.PartB = std::move(PartB);
	Parms.bAllowColorMismatch = bAllowColorMismatch;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AtomModelImporterEditor.AtomModelBlueprintLibrary.ExportProcessorToJson
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAtomModelProcessor*              Processor                                              (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UAtomModelBlueprintLibrary::ExportProcessorToJson(const class UAtomModelProcessor* Processor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AtomModelBlueprintLibrary", "ExportProcessorToJson");

	Params::AtomModelBlueprintLibrary_ExportProcessorToJson Parms{};

	Parms.Processor = Processor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AtomModelImporterEditor.AtomModelBlueprintLibrary.FilterGroupChildren
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FAtomModelConfigurationGroup     ParentGroup                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<struct FAtomModelConfigurationGroup>Groups                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<struct FAtomModelConfigurationGroup>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FAtomModelConfigurationGroup> UAtomModelBlueprintLibrary::FilterGroupChildren(const struct FAtomModelConfigurationGroup& ParentGroup, const TArray<struct FAtomModelConfigurationGroup>& Groups)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AtomModelBlueprintLibrary", "FilterGroupChildren");

	Params::AtomModelBlueprintLibrary_FilterGroupChildren Parms{};

	Parms.ParentGroup = std::move(ParentGroup);
	Parms.Groups = std::move(Groups);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AtomModelImporterEditor.AtomModelBlueprintLibrary.FindGroupParentIndex
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FAtomModelConfigurationGroup     ChildGroup                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<struct FAtomModelConfigurationGroup>Groups                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UAtomModelBlueprintLibrary::FindGroupParentIndex(const struct FAtomModelConfigurationGroup& ChildGroup, const TArray<struct FAtomModelConfigurationGroup>& Groups)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AtomModelBlueprintLibrary", "FindGroupParentIndex");

	Params::AtomModelBlueprintLibrary_FindGroupParentIndex Parms{};

	Parms.ChildGroup = std::move(ChildGroup);
	Parms.Groups = std::move(Groups);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AtomModelImporterEditor.AtomModelBlueprintLibrary.FindMatchingBlueprintCreationArguments
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           NameToMatch                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FAtomModelBlueprintCreationArgumentsAndString>PossibleMatches                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FAtomModelBlueprintCreationArgumentsDefaultMatch                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FAtomModelBlueprintCreationArgumentsReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FAtomModelBlueprintCreationArguments UAtomModelBlueprintLibrary::FindMatchingBlueprintCreationArguments(const class FString& NameToMatch, const TArray<struct FAtomModelBlueprintCreationArgumentsAndString>& PossibleMatches, const struct FAtomModelBlueprintCreationArguments& DefaultMatch)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AtomModelBlueprintLibrary", "FindMatchingBlueprintCreationArguments");

	Params::AtomModelBlueprintLibrary_FindMatchingBlueprintCreationArguments Parms{};

	Parms.NameToMatch = std::move(NameToMatch);
	Parms.PossibleMatches = std::move(PossibleMatches);
	Parms.DefaultMatch = std::move(DefaultMatch);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AtomModelImporterEditor.AtomModelBlueprintLibrary.FindRootGroupIndex
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FAtomModelConfigurationGroup>Groups                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UAtomModelBlueprintLibrary::FindRootGroupIndex(const TArray<struct FAtomModelConfigurationGroup>& Groups)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AtomModelBlueprintLibrary", "FindRootGroupIndex");

	Params::AtomModelBlueprintLibrary_FindRootGroupIndex Parms{};

	Parms.Groups = std::move(Groups);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AtomModelImporterEditor.AtomModelBlueprintLibrary.GenerateValidComponentNameForBlueprint
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           InputName                                              (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ParentActor                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UAtomModelBlueprintLibrary::GenerateValidComponentNameForBlueprint(class FString* InputName, class AActor* ParentActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AtomModelBlueprintLibrary", "GenerateValidComponentNameForBlueprint");

	Params::AtomModelBlueprintLibrary_GenerateValidComponentNameForBlueprint Parms{};

	Parms.ParentActor = ParentActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (InputName != nullptr)
		*InputName = std::move(Parms.InputName);

	return Parms.ReturnValue;
}


// Function AtomModelImporterEditor.AtomModelBlueprintLibrary.GetAtomModelTagValue
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             Tag                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFoundTag                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UAtomModelBlueprintLibrary::GetAtomModelTagValue(class FName Tag, bool* bFoundTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AtomModelBlueprintLibrary", "GetAtomModelTagValue");

	Params::AtomModelBlueprintLibrary_GetAtomModelTagValue Parms{};

	Parms.Tag = Tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bFoundTag != nullptr)
		*bFoundTag = Parms.bFoundTag;

	return Parms.ReturnValue;
}


// Function AtomModelImporterEditor.AtomModelBlueprintLibrary.GetDefaultModelMergeSettings
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FAtomModelMergingSettings        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FAtomModelMergingSettings UAtomModelBlueprintLibrary::GetDefaultModelMergeSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AtomModelBlueprintLibrary", "GetDefaultModelMergeSettings");

	Params::AtomModelBlueprintLibrary_GetDefaultModelMergeSettings Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AtomModelImporterEditor.AtomModelBlueprintLibrary.GetFirstValidGroupName
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UAtomModel*                       Model                                                  (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FAtomModelPartInstanceInfo       PartInfo                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<class FString>                   InvalidPrefixes                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UAtomModelBlueprintLibrary::GetFirstValidGroupName(const class UAtomModel* Model, const struct FAtomModelPartInstanceInfo& PartInfo, const TArray<class FString>& InvalidPrefixes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AtomModelBlueprintLibrary", "GetFirstValidGroupName");

	Params::AtomModelBlueprintLibrary_GetFirstValidGroupName Parms{};

	Parms.Model = Model;
	Parms.PartInfo = std::move(PartInfo);
	Parms.InvalidPrefixes = std::move(InvalidPrefixes);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AtomModelImporterEditor.AtomModelBlueprintLibrary.GetImporterSettings
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class UAtomModelImporterSettings* ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UAtomModelImporterSettings* UAtomModelBlueprintLibrary::GetImporterSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AtomModelBlueprintLibrary", "GetImporterSettings");

	Params::AtomModelBlueprintLibrary_GetImporterSettings Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AtomModelImporterEditor.AtomModelBlueprintLibrary.GetModelParts
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAtomModel*                       Model                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FAtomModelPartsCollection        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FAtomModelPartsCollection UAtomModelBlueprintLibrary::GetModelParts(class UAtomModel* Model)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AtomModelBlueprintLibrary", "GetModelParts");

	Params::AtomModelBlueprintLibrary_GetModelParts Parms{};

	Parms.Model = Model;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AtomModelImporterEditor.AtomModelBlueprintLibrary.GetModelPrimitiveAssets
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAtomModel*                       Model                                                  (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UAtomPrimitive*>           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UAtomPrimitive*> UAtomModelBlueprintLibrary::GetModelPrimitiveAssets(const class UAtomModel* Model)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AtomModelBlueprintLibrary", "GetModelPrimitiveAssets");

	Params::AtomModelBlueprintLibrary_GetModelPrimitiveAssets Parms{};

	Parms.Model = Model;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AtomModelImporterEditor.AtomModelBlueprintLibrary.GetModelScale
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UAtomModel*                       AtomModel                                              (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UAtomModelBlueprintLibrary::GetModelScale(const class UAtomModel* AtomModel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AtomModelBlueprintLibrary", "GetModelScale");

	Params::AtomModelBlueprintLibrary_GetModelScale Parms{};

	Parms.AtomModel = AtomModel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AtomModelImporterEditor.AtomModelBlueprintLibrary.GetOrCreateBlueprintAsset
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           BPAssetPath                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FAtomModelBlueprintCreationArgumentsCreationArguments                                      (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bWasCreatedThisCall                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBlueprint*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBlueprint* UAtomModelBlueprintLibrary::GetOrCreateBlueprintAsset(const class FString& BPAssetPath, const struct FAtomModelBlueprintCreationArguments& CreationArguments, bool* bWasCreatedThisCall)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AtomModelBlueprintLibrary", "GetOrCreateBlueprintAsset");

	Params::AtomModelBlueprintLibrary_GetOrCreateBlueprintAsset Parms{};

	Parms.BPAssetPath = std::move(BPAssetPath);
	Parms.CreationArguments = std::move(CreationArguments);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bWasCreatedThisCall != nullptr)
		*bWasCreatedThisCall = Parms.bWasCreatedThisCall;

	return Parms.ReturnValue;
}


// Function AtomModelImporterEditor.AtomModelBlueprintLibrary.GetSourceAtomModelInActor
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAtomModel*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAtomModel* UAtomModelBlueprintLibrary::GetSourceAtomModelInActor(const class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AtomModelBlueprintLibrary", "GetSourceAtomModelInActor");

	Params::AtomModelBlueprintLibrary_GetSourceAtomModelInActor Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AtomModelImporterEditor.AtomModelBlueprintLibrary.GetStaticMeshForPrimitive
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UAtomPrimitive*                   AtomPrimitive                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BuildStyle                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UStaticMesh*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UStaticMesh* UAtomModelBlueprintLibrary::GetStaticMeshForPrimitive(class UAtomPrimitive* AtomPrimitive, const class FName& BuildStyle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AtomModelBlueprintLibrary", "GetStaticMeshForPrimitive");

	Params::AtomModelBlueprintLibrary_GetStaticMeshForPrimitive Parms{};

	Parms.AtomPrimitive = AtomPrimitive;
	Parms.BuildStyle = BuildStyle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AtomModelImporterEditor.AtomModelBlueprintLibrary.ImportAtomModel
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           InputAssetPath                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           OutputAssetPath                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAtomModelImportOptions*          ImportOptions                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAutomated                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAtomModel*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAtomModel* UAtomModelBlueprintLibrary::ImportAtomModel(const class FString& InputAssetPath, const class FString& OutputAssetPath, class UAtomModelImportOptions* ImportOptions, bool bAutomated)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AtomModelBlueprintLibrary", "ImportAtomModel");

	Params::AtomModelBlueprintLibrary_ImportAtomModel Parms{};

	Parms.InputAssetPath = std::move(InputAssetPath);
	Parms.OutputAssetPath = std::move(OutputAssetPath);
	Parms.ImportOptions = ImportOptions;
	Parms.bAutomated = bAutomated;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AtomModelImporterEditor.AtomModelBlueprintLibrary.MakeOptimizedMergedGeometries
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FAtomMergedMeshPartInfo>  MergedMeshParts                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FAtomMeshMergingSettings         DefaultMeshMergingSettings                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TMap<class FString, struct FAtomMeshMergingSettings>MeshMergingSettings                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TMap<class FString, struct FAtomMergedGeometry>MergedGeometries                                       (Parm, OutParm, NativeAccessSpecifierPublic)

void UAtomModelBlueprintLibrary::MakeOptimizedMergedGeometries(const TArray<struct FAtomMergedMeshPartInfo>& MergedMeshParts, const struct FAtomMeshMergingSettings& DefaultMeshMergingSettings, const TMap<class FString, struct FAtomMeshMergingSettings>& MeshMergingSettings, TMap<class FString, struct FAtomMergedGeometry>* MergedGeometries)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AtomModelBlueprintLibrary", "MakeOptimizedMergedGeometries");

	Params::AtomModelBlueprintLibrary_MakeOptimizedMergedGeometries Parms{};

	Parms.MergedMeshParts = std::move(MergedMeshParts);
	Parms.DefaultMeshMergingSettings = std::move(DefaultMeshMergingSettings);
	Parms.MeshMergingSettings = std::move(MeshMergingSettings);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (MergedGeometries != nullptr)
		*MergedGeometries = std::move(Parms.MergedGeometries);
}


// Function AtomModelImporterEditor.AtomModelBlueprintLibrary.MakeOptimizedMergedGeometry
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UAtomModel*                       AtomModel                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FAtomMergedMeshPartInfo>  MergedMeshParts                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FAtomMeshMergingSettings         MeshMergingSettings                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<class UMaterialInterface*>       MergedMeshMaterials                                    (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    bUseNaniteGeometry                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FAtomPrimitiveGeometryLODs       ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FAtomPrimitiveGeometryLODs UAtomModelBlueprintLibrary::MakeOptimizedMergedGeometry(class UAtomModel* AtomModel, const TArray<struct FAtomMergedMeshPartInfo>& MergedMeshParts, const struct FAtomMeshMergingSettings& MeshMergingSettings, TArray<class UMaterialInterface*>* MergedMeshMaterials, bool bUseNaniteGeometry)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AtomModelBlueprintLibrary", "MakeOptimizedMergedGeometry");

	Params::AtomModelBlueprintLibrary_MakeOptimizedMergedGeometry Parms{};

	Parms.AtomModel = AtomModel;
	Parms.MergedMeshParts = std::move(MergedMeshParts);
	Parms.MeshMergingSettings = std::move(MeshMergingSettings);
	Parms.bUseNaniteGeometry = bUseNaniteGeometry;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (MergedMeshMaterials != nullptr)
		*MergedMeshMaterials = std::move(Parms.MergedMeshMaterials);

	return Parms.ReturnValue;
}


// Function AtomModelImporterEditor.AtomModelBlueprintLibrary.MakeOptimizedMergedStaticMesh
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UAtomModel*                       AtomModel                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FAtomMergedMeshPartInfo>  MergedMeshParts                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FAtomMeshMergingSettings         MeshMergingSettings                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<class UMaterialInterface*>       MergedMeshMaterials                                    (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// struct FAtomPrimitiveGeometryLODs       ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FAtomPrimitiveGeometryLODs UAtomModelBlueprintLibrary::MakeOptimizedMergedStaticMesh(class UAtomModel* AtomModel, const TArray<struct FAtomMergedMeshPartInfo>& MergedMeshParts, const struct FAtomMeshMergingSettings& MeshMergingSettings, TArray<class UMaterialInterface*>* MergedMeshMaterials)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AtomModelBlueprintLibrary", "MakeOptimizedMergedStaticMesh");

	Params::AtomModelBlueprintLibrary_MakeOptimizedMergedStaticMesh Parms{};

	Parms.AtomModel = AtomModel;
	Parms.MergedMeshParts = std::move(MergedMeshParts);
	Parms.MeshMergingSettings = std::move(MeshMergingSettings);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (MergedMeshMaterials != nullptr)
		*MergedMeshMaterials = std::move(Parms.MergedMeshMaterials);

	return Parms.ReturnValue;
}


// Function AtomModelImporterEditor.AtomModelBlueprintLibrary.MakeUnoptimizedMergedGeometry
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UAtomModel*                       AtomModel                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FAtomMergedMeshPartInfo>  MergedMeshParts                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<class UMaterialInterface*>       MergedMeshMaterials                                    (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// struct FAtomPrimitiveGeometryLODs       ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FAtomPrimitiveGeometryLODs UAtomModelBlueprintLibrary::MakeUnoptimizedMergedGeometry(class UAtomModel* AtomModel, const TArray<struct FAtomMergedMeshPartInfo>& MergedMeshParts, TArray<class UMaterialInterface*>* MergedMeshMaterials)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AtomModelBlueprintLibrary", "MakeUnoptimizedMergedGeometry");

	Params::AtomModelBlueprintLibrary_MakeUnoptimizedMergedGeometry Parms{};

	Parms.AtomModel = AtomModel;
	Parms.MergedMeshParts = std::move(MergedMeshParts);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (MergedMeshMaterials != nullptr)
		*MergedMeshMaterials = std::move(Parms.MergedMeshMaterials);

	return Parms.ReturnValue;
}


// Function AtomModelImporterEditor.AtomModelBlueprintLibrary.MakeUnoptimizedMergedStaticMesh
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UAtomModel*                       AtomModel                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FAtomMergedMeshPartInfo>  MergedMeshParts                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FAtomPrimitiveGeometryLODs       ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FAtomPrimitiveGeometryLODs UAtomModelBlueprintLibrary::MakeUnoptimizedMergedStaticMesh(class UAtomModel* AtomModel, const TArray<struct FAtomMergedMeshPartInfo>& MergedMeshParts)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AtomModelBlueprintLibrary", "MakeUnoptimizedMergedStaticMesh");

	Params::AtomModelBlueprintLibrary_MakeUnoptimizedMergedStaticMesh Parms{};

	Parms.AtomModel = AtomModel;
	Parms.MergedMeshParts = std::move(MergedMeshParts);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AtomModelImporterEditor.AtomModelBlueprintLibrary.ReloadModel
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAtomModelComponent*              AtomModelComponent                                     (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAtomModelBlueprintLibrary::ReloadModel(class UAtomModelComponent* AtomModelComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AtomModelBlueprintLibrary", "ReloadModel");

	Params::AtomModelBlueprintLibrary_ReloadModel Parms{};

	Parms.AtomModelComponent = AtomModelComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AtomModelImporterEditor.AtomModelBlueprintLibrary.ReportProcessorError
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FText                             Message                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UObject*                          Asset                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAtomModelBlueprintLibrary::ReportProcessorError(const class FText& Message, class UObject* Asset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AtomModelBlueprintLibrary", "ReportProcessorError");

	Params::AtomModelBlueprintLibrary_ReportProcessorError Parms{};

	Parms.Message = std::move(Message);
	Parms.Asset = Asset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AtomModelImporterEditor.AtomModelBlueprintLibrary.ReportProcessorWarning
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FText                             Message                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UObject*                          Asset                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAtomModelBlueprintLibrary::ReportProcessorWarning(const class FText& Message, class UObject* Asset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AtomModelBlueprintLibrary", "ReportProcessorWarning");

	Params::AtomModelBlueprintLibrary_ReportProcessorWarning Parms{};

	Parms.Message = std::move(Message);
	Parms.Asset = Asset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AtomModelImporterEditor.AtomModelBlueprintLibrary.RunAtomModelProcessorOnSelectedActors
// (Final, Native, Static, Public, BlueprintCallable)

void UAtomModelBlueprintLibrary::RunAtomModelProcessorOnSelectedActors()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AtomModelBlueprintLibrary", "RunAtomModelProcessorOnSelectedActors");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function AtomModelImporterEditor.AtomModelBlueprintLibrary.RunModelProcessors
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAtomModel*                       AtomModel                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FAtomProcessorResult>     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FAtomProcessorResult> UAtomModelBlueprintLibrary::RunModelProcessors(class UAtomModel* AtomModel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AtomModelBlueprintLibrary", "RunModelProcessors");

	Params::AtomModelBlueprintLibrary_RunModelProcessors Parms{};

	Parms.AtomModel = AtomModel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AtomModelImporterEditor.AtomModelBlueprintLibrary.SanitizeName
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           InputName                                              (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UAtomModelBlueprintLibrary::SanitizeName(class FString* InputName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AtomModelBlueprintLibrary", "SanitizeName");

	Params::AtomModelBlueprintLibrary_SanitizeName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (InputName != nullptr)
		*InputName = std::move(Parms.InputName);

	return Parms.ReturnValue;
}


// Function AtomModelImporterEditor.AtomModelBlueprintLibrary.SetAtomModelGeometryCollectionImportAsset
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UGeometryCollection*              GeometryCollection                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAtomModel*                       AtomModel                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SelectionSet                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAtomModelBlueprintLibrary::SetAtomModelGeometryCollectionImportAsset(class UGeometryCollection* GeometryCollection, class UAtomModel* AtomModel, class FName SelectionSet)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AtomModelBlueprintLibrary", "SetAtomModelGeometryCollectionImportAsset");

	Params::AtomModelBlueprintLibrary_SetAtomModelGeometryCollectionImportAsset Parms{};

	Parms.GeometryCollection = GeometryCollection;
	Parms.AtomModel = AtomModel;
	Parms.SelectionSet = SelectionSet;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AtomModelImporterEditor.AtomModelBlueprintLibrary.SetCommonPartInstancesCache
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UStaticMesh*                      StaticMesh                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FAtomCommonPartInstancesCache    CommonPartInstancesCache                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UAtomModelBlueprintLibrary::SetCommonPartInstancesCache(class UStaticMesh* StaticMesh, const struct FAtomCommonPartInstancesCache& CommonPartInstancesCache)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AtomModelBlueprintLibrary", "SetCommonPartInstancesCache");

	Params::AtomModelBlueprintLibrary_SetCommonPartInstancesCache Parms{};

	Parms.StaticMesh = StaticMesh;
	Parms.CommonPartInstancesCache = std::move(CommonPartInstancesCache);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AtomModelImporterEditor.AtomModelBlueprintLibrary.TryCreateProcessorInstanceFromPath
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           ProcessorPath                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Outer_0                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FAtomModelProcessorInstance      Output                                                 (Parm, OutParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAtomModelBlueprintLibrary::TryCreateProcessorInstanceFromPath(const class FString& ProcessorPath, class UObject* Outer_0, struct FAtomModelProcessorInstance* Output)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AtomModelBlueprintLibrary", "TryCreateProcessorInstanceFromPath");

	Params::AtomModelBlueprintLibrary_TryCreateProcessorInstanceFromPath Parms{};

	Parms.ProcessorPath = std::move(ProcessorPath);
	Parms.Outer_0 = Outer_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Output != nullptr)
		*Output = std::move(Parms.Output);

	return Parms.ReturnValue;
}


// Function AtomModelImporterEditor.AtomModelBlueprintLibrary.TryGetMergedModelSettings
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UStaticMesh*                      StaticMesh                                             (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FAtomModelMergeOptions           OutMergeOptions                                        (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// class FName                             OutSelectionSet                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAtomModelBlueprintLibrary::TryGetMergedModelSettings(const class UStaticMesh* StaticMesh, struct FAtomModelMergeOptions* OutMergeOptions, class FName* OutSelectionSet)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AtomModelBlueprintLibrary", "TryGetMergedModelSettings");

	Params::AtomModelBlueprintLibrary_TryGetMergedModelSettings Parms{};

	Parms.StaticMesh = StaticMesh;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutMergeOptions != nullptr)
		*OutMergeOptions = std::move(Parms.OutMergeOptions);

	if (OutSelectionSet != nullptr)
		*OutSelectionSet = Parms.OutSelectionSet;

	return Parms.ReturnValue;
}


// Function AtomModelImporterEditor.AtomModelBlueprintLibrary.TryLoadSourceModel
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FAtomSourceModel                 OutSourceModel                                         (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAtomModelBlueprintLibrary::TryLoadSourceModel(const class FString& Filename, struct FAtomSourceModel* OutSourceModel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AtomModelBlueprintLibrary", "TryLoadSourceModel");

	Params::AtomModelBlueprintLibrary_TryLoadSourceModel Parms{};

	Parms.Filename = std::move(Filename);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutSourceModel != nullptr)
		*OutSourceModel = std::move(Parms.OutSourceModel);

	return Parms.ReturnValue;
}


// Function AtomModelImporterEditor.AtomModelBlueprintLibrary.UpdateMergedMeshForModel
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAtomModel*                       AtomModel                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UStaticMesh*>              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UStaticMesh*> UAtomModelBlueprintLibrary::UpdateMergedMeshForModel(class UAtomModel* AtomModel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AtomModelBlueprintLibrary", "UpdateMergedMeshForModel");

	Params::AtomModelBlueprintLibrary_UpdateMergedMeshForModel Parms{};

	Parms.AtomModel = AtomModel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AtomModelImporterEditor.AtomModelBlueprintLibrary.UpdateModelTags
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UAtomModel*                       AtomModel                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FAtomModelUpdateTagsOptions      UpdateTagOptions                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UAtomModelBlueprintLibrary::UpdateModelTags(class UAtomModel* AtomModel, const struct FAtomModelUpdateTagsOptions& UpdateTagOptions)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AtomModelBlueprintLibrary", "UpdateModelTags");

	Params::AtomModelBlueprintLibrary_UpdateModelTags Parms{};

	Parms.AtomModel = AtomModel;
	Parms.UpdateTagOptions = std::move(UpdateTagOptions);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

