#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TakeRecorder

#include "Basic.hpp"

#include "TakeRecorder_classes.hpp"
#include "TakeRecorder_parameters.hpp"


namespace SDK
{

// Function TakeRecorder.TakeRecorder.GetCountdownSeconds
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UTakeRecorder::GetCountdownSeconds() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TakeRecorder", "GetCountdownSeconds");

	Params::TakeRecorder_GetCountdownSeconds Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TakeRecorder.TakeRecorder.GetSequence
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ULevelSequence*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULevelSequence* UTakeRecorder::GetSequence() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TakeRecorder", "GetSequence");

	Params::TakeRecorder_GetSequence Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TakeRecorder.TakeRecorder.GetState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ETakeRecorderState                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ETakeRecorderState UTakeRecorder::GetState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TakeRecorder", "GetState");

	Params::TakeRecorder_GetState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TakeRecorder.TakeRecorderBlueprintLibrary.CancelRecording
// (Final, Native, Static, Public, BlueprintCallable)

void UTakeRecorderBlueprintLibrary::CancelRecording()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TakeRecorderBlueprintLibrary", "CancelRecording");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TakeRecorder.TakeRecorderBlueprintLibrary.GetActiveRecorder
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UTakeRecorder*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTakeRecorder* UTakeRecorderBlueprintLibrary::GetActiveRecorder()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TakeRecorderBlueprintLibrary", "GetActiveRecorder");

	Params::TakeRecorderBlueprintLibrary_GetActiveRecorder Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TakeRecorder.TakeRecorderBlueprintLibrary.GetDefaultParameters
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FTakeRecorderParameters          ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FTakeRecorderParameters UTakeRecorderBlueprintLibrary::GetDefaultParameters()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TakeRecorderBlueprintLibrary", "GetDefaultParameters");

	Params::TakeRecorderBlueprintLibrary_GetDefaultParameters Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TakeRecorder.TakeRecorderBlueprintLibrary.GetTakeRecorderPanel
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UTakeRecorderPanel*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTakeRecorderPanel* UTakeRecorderBlueprintLibrary::GetTakeRecorderPanel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TakeRecorderBlueprintLibrary", "GetTakeRecorderPanel");

	Params::TakeRecorderBlueprintLibrary_GetTakeRecorderPanel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TakeRecorder.TakeRecorderBlueprintLibrary.IsRecording
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTakeRecorderBlueprintLibrary::IsRecording()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TakeRecorderBlueprintLibrary", "IsRecording");

	Params::TakeRecorderBlueprintLibrary_IsRecording Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TakeRecorder.TakeRecorderBlueprintLibrary.IsTakeRecorderEnabled
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTakeRecorderBlueprintLibrary::IsTakeRecorderEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TakeRecorderBlueprintLibrary", "IsTakeRecorderEnabled");

	Params::TakeRecorderBlueprintLibrary_IsTakeRecorderEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TakeRecorder.TakeRecorderBlueprintLibrary.OpenTakeRecorderPanel
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UTakeRecorderPanel*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTakeRecorderPanel* UTakeRecorderBlueprintLibrary::OpenTakeRecorderPanel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TakeRecorderBlueprintLibrary", "OpenTakeRecorderPanel");

	Params::TakeRecorderBlueprintLibrary_OpenTakeRecorderPanel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TakeRecorder.TakeRecorderBlueprintLibrary.SetDefaultParameters
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FTakeRecorderParameters          DefaultParameters                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UTakeRecorderBlueprintLibrary::SetDefaultParameters(const struct FTakeRecorderParameters& DefaultParameters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TakeRecorderBlueprintLibrary", "SetDefaultParameters");

	Params::TakeRecorderBlueprintLibrary_SetDefaultParameters Parms{};

	Parms.DefaultParameters = std::move(DefaultParameters);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TakeRecorder.TakeRecorderBlueprintLibrary.SetOnTakeRecorderCancelled
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TDelegate<void()>                       OnTakeRecorderCancelled                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTakeRecorderBlueprintLibrary::SetOnTakeRecorderCancelled(TDelegate<void()> OnTakeRecorderCancelled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TakeRecorderBlueprintLibrary", "SetOnTakeRecorderCancelled");

	Params::TakeRecorderBlueprintLibrary_SetOnTakeRecorderCancelled Parms{};

	Parms.OnTakeRecorderCancelled = OnTakeRecorderCancelled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TakeRecorder.TakeRecorderBlueprintLibrary.SetOnTakeRecorderFinished
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(class ULevelSequence* SequenceAsset)>OnTakeRecorderFinished                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTakeRecorderBlueprintLibrary::SetOnTakeRecorderFinished(TDelegate<void(class ULevelSequence* SequenceAsset)> OnTakeRecorderFinished)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TakeRecorderBlueprintLibrary", "SetOnTakeRecorderFinished");

	Params::TakeRecorderBlueprintLibrary_SetOnTakeRecorderFinished Parms{};

	Parms.OnTakeRecorderFinished = OnTakeRecorderFinished;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TakeRecorder.TakeRecorderBlueprintLibrary.SetOnTakeRecorderMarkedFrameAdded
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(struct FMovieSceneMarkedFrame& MarkedFrame)>OnTakeRecorderMarkedFrameAdded                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTakeRecorderBlueprintLibrary::SetOnTakeRecorderMarkedFrameAdded(TDelegate<void(struct FMovieSceneMarkedFrame& MarkedFrame)> OnTakeRecorderMarkedFrameAdded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TakeRecorderBlueprintLibrary", "SetOnTakeRecorderMarkedFrameAdded");

	Params::TakeRecorderBlueprintLibrary_SetOnTakeRecorderMarkedFrameAdded Parms{};

	Parms.OnTakeRecorderMarkedFrameAdded = OnTakeRecorderMarkedFrameAdded;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TakeRecorder.TakeRecorderBlueprintLibrary.SetOnTakeRecorderPanelChanged
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TDelegate<void()>                       OnTakeRecorderPanelChanged                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTakeRecorderBlueprintLibrary::SetOnTakeRecorderPanelChanged(TDelegate<void()> OnTakeRecorderPanelChanged)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TakeRecorderBlueprintLibrary", "SetOnTakeRecorderPanelChanged");

	Params::TakeRecorderBlueprintLibrary_SetOnTakeRecorderPanelChanged Parms{};

	Parms.OnTakeRecorderPanelChanged = OnTakeRecorderPanelChanged;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TakeRecorder.TakeRecorderBlueprintLibrary.SetOnTakeRecorderPreInitialize
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TDelegate<void()>                       OnTakeRecorderPreInitialize                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTakeRecorderBlueprintLibrary::SetOnTakeRecorderPreInitialize(TDelegate<void()> OnTakeRecorderPreInitialize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TakeRecorderBlueprintLibrary", "SetOnTakeRecorderPreInitialize");

	Params::TakeRecorderBlueprintLibrary_SetOnTakeRecorderPreInitialize Parms{};

	Parms.OnTakeRecorderPreInitialize = OnTakeRecorderPreInitialize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TakeRecorder.TakeRecorderBlueprintLibrary.SetOnTakeRecorderStarted
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TDelegate<void()>                       OnTakeRecorderStarted                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTakeRecorderBlueprintLibrary::SetOnTakeRecorderStarted(TDelegate<void()> OnTakeRecorderStarted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TakeRecorderBlueprintLibrary", "SetOnTakeRecorderStarted");

	Params::TakeRecorderBlueprintLibrary_SetOnTakeRecorderStarted Parms{};

	Parms.OnTakeRecorderStarted = OnTakeRecorderStarted;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TakeRecorder.TakeRecorderBlueprintLibrary.SetOnTakeRecorderStopped
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TDelegate<void()>                       OnTakeRecorderStopped                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTakeRecorderBlueprintLibrary::SetOnTakeRecorderStopped(TDelegate<void()> OnTakeRecorderStopped)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TakeRecorderBlueprintLibrary", "SetOnTakeRecorderStopped");

	Params::TakeRecorderBlueprintLibrary_SetOnTakeRecorderStopped Parms{};

	Parms.OnTakeRecorderStopped = OnTakeRecorderStopped;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TakeRecorder.TakeRecorderBlueprintLibrary.StartRecording
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ULevelSequence*                   LevelSequence                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTakeRecorderSources*             Sources                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTakeMetaData*                    MetaData                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTakeRecorderParameters          Parameters                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UTakeRecorder*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTakeRecorder* UTakeRecorderBlueprintLibrary::StartRecording(class ULevelSequence* LevelSequence, class UTakeRecorderSources* Sources, class UTakeMetaData* MetaData, const struct FTakeRecorderParameters& Parameters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TakeRecorderBlueprintLibrary", "StartRecording");

	Params::TakeRecorderBlueprintLibrary_StartRecording Parms{};

	Parms.LevelSequence = LevelSequence;
	Parms.Sources = Sources;
	Parms.MetaData = MetaData;
	Parms.Parameters = std::move(Parameters);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TakeRecorder.TakeRecorderBlueprintLibrary.StopRecording
// (Final, Native, Static, Public, BlueprintCallable)

void UTakeRecorderBlueprintLibrary::StopRecording()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TakeRecorderBlueprintLibrary", "StopRecording");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TakeRecorder.TakeRecorderPanel.ClearPendingTake
// (Final, Native, Public, BlueprintCallable)

void UTakeRecorderPanel::ClearPendingTake()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TakeRecorderPanel", "ClearPendingTake");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TakeRecorder.TakeRecorderPanel.SetFrameRate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FFrameRate                       InFrameRate                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTakeRecorderPanel::SetFrameRate(const struct FFrameRate& InFrameRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TakeRecorderPanel", "SetFrameRate");

	Params::TakeRecorderPanel_SetFrameRate Parms{};

	Parms.InFrameRate = std::move(InFrameRate);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TakeRecorder.TakeRecorderPanel.SetFrameRateFromTimecode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInFromTimecode                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTakeRecorderPanel::SetFrameRateFromTimecode(bool bInFromTimecode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TakeRecorderPanel", "SetFrameRateFromTimecode");

	Params::TakeRecorderPanel_SetFrameRateFromTimecode Parms{};

	Parms.bInFromTimecode = bInFromTimecode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TakeRecorder.TakeRecorderPanel.SetupForEditing
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UTakePreset*                      TakePreset                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTakeRecorderPanel::SetupForEditing(class UTakePreset* TakePreset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TakeRecorderPanel", "SetupForEditing");

	Params::TakeRecorderPanel_SetupForEditing Parms{};

	Parms.TakePreset = TakePreset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TakeRecorder.TakeRecorderPanel.SetupForRecording_LevelSequence
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ULevelSequence*                   LevelSequenceAsset                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTakeRecorderPanel::SetupForRecording_LevelSequence(class ULevelSequence* LevelSequenceAsset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TakeRecorderPanel", "SetupForRecording_LevelSequence");

	Params::TakeRecorderPanel_SetupForRecording_LevelSequence Parms{};

	Parms.LevelSequenceAsset = LevelSequenceAsset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TakeRecorder.TakeRecorderPanel.SetupForRecording_TakePreset
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UTakePreset*                      TakePresetAsset                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTakeRecorderPanel::SetupForRecording_TakePreset(class UTakePreset* TakePresetAsset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TakeRecorderPanel", "SetupForRecording_TakePreset");

	Params::TakeRecorderPanel_SetupForRecording_TakePreset Parms{};

	Parms.TakePresetAsset = TakePresetAsset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TakeRecorder.TakeRecorderPanel.SetupForRecordingInto_LevelSequence
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ULevelSequence*                   LevelSequenceAsset                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTakeRecorderPanel::SetupForRecordingInto_LevelSequence(class ULevelSequence* LevelSequenceAsset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TakeRecorderPanel", "SetupForRecordingInto_LevelSequence");

	Params::TakeRecorderPanel_SetupForRecordingInto_LevelSequence Parms{};

	Parms.LevelSequenceAsset = LevelSequenceAsset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TakeRecorder.TakeRecorderPanel.SetupForViewing
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ULevelSequence*                   LevelSequenceAsset                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTakeRecorderPanel::SetupForViewing(class ULevelSequence* LevelSequenceAsset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TakeRecorderPanel", "SetupForViewing");

	Params::TakeRecorderPanel_SetupForViewing Parms{};

	Parms.LevelSequenceAsset = LevelSequenceAsset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TakeRecorder.TakeRecorderPanel.CanStartRecording
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             OutErrorText                                           (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTakeRecorderPanel::CanStartRecording(class FText* OutErrorText) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TakeRecorderPanel", "CanStartRecording");

	Params::TakeRecorderPanel_CanStartRecording Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutErrorText != nullptr)
		*OutErrorText = std::move(Parms.OutErrorText);

	return Parms.ReturnValue;
}


// Function TakeRecorder.TakeRecorderPanel.GetFrameRate
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FFrameRate                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FFrameRate UTakeRecorderPanel::GetFrameRate() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TakeRecorderPanel", "GetFrameRate");

	Params::TakeRecorderPanel_GetFrameRate Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TakeRecorder.TakeRecorderPanel.GetLastRecordedLevelSequence
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ULevelSequence*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULevelSequence* UTakeRecorderPanel::GetLastRecordedLevelSequence() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TakeRecorderPanel", "GetLastRecordedLevelSequence");

	Params::TakeRecorderPanel_GetLastRecordedLevelSequence Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TakeRecorder.TakeRecorderPanel.GetLevelSequence
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ULevelSequence*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULevelSequence* UTakeRecorderPanel::GetLevelSequence() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TakeRecorderPanel", "GetLevelSequence");

	Params::TakeRecorderPanel_GetLevelSequence Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TakeRecorder.TakeRecorderPanel.GetMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ETakeRecorderPanelMode                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ETakeRecorderPanelMode UTakeRecorderPanel::GetMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TakeRecorderPanel", "GetMode");

	Params::TakeRecorderPanel_GetMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TakeRecorder.TakeRecorderPanel.GetSources
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UTakeRecorderSources*             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTakeRecorderSources* UTakeRecorderPanel::GetSources() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TakeRecorderPanel", "GetSources");

	Params::TakeRecorderPanel_GetSources Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TakeRecorder.TakeRecorderPanel.GetTakeMetaData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UTakeMetaData*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTakeMetaData* UTakeRecorderPanel::GetTakeMetaData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TakeRecorderPanel", "GetTakeMetaData");

	Params::TakeRecorderPanel_GetTakeMetaData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TakeRecorder.TakeRecorderPanel.StartRecording
// (Final, Native, Public, BlueprintCallable, Const)

void UTakeRecorderPanel::StartRecording() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TakeRecorderPanel", "StartRecording");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TakeRecorder.TakeRecorderPanel.StopRecording
// (Final, Native, Public, BlueprintCallable, Const)

void UTakeRecorderPanel::StopRecording() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TakeRecorderPanel", "StopRecording");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}

}

