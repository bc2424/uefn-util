#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LevelSequenceEditor

#include "Basic.hpp"

#include "LevelSequenceEditor_classes.hpp"
#include "LevelSequenceEditor_parameters.hpp"


namespace SDK
{

// Function LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary.CloseLevelSequence
// (Final, Native, Static, Public, BlueprintCallable)

void ULevelSequenceEditorBlueprintLibrary::CloseLevelSequence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelSequenceEditorBlueprintLibrary", "CloseLevelSequence");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary.DeleteColorForChannels
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UClass*                           Class_0                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Identifier                                             (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULevelSequenceEditorBlueprintLibrary::DeleteColorForChannels(class UClass* Class_0, class FString* Identifier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelSequenceEditorBlueprintLibrary", "DeleteColorForChannels");

	Params::LevelSequenceEditorBlueprintLibrary_DeleteColorForChannels Parms{};

	Parms.Class_0 = Class_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Identifier != nullptr)
		*Identifier = std::move(Parms.Identifier);
}


// Function LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary.EmptySelection
// (Final, Native, Static, Public, BlueprintCallable)

void ULevelSequenceEditorBlueprintLibrary::EmptySelection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelSequenceEditorBlueprintLibrary", "EmptySelection");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary.FocusLevelSequence
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UMovieSceneSubSection*            SubSection                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULevelSequenceEditorBlueprintLibrary::FocusLevelSequence(class UMovieSceneSubSection* SubSection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelSequenceEditorBlueprintLibrary", "FocusLevelSequence");

	Params::LevelSequenceEditorBlueprintLibrary_FocusLevelSequence Parms{};

	Parms.SubSection = SubSection;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary.FocusParentSequence
// (Final, Native, Static, Public, BlueprintCallable)

void ULevelSequenceEditorBlueprintLibrary::FocusParentSequence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelSequenceEditorBlueprintLibrary", "FocusParentSequence");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary.ForceUpdate
// (Final, Native, Static, Public, BlueprintCallable)

void ULevelSequenceEditorBlueprintLibrary::ForceUpdate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelSequenceEditorBlueprintLibrary", "ForceUpdate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary.GetBoundObjects
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FMovieSceneObjectBindingID       ObjectBinding                                          (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UObject*>                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UObject*> ULevelSequenceEditorBlueprintLibrary::GetBoundObjects(const struct FMovieSceneObjectBindingID& ObjectBinding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelSequenceEditorBlueprintLibrary", "GetBoundObjects");

	Params::LevelSequenceEditorBlueprintLibrary_GetBoundObjects Parms{};

	Parms.ObjectBinding = std::move(ObjectBinding);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary.GetChannelsWithSelectedKeys
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<struct FSequencerChannelProxy>   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<struct FSequencerChannelProxy> ULevelSequenceEditorBlueprintLibrary::GetChannelsWithSelectedKeys()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelSequenceEditorBlueprintLibrary", "GetChannelsWithSelectedKeys");

	Params::LevelSequenceEditorBlueprintLibrary_GetChannelsWithSelectedKeys Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary.GetCurrentLevelSequence
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ULevelSequence*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULevelSequence* ULevelSequenceEditorBlueprintLibrary::GetCurrentLevelSequence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelSequenceEditorBlueprintLibrary", "GetCurrentLevelSequence");

	Params::LevelSequenceEditorBlueprintLibrary_GetCurrentLevelSequence Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary.GetCurrentLocalTime
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ULevelSequenceEditorBlueprintLibrary::GetCurrentLocalTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelSequenceEditorBlueprintLibrary", "GetCurrentLocalTime");

	Params::LevelSequenceEditorBlueprintLibrary_GetCurrentLocalTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary.GetCurrentTime
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ULevelSequenceEditorBlueprintLibrary::GetCurrentTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelSequenceEditorBlueprintLibrary", "GetCurrentTime");

	Params::LevelSequenceEditorBlueprintLibrary_GetCurrentTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary.GetCustomColorForChannel
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UClass*                           Class_0                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Identifier                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLinearColor ULevelSequenceEditorBlueprintLibrary::GetCustomColorForChannel(class UClass* Class_0, const class FString& Identifier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelSequenceEditorBlueprintLibrary", "GetCustomColorForChannel");

	Params::LevelSequenceEditorBlueprintLibrary_GetCustomColorForChannel Parms{};

	Parms.Class_0 = Class_0;
	Parms.Identifier = std::move(Identifier);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary.GetFocusedLevelSequence
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ULevelSequence*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULevelSequence* ULevelSequenceEditorBlueprintLibrary::GetFocusedLevelSequence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelSequenceEditorBlueprintLibrary", "GetFocusedLevelSequence");

	Params::LevelSequenceEditorBlueprintLibrary_GetFocusedLevelSequence Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary.GetGlobalPosition
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EMovieSceneTimeUnit                     TimeUnit                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMovieSceneSequencePlaybackParamsReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FMovieSceneSequencePlaybackParams ULevelSequenceEditorBlueprintLibrary::GetGlobalPosition(EMovieSceneTimeUnit TimeUnit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelSequenceEditorBlueprintLibrary", "GetGlobalPosition");

	Params::LevelSequenceEditorBlueprintLibrary_GetGlobalPosition Parms{};

	Parms.TimeUnit = TimeUnit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary.GetLocalPosition
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EMovieSceneTimeUnit                     TimeUnit                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMovieSceneSequencePlaybackParamsReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FMovieSceneSequencePlaybackParams ULevelSequenceEditorBlueprintLibrary::GetLocalPosition(EMovieSceneTimeUnit TimeUnit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelSequenceEditorBlueprintLibrary", "GetLocalPosition");

	Params::LevelSequenceEditorBlueprintLibrary_GetLocalPosition Parms{};

	Parms.TimeUnit = TimeUnit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary.GetLoopMode
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// ESequencerLoopMode                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESequencerLoopMode ULevelSequenceEditorBlueprintLibrary::GetLoopMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelSequenceEditorBlueprintLibrary", "GetLoopMode");

	Params::LevelSequenceEditorBlueprintLibrary_GetLoopMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary.GetPlaybackSpeed
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ULevelSequenceEditorBlueprintLibrary::GetPlaybackSpeed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelSequenceEditorBlueprintLibrary", "GetPlaybackSpeed");

	Params::LevelSequenceEditorBlueprintLibrary_GetPlaybackSpeed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary.GetSelectedBindings
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<struct FMovieSceneBindingProxy>  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FMovieSceneBindingProxy> ULevelSequenceEditorBlueprintLibrary::GetSelectedBindings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelSequenceEditorBlueprintLibrary", "GetSelectedBindings");

	Params::LevelSequenceEditorBlueprintLibrary_GetSelectedBindings Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary.GetSelectedChannels
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<struct FSequencerChannelProxy>   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<struct FSequencerChannelProxy> ULevelSequenceEditorBlueprintLibrary::GetSelectedChannels()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelSequenceEditorBlueprintLibrary", "GetSelectedChannels");

	Params::LevelSequenceEditorBlueprintLibrary_GetSelectedChannels Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary.GetSelectedFolders
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<class UMovieSceneFolder*>        ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<class UMovieSceneFolder*> ULevelSequenceEditorBlueprintLibrary::GetSelectedFolders()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelSequenceEditorBlueprintLibrary", "GetSelectedFolders");

	Params::LevelSequenceEditorBlueprintLibrary_GetSelectedFolders Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary.GetSelectedKeys
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FSequencerChannelProxy           ChannelProxy                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// TArray<int32>                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<int32> ULevelSequenceEditorBlueprintLibrary::GetSelectedKeys(const struct FSequencerChannelProxy& ChannelProxy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelSequenceEditorBlueprintLibrary", "GetSelectedKeys");

	Params::LevelSequenceEditorBlueprintLibrary_GetSelectedKeys Parms{};

	Parms.ChannelProxy = std::move(ChannelProxy);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary.GetSelectedSections
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<class UMovieSceneSection*>       ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<class UMovieSceneSection*> ULevelSequenceEditorBlueprintLibrary::GetSelectedSections()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelSequenceEditorBlueprintLibrary", "GetSelectedSections");

	Params::LevelSequenceEditorBlueprintLibrary_GetSelectedSections Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary.GetSelectedTracks
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<class UMovieSceneTrack*>         ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<class UMovieSceneTrack*> ULevelSequenceEditorBlueprintLibrary::GetSelectedTracks()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelSequenceEditorBlueprintLibrary", "GetSelectedTracks");

	Params::LevelSequenceEditorBlueprintLibrary_GetSelectedTracks Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary.GetSelectionRangeEnd
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ULevelSequenceEditorBlueprintLibrary::GetSelectionRangeEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelSequenceEditorBlueprintLibrary", "GetSelectionRangeEnd");

	Params::LevelSequenceEditorBlueprintLibrary_GetSelectionRangeEnd Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary.GetSelectionRangeStart
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ULevelSequenceEditorBlueprintLibrary::GetSelectionRangeStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelSequenceEditorBlueprintLibrary", "GetSelectionRangeStart");

	Params::LevelSequenceEditorBlueprintLibrary_GetSelectionRangeStart Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary.GetSubSequenceHierarchy
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TArray<class UMovieSceneSubSection*>    ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<class UMovieSceneSubSection*> ULevelSequenceEditorBlueprintLibrary::GetSubSequenceHierarchy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelSequenceEditorBlueprintLibrary", "GetSubSequenceHierarchy");

	Params::LevelSequenceEditorBlueprintLibrary_GetSubSequenceHierarchy Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary.GetTrackFilterNames
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<class FText>                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FText> ULevelSequenceEditorBlueprintLibrary::GetTrackFilterNames()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelSequenceEditorBlueprintLibrary", "GetTrackFilterNames");

	Params::LevelSequenceEditorBlueprintLibrary_GetTrackFilterNames Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary.HasCustomColorForChannel
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UClass*                           Class_0                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Identifier                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULevelSequenceEditorBlueprintLibrary::HasCustomColorForChannel(class UClass* Class_0, const class FString& Identifier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelSequenceEditorBlueprintLibrary", "HasCustomColorForChannel");

	Params::LevelSequenceEditorBlueprintLibrary_HasCustomColorForChannel Parms{};

	Parms.Class_0 = Class_0;
	Parms.Identifier = std::move(Identifier);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary.IsCameraCutLockedToViewport
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULevelSequenceEditorBlueprintLibrary::IsCameraCutLockedToViewport()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelSequenceEditorBlueprintLibrary", "IsCameraCutLockedToViewport");

	Params::LevelSequenceEditorBlueprintLibrary_IsCameraCutLockedToViewport Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary.IsLevelSequenceLocked
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULevelSequenceEditorBlueprintLibrary::IsLevelSequenceLocked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelSequenceEditorBlueprintLibrary", "IsLevelSequenceLocked");

	Params::LevelSequenceEditorBlueprintLibrary_IsLevelSequenceLocked Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary.IsPlaying
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULevelSequenceEditorBlueprintLibrary::IsPlaying()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelSequenceEditorBlueprintLibrary", "IsPlaying");

	Params::LevelSequenceEditorBlueprintLibrary_IsPlaying Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary.IsTrackFilterEnabled
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class FText                             TrackFilterName                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULevelSequenceEditorBlueprintLibrary::IsTrackFilterEnabled(const class FText& TrackFilterName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelSequenceEditorBlueprintLibrary", "IsTrackFilterEnabled");

	Params::LevelSequenceEditorBlueprintLibrary_IsTrackFilterEnabled Parms{};

	Parms.TrackFilterName = std::move(TrackFilterName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary.OpenLevelSequence
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ULevelSequence*                   LevelSequence                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULevelSequenceEditorBlueprintLibrary::OpenLevelSequence(class ULevelSequence* LevelSequence)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelSequenceEditorBlueprintLibrary", "OpenLevelSequence");

	Params::LevelSequenceEditorBlueprintLibrary_OpenLevelSequence Parms{};

	Parms.LevelSequence = LevelSequence;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary.Pause
// (Final, Native, Static, Public, BlueprintCallable)

void ULevelSequenceEditorBlueprintLibrary::Pause()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelSequenceEditorBlueprintLibrary", "Pause");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary.Play
// (Final, Native, Static, Public, BlueprintCallable)

void ULevelSequenceEditorBlueprintLibrary::Play()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelSequenceEditorBlueprintLibrary", "Play");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary.PlayTo
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FMovieSceneSequencePlaybackParamsPlaybackParams                                         (Parm, NativeAccessSpecifierPublic)
// EMovieSceneTimeUnit                     TimeUnit                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULevelSequenceEditorBlueprintLibrary::PlayTo(const struct FMovieSceneSequencePlaybackParams& PlaybackParams, EMovieSceneTimeUnit TimeUnit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelSequenceEditorBlueprintLibrary", "PlayTo");

	Params::LevelSequenceEditorBlueprintLibrary_PlayTo Parms{};

	Parms.PlaybackParams = std::move(PlaybackParams);
	Parms.TimeUnit = TimeUnit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary.RefreshCurrentLevelSequence
// (Final, Native, Static, Public, BlueprintCallable)

void ULevelSequenceEditorBlueprintLibrary::RefreshCurrentLevelSequence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelSequenceEditorBlueprintLibrary", "RefreshCurrentLevelSequence");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary.SelectBindings
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FMovieSceneBindingProxy>  ObjectBindings                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void ULevelSequenceEditorBlueprintLibrary::SelectBindings(const TArray<struct FMovieSceneBindingProxy>& ObjectBindings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelSequenceEditorBlueprintLibrary", "SelectBindings");

	Params::LevelSequenceEditorBlueprintLibrary_SelectBindings Parms{};

	Parms.ObjectBindings = std::move(ObjectBindings);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary.SelectChannels
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FSequencerChannelProxy>   Channels                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void ULevelSequenceEditorBlueprintLibrary::SelectChannels(const TArray<struct FSequencerChannelProxy>& Channels)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelSequenceEditorBlueprintLibrary", "SelectChannels");

	Params::LevelSequenceEditorBlueprintLibrary_SelectChannels Parms{};

	Parms.Channels = std::move(Channels);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary.SelectFolders
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class UMovieSceneFolder*>        Folders                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void ULevelSequenceEditorBlueprintLibrary::SelectFolders(const TArray<class UMovieSceneFolder*>& Folders)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelSequenceEditorBlueprintLibrary", "SelectFolders");

	Params::LevelSequenceEditorBlueprintLibrary_SelectFolders Parms{};

	Parms.Folders = std::move(Folders);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary.SelectKeys
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSequencerChannelProxy           Channel                                                (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// TArray<int32>                           Indices                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void ULevelSequenceEditorBlueprintLibrary::SelectKeys(const struct FSequencerChannelProxy& Channel, const TArray<int32>& Indices)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelSequenceEditorBlueprintLibrary", "SelectKeys");

	Params::LevelSequenceEditorBlueprintLibrary_SelectKeys Parms{};

	Parms.Channel = std::move(Channel);
	Parms.Indices = std::move(Indices);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary.SelectSections
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class UMovieSceneSection*>       Sections                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void ULevelSequenceEditorBlueprintLibrary::SelectSections(const TArray<class UMovieSceneSection*>& Sections)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelSequenceEditorBlueprintLibrary", "SelectSections");

	Params::LevelSequenceEditorBlueprintLibrary_SelectSections Parms{};

	Parms.Sections = std::move(Sections);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary.SelectTracks
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class UMovieSceneTrack*>         Tracks                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void ULevelSequenceEditorBlueprintLibrary::SelectTracks(const TArray<class UMovieSceneTrack*>& Tracks)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelSequenceEditorBlueprintLibrary", "SelectTracks");

	Params::LevelSequenceEditorBlueprintLibrary_SelectTracks Parms{};

	Parms.Tracks = std::move(Tracks);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary.SetCurrentLocalTime
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   NewFrame                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULevelSequenceEditorBlueprintLibrary::SetCurrentLocalTime(int32 NewFrame)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelSequenceEditorBlueprintLibrary", "SetCurrentLocalTime");

	Params::LevelSequenceEditorBlueprintLibrary_SetCurrentLocalTime Parms{};

	Parms.NewFrame = NewFrame;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary.SetCurrentTime
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   NewFrame                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULevelSequenceEditorBlueprintLibrary::SetCurrentTime(int32 NewFrame)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelSequenceEditorBlueprintLibrary", "SetCurrentTime");

	Params::LevelSequenceEditorBlueprintLibrary_SetCurrentTime Parms{};

	Parms.NewFrame = NewFrame;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary.SetCustomColorForChannel
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UClass*                           Class_0                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Identifier                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     NewColor                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULevelSequenceEditorBlueprintLibrary::SetCustomColorForChannel(class UClass* Class_0, const class FString& Identifier, const struct FLinearColor& NewColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelSequenceEditorBlueprintLibrary", "SetCustomColorForChannel");

	Params::LevelSequenceEditorBlueprintLibrary_SetCustomColorForChannel Parms{};

	Parms.Class_0 = Class_0;
	Parms.Identifier = std::move(Identifier);
	Parms.NewColor = std::move(NewColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary.SetCustomColorForChannels
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UClass*                           Class_0                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>                   Identifiers                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<struct FLinearColor>             NewColors                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void ULevelSequenceEditorBlueprintLibrary::SetCustomColorForChannels(class UClass* Class_0, const TArray<class FString>& Identifiers, const TArray<struct FLinearColor>& NewColors)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelSequenceEditorBlueprintLibrary", "SetCustomColorForChannels");

	Params::LevelSequenceEditorBlueprintLibrary_SetCustomColorForChannels Parms{};

	Parms.Class_0 = Class_0;
	Parms.Identifiers = std::move(Identifiers);
	Parms.NewColors = std::move(NewColors);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary.SetGlobalPosition
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FMovieSceneSequencePlaybackParamsPlaybackParams                                         (Parm, NativeAccessSpecifierPublic)
// EMovieSceneTimeUnit                     TimeUnit                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULevelSequenceEditorBlueprintLibrary::SetGlobalPosition(const struct FMovieSceneSequencePlaybackParams& PlaybackParams, EMovieSceneTimeUnit TimeUnit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelSequenceEditorBlueprintLibrary", "SetGlobalPosition");

	Params::LevelSequenceEditorBlueprintLibrary_SetGlobalPosition Parms{};

	Parms.PlaybackParams = std::move(PlaybackParams);
	Parms.TimeUnit = TimeUnit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary.SetLocalPosition
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FMovieSceneSequencePlaybackParamsPlaybackParams                                         (Parm, NativeAccessSpecifierPublic)
// EMovieSceneTimeUnit                     TimeUnit                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULevelSequenceEditorBlueprintLibrary::SetLocalPosition(const struct FMovieSceneSequencePlaybackParams& PlaybackParams, EMovieSceneTimeUnit TimeUnit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelSequenceEditorBlueprintLibrary", "SetLocalPosition");

	Params::LevelSequenceEditorBlueprintLibrary_SetLocalPosition Parms{};

	Parms.PlaybackParams = std::move(PlaybackParams);
	Parms.TimeUnit = TimeUnit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary.SetLockCameraCutToViewport
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    bLock                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULevelSequenceEditorBlueprintLibrary::SetLockCameraCutToViewport(bool bLock)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelSequenceEditorBlueprintLibrary", "SetLockCameraCutToViewport");

	Params::LevelSequenceEditorBlueprintLibrary_SetLockCameraCutToViewport Parms{};

	Parms.bLock = bLock;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary.SetLockLevelSequence
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    bLock                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULevelSequenceEditorBlueprintLibrary::SetLockLevelSequence(bool bLock)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelSequenceEditorBlueprintLibrary", "SetLockLevelSequence");

	Params::LevelSequenceEditorBlueprintLibrary_SetLockLevelSequence Parms{};

	Parms.bLock = bLock;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary.SetLoopMode
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// ESequencerLoopMode                      NewLoopMode                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULevelSequenceEditorBlueprintLibrary::SetLoopMode(ESequencerLoopMode NewLoopMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelSequenceEditorBlueprintLibrary", "SetLoopMode");

	Params::LevelSequenceEditorBlueprintLibrary_SetLoopMode Parms{};

	Parms.NewLoopMode = NewLoopMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary.SetPlaybackSpeed
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                                   NewPlaybackSpeed                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULevelSequenceEditorBlueprintLibrary::SetPlaybackSpeed(float NewPlaybackSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelSequenceEditorBlueprintLibrary", "SetPlaybackSpeed");

	Params::LevelSequenceEditorBlueprintLibrary_SetPlaybackSpeed Parms{};

	Parms.NewPlaybackSpeed = NewPlaybackSpeed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary.SetRandomColorForChannels
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UClass*                           Class_0                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>                   Identifiers                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void ULevelSequenceEditorBlueprintLibrary::SetRandomColorForChannels(class UClass* Class_0, const TArray<class FString>& Identifiers)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelSequenceEditorBlueprintLibrary", "SetRandomColorForChannels");

	Params::LevelSequenceEditorBlueprintLibrary_SetRandomColorForChannels Parms{};

	Parms.Class_0 = Class_0;
	Parms.Identifiers = std::move(Identifiers);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary.SetSelectionRangeEnd
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   NewFrame                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULevelSequenceEditorBlueprintLibrary::SetSelectionRangeEnd(int32 NewFrame)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelSequenceEditorBlueprintLibrary", "SetSelectionRangeEnd");

	Params::LevelSequenceEditorBlueprintLibrary_SetSelectionRangeEnd Parms{};

	Parms.NewFrame = NewFrame;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary.SetSelectionRangeStart
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   NewFrame                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULevelSequenceEditorBlueprintLibrary::SetSelectionRangeStart(int32 NewFrame)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelSequenceEditorBlueprintLibrary", "SetSelectionRangeStart");

	Params::LevelSequenceEditorBlueprintLibrary_SetSelectionRangeStart Parms{};

	Parms.NewFrame = NewFrame;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary.SetTrackFilterEnabled
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FText                             TrackFilterName                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULevelSequenceEditorBlueprintLibrary::SetTrackFilterEnabled(const class FText& TrackFilterName, bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelSequenceEditorBlueprintLibrary", "SetTrackFilterEnabled");

	Params::LevelSequenceEditorBlueprintLibrary_SetTrackFilterEnabled Parms{};

	Parms.TrackFilterName = std::move(TrackFilterName);
	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelSequenceEditor.LevelSequenceEditorSubsystem.AddActors
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class AActor*>                   Actors                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<struct FMovieSceneBindingProxy>  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FMovieSceneBindingProxy> ULevelSequenceEditorSubsystem::AddActors(const TArray<class AActor*>& Actors)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LevelSequenceEditorSubsystem", "AddActors");

	Params::LevelSequenceEditorSubsystem_AddActors Parms{};

	Parms.Actors = std::move(Actors);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelSequenceEditor.LevelSequenceEditorSubsystem.AddActorsToBinding
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class AActor*>                   Actors                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FMovieSceneBindingProxy          ObjectBinding                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULevelSequenceEditorSubsystem::AddActorsToBinding(const TArray<class AActor*>& Actors, const struct FMovieSceneBindingProxy& ObjectBinding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LevelSequenceEditorSubsystem", "AddActorsToBinding");

	Params::LevelSequenceEditorSubsystem_AddActorsToBinding Parms{};

	Parms.Actors = std::move(Actors);
	Parms.ObjectBinding = std::move(ObjectBinding);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelSequenceEditor.LevelSequenceEditorSubsystem.BakeTransform
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FMovieSceneBindingProxy>  ObjectBindings                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FFrameTime                       BakeInTime                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFrameTime                       BakeOutTime                                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFrameTime                       BakeInterval                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMovieSceneScriptingParams       Params_0                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ULevelSequenceEditorSubsystem::BakeTransform(const TArray<struct FMovieSceneBindingProxy>& ObjectBindings, const struct FFrameTime& BakeInTime, const struct FFrameTime& BakeOutTime, const struct FFrameTime& BakeInterval, const struct FMovieSceneScriptingParams& Params_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LevelSequenceEditorSubsystem", "BakeTransform");

	Params::LevelSequenceEditorSubsystem_BakeTransform Parms{};

	Parms.ObjectBindings = std::move(ObjectBindings);
	Parms.BakeInTime = std::move(BakeInTime);
	Parms.BakeOutTime = std::move(BakeOutTime);
	Parms.BakeInterval = std::move(BakeInterval);
	Parms.Params_0 = std::move(Params_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelSequenceEditor.LevelSequenceEditorSubsystem.BakeTransformWithSettings
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FMovieSceneBindingProxy>  ObjectBindings                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FBakingAnimationKeySettings      InSettings                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FMovieSceneScriptingParams       Params_0                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULevelSequenceEditorSubsystem::BakeTransformWithSettings(const TArray<struct FMovieSceneBindingProxy>& ObjectBindings, const struct FBakingAnimationKeySettings& InSettings, const struct FMovieSceneScriptingParams& Params_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LevelSequenceEditorSubsystem", "BakeTransformWithSettings");

	Params::LevelSequenceEditorSubsystem_BakeTransformWithSettings Parms{};

	Parms.ObjectBindings = std::move(ObjectBindings);
	Parms.InSettings = std::move(InSettings);
	Parms.Params_0 = std::move(Params_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelSequenceEditor.LevelSequenceEditorSubsystem.ChangeActorTemplateClass
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FMovieSceneBindingProxy          ObjectBinding                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class AActor>               ActorClass                                             (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULevelSequenceEditorSubsystem::ChangeActorTemplateClass(const struct FMovieSceneBindingProxy& ObjectBinding, TSubclassOf<class AActor> ActorClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LevelSequenceEditorSubsystem", "ChangeActorTemplateClass");

	Params::LevelSequenceEditorSubsystem_ChangeActorTemplateClass Parms{};

	Parms.ObjectBinding = std::move(ObjectBinding);
	Parms.ActorClass = ActorClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelSequenceEditor.LevelSequenceEditorSubsystem.ConvertToCustomBinding
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FMovieSceneBindingProxy          ObjectBinding                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UMovieSceneCustomBinding>BindingType                                            (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMovieSceneBindingProxy          ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FMovieSceneBindingProxy ULevelSequenceEditorSubsystem::ConvertToCustomBinding(const struct FMovieSceneBindingProxy& ObjectBinding, TSubclassOf<class UMovieSceneCustomBinding> BindingType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LevelSequenceEditorSubsystem", "ConvertToCustomBinding");

	Params::LevelSequenceEditorSubsystem_ConvertToCustomBinding Parms{};

	Parms.ObjectBinding = std::move(ObjectBinding);
	Parms.BindingType = BindingType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelSequenceEditor.LevelSequenceEditorSubsystem.ConvertToPossessable
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FMovieSceneBindingProxy          ObjectBinding                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMovieSceneBindingProxy          ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FMovieSceneBindingProxy ULevelSequenceEditorSubsystem::ConvertToPossessable(const struct FMovieSceneBindingProxy& ObjectBinding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LevelSequenceEditorSubsystem", "ConvertToPossessable");

	Params::LevelSequenceEditorSubsystem_ConvertToPossessable Parms{};

	Parms.ObjectBinding = std::move(ObjectBinding);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelSequenceEditor.LevelSequenceEditorSubsystem.ConvertToSpawnable
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FMovieSceneBindingProxy          ObjectBinding                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FMovieSceneBindingProxy>  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FMovieSceneBindingProxy> ULevelSequenceEditorSubsystem::ConvertToSpawnable(const struct FMovieSceneBindingProxy& ObjectBinding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LevelSequenceEditorSubsystem", "ConvertToSpawnable");

	Params::LevelSequenceEditorSubsystem_ConvertToSpawnable Parms{};

	Parms.ObjectBinding = std::move(ObjectBinding);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelSequenceEditor.LevelSequenceEditorSubsystem.CopyBindings
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FMovieSceneBindingProxy>  Bindings                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           ExportedText                                           (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULevelSequenceEditorSubsystem::CopyBindings(const TArray<struct FMovieSceneBindingProxy>& Bindings, class FString* ExportedText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LevelSequenceEditorSubsystem", "CopyBindings");

	Params::LevelSequenceEditorSubsystem_CopyBindings Parms{};

	Parms.Bindings = std::move(Bindings);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ExportedText != nullptr)
		*ExportedText = std::move(Parms.ExportedText);
}


// Function LevelSequenceEditor.LevelSequenceEditorSubsystem.CopyFolders
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class UMovieSceneFolder*>        Folders                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class FString                           ExportedText                                           (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULevelSequenceEditorSubsystem::CopyFolders(const TArray<class UMovieSceneFolder*>& Folders, class FString* ExportedText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LevelSequenceEditorSubsystem", "CopyFolders");

	Params::LevelSequenceEditorSubsystem_CopyFolders Parms{};

	Parms.Folders = std::move(Folders);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ExportedText != nullptr)
		*ExportedText = std::move(Parms.ExportedText);
}


// Function LevelSequenceEditor.LevelSequenceEditorSubsystem.CopySections
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class UMovieSceneSection*>       Sections                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class FString                           ExportedText                                           (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULevelSequenceEditorSubsystem::CopySections(const TArray<class UMovieSceneSection*>& Sections, class FString* ExportedText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LevelSequenceEditorSubsystem", "CopySections");

	Params::LevelSequenceEditorSubsystem_CopySections Parms{};

	Parms.Sections = std::move(Sections);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ExportedText != nullptr)
		*ExportedText = std::move(Parms.ExportedText);
}


// Function LevelSequenceEditor.LevelSequenceEditorSubsystem.CopyTracks
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class UMovieSceneTrack*>         Tracks                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class FString                           ExportedText                                           (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULevelSequenceEditorSubsystem::CopyTracks(const TArray<class UMovieSceneTrack*>& Tracks, class FString* ExportedText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LevelSequenceEditorSubsystem", "CopyTracks");

	Params::LevelSequenceEditorSubsystem_CopyTracks Parms{};

	Parms.Tracks = std::move(Tracks);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ExportedText != nullptr)
		*ExportedText = std::move(Parms.ExportedText);
}


// Function LevelSequenceEditor.LevelSequenceEditorSubsystem.CreateCamera
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// bool                                    bSpawnable                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ACineCameraActor*                 OutActor                                               (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMovieSceneBindingProxy          ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FMovieSceneBindingProxy ULevelSequenceEditorSubsystem::CreateCamera(bool bSpawnable, class ACineCameraActor** OutActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LevelSequenceEditorSubsystem", "CreateCamera");

	Params::LevelSequenceEditorSubsystem_CreateCamera Parms{};

	Parms.bSpawnable = bSpawnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutActor != nullptr)
		*OutActor = Parms.OutActor;

	return Parms.ReturnValue;
}


// Function LevelSequenceEditor.LevelSequenceEditorSubsystem.FixActorReferences
// (Final, Native, Public, BlueprintCallable)

void ULevelSequenceEditorSubsystem::FixActorReferences()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LevelSequenceEditorSubsystem", "FixActorReferences");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LevelSequenceEditor.LevelSequenceEditorSubsystem.GetCurveEditor
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class USequencerCurveEditorObject*      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USequencerCurveEditorObject* ULevelSequenceEditorSubsystem::GetCurveEditor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LevelSequenceEditorSubsystem", "GetCurveEditor");

	Params::LevelSequenceEditorSubsystem_GetCurveEditor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelSequenceEditor.LevelSequenceEditorSubsystem.GetCustomBindingObjects
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FMovieSceneBindingProxy          ObjectBinding                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UMovieSceneCustomBinding*> ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<class UMovieSceneCustomBinding*> ULevelSequenceEditorSubsystem::GetCustomBindingObjects(const struct FMovieSceneBindingProxy& ObjectBinding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LevelSequenceEditorSubsystem", "GetCustomBindingObjects");

	Params::LevelSequenceEditorSubsystem_GetCustomBindingObjects Parms{};

	Parms.ObjectBinding = std::move(ObjectBinding);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelSequenceEditor.LevelSequenceEditorSubsystem.GetCustomBindingsOfType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UMovieSceneCustomBinding>CustomBindingType                                      (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FMovieSceneBindingProxy>  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FMovieSceneBindingProxy> ULevelSequenceEditorSubsystem::GetCustomBindingsOfType(TSubclassOf<class UMovieSceneCustomBinding> CustomBindingType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LevelSequenceEditorSubsystem", "GetCustomBindingsOfType");

	Params::LevelSequenceEditorSubsystem_GetCustomBindingsOfType Parms{};

	Parms.CustomBindingType = CustomBindingType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelSequenceEditor.LevelSequenceEditorSubsystem.GetCustomBindingType
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FMovieSceneBindingProxy          ObjectBinding                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UMovieSceneCustomBinding>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class UMovieSceneCustomBinding> ULevelSequenceEditorSubsystem::GetCustomBindingType(const struct FMovieSceneBindingProxy& ObjectBinding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LevelSequenceEditorSubsystem", "GetCustomBindingType");

	Params::LevelSequenceEditorSubsystem_GetCustomBindingType Parms{};

	Parms.ObjectBinding = std::move(ObjectBinding);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelSequenceEditor.LevelSequenceEditorSubsystem.GetScriptingLayer
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class USequencerModuleScriptingLayer*   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USequencerModuleScriptingLayer* ULevelSequenceEditorSubsystem::GetScriptingLayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LevelSequenceEditorSubsystem", "GetScriptingLayer");

	Params::LevelSequenceEditorSubsystem_GetScriptingLayer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelSequenceEditor.LevelSequenceEditorSubsystem.PasteBindings
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           TextToImport                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMovieScenePasteBindingsParams   PasteBindingsParams                                    (Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// TArray<struct FMovieSceneBindingProxy>  OutObjectBindings                                      (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULevelSequenceEditorSubsystem::PasteBindings(const class FString& TextToImport, const struct FMovieScenePasteBindingsParams& PasteBindingsParams, TArray<struct FMovieSceneBindingProxy>* OutObjectBindings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LevelSequenceEditorSubsystem", "PasteBindings");

	Params::LevelSequenceEditorSubsystem_PasteBindings Parms{};

	Parms.TextToImport = std::move(TextToImport);
	Parms.PasteBindingsParams = std::move(PasteBindingsParams);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutObjectBindings != nullptr)
		*OutObjectBindings = std::move(Parms.OutObjectBindings);

	return Parms.ReturnValue;
}


// Function LevelSequenceEditor.LevelSequenceEditorSubsystem.PasteFolders
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           TextToImport                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMovieScenePasteFoldersParams    PasteFoldersParams                                     (Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// TArray<class UMovieSceneFolder*>        OutFolders                                             (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULevelSequenceEditorSubsystem::PasteFolders(const class FString& TextToImport, const struct FMovieScenePasteFoldersParams& PasteFoldersParams, TArray<class UMovieSceneFolder*>* OutFolders)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LevelSequenceEditorSubsystem", "PasteFolders");

	Params::LevelSequenceEditorSubsystem_PasteFolders Parms{};

	Parms.TextToImport = std::move(TextToImport);
	Parms.PasteFoldersParams = std::move(PasteFoldersParams);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutFolders != nullptr)
		*OutFolders = std::move(Parms.OutFolders);

	return Parms.ReturnValue;
}


// Function LevelSequenceEditor.LevelSequenceEditorSubsystem.PasteSections
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           TextToImport                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMovieScenePasteSectionsParams   PasteSectionsParams                                    (Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// TArray<class UMovieSceneSection*>       OutSections                                            (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULevelSequenceEditorSubsystem::PasteSections(const class FString& TextToImport, const struct FMovieScenePasteSectionsParams& PasteSectionsParams, TArray<class UMovieSceneSection*>* OutSections)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LevelSequenceEditorSubsystem", "PasteSections");

	Params::LevelSequenceEditorSubsystem_PasteSections Parms{};

	Parms.TextToImport = std::move(TextToImport);
	Parms.PasteSectionsParams = std::move(PasteSectionsParams);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutSections != nullptr)
		*OutSections = std::move(Parms.OutSections);

	return Parms.ReturnValue;
}


// Function LevelSequenceEditor.LevelSequenceEditorSubsystem.PasteTracks
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           TextToImport                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMovieScenePasteTracksParams     PasteTracksParams                                      (Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// TArray<class UMovieSceneTrack*>         OutTracks                                              (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULevelSequenceEditorSubsystem::PasteTracks(const class FString& TextToImport, const struct FMovieScenePasteTracksParams& PasteTracksParams, TArray<class UMovieSceneTrack*>* OutTracks)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LevelSequenceEditorSubsystem", "PasteTracks");

	Params::LevelSequenceEditorSubsystem_PasteTracks Parms{};

	Parms.TextToImport = std::move(TextToImport);
	Parms.PasteTracksParams = std::move(PasteTracksParams);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutTracks != nullptr)
		*OutTracks = std::move(Parms.OutTracks);

	return Parms.ReturnValue;
}


// Function LevelSequenceEditor.LevelSequenceEditorSubsystem.RebindComponent
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FMovieSceneBindingProxy>  ComponentBindings                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class FName                             ComponentName                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULevelSequenceEditorSubsystem::RebindComponent(const TArray<struct FMovieSceneBindingProxy>& ComponentBindings, const class FName& ComponentName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LevelSequenceEditorSubsystem", "RebindComponent");

	Params::LevelSequenceEditorSubsystem_RebindComponent Parms{};

	Parms.ComponentBindings = std::move(ComponentBindings);
	Parms.ComponentName = ComponentName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelSequenceEditor.LevelSequenceEditorSubsystem.RemoveActorsFromBinding
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class AActor*>                   Actors                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FMovieSceneBindingProxy          ObjectBinding                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULevelSequenceEditorSubsystem::RemoveActorsFromBinding(const TArray<class AActor*>& Actors, const struct FMovieSceneBindingProxy& ObjectBinding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LevelSequenceEditorSubsystem", "RemoveActorsFromBinding");

	Params::LevelSequenceEditorSubsystem_RemoveActorsFromBinding Parms{};

	Parms.Actors = std::move(Actors);
	Parms.ObjectBinding = std::move(ObjectBinding);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelSequenceEditor.LevelSequenceEditorSubsystem.RemoveAllBindings
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FMovieSceneBindingProxy          ObjectBinding                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULevelSequenceEditorSubsystem::RemoveAllBindings(const struct FMovieSceneBindingProxy& ObjectBinding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LevelSequenceEditorSubsystem", "RemoveAllBindings");

	Params::LevelSequenceEditorSubsystem_RemoveAllBindings Parms{};

	Parms.ObjectBinding = std::move(ObjectBinding);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelSequenceEditor.LevelSequenceEditorSubsystem.RemoveInvalidBindings
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FMovieSceneBindingProxy          ObjectBinding                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULevelSequenceEditorSubsystem::RemoveInvalidBindings(const struct FMovieSceneBindingProxy& ObjectBinding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LevelSequenceEditorSubsystem", "RemoveInvalidBindings");

	Params::LevelSequenceEditorSubsystem_RemoveInvalidBindings Parms{};

	Parms.ObjectBinding = std::move(ObjectBinding);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelSequenceEditor.LevelSequenceEditorSubsystem.ReplaceBindingWithActors
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class AActor*>                   Actors                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FMovieSceneBindingProxy          ObjectBinding                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULevelSequenceEditorSubsystem::ReplaceBindingWithActors(const TArray<class AActor*>& Actors, const struct FMovieSceneBindingProxy& ObjectBinding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LevelSequenceEditorSubsystem", "ReplaceBindingWithActors");

	Params::LevelSequenceEditorSubsystem_ReplaceBindingWithActors Parms{};

	Parms.Actors = std::move(Actors);
	Parms.ObjectBinding = std::move(ObjectBinding);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelSequenceEditor.LevelSequenceEditorSubsystem.SnapSectionsToTimelineUsingSourceTimecode
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class UMovieSceneSection*>       Sections                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void ULevelSequenceEditorSubsystem::SnapSectionsToTimelineUsingSourceTimecode(const TArray<class UMovieSceneSection*>& Sections)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LevelSequenceEditorSubsystem", "SnapSectionsToTimelineUsingSourceTimecode");

	Params::LevelSequenceEditorSubsystem_SnapSectionsToTimelineUsingSourceTimecode Parms{};

	Parms.Sections = std::move(Sections);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelSequenceEditor.LevelSequenceEditorSubsystem.SyncSectionsUsingSourceTimecode
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class UMovieSceneSection*>       Sections                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void ULevelSequenceEditorSubsystem::SyncSectionsUsingSourceTimecode(const TArray<class UMovieSceneSection*>& Sections)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LevelSequenceEditorSubsystem", "SyncSectionsUsingSourceTimecode");

	Params::LevelSequenceEditorSubsystem_SyncSectionsUsingSourceTimecode Parms{};

	Parms.Sections = std::move(Sections);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

